


// Type guard to check if a field is a single field
type SingleFieldDefinition = {
    structure: 'single';
    dataType: string;
    isRequired: boolean;
    isNative: boolean;
    defaultValue: any;
};

// Helper to create an empty entity data object based on schema
export function createEmptyEntityData<TEntity extends EntityKeys>(
    schema: AutomationEntity<TEntity>
): EntityData<TEntity> {
    return Object.entries(schema.entityFields).reduce((acc, [fieldName, fieldDef]) => {
        if (fieldDef.structure === 'single' && fieldDef.isNative) {
            acc[fieldName as keyof EntityData<TEntity>] = fieldDef.defaultValue;
        }
        return acc;
    }, {} as EntityData<TEntity>);
}

// Validate entity data against schema
export function validateEntityData<TEntity extends EntityKeys>(
    data: Partial<EntityData<TEntity>>,
    schema: AutomationEntity<TEntity>
): { isValid: boolean; errors: Record<string, string> } {
    const errors: Record<string, string> = {};

    Object.entries(schema.entityFields).forEach(([fieldName, fieldDef]) => {
        if (fieldDef.isRequired && !data[fieldName as keyof EntityData<TEntity>]) {
            errors[fieldName] = 'Field is required';
        }
        // Add more validation based on schema rules
    });

    return {
        isValid: Object.keys(errors).length === 0,
        errors
    };
}
