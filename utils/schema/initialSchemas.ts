// File: lib/initialSchemas.ts


import {AutomationTableName, AutomationViewName} from "@/types/AutomationSchemaTypes";
import {AutomationSchema, TableSchema, TypeBrand, ViewSchema} from "@/types/AutomationTypes";

export const tableSchemas: Record<AutomationTableName, TableSchema> = {
    action: {
        entityNameVariations: {
            frontendName: 'action',
            backendName: 'action',
            databaseName: 'action',
            prettyName: 'Action',
            componentName: 'Action',
            kebabName: 'action',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: 255,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:3' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
            matrix: {
                fieldNameVariations: {
                    frontendName: 'matrix',
                    backendName: 'matrix',
                    databaseName: 'matrix',
                    sqlFunctionRef: 'p_matrix',
                    prettyName: 'Matrix',
                    componentName: 'Matrix',
                    kebabName: 'matrix',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
            transformer: {
                fieldNameVariations: {
                    frontendName: 'transformer',
                    backendName: 'transformer',
                    databaseName: 'transformer',
                    sqlFunctionRef: 'p_transformer',
                    prettyName: 'Transformer',
                    componentName: 'Transformer',
                    kebabName: 'transformer',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
            nodeType: {
                fieldNameVariations: {
                    frontendName: 'nodeType',
                    backendName: 'node_type',
                    databaseName: 'node_type',
                    sqlFunctionRef: 'p_node_type',
                    prettyName: 'Node Type',
                    componentName: 'NodeType',
                    kebabName: 'node-type',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: 50,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input:50' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
            referenceId: {
                fieldNameVariations: {
                    frontendName: 'referenceId',
                    backendName: 'reference_id',
                    databaseName: 'reference_id',
                    sqlFunctionRef: 'p_reference_id',
                    prettyName: 'Reference Id',
                    componentName: 'ReferenceId',
                    kebabName: 'reference-id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
            automationMatrixReference: {
                fieldNameVariations: {
                    frontendName: 'automationMatrixReference',
                    backendName: 'automation_matrix_reference',
                    databaseName: 'ref_automation_matrix',
                    sqlFunctionRef: 'p_ref_automation_matrix',
                    prettyName: 'Automation Matrix Reference',
                    componentName: 'AutomationMatrixReference',
                    kebabName: 'automation-matrixReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['automationMatrix'][]>,
                databaseTable: 'automation_matrix',
            },
            transformerReference: {
                fieldNameVariations: {
                    frontendName: 'transformerReference',
                    backendName: 'transformer_reference',
                    databaseName: 'ref_transformer',
                    sqlFunctionRef: 'p_ref_transformer',
                    prettyName: 'Transformer Reference',
                    componentName: 'TransformerReference',
                    kebabName: 'transformerReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['transformer'][]>,
                databaseTable: 'transformer',
            },
        },
        defaultFetchStrategy: 'm2mAndFk',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'matrix',
                relatedTable: 'automation_matrix',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'foreignKey',
                column: 'transformer',
                relatedTable: 'transformer',
                relatedColumn: 'id',
                junctionTable: null
            }
        ],
    },
    aiEndpoint: {
        entityNameVariations: {
            frontendName: 'aiEndpoint',
            backendName: 'ai_endpoint',
            databaseName: 'ai_endpoint',
            prettyName: 'Ai Endpoint',
            componentName: 'AiEndpoint',
            kebabName: 'ai-endpoint',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'ai_endpoint',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'ai_endpoint',
            },
            provider: {
                fieldNameVariations: {
                    frontendName: 'provider',
                    backendName: 'provider',
                    databaseName: 'provider',
                    sqlFunctionRef: 'p_provider',
                    prettyName: 'Provider',
                    componentName: 'Provider',
                    kebabName: 'provider',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'ai_endpoint',
            },
            description: {
                fieldNameVariations: {
                    frontendName: 'description',
                    backendName: 'description',
                    databaseName: 'description',
                    sqlFunctionRef: 'p_description',
                    prettyName: 'Description',
                    componentName: 'Description',
                    kebabName: 'description',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'ai_endpoint',
            },
            additionalCost: {
                fieldNameVariations: {
                    frontendName: 'additionalCost',
                    backendName: 'additional_cost',
                    databaseName: 'additional_cost',
                    sqlFunctionRef: 'p_additional_cost',
                    prettyName: 'Additional Cost',
                    componentName: 'AdditionalCost',
                    kebabName: 'additional-cost',
                } as const,
                dataType: 'boolean' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "true" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'switch' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<boolean>,
                databaseTable: 'ai_endpoint',
            },
            costDetails: {
                fieldNameVariations: {
                    frontendName: 'costDetails',
                    backendName: 'cost_details',
                    databaseName: 'cost_details',
                    sqlFunctionRef: 'p_cost_details',
                    prettyName: 'Cost Details',
                    componentName: 'CostDetails',
                    kebabName: 'cost-details',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'ai_endpoint',
            },
            params: {
                fieldNameVariations: {
                    frontendName: 'params',
                    backendName: 'params',
                    databaseName: 'params',
                    sqlFunctionRef: 'p_params',
                    prettyName: 'Params',
                    componentName: 'Params',
                    kebabName: 'params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'ai_endpoint',
            },
        },
        defaultFetchStrategy: 'simple',
        relationships: [],
    },
    aiModel: {
        entityNameVariations: {
            frontendName: 'aiModel',
            backendName: 'ai_model',
            databaseName: 'ai_model',
            prettyName: 'Ai Model',
            componentName: 'AiModel',
            kebabName: 'ai-model',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'ai_model',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'ai_model',
            },
            commonName: {
                fieldNameVariations: {
                    frontendName: 'commonName',
                    backendName: 'common_name',
                    databaseName: 'common_name',
                    sqlFunctionRef: 'p_common_name',
                    prettyName: 'Common Name',
                    componentName: 'CommonName',
                    kebabName: 'common-name',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'ai_model',
            },
            modelClass: {
                fieldNameVariations: {
                    frontendName: 'modelClass',
                    backendName: 'model_class',
                    databaseName: 'model_class',
                    sqlFunctionRef: 'p_model_class',
                    prettyName: 'Model Class',
                    componentName: 'ModelClass',
                    kebabName: 'model-class',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'ai_model',
            },
            provider: {
                fieldNameVariations: {
                    frontendName: 'provider',
                    backendName: 'provider',
                    databaseName: 'provider',
                    sqlFunctionRef: 'p_provider',
                    prettyName: 'Provider',
                    componentName: 'Provider',
                    kebabName: 'provider',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'ai_model',
            },
            endpoints: {
                fieldNameVariations: {
                    frontendName: 'endpoints',
                    backendName: 'endpoints',
                    databaseName: 'endpoints',
                    sqlFunctionRef: 'p_endpoints',
                    prettyName: 'Endpoints',
                    componentName: 'Endpoints',
                    kebabName: 'endpoints',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'ai_model',
            },
            contextWindow: {
                fieldNameVariations: {
                    frontendName: 'contextWindow',
                    backendName: 'context_window',
                    databaseName: 'context_window',
                    sqlFunctionRef: 'p_context_window',
                    prettyName: 'Context Window',
                    componentName: 'ContextWindow',
                    kebabName: 'context-window',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'ai_model',
            },
            maxTokens: {
                fieldNameVariations: {
                    frontendName: 'maxTokens',
                    backendName: 'max_tokens',
                    databaseName: 'max_tokens',
                    sqlFunctionRef: 'p_max_tokens',
                    prettyName: 'Max Tokens',
                    componentName: 'MaxTokens',
                    kebabName: 'max-tokens',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'ai_model',
            },
            capabilities: {
                fieldNameVariations: {
                    frontendName: 'capabilities',
                    backendName: 'capabilities',
                    databaseName: 'capabilities',
                    sqlFunctionRef: 'p_capabilities',
                    prettyName: 'Capabilities',
                    componentName: 'Capabilities',
                    kebabName: 'capabilities',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'ai_model',
            },
            controls: {
                fieldNameVariations: {
                    frontendName: 'controls',
                    backendName: 'controls',
                    databaseName: 'controls',
                    sqlFunctionRef: 'p_controls',
                    prettyName: 'Controls',
                    componentName: 'Controls',
                    kebabName: 'controls',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'ai_model',
            },
            recipeModelReference: {
                fieldNameVariations: {
                    frontendName: 'recipeModelReference',
                    backendName: 'recipe_model_reference',
                    databaseName: 'ref_recipe_model',
                    sqlFunctionRef: 'p_ref_recipe_model',
                    prettyName: 'Recipe Model Reference',
                    componentName: 'RecipeModelReference',
                    kebabName: 'recipe-modelReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipeModel'][]>,
                databaseTable: 'recipe_model',
            },
        },
        defaultFetchStrategy: 'm2mAndIfk',
        relationships: [
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'recipe_model',
                relatedColumn: 'ai_model',
                junctionTable: null
            },
            {
                relationshipType: 'manyToMany',
                column: 'ai_model',
                relatedTable: 'recipe',
                relatedColumn: 'recipe',
                junctionTable: 'recipe_model'
            }
        ],
    },
    arg: {
        entityNameVariations: {
            frontendName: 'arg',
            backendName: 'arg',
            databaseName: 'arg',
            prettyName: 'Arg',
            componentName: 'Arg',
            kebabName: 'arg',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'arg',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'arg',
            },
            required: {
                fieldNameVariations: {
                    frontendName: 'required',
                    backendName: 'required',
                    databaseName: 'required',
                    sqlFunctionRef: 'p_required',
                    prettyName: 'Required',
                    componentName: 'Required',
                    kebabName: 'required',
                } as const,
                dataType: 'boolean' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "true" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'switch' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<boolean>,
                databaseTable: 'arg',
            },
            default: {
                fieldNameVariations: {
                    frontendName: 'default',
                    backendName: 'default',
                    databaseName: 'default',
                    sqlFunctionRef: 'p_default',
                    prettyName: 'Default',
                    componentName: 'Default',
                    kebabName: 'default',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'arg',
            },
            dataType: {
                fieldNameVariations: {
                    frontendName: 'dataType',
                    backendName: 'data_type',
                    databaseName: 'data_type',
                    sqlFunctionRef: 'p_data_type',
                    prettyName: 'Data Type',
                    componentName: 'DataType',
                    kebabName: 'data-type',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "str" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"bool" | "dict" | "float" | "int" | "list" | "str" | "url" | undefined>,
                databaseTable: 'arg',
            },
            ready: {
                fieldNameVariations: {
                    frontendName: 'ready',
                    backendName: 'ready',
                    databaseName: 'ready',
                    sqlFunctionRef: 'p_ready',
                    prettyName: 'Ready',
                    componentName: 'Ready',
                    kebabName: 'ready',
                } as const,
                dataType: 'boolean' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "false" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'switch' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<boolean>,
                databaseTable: 'arg',
            },
            registeredFunction: {
                fieldNameVariations: {
                    frontendName: 'registeredFunction',
                    backendName: 'registered_function',
                    databaseName: 'registered_function',
                    sqlFunctionRef: 'p_registered_function',
                    prettyName: 'Registered Function',
                    componentName: 'RegisteredFunction',
                    kebabName: 'registered-function',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'arg',
            },
            registeredFunctionReference: {
                fieldNameVariations: {
                    frontendName: 'registeredFunctionReference',
                    backendName: 'registered_function_reference',
                    databaseName: 'ref_registered_function',
                    sqlFunctionRef: 'p_ref_registered_function',
                    prettyName: 'Registered Function Reference',
                    componentName: 'RegisteredFunctionReference',
                    kebabName: 'registered-functionReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['registeredFunction'][]>,
                databaseTable: 'registered_function',
            },
        },
        defaultFetchStrategy: 'fk',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'registered_function',
                relatedTable: 'registered_function',
                relatedColumn: 'id',
                junctionTable: null
            }
        ],
    },
    automationBoundaryBroker: {
        entityNameVariations: {
            frontendName: 'automationBoundaryBroker',
            backendName: 'automation_boundary_broker',
            databaseName: 'automation_boundary_broker',
            prettyName: 'Automation Boundary Broker',
            componentName: 'AutomationBoundaryBroker',
            kebabName: 'automation-boundary-broker',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'automation_boundary_broker',
            },
            matrix: {
                fieldNameVariations: {
                    frontendName: 'matrix',
                    backendName: 'matrix',
                    databaseName: 'matrix',
                    sqlFunctionRef: 'p_matrix',
                    prettyName: 'Matrix',
                    componentName: 'Matrix',
                    kebabName: 'matrix',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'automation_boundary_broker',
            },
            broker: {
                fieldNameVariations: {
                    frontendName: 'broker',
                    backendName: 'broker',
                    databaseName: 'broker',
                    sqlFunctionRef: 'p_broker',
                    prettyName: 'Broker',
                    componentName: 'Broker',
                    kebabName: 'broker',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'automation_boundary_broker',
            },
            sparkSource: {
                fieldNameVariations: {
                    frontendName: 'sparkSource',
                    backendName: 'spark_source',
                    databaseName: 'spark_source',
                    sqlFunctionRef: 'p_spark_source',
                    prettyName: 'Spark Source',
                    componentName: 'SparkSource',
                    kebabName: 'spark-source',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"api" | "chance" | "database" | "environment" | "file" | "function" | "generated_data" | "none" | "user_input" | undefined>,
                databaseTable: 'automation_boundary_broker',
            },
            beaconDestination: {
                fieldNameVariations: {
                    frontendName: 'beaconDestination',
                    backendName: 'beacon_destination',
                    databaseName: 'beacon_destination',
                    sqlFunctionRef: 'p_beacon_destination',
                    prettyName: 'Beacon Destination',
                    componentName: 'BeaconDestination',
                    kebabName: 'beacon-destination',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"api_response" | "database" | "file" | "function" | "user_output" | undefined>,
                databaseTable: 'automation_boundary_broker',
            },
            brokerReference: {
                fieldNameVariations: {
                    frontendName: 'brokerReference',
                    backendName: 'broker_reference',
                    databaseName: 'ref_broker',
                    sqlFunctionRef: 'p_ref_broker',
                    prettyName: 'Broker Reference',
                    componentName: 'BrokerReference',
                    kebabName: 'brokerReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['broker'][]>,
                databaseTable: 'broker',
            },
            automationMatrixReference: {
                fieldNameVariations: {
                    frontendName: 'automationMatrixReference',
                    backendName: 'automation_matrix_reference',
                    databaseName: 'ref_automation_matrix',
                    sqlFunctionRef: 'p_ref_automation_matrix',
                    prettyName: 'Automation Matrix Reference',
                    componentName: 'AutomationMatrixReference',
                    kebabName: 'automation-matrixReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['automationMatrix'][]>,
                databaseTable: 'automation_matrix',
            },
        },
        defaultFetchStrategy: 'm2mAndFk',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'broker',
                relatedTable: 'broker',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'foreignKey',
                column: 'matrix',
                relatedTable: 'automation_matrix',
                relatedColumn: 'id',
                junctionTable: null
            }
        ],
    },
    automationMatrix: {
        entityNameVariations: {
            frontendName: 'automationMatrix',
            backendName: 'automation_matrix',
            databaseName: 'automation_matrix',
            prettyName: 'Automation Matrix',
            componentName: 'AutomationMatrix',
            kebabName: 'automation-matrix',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'automation_matrix',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'automation_matrix',
            },
            description: {
                fieldNameVariations: {
                    frontendName: 'description',
                    backendName: 'description',
                    databaseName: 'description',
                    sqlFunctionRef: 'p_description',
                    prettyName: 'Description',
                    componentName: 'Description',
                    kebabName: 'description',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'automation_matrix',
            },
            averageSeconds: {
                fieldNameVariations: {
                    frontendName: 'averageSeconds',
                    backendName: 'average_seconds',
                    databaseName: 'average_seconds',
                    sqlFunctionRef: 'p_average_seconds',
                    prettyName: 'Average Seconds',
                    componentName: 'AverageSeconds',
                    kebabName: 'average-seconds',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:smallint' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'automation_matrix',
            },
            isAutomated: {
                fieldNameVariations: {
                    frontendName: 'isAutomated',
                    backendName: 'is_automated',
                    databaseName: 'is_automated',
                    sqlFunctionRef: 'p_is_automated',
                    prettyName: 'Is Automated',
                    componentName: 'IsAutomated',
                    kebabName: 'is-automated',
                } as const,
                dataType: 'boolean' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'switch' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<boolean>,
                databaseTable: 'automation_matrix',
            },
            cognitionMatrices: {
                fieldNameVariations: {
                    frontendName: 'cognitionMatrices',
                    backendName: 'cognition_matrices',
                    databaseName: 'cognition_matrices',
                    sqlFunctionRef: 'p_cognition_matrices',
                    prettyName: 'Cognition Matrices',
                    componentName: 'CognitionMatrices',
                    kebabName: 'cognition-matrices',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"agent_crew" | "agent_mixture" | "conductor" | "hypercluster" | "knowledge_matrix" | "monte_carlo" | "the_matrix" | "workflow" | undefined>,
                databaseTable: 'automation_matrix',
            },
            actionReference: {
                fieldNameVariations: {
                    frontendName: 'actionReference',
                    backendName: 'action_reference',
                    databaseName: 'ref_action',
                    sqlFunctionRef: 'p_ref_action',
                    prettyName: 'Action Reference',
                    componentName: 'ActionReference',
                    kebabName: 'actionReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['action'][]>,
                databaseTable: 'action',
            },
            automationBoundaryBrokerReference: {
                fieldNameVariations: {
                    frontendName: 'automationBoundaryBrokerReference',
                    backendName: 'automation_boundary_broker_reference',
                    databaseName: 'ref_automation_boundary_broker',
                    sqlFunctionRef: 'p_ref_automation_boundary_broker',
                    prettyName: 'Automation Boundary Broker Reference',
                    componentName: 'AutomationBoundaryBrokerReference',
                    kebabName: 'automation-boundary-brokerReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['automationBoundaryBroker'][]>,
                databaseTable: 'automation_boundary_broker',
            },
        },
        defaultFetchStrategy: 'm2mAndIfk',
        relationships: [
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'action',
                relatedColumn: 'matrix',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'automation_boundary_broker',
                relatedColumn: 'matrix',
                junctionTable: null
            },
            {
                relationshipType: 'manyToMany',
                column: 'matrix',
                relatedTable: 'transformer',
                relatedColumn: 'transformer',
                junctionTable: 'action'
            },
            {
                relationshipType: 'manyToMany',
                column: 'matrix',
                relatedTable: 'broker',
                relatedColumn: 'broker',
                junctionTable: 'automation_boundary_broker'
            }
        ],
    },
    broker: {
        entityNameVariations: {
            frontendName: 'broker',
            backendName: 'broker',
            databaseName: 'broker',
            prettyName: 'Broker',
            componentName: 'Broker',
            kebabName: 'broker',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'broker',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'broker',
            },
            value: {
                fieldNameVariations: {
                    frontendName: 'value',
                    backendName: 'value',
                    databaseName: 'value',
                    sqlFunctionRef: 'p_value',
                    prettyName: 'Value',
                    componentName: 'Value',
                    kebabName: 'value',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'broker',
            },
            dataType: {
                fieldNameVariations: {
                    frontendName: 'dataType',
                    backendName: 'data_type',
                    databaseName: 'data_type',
                    sqlFunctionRef: 'p_data_type',
                    prettyName: 'Data Type',
                    componentName: 'DataType',
                    kebabName: 'data-type',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "str" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"bool" | "dict" | "float" | "int" | "list" | "str" | "url" | undefined>,
                databaseTable: 'broker',
            },
            ready: {
                fieldNameVariations: {
                    frontendName: 'ready',
                    backendName: 'ready',
                    databaseName: 'ready',
                    sqlFunctionRef: 'p_ready',
                    prettyName: 'Ready',
                    componentName: 'Ready',
                    kebabName: 'ready',
                } as const,
                dataType: 'boolean' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "false" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'switch' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<boolean>,
                databaseTable: 'broker',
            },
            defaultSource: {
                fieldNameVariations: {
                    frontendName: 'defaultSource',
                    backendName: 'default_source',
                    databaseName: 'default_source',
                    sqlFunctionRef: 'p_default_source',
                    prettyName: 'Default Source',
                    componentName: 'DefaultSource',
                    kebabName: 'default-source',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "none" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"api" | "chance" | "database" | "environment" | "file" | "function" | "generated_data" | "none" | "user_input" | undefined>,
                databaseTable: 'broker',
            },
            displayName: {
                fieldNameVariations: {
                    frontendName: 'displayName',
                    backendName: 'display_name',
                    databaseName: 'display_name',
                    sqlFunctionRef: 'p_display_name',
                    prettyName: 'Display Name',
                    componentName: 'DisplayName',
                    kebabName: 'display-name',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'broker',
            },
            description: {
                fieldNameVariations: {
                    frontendName: 'description',
                    backendName: 'description',
                    databaseName: 'description',
                    sqlFunctionRef: 'p_description',
                    prettyName: 'Description',
                    componentName: 'Description',
                    kebabName: 'description',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'broker',
            },
            tooltip: {
                fieldNameVariations: {
                    frontendName: 'tooltip',
                    backendName: 'tooltip',
                    databaseName: 'tooltip',
                    sqlFunctionRef: 'p_tooltip',
                    prettyName: 'Tooltip',
                    componentName: 'Tooltip',
                    kebabName: 'tooltip',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'broker',
            },
            validationRules: {
                fieldNameVariations: {
                    frontendName: 'validationRules',
                    backendName: 'validation_rules',
                    databaseName: 'validation_rules',
                    sqlFunctionRef: 'p_validation_rules',
                    prettyName: 'Validation Rules',
                    componentName: 'ValidationRules',
                    kebabName: 'validation-rules',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'broker',
            },
            sampleEntries: {
                fieldNameVariations: {
                    frontendName: 'sampleEntries',
                    backendName: 'sample_entries',
                    databaseName: 'sample_entries',
                    sqlFunctionRef: 'p_sample_entries',
                    prettyName: 'Sample Entries',
                    componentName: 'SampleEntries',
                    kebabName: 'sample-entries',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'broker',
            },
            customSourceComponent: {
                fieldNameVariations: {
                    frontendName: 'customSourceComponent',
                    backendName: 'custom_source_component',
                    databaseName: 'custom_source_component',
                    sqlFunctionRef: 'p_custom_source_component',
                    prettyName: 'Custom Source Component',
                    componentName: 'CustomSourceComponent',
                    kebabName: 'custom-source-component',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'broker',
            },
            additionalParams: {
                fieldNameVariations: {
                    frontendName: 'additionalParams',
                    backendName: 'additional_params',
                    databaseName: 'additional_params',
                    sqlFunctionRef: 'p_additional_params',
                    prettyName: 'Additional Params',
                    componentName: 'AdditionalParams',
                    kebabName: 'additional-params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'broker',
            },
            otherSourceParams: {
                fieldNameVariations: {
                    frontendName: 'otherSourceParams',
                    backendName: 'other_source_params',
                    databaseName: 'other_source_params',
                    sqlFunctionRef: 'p_other_source_params',
                    prettyName: 'Other Source Params',
                    componentName: 'OtherSourceParams',
                    kebabName: 'other-source-params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'broker',
            },
            defaultDestination: {
                fieldNameVariations: {
                    frontendName: 'defaultDestination',
                    backendName: 'default_destination',
                    databaseName: 'default_destination',
                    sqlFunctionRef: 'p_default_destination',
                    prettyName: 'Default Destination',
                    componentName: 'DefaultDestination',
                    kebabName: 'default-destination',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"api_response" | "database" | "file" | "function" | "user_output" | undefined>,
                databaseTable: 'broker',
            },
            outputComponent: {
                fieldNameVariations: {
                    frontendName: 'outputComponent',
                    backendName: 'output_component',
                    databaseName: 'output_component',
                    sqlFunctionRef: 'p_output_component',
                    prettyName: 'Output Component',
                    componentName: 'OutputComponent',
                    kebabName: 'output-component',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"3DModelViewer" | "AudioOutput" | "BucketList" | "BudgetVisualizer" | "Calendar" | "Carousel" | "Checklist" | "Clock" | "CodeView" | "ComplexMulti" | "DataFlowDiagram" | "DecisionTree" | "DiffViewer" | "FileOutput" | "FitnessTracker" | "Flowchart" | "Form" | "GanttChart" | "GeographicMap" | "GlossaryView" | "Heatmap" | "HorizontalList" | "ImageView" | "InteractiveChart" | "JsonViewer" | "KanbanBoard" | "LaTeXRenderer" | "LiveTraffic" | "LocalEvents" | "MarkdownViewer" | "MealPlanner" | "MindMap" | "NeedNewOption" | "NetworkGraph" | "NewsAggregator" | "PDFViewer" | "PivotTable" | "PlainText" | "Presentation" | "PublicLiveCam" | "RichTextEditor" | "RunCodeBack" | "RunCodeFront" | "SVGEditor" | "SankeyDiagram" | "SatelliteView" | "SocialMediaInfo" | "SpectrumAnalyzer" | "Spreadsheet" | "Table" | "TaskPrioritization" | "Textarea" | "Thermometer" | "Timeline" | "TravelPlanner" | "TreeView" | "UMLDiagram" | "VerticalList" | "VoiceSentimentAnalysis" | "WeatherDashboard" | "WeatherMap" | "WordHighlighter" | "WordMap" | "chatResponse" | "none" | "video" | undefined>,
                databaseTable: 'broker',
            },
            tags: {
                fieldNameVariations: {
                    frontendName: 'tags',
                    backendName: 'tags',
                    databaseName: 'tags',
                    sqlFunctionRef: 'p_tags',
                    prettyName: 'Tags',
                    componentName: 'Tags',
                    kebabName: 'tags',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "[]" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'broker',
            },
            dataInputComponentReference: {
                fieldNameVariations: {
                    frontendName: 'dataInputComponentReference',
                    backendName: 'data_input_component_reference',
                    databaseName: 'ref_data_input_component',
                    sqlFunctionRef: 'p_ref_data_input_component',
                    prettyName: 'Data Input Component Reference',
                    componentName: 'DataInputComponentReference',
                    kebabName: 'data-input-componentReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['dataInputComponent'][]>,
                databaseTable: 'data_input_component',
            },
            recipeBrokerReference: {
                fieldNameVariations: {
                    frontendName: 'recipeBrokerReference',
                    backendName: 'recipe_broker_reference',
                    databaseName: 'ref_recipe_broker',
                    sqlFunctionRef: 'p_ref_recipe_broker',
                    prettyName: 'Recipe Broker Reference',
                    componentName: 'RecipeBrokerReference',
                    kebabName: 'recipe-brokerReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipeBroker'][]>,
                databaseTable: 'recipe_broker',
            },
            registeredFunctionReference: {
                fieldNameVariations: {
                    frontendName: 'registeredFunctionReference',
                    backendName: 'registered_function_reference',
                    databaseName: 'ref_registered_function',
                    sqlFunctionRef: 'p_ref_registered_function',
                    prettyName: 'Registered Function Reference',
                    componentName: 'RegisteredFunctionReference',
                    kebabName: 'registered-functionReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['registeredFunction'][]>,
                databaseTable: 'registered_function',
            },
            automationBoundaryBrokerReference: {
                fieldNameVariations: {
                    frontendName: 'automationBoundaryBrokerReference',
                    backendName: 'automation_boundary_broker_reference',
                    databaseName: 'ref_automation_boundary_broker',
                    sqlFunctionRef: 'p_ref_automation_boundary_broker',
                    prettyName: 'Automation Boundary Broker Reference',
                    componentName: 'AutomationBoundaryBrokerReference',
                    kebabName: 'automation-boundary-brokerReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['automationBoundaryBroker'][]>,
                databaseTable: 'automation_boundary_broker',
            },
        },
        defaultFetchStrategy: 'fkIfkAndM2M',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'custom_source_component',
                relatedTable: 'data_input_component',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'recipe_broker',
                relatedColumn: 'broker',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'registered_function',
                relatedColumn: 'return_broker',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'automation_boundary_broker',
                relatedColumn: 'broker',
                junctionTable: null
            },
            {
                relationshipType: 'manyToMany',
                column: 'broker',
                relatedTable: 'automation_matrix',
                relatedColumn: 'matrix',
                junctionTable: 'automation_boundary_broker'
            },
            {
                relationshipType: 'manyToMany',
                column: 'broker',
                relatedTable: 'recipe',
                relatedColumn: 'recipe',
                junctionTable: 'recipe_broker'
            }
        ],
    },
    dataInputComponent: {
        entityNameVariations: {
            frontendName: 'dataInputComponent',
            backendName: 'data_input_component',
            databaseName: 'data_input_component',
            prettyName: 'Data Input Component',
            componentName: 'DataInputComponent',
            kebabName: 'data-input-component',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'data_input_component',
            },
            options: {
                fieldNameVariations: {
                    frontendName: 'options',
                    backendName: 'options',
                    databaseName: 'options',
                    sqlFunctionRef: 'p_options',
                    prettyName: 'Options',
                    componentName: 'Options',
                    kebabName: 'options',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'data_input_component',
            },
            includeOther: {
                fieldNameVariations: {
                    frontendName: 'includeOther',
                    backendName: 'include_other',
                    databaseName: 'include_other',
                    sqlFunctionRef: 'p_include_other',
                    prettyName: 'Include Other',
                    componentName: 'IncludeOther',
                    kebabName: 'include-other',
                } as const,
                dataType: 'boolean' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'switch' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<boolean>,
                databaseTable: 'data_input_component',
            },
            min: {
                fieldNameVariations: {
                    frontendName: 'min',
                    backendName: 'min',
                    databaseName: 'min',
                    sqlFunctionRef: 'p_min',
                    prettyName: 'Min',
                    componentName: 'Min',
                    kebabName: 'min',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:float' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'data_input_component',
            },
            max: {
                fieldNameVariations: {
                    frontendName: 'max',
                    backendName: 'max',
                    databaseName: 'max',
                    sqlFunctionRef: 'p_max',
                    prettyName: 'Max',
                    componentName: 'Max',
                    kebabName: 'max',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:float' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'data_input_component',
            },
            step: {
                fieldNameVariations: {
                    frontendName: 'step',
                    backendName: 'step',
                    databaseName: 'step',
                    sqlFunctionRef: 'p_step',
                    prettyName: 'Step',
                    componentName: 'Step',
                    kebabName: 'step',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:int' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'data_input_component',
            },
            minRows: {
                fieldNameVariations: {
                    frontendName: 'minRows',
                    backendName: 'min_rows',
                    databaseName: 'min_rows',
                    sqlFunctionRef: 'p_min_rows',
                    prettyName: 'Min Rows',
                    componentName: 'MinRows',
                    kebabName: 'min-rows',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:smallint' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'data_input_component',
            },
            maxRows: {
                fieldNameVariations: {
                    frontendName: 'maxRows',
                    backendName: 'max_rows',
                    databaseName: 'max_rows',
                    sqlFunctionRef: 'p_max_rows',
                    prettyName: 'Max Rows',
                    componentName: 'MaxRows',
                    kebabName: 'max-rows',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:smallint' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'data_input_component',
            },
            acceptableFiletypes: {
                fieldNameVariations: {
                    frontendName: 'acceptableFiletypes',
                    backendName: 'acceptable_filetypes',
                    databaseName: 'acceptable_filetypes',
                    sqlFunctionRef: 'p_acceptable_filetypes',
                    prettyName: 'Acceptable Filetypes',
                    componentName: 'AcceptableFiletypes',
                    kebabName: 'acceptable-filetypes',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'data_input_component',
            },
            src: {
                fieldNameVariations: {
                    frontendName: 'src',
                    backendName: 'src',
                    databaseName: 'src',
                    sqlFunctionRef: 'p_src',
                    prettyName: 'Src',
                    componentName: 'Src',
                    kebabName: 'src',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'data_input_component',
            },
            classes: {
                fieldNameVariations: {
                    frontendName: 'classes',
                    backendName: 'classes',
                    databaseName: 'classes',
                    sqlFunctionRef: 'p_classes',
                    prettyName: 'Classes',
                    componentName: 'Classes',
                    kebabName: 'classes',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'data_input_component',
            },
            colorOverrides: {
                fieldNameVariations: {
                    frontendName: 'colorOverrides',
                    backendName: 'color_overrides',
                    databaseName: 'color_overrides',
                    sqlFunctionRef: 'p_color_overrides',
                    prettyName: 'Color Overrides',
                    componentName: 'ColorOverrides',
                    kebabName: 'color-overrides',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'data_input_component',
            },
            additionalParams: {
                fieldNameVariations: {
                    frontendName: 'additionalParams',
                    backendName: 'additional_params',
                    databaseName: 'additional_params',
                    sqlFunctionRef: 'p_additional_params',
                    prettyName: 'Additional Params',
                    componentName: 'AdditionalParams',
                    kebabName: 'additional-params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'data_input_component',
            },
            brokerReference: {
                fieldNameVariations: {
                    frontendName: 'brokerReference',
                    backendName: 'broker_reference',
                    databaseName: 'ref_broker',
                    sqlFunctionRef: 'p_ref_broker',
                    prettyName: 'Broker Reference',
                    componentName: 'BrokerReference',
                    kebabName: 'brokerReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['broker'][]>,
                databaseTable: 'broker',
            },
        },
        defaultFetchStrategy: 'ifk',
        relationships: [
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'broker',
                relatedColumn: 'custom_source_component',
                junctionTable: null
            }
        ],
    },
    dataOutputComponent: {
        entityNameVariations: {
            frontendName: 'dataOutputComponent',
            backendName: 'data_output_component',
            databaseName: 'data_output_component',
            prettyName: 'Data Output Component',
            componentName: 'DataOutputComponent',
            kebabName: 'data-output-component',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'data_output_component',
            },
            componentType: {
                fieldNameVariations: {
                    frontendName: 'componentType',
                    backendName: 'component_type',
                    databaseName: 'component_type',
                    sqlFunctionRef: 'p_component_type',
                    prettyName: 'Component Type',
                    componentName: 'ComponentType',
                    kebabName: 'component-type',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"3DModelViewer" | "AudioOutput" | "BucketList" | "BudgetVisualizer" | "Calendar" | "Carousel" | "Checklist" | "Clock" | "CodeView" | "ComplexMulti" | "DataFlowDiagram" | "DecisionTree" | "DiffViewer" | "FileOutput" | "FitnessTracker" | "Flowchart" | "Form" | "GanttChart" | "GeographicMap" | "GlossaryView" | "Heatmap" | "HorizontalList" | "ImageView" | "InteractiveChart" | "JsonViewer" | "KanbanBoard" | "LaTeXRenderer" | "LiveTraffic" | "LocalEvents" | "MarkdownViewer" | "MealPlanner" | "MindMap" | "NeedNewOption" | "NetworkGraph" | "NewsAggregator" | "PDFViewer" | "PivotTable" | "PlainText" | "Presentation" | "PublicLiveCam" | "RichTextEditor" | "RunCodeBack" | "RunCodeFront" | "SVGEditor" | "SankeyDiagram" | "SatelliteView" | "SocialMediaInfo" | "SpectrumAnalyzer" | "Spreadsheet" | "Table" | "TaskPrioritization" | "Textarea" | "Thermometer" | "Timeline" | "TravelPlanner" | "TreeView" | "UMLDiagram" | "VerticalList" | "VoiceSentimentAnalysis" | "WeatherDashboard" | "WeatherMap" | "WordHighlighter" | "WordMap" | "chatResponse" | "none" | "video" | undefined>,
                databaseTable: 'data_output_component',
            },
            uiComponent: {
                fieldNameVariations: {
                    frontendName: 'uiComponent',
                    backendName: 'ui_component',
                    databaseName: 'ui_component',
                    sqlFunctionRef: 'p_ui_component',
                    prettyName: 'Ui Component',
                    componentName: 'UiComponent',
                    kebabName: 'ui-component',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'data_output_component',
            },
            props: {
                fieldNameVariations: {
                    frontendName: 'props',
                    backendName: 'props',
                    databaseName: 'props',
                    sqlFunctionRef: 'p_props',
                    prettyName: 'Props',
                    componentName: 'Props',
                    kebabName: 'props',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'data_output_component',
            },
            additionalParams: {
                fieldNameVariations: {
                    frontendName: 'additionalParams',
                    backendName: 'additional_params',
                    databaseName: 'additional_params',
                    sqlFunctionRef: 'p_additional_params',
                    prettyName: 'Additional Params',
                    componentName: 'AdditionalParams',
                    kebabName: 'additional-params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'data_output_component',
            },
        },
        defaultFetchStrategy: 'simple',
        relationships: [],
    },
    displayOption: {
        entityNameVariations: {
            frontendName: 'displayOption',
            backendName: 'display_option',
            databaseName: 'display_option',
            prettyName: 'Display Option',
            componentName: 'DisplayOption',
            kebabName: 'display-option',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'display_option',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'display_option',
            },
            defaultParams: {
                fieldNameVariations: {
                    frontendName: 'defaultParams',
                    backendName: 'default_params',
                    databaseName: 'default_params',
                    sqlFunctionRef: 'p_default_params',
                    prettyName: 'Default Params',
                    componentName: 'DefaultParams',
                    kebabName: 'default-params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'display_option',
            },
            customizableParams: {
                fieldNameVariations: {
                    frontendName: 'customizableParams',
                    backendName: 'customizable_params',
                    databaseName: 'customizable_params',
                    sqlFunctionRef: 'p_customizable_params',
                    prettyName: 'Customizable Params',
                    componentName: 'CustomizableParams',
                    kebabName: 'customizable-params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'display_option',
            },
            additionalParams: {
                fieldNameVariations: {
                    frontendName: 'additionalParams',
                    backendName: 'additional_params',
                    databaseName: 'additional_params',
                    sqlFunctionRef: 'p_additional_params',
                    prettyName: 'Additional Params',
                    componentName: 'AdditionalParams',
                    kebabName: 'additional-params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'display_option',
            },
            recipeDisplayReference: {
                fieldNameVariations: {
                    frontendName: 'recipeDisplayReference',
                    backendName: 'recipe_display_reference',
                    databaseName: 'ref_recipe_display',
                    sqlFunctionRef: 'p_ref_recipe_display',
                    prettyName: 'Recipe Display Reference',
                    componentName: 'RecipeDisplayReference',
                    kebabName: 'recipe-displayReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipeDisplay'][]>,
                databaseTable: 'recipe_display',
            },
        },
        defaultFetchStrategy: 'm2mAndIfk',
        relationships: [
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'recipe_display',
                relatedColumn: 'display',
                junctionTable: null
            },
            {
                relationshipType: 'manyToMany',
                column: 'display',
                relatedTable: 'recipe',
                relatedColumn: 'recipe',
                junctionTable: 'recipe_display'
            }
        ],
    },
    emails: {
        entityNameVariations: {
            frontendName: 'emails',
            backendName: 'emails',
            databaseName: 'emails',
            prettyName: 'Emails',
            componentName: 'Emails',
            kebabName: 'emails',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'emails',
            },
            sender: {
                fieldNameVariations: {
                    frontendName: 'sender',
                    backendName: 'sender',
                    databaseName: 'sender',
                    sqlFunctionRef: 'p_sender',
                    prettyName: 'Sender',
                    componentName: 'Sender',
                    kebabName: 'sender',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'emails',
            },
            recipient: {
                fieldNameVariations: {
                    frontendName: 'recipient',
                    backendName: 'recipient',
                    databaseName: 'recipient',
                    sqlFunctionRef: 'p_recipient',
                    prettyName: 'Recipient',
                    componentName: 'Recipient',
                    kebabName: 'recipient',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'emails',
            },
            subject: {
                fieldNameVariations: {
                    frontendName: 'subject',
                    backendName: 'subject',
                    databaseName: 'subject',
                    sqlFunctionRef: 'p_subject',
                    prettyName: 'Subject',
                    componentName: 'Subject',
                    kebabName: 'subject',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'emails',
            },
            body: {
                fieldNameVariations: {
                    frontendName: 'body',
                    backendName: 'body',
                    databaseName: 'body',
                    sqlFunctionRef: 'p_body',
                    prettyName: 'Body',
                    componentName: 'Body',
                    kebabName: 'body',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'emails',
            },
            timestamp: {
                fieldNameVariations: {
                    frontendName: 'timestamp',
                    backendName: 'timestamp',
                    databaseName: 'timestamp',
                    sqlFunctionRef: 'p_timestamp',
                    prettyName: 'Timestamp',
                    componentName: 'Timestamp',
                    kebabName: 'timestamp',
                } as const,
                dataType: 'date' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "getCurrentTime()" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'datetime' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Date>,
                databaseTable: 'emails',
            },
            isRead: {
                fieldNameVariations: {
                    frontendName: 'isRead',
                    backendName: 'is_read',
                    databaseName: 'is_read',
                    sqlFunctionRef: 'p_is_read',
                    prettyName: 'Is Read',
                    componentName: 'IsRead',
                    kebabName: 'is-read',
                } as const,
                dataType: 'boolean' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "false" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'switch' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<boolean>,
                databaseTable: 'emails',
            },
        },
        defaultFetchStrategy: 'simple',
        relationships: [],
    },
    extractor: {
        entityNameVariations: {
            frontendName: 'extractor',
            backendName: 'extractor',
            databaseName: 'extractor',
            prettyName: 'Extractor',
            componentName: 'Extractor',
            kebabName: 'extractor',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'extractor',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'extractor',
            },
            outputType: {
                fieldNameVariations: {
                    frontendName: 'outputType',
                    backendName: 'output_type',
                    databaseName: 'output_type',
                    sqlFunctionRef: 'p_output_type',
                    prettyName: 'Output Type',
                    componentName: 'OutputType',
                    kebabName: 'output-type',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"bool" | "dict" | "float" | "int" | "list" | "str" | "url" | undefined>,
                databaseTable: 'extractor',
            },
            defaultIdentifier: {
                fieldNameVariations: {
                    frontendName: 'defaultIdentifier',
                    backendName: 'default_identifier',
                    databaseName: 'default_identifier',
                    sqlFunctionRef: 'p_default_identifier',
                    prettyName: 'Default Identifier',
                    componentName: 'DefaultIdentifier',
                    kebabName: 'default-identifier',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'extractor',
            },
            defaultIndex: {
                fieldNameVariations: {
                    frontendName: 'defaultIndex',
                    backendName: 'default_index',
                    databaseName: 'default_index',
                    sqlFunctionRef: 'p_default_index',
                    prettyName: 'Default Index',
                    componentName: 'DefaultIndex',
                    kebabName: 'default-index',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:smallint' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'extractor',
            },
        },
        defaultFetchStrategy: 'simple',
        relationships: [],
    },
    flashcardData: {
        entityNameVariations: {
            frontendName: 'flashcardData',
            backendName: 'flashcard_data',
            databaseName: 'flashcard_data',
            prettyName: 'Flashcard Data',
            componentName: 'FlashcardData',
            kebabName: 'flashcard-data',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_data',
            },
            userId: {
                fieldNameVariations: {
                    frontendName: 'userId',
                    backendName: 'user_id',
                    databaseName: 'user_id',
                    sqlFunctionRef: 'p_user_id',
                    prettyName: 'User Id',
                    componentName: 'UserId',
                    kebabName: 'user-id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_data',
            },
            topic: {
                fieldNameVariations: {
                    frontendName: 'topic',
                    backendName: 'topic',
                    databaseName: 'topic',
                    sqlFunctionRef: 'p_topic',
                    prettyName: 'Topic',
                    componentName: 'Topic',
                    kebabName: 'topic',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_data',
            },
            lesson: {
                fieldNameVariations: {
                    frontendName: 'lesson',
                    backendName: 'lesson',
                    databaseName: 'lesson',
                    sqlFunctionRef: 'p_lesson',
                    prettyName: 'Lesson',
                    componentName: 'Lesson',
                    kebabName: 'lesson',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_data',
            },
            difficulty: {
                fieldNameVariations: {
                    frontendName: 'difficulty',
                    backendName: 'difficulty',
                    databaseName: 'difficulty',
                    sqlFunctionRef: 'p_difficulty',
                    prettyName: 'Difficulty',
                    componentName: 'Difficulty',
                    kebabName: 'difficulty',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_data',
            },
            front: {
                fieldNameVariations: {
                    frontendName: 'front',
                    backendName: 'front',
                    databaseName: 'front',
                    sqlFunctionRef: 'p_front',
                    prettyName: 'Front',
                    componentName: 'Front',
                    kebabName: 'front',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_data',
            },
            back: {
                fieldNameVariations: {
                    frontendName: 'back',
                    backendName: 'back',
                    databaseName: 'back',
                    sqlFunctionRef: 'p_back',
                    prettyName: 'Back',
                    componentName: 'Back',
                    kebabName: 'back',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_data',
            },
            example: {
                fieldNameVariations: {
                    frontendName: 'example',
                    backendName: 'example',
                    databaseName: 'example',
                    sqlFunctionRef: 'p_example',
                    prettyName: 'Example',
                    componentName: 'Example',
                    kebabName: 'example',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_data',
            },
            detailedExplanation: {
                fieldNameVariations: {
                    frontendName: 'detailedExplanation',
                    backendName: 'detailed_explanation',
                    databaseName: 'detailed_explanation',
                    sqlFunctionRef: 'p_detailed_explanation',
                    prettyName: 'Detailed Explanation',
                    componentName: 'DetailedExplanation',
                    kebabName: 'detailed-explanation',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_data',
            },
            audioExplanation: {
                fieldNameVariations: {
                    frontendName: 'audioExplanation',
                    backendName: 'audio_explanation',
                    databaseName: 'audio_explanation',
                    sqlFunctionRef: 'p_audio_explanation',
                    prettyName: 'Audio Explanation',
                    componentName: 'AudioExplanation',
                    kebabName: 'audio-explanation',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_data',
            },
            personalNotes: {
                fieldNameVariations: {
                    frontendName: 'personalNotes',
                    backendName: 'personal_notes',
                    databaseName: 'personal_notes',
                    sqlFunctionRef: 'p_personal_notes',
                    prettyName: 'Personal Notes',
                    componentName: 'PersonalNotes',
                    kebabName: 'personal-notes',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_data',
            },
            isDeleted: {
                fieldNameVariations: {
                    frontendName: 'isDeleted',
                    backendName: 'is_deleted',
                    databaseName: 'is_deleted',
                    sqlFunctionRef: 'p_is_deleted',
                    prettyName: 'Is Deleted',
                    componentName: 'IsDeleted',
                    kebabName: 'is-deleted',
                } as const,
                dataType: 'boolean' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "false" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'switch' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<boolean>,
                databaseTable: 'flashcard_data',
            },
            public: {
                fieldNameVariations: {
                    frontendName: 'public',
                    backendName: 'public',
                    databaseName: 'public',
                    sqlFunctionRef: 'p_public',
                    prettyName: 'Public',
                    componentName: 'Public',
                    kebabName: 'public',
                } as const,
                dataType: 'boolean' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "false" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'switch' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<boolean>,
                databaseTable: 'flashcard_data',
            },
            sharedWith: {
                fieldNameVariations: {
                    frontendName: 'sharedWith',
                    backendName: 'shared_with',
                    databaseName: 'shared_with',
                    sqlFunctionRef: 'p_shared_with',
                    prettyName: 'Shared With',
                    componentName: 'SharedWith',
                    kebabName: 'shared-with',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'multi-select:uuid' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string[]>,
                databaseTable: 'flashcard_data',
            },
            createdAt: {
                fieldNameVariations: {
                    frontendName: 'createdAt',
                    backendName: 'created_at',
                    databaseName: 'created_at',
                    sqlFunctionRef: 'p_created_at',
                    prettyName: 'Created At',
                    componentName: 'CreatedAt',
                    kebabName: 'created-at',
                } as const,
                dataType: 'date' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "getCurrentTime()" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'datetime' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Date>,
                databaseTable: 'flashcard_data',
            },
            updatedAt: {
                fieldNameVariations: {
                    frontendName: 'updatedAt',
                    backendName: 'updated_at',
                    databaseName: 'updated_at',
                    sqlFunctionRef: 'p_updated_at',
                    prettyName: 'Updated At',
                    componentName: 'UpdatedAt',
                    kebabName: 'updated-at',
                } as const,
                dataType: 'date' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "getCurrentTime()" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'datetime' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Date>,
                databaseTable: 'flashcard_data',
            },
            flashcardHistoryReference: {
                fieldNameVariations: {
                    frontendName: 'flashcardHistoryReference',
                    backendName: 'flashcard_history_reference',
                    databaseName: 'ref_flashcard_history',
                    sqlFunctionRef: 'p_ref_flashcard_history',
                    prettyName: 'Flashcard History Reference',
                    componentName: 'FlashcardHistoryReference',
                    kebabName: 'flashcard-historyReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['flashcardHistory'][]>,
                databaseTable: 'flashcard_history',
            },
            flashcardSetRelationsReference: {
                fieldNameVariations: {
                    frontendName: 'flashcardSetRelationsReference',
                    backendName: 'flashcard_set_relations_reference',
                    databaseName: 'ref_flashcard_set_relations',
                    sqlFunctionRef: 'p_ref_flashcard_set_relations',
                    prettyName: 'Flashcard Set Relations Reference',
                    componentName: 'FlashcardSetRelationsReference',
                    kebabName: 'flashcard-set-relationsReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['flashcardSetRelations'][]>,
                databaseTable: 'flashcard_set_relations',
            },
            flashcardImagesReference: {
                fieldNameVariations: {
                    frontendName: 'flashcardImagesReference',
                    backendName: 'flashcard_images_reference',
                    databaseName: 'ref_flashcard_images',
                    sqlFunctionRef: 'p_ref_flashcard_images',
                    prettyName: 'Flashcard Images Reference',
                    componentName: 'FlashcardImagesReference',
                    kebabName: 'flashcard-imagesReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['flashcardImages'][]>,
                databaseTable: 'flashcard_images',
            },
        },
        defaultFetchStrategy: 'm2mAndIfk',
        relationships: [
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'flashcard_history',
                relatedColumn: 'flashcard_id',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'flashcard_set_relations',
                relatedColumn: 'flashcard_id',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'flashcard_images',
                relatedColumn: 'flashcard_id',
                junctionTable: null
            },
            {
                relationshipType: 'manyToMany',
                column: 'flashcard_id',
                relatedTable: 'flashcard_sets',
                relatedColumn: 'set_id',
                junctionTable: 'flashcard_set_relations'
            }
        ],
    },
    flashcardHistory: {
        entityNameVariations: {
            frontendName: 'flashcardHistory',
            backendName: 'flashcard_history',
            databaseName: 'flashcard_history',
            prettyName: 'Flashcard History',
            componentName: 'FlashcardHistory',
            kebabName: 'flashcard-history',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_history',
            },
            flashcardId: {
                fieldNameVariations: {
                    frontendName: 'flashcardId',
                    backendName: 'flashcard_id',
                    databaseName: 'flashcard_id',
                    sqlFunctionRef: 'p_flashcard_id',
                    prettyName: 'Flashcard Id',
                    componentName: 'FlashcardId',
                    kebabName: 'flashcard-id',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_history',
            },
            userId: {
                fieldNameVariations: {
                    frontendName: 'userId',
                    backendName: 'user_id',
                    databaseName: 'user_id',
                    sqlFunctionRef: 'p_user_id',
                    prettyName: 'User Id',
                    componentName: 'UserId',
                    kebabName: 'user-id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_history',
            },
            reviewCount: {
                fieldNameVariations: {
                    frontendName: 'reviewCount',
                    backendName: 'review_count',
                    databaseName: 'review_count',
                    sqlFunctionRef: 'p_review_count',
                    prettyName: 'Review Count',
                    componentName: 'ReviewCount',
                    kebabName: 'review-count',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "0" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:int' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'flashcard_history',
            },
            correctCount: {
                fieldNameVariations: {
                    frontendName: 'correctCount',
                    backendName: 'correct_count',
                    databaseName: 'correct_count',
                    sqlFunctionRef: 'p_correct_count',
                    prettyName: 'Correct Count',
                    componentName: 'CorrectCount',
                    kebabName: 'correct-count',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "0" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:int' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'flashcard_history',
            },
            incorrectCount: {
                fieldNameVariations: {
                    frontendName: 'incorrectCount',
                    backendName: 'incorrect_count',
                    databaseName: 'incorrect_count',
                    sqlFunctionRef: 'p_incorrect_count',
                    prettyName: 'Incorrect Count',
                    componentName: 'IncorrectCount',
                    kebabName: 'incorrect-count',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "0" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:int' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'flashcard_history',
            },
            createdAt: {
                fieldNameVariations: {
                    frontendName: 'createdAt',
                    backendName: 'created_at',
                    databaseName: 'created_at',
                    sqlFunctionRef: 'p_created_at',
                    prettyName: 'Created At',
                    componentName: 'CreatedAt',
                    kebabName: 'created-at',
                } as const,
                dataType: 'date' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "getCurrentTime()" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'datetime' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Date>,
                databaseTable: 'flashcard_history',
            },
            updatedAt: {
                fieldNameVariations: {
                    frontendName: 'updatedAt',
                    backendName: 'updated_at',
                    databaseName: 'updated_at',
                    sqlFunctionRef: 'p_updated_at',
                    prettyName: 'Updated At',
                    componentName: 'UpdatedAt',
                    kebabName: 'updated-at',
                } as const,
                dataType: 'date' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "getCurrentTime()" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'datetime' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Date>,
                databaseTable: 'flashcard_history',
            },
            flashcardDataReference: {
                fieldNameVariations: {
                    frontendName: 'flashcardDataReference',
                    backendName: 'flashcard_data_reference',
                    databaseName: 'ref_flashcard_data',
                    sqlFunctionRef: 'p_ref_flashcard_data',
                    prettyName: 'Flashcard Data Reference',
                    componentName: 'FlashcardDataReference',
                    kebabName: 'flashcard-dataReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['flashcardData'][]>,
                databaseTable: 'flashcard_data',
            },
        },
        defaultFetchStrategy: 'fk',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'flashcard_id',
                relatedTable: 'flashcard_data',
                relatedColumn: 'id',
                junctionTable: null
            }
        ],
    },
    flashcardImages: {
        entityNameVariations: {
            frontendName: 'flashcardImages',
            backendName: 'flashcard_images',
            databaseName: 'flashcard_images',
            prettyName: 'Flashcard Images',
            componentName: 'FlashcardImages',
            kebabName: 'flashcard-images',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_images',
            },
            flashcardId: {
                fieldNameVariations: {
                    frontendName: 'flashcardId',
                    backendName: 'flashcard_id',
                    databaseName: 'flashcard_id',
                    sqlFunctionRef: 'p_flashcard_id',
                    prettyName: 'Flashcard Id',
                    componentName: 'FlashcardId',
                    kebabName: 'flashcard-id',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_images',
            },
            filePath: {
                fieldNameVariations: {
                    frontendName: 'filePath',
                    backendName: 'file_path',
                    databaseName: 'file_path',
                    sqlFunctionRef: 'p_file_path',
                    prettyName: 'File Path',
                    componentName: 'FilePath',
                    kebabName: 'file-path',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_images',
            },
            fileName: {
                fieldNameVariations: {
                    frontendName: 'fileName',
                    backendName: 'file_name',
                    databaseName: 'file_name',
                    sqlFunctionRef: 'p_file_name',
                    prettyName: 'File Name',
                    componentName: 'FileName',
                    kebabName: 'file-name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_images',
            },
            mimeType: {
                fieldNameVariations: {
                    frontendName: 'mimeType',
                    backendName: 'mime_type',
                    databaseName: 'mime_type',
                    sqlFunctionRef: 'p_mime_type',
                    prettyName: 'Mime Type',
                    componentName: 'MimeType',
                    kebabName: 'mime-type',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_images',
            },
            size: {
                fieldNameVariations: {
                    frontendName: 'size',
                    backendName: 'size',
                    databaseName: 'size',
                    sqlFunctionRef: 'p_size',
                    prettyName: 'Size',
                    componentName: 'Size',
                    kebabName: 'size',
                } as const,
                dataType: 'number' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:int' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'flashcard_images',
            },
            createdAt: {
                fieldNameVariations: {
                    frontendName: 'createdAt',
                    backendName: 'created_at',
                    databaseName: 'created_at',
                    sqlFunctionRef: 'p_created_at',
                    prettyName: 'Created At',
                    componentName: 'CreatedAt',
                    kebabName: 'created-at',
                } as const,
                dataType: 'date' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "getCurrentTime()" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'datetime' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Date>,
                databaseTable: 'flashcard_images',
            },
            flashcardDataReference: {
                fieldNameVariations: {
                    frontendName: 'flashcardDataReference',
                    backendName: 'flashcard_data_reference',
                    databaseName: 'ref_flashcard_data',
                    sqlFunctionRef: 'p_ref_flashcard_data',
                    prettyName: 'Flashcard Data Reference',
                    componentName: 'FlashcardDataReference',
                    kebabName: 'flashcard-dataReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['flashcardData'][]>,
                databaseTable: 'flashcard_data',
            },
        },
        defaultFetchStrategy: 'fk',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'flashcard_id',
                relatedTable: 'flashcard_data',
                relatedColumn: 'id',
                junctionTable: null
            }
        ],
    },
    flashcardSetRelations: {
        entityNameVariations: {
            frontendName: 'flashcardSetRelations',
            backendName: 'flashcard_set_relations',
            databaseName: 'flashcard_set_relations',
            prettyName: 'Flashcard Set Relations',
            componentName: 'FlashcardSetRelations',
            kebabName: 'flashcard-set-relations',
        },
        schemaType: 'table' as const,
        entityFields: {
            flashcardId: {
                fieldNameVariations: {
                    frontendName: 'flashcardId',
                    backendName: 'flashcard_id',
                    databaseName: 'flashcard_id',
                    sqlFunctionRef: 'p_flashcard_id',
                    prettyName: 'Flashcard Id',
                    componentName: 'FlashcardId',
                    kebabName: 'flashcard-id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_set_relations',
            },
            setId: {
                fieldNameVariations: {
                    frontendName: 'setId',
                    backendName: 'set_id',
                    databaseName: 'set_id',
                    sqlFunctionRef: 'p_set_id',
                    prettyName: 'Set Id',
                    componentName: 'SetId',
                    kebabName: 'set-id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_set_relations',
            },
            order: {
                fieldNameVariations: {
                    frontendName: 'order',
                    backendName: 'order',
                    databaseName: 'order',
                    sqlFunctionRef: 'p_order',
                    prettyName: 'Order',
                    componentName: 'Order',
                    kebabName: 'order',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:int' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'flashcard_set_relations',
            },
            flashcardDataReference: {
                fieldNameVariations: {
                    frontendName: 'flashcardDataReference',
                    backendName: 'flashcard_data_reference',
                    databaseName: 'ref_flashcard_data',
                    sqlFunctionRef: 'p_ref_flashcard_data',
                    prettyName: 'Flashcard Data Reference',
                    componentName: 'FlashcardDataReference',
                    kebabName: 'flashcard-dataReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['flashcardData'][]>,
                databaseTable: 'flashcard_data',
            },
            flashcardSetsReference: {
                fieldNameVariations: {
                    frontendName: 'flashcardSetsReference',
                    backendName: 'flashcard_sets_reference',
                    databaseName: 'ref_flashcard_sets',
                    sqlFunctionRef: 'p_ref_flashcard_sets',
                    prettyName: 'Flashcard Sets Reference',
                    componentName: 'FlashcardSetsReference',
                    kebabName: 'flashcard-setsReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['flashcardSets'][]>,
                databaseTable: 'flashcard_sets',
            },
        },
        defaultFetchStrategy: 'm2mAndFk',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'flashcard_id',
                relatedTable: 'flashcard_data',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'foreignKey',
                column: 'set_id',
                relatedTable: 'flashcard_sets',
                relatedColumn: 'set_id',
                junctionTable: null
            }
        ],
    },
    flashcardSets: {
        entityNameVariations: {
            frontendName: 'flashcardSets',
            backendName: 'flashcard_sets',
            databaseName: 'flashcard_sets',
            prettyName: 'Flashcard Sets',
            componentName: 'FlashcardSets',
            kebabName: 'flashcard-sets',
        },
        schemaType: 'table' as const,
        entityFields: {
            setId: {
                fieldNameVariations: {
                    frontendName: 'setId',
                    backendName: 'set_id',
                    databaseName: 'set_id',
                    sqlFunctionRef: 'p_set_id',
                    prettyName: 'Set Id',
                    componentName: 'SetId',
                    kebabName: 'set-id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_sets',
            },
            userId: {
                fieldNameVariations: {
                    frontendName: 'userId',
                    backendName: 'user_id',
                    databaseName: 'user_id',
                    sqlFunctionRef: 'p_user_id',
                    prettyName: 'User Id',
                    componentName: 'UserId',
                    kebabName: 'user-id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_sets',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_sets',
            },
            createdAt: {
                fieldNameVariations: {
                    frontendName: 'createdAt',
                    backendName: 'created_at',
                    databaseName: 'created_at',
                    sqlFunctionRef: 'p_created_at',
                    prettyName: 'Created At',
                    componentName: 'CreatedAt',
                    kebabName: 'created-at',
                } as const,
                dataType: 'date' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "getCurrentTime()" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'datetime' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Date>,
                databaseTable: 'flashcard_sets',
            },
            updatedAt: {
                fieldNameVariations: {
                    frontendName: 'updatedAt',
                    backendName: 'updated_at',
                    databaseName: 'updated_at',
                    sqlFunctionRef: 'p_updated_at',
                    prettyName: 'Updated At',
                    componentName: 'UpdatedAt',
                    kebabName: 'updated-at',
                } as const,
                dataType: 'date' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "getCurrentTime()" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'datetime' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Date>,
                databaseTable: 'flashcard_sets',
            },
            sharedWith: {
                fieldNameVariations: {
                    frontendName: 'sharedWith',
                    backendName: 'shared_with',
                    databaseName: 'shared_with',
                    sqlFunctionRef: 'p_shared_with',
                    prettyName: 'Shared With',
                    componentName: 'SharedWith',
                    kebabName: 'shared-with',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'multi-select:uuid' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string[]>,
                databaseTable: 'flashcard_sets',
            },
            public: {
                fieldNameVariations: {
                    frontendName: 'public',
                    backendName: 'public',
                    databaseName: 'public',
                    sqlFunctionRef: 'p_public',
                    prettyName: 'Public',
                    componentName: 'Public',
                    kebabName: 'public',
                } as const,
                dataType: 'boolean' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "false" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'switch' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<boolean>,
                databaseTable: 'flashcard_sets',
            },
            topic: {
                fieldNameVariations: {
                    frontendName: 'topic',
                    backendName: 'topic',
                    databaseName: 'topic',
                    sqlFunctionRef: 'p_topic',
                    prettyName: 'Topic',
                    componentName: 'Topic',
                    kebabName: 'topic',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_sets',
            },
            lesson: {
                fieldNameVariations: {
                    frontendName: 'lesson',
                    backendName: 'lesson',
                    databaseName: 'lesson',
                    sqlFunctionRef: 'p_lesson',
                    prettyName: 'Lesson',
                    componentName: 'Lesson',
                    kebabName: 'lesson',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_sets',
            },
            difficulty: {
                fieldNameVariations: {
                    frontendName: 'difficulty',
                    backendName: 'difficulty',
                    databaseName: 'difficulty',
                    sqlFunctionRef: 'p_difficulty',
                    prettyName: 'Difficulty',
                    componentName: 'Difficulty',
                    kebabName: 'difficulty',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_sets',
            },
            audioOverview: {
                fieldNameVariations: {
                    frontendName: 'audioOverview',
                    backendName: 'audio_overview',
                    databaseName: 'audio_overview',
                    sqlFunctionRef: 'p_audio_overview',
                    prettyName: 'Audio Overview',
                    componentName: 'AudioOverview',
                    kebabName: 'audio-overview',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'flashcard_sets',
            },
            flashcardSetRelationsReference: {
                fieldNameVariations: {
                    frontendName: 'flashcardSetRelationsReference',
                    backendName: 'flashcard_set_relations_reference',
                    databaseName: 'ref_flashcard_set_relations',
                    sqlFunctionRef: 'p_ref_flashcard_set_relations',
                    prettyName: 'Flashcard Set Relations Reference',
                    componentName: 'FlashcardSetRelationsReference',
                    kebabName: 'flashcard-set-relationsReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['flashcardSetRelations'][]>,
                databaseTable: 'flashcard_set_relations',
            },
        },
        defaultFetchStrategy: 'm2mAndIfk',
        relationships: [
            {
                relationshipType: 'inverseForeignKey',
                column: 'set_id',
                relatedTable: 'flashcard_set_relations',
                relatedColumn: 'set_id',
                junctionTable: null
            },
            {
                relationshipType: 'manyToMany',
                column: 'set_id',
                relatedTable: 'flashcard_data',
                relatedColumn: 'flashcard_id',
                junctionTable: 'flashcard_set_relations'
            }
        ],
    },
    processor: {
        entityNameVariations: {
            frontendName: 'processor',
            backendName: 'processor',
            databaseName: 'processor',
            prettyName: 'Processor',
            componentName: 'Processor',
            kebabName: 'processor',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'processor',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'processor',
            },
            dependsDefault: {
                fieldNameVariations: {
                    frontendName: 'dependsDefault',
                    backendName: 'depends_default',
                    databaseName: 'depends_default',
                    sqlFunctionRef: 'p_depends_default',
                    prettyName: 'Depends Default',
                    componentName: 'DependsDefault',
                    kebabName: 'depends-default',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'processor',
            },
            defaultExtractors: {
                fieldNameVariations: {
                    frontendName: 'defaultExtractors',
                    backendName: 'default_extractors',
                    databaseName: 'default_extractors',
                    sqlFunctionRef: 'p_default_extractors',
                    prettyName: 'Default Extractors',
                    componentName: 'DefaultExtractors',
                    kebabName: 'default-extractors',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'processor',
            },
            params: {
                fieldNameVariations: {
                    frontendName: 'params',
                    backendName: 'params',
                    databaseName: 'params',
                    sqlFunctionRef: 'p_params',
                    prettyName: 'Params',
                    componentName: 'Params',
                    kebabName: 'params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'processor',
            },
            processorReference: {
                fieldNameVariations: {
                    frontendName: 'processorReference',
                    backendName: 'processor_reference',
                    databaseName: 'ref_processor',
                    sqlFunctionRef: 'p_ref_processor',
                    prettyName: 'Processor Reference',
                    componentName: 'ProcessorReference',
                    kebabName: 'processorReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['processor'][]>,
                databaseTable: 'processor',
            },
            recipeProcessorReference: {
                fieldNameVariations: {
                    frontendName: 'recipeProcessorReference',
                    backendName: 'recipe_processor_reference',
                    databaseName: 'ref_recipe_processor',
                    sqlFunctionRef: 'p_ref_recipe_processor',
                    prettyName: 'Recipe Processor Reference',
                    componentName: 'RecipeProcessorReference',
                    kebabName: 'recipe-processorReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipeProcessor'][]>,
                databaseTable: 'recipe_processor',
            },
        },
        defaultFetchStrategy: 'fkIfkAndM2M',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'depends_default',
                relatedTable: 'self_reference',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'recipe_processor',
                relatedColumn: 'processor',
                junctionTable: null
            },
            {
                relationshipType: 'manyToMany',
                column: 'processor',
                relatedTable: 'recipe',
                relatedColumn: 'recipe',
                junctionTable: 'recipe_processor'
            }
        ],
    },
    recipe: {
        entityNameVariations: {
            frontendName: 'recipe',
            backendName: 'recipe',
            databaseName: 'recipe',
            prettyName: 'Recipe',
            componentName: 'Recipe',
            kebabName: 'recipe',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe',
            },
            description: {
                fieldNameVariations: {
                    frontendName: 'description',
                    backendName: 'description',
                    databaseName: 'description',
                    sqlFunctionRef: 'p_description',
                    prettyName: 'Description',
                    componentName: 'Description',
                    kebabName: 'description',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe',
            },
            tags: {
                fieldNameVariations: {
                    frontendName: 'tags',
                    backendName: 'tags',
                    databaseName: 'tags',
                    sqlFunctionRef: 'p_tags',
                    prettyName: 'Tags',
                    componentName: 'Tags',
                    kebabName: 'tags',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'recipe',
            },
            sampleOutput: {
                fieldNameVariations: {
                    frontendName: 'sampleOutput',
                    backendName: 'sample_output',
                    databaseName: 'sample_output',
                    sqlFunctionRef: 'p_sample_output',
                    prettyName: 'Sample Output',
                    componentName: 'SampleOutput',
                    kebabName: 'sample-output',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe',
            },
            isPublic: {
                fieldNameVariations: {
                    frontendName: 'isPublic',
                    backendName: 'is_public',
                    databaseName: 'is_public',
                    sqlFunctionRef: 'p_is_public',
                    prettyName: 'Is Public',
                    componentName: 'IsPublic',
                    kebabName: 'is-public',
                } as const,
                dataType: 'boolean' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'switch' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<boolean>,
                databaseTable: 'recipe',
            },
            status: {
                fieldNameVariations: {
                    frontendName: 'status',
                    backendName: 'status',
                    databaseName: 'status',
                    sqlFunctionRef: 'p_status',
                    prettyName: 'Status',
                    componentName: 'Status',
                    kebabName: 'status',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "draft" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"active_testing" | "archived" | "draft" | "in_review" | "live" | "other" | undefined>,
                databaseTable: 'recipe',
            },
            version: {
                fieldNameVariations: {
                    frontendName: 'version',
                    backendName: 'version',
                    databaseName: 'version',
                    sqlFunctionRef: 'p_version',
                    prettyName: 'Version',
                    componentName: 'Version',
                    kebabName: 'version',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "1" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:smallint' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'recipe',
            },
            messages: {
                fieldNameVariations: {
                    frontendName: 'messages',
                    backendName: 'messages',
                    databaseName: 'messages',
                    sqlFunctionRef: 'p_messages',
                    prettyName: 'Messages',
                    componentName: 'Messages',
                    kebabName: 'messages',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-array:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>[]>,
                databaseTable: 'recipe',
            },
            postResultOptions: {
                fieldNameVariations: {
                    frontendName: 'postResultOptions',
                    backendName: 'post_result_options',
                    databaseName: 'post_result_options',
                    sqlFunctionRef: 'p_post_result_options',
                    prettyName: 'Post Result Options',
                    componentName: 'PostResultOptions',
                    kebabName: 'post-result-options',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'recipe',
            },
            recipeBrokerReference: {
                fieldNameVariations: {
                    frontendName: 'recipeBrokerReference',
                    backendName: 'recipe_broker_reference',
                    databaseName: 'ref_recipe_broker',
                    sqlFunctionRef: 'p_ref_recipe_broker',
                    prettyName: 'Recipe Broker Reference',
                    componentName: 'RecipeBrokerReference',
                    kebabName: 'recipe-brokerReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipeBroker'][]>,
                databaseTable: 'recipe_broker',
            },
            recipeProcessorReference: {
                fieldNameVariations: {
                    frontendName: 'recipeProcessorReference',
                    backendName: 'recipe_processor_reference',
                    databaseName: 'ref_recipe_processor',
                    sqlFunctionRef: 'p_ref_recipe_processor',
                    prettyName: 'Recipe Processor Reference',
                    componentName: 'RecipeProcessorReference',
                    kebabName: 'recipe-processorReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipeProcessor'][]>,
                databaseTable: 'recipe_processor',
            },
            recipeModelReference: {
                fieldNameVariations: {
                    frontendName: 'recipeModelReference',
                    backendName: 'recipe_model_reference',
                    databaseName: 'ref_recipe_model',
                    sqlFunctionRef: 'p_ref_recipe_model',
                    prettyName: 'Recipe Model Reference',
                    componentName: 'RecipeModelReference',
                    kebabName: 'recipe-modelReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipeModel'][]>,
                databaseTable: 'recipe_model',
            },
            recipeDisplayReference: {
                fieldNameVariations: {
                    frontendName: 'recipeDisplayReference',
                    backendName: 'recipe_display_reference',
                    databaseName: 'ref_recipe_display',
                    sqlFunctionRef: 'p_ref_recipe_display',
                    prettyName: 'Recipe Display Reference',
                    componentName: 'RecipeDisplayReference',
                    kebabName: 'recipe-displayReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipeDisplay'][]>,
                databaseTable: 'recipe_display',
            },
            recipeFunctionReference: {
                fieldNameVariations: {
                    frontendName: 'recipeFunctionReference',
                    backendName: 'recipe_function_reference',
                    databaseName: 'ref_recipe_function',
                    sqlFunctionRef: 'p_ref_recipe_function',
                    prettyName: 'Recipe Function Reference',
                    componentName: 'RecipeFunctionReference',
                    kebabName: 'recipe-functionReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipeFunction'][]>,
                databaseTable: 'recipe_function',
            },
            recipeToolReference: {
                fieldNameVariations: {
                    frontendName: 'recipeToolReference',
                    backendName: 'recipe_tool_reference',
                    databaseName: 'ref_recipe_tool',
                    sqlFunctionRef: 'p_ref_recipe_tool',
                    prettyName: 'Recipe Tool Reference',
                    componentName: 'RecipeToolReference',
                    kebabName: 'recipe-toolReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipeTool'][]>,
                databaseTable: 'recipe_tool',
            },
        },
        defaultFetchStrategy: 'm2mAndIfk',
        relationships: [
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'recipe_broker',
                relatedColumn: 'recipe',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'recipe_processor',
                relatedColumn: 'recipe',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'recipe_model',
                relatedColumn: 'recipe',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'recipe_display',
                relatedColumn: 'recipe',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'recipe_function',
                relatedColumn: 'recipe',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'recipe_tool',
                relatedColumn: 'recipe',
                junctionTable: null
            },
            {
                relationshipType: 'manyToMany',
                column: 'recipe',
                relatedTable: 'broker',
                relatedColumn: 'broker',
                junctionTable: 'recipe_broker'
            },
            {
                relationshipType: 'manyToMany',
                column: 'recipe',
                relatedTable: 'display_option',
                relatedColumn: 'display',
                junctionTable: 'recipe_display'
            },
            {
                relationshipType: 'manyToMany',
                column: 'recipe',
                relatedTable: 'system_function',
                relatedColumn: 'function',
                junctionTable: 'recipe_function'
            },
            {
                relationshipType: 'manyToMany',
                column: 'recipe',
                relatedTable: 'ai_model',
                relatedColumn: 'ai_model',
                junctionTable: 'recipe_model'
            },
            {
                relationshipType: 'manyToMany',
                column: 'recipe',
                relatedTable: 'processor',
                relatedColumn: 'processor',
                junctionTable: 'recipe_processor'
            },
            {
                relationshipType: 'manyToMany',
                column: 'recipe',
                relatedTable: 'tool',
                relatedColumn: 'tool',
                junctionTable: 'recipe_tool'
            }
        ],
    },
    recipeBroker: {
        entityNameVariations: {
            frontendName: 'recipeBroker',
            backendName: 'recipe_broker',
            databaseName: 'recipe_broker',
            prettyName: 'Recipe Broker',
            componentName: 'RecipeBroker',
            kebabName: 'recipe-broker',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_broker',
            },
            recipe: {
                fieldNameVariations: {
                    frontendName: 'recipe',
                    backendName: 'recipe',
                    databaseName: 'recipe',
                    sqlFunctionRef: 'p_recipe',
                    prettyName: 'Recipe',
                    componentName: 'Recipe',
                    kebabName: 'recipe',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_broker',
            },
            broker: {
                fieldNameVariations: {
                    frontendName: 'broker',
                    backendName: 'broker',
                    databaseName: 'broker',
                    sqlFunctionRef: 'p_broker',
                    prettyName: 'Broker',
                    componentName: 'Broker',
                    kebabName: 'broker',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_broker',
            },
            brokerRole: {
                fieldNameVariations: {
                    frontendName: 'brokerRole',
                    backendName: 'broker_role',
                    databaseName: 'broker_role',
                    sqlFunctionRef: 'p_broker_role',
                    prettyName: 'Broker Role',
                    componentName: 'BrokerRole',
                    kebabName: 'broker-role',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"input_broker" | "output_broker" | undefined>,
                databaseTable: 'recipe_broker',
            },
            required: {
                fieldNameVariations: {
                    frontendName: 'required',
                    backendName: 'required',
                    databaseName: 'required',
                    sqlFunctionRef: 'p_required',
                    prettyName: 'Required',
                    componentName: 'Required',
                    kebabName: 'required',
                } as const,
                dataType: 'boolean' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "true" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'switch' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<boolean>,
                databaseTable: 'recipe_broker',
            },
            brokerReference: {
                fieldNameVariations: {
                    frontendName: 'brokerReference',
                    backendName: 'broker_reference',
                    databaseName: 'ref_broker',
                    sqlFunctionRef: 'p_ref_broker',
                    prettyName: 'Broker Reference',
                    componentName: 'BrokerReference',
                    kebabName: 'brokerReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['broker'][]>,
                databaseTable: 'broker',
            },
            recipeReference: {
                fieldNameVariations: {
                    frontendName: 'recipeReference',
                    backendName: 'recipe_reference',
                    databaseName: 'ref_recipe',
                    sqlFunctionRef: 'p_ref_recipe',
                    prettyName: 'Recipe Reference',
                    componentName: 'RecipeReference',
                    kebabName: 'recipeReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipe'][]>,
                databaseTable: 'recipe',
            },
        },
        defaultFetchStrategy: 'm2mAndFk',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'broker',
                relatedTable: 'broker',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'foreignKey',
                column: 'recipe',
                relatedTable: 'recipe',
                relatedColumn: 'id',
                junctionTable: null
            }
        ],
    },
    recipeDisplay: {
        entityNameVariations: {
            frontendName: 'recipeDisplay',
            backendName: 'recipe_display',
            databaseName: 'recipe_display',
            prettyName: 'Recipe Display',
            componentName: 'RecipeDisplay',
            kebabName: 'recipe-display',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_display',
            },
            recipe: {
                fieldNameVariations: {
                    frontendName: 'recipe',
                    backendName: 'recipe',
                    databaseName: 'recipe',
                    sqlFunctionRef: 'p_recipe',
                    prettyName: 'Recipe',
                    componentName: 'Recipe',
                    kebabName: 'recipe',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_display',
            },
            display: {
                fieldNameVariations: {
                    frontendName: 'display',
                    backendName: 'display',
                    databaseName: 'display',
                    sqlFunctionRef: 'p_display',
                    prettyName: 'Display',
                    componentName: 'Display',
                    kebabName: 'display',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_display',
            },
            priority: {
                fieldNameVariations: {
                    frontendName: 'priority',
                    backendName: 'priority',
                    databaseName: 'priority',
                    sqlFunctionRef: 'p_priority',
                    prettyName: 'Priority',
                    componentName: 'Priority',
                    kebabName: 'priority',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "1" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:smallint' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'recipe_display',
            },
            displaySettings: {
                fieldNameVariations: {
                    frontendName: 'displaySettings',
                    backendName: 'display_settings',
                    databaseName: 'display_settings',
                    sqlFunctionRef: 'p_display_settings',
                    prettyName: 'Display Settings',
                    componentName: 'DisplaySettings',
                    kebabName: 'display-settings',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'recipe_display',
            },
            displayOptionReference: {
                fieldNameVariations: {
                    frontendName: 'displayOptionReference',
                    backendName: 'display_option_reference',
                    databaseName: 'ref_display_option',
                    sqlFunctionRef: 'p_ref_display_option',
                    prettyName: 'Display Option Reference',
                    componentName: 'DisplayOptionReference',
                    kebabName: 'display-optionReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['displayOption'][]>,
                databaseTable: 'display_option',
            },
            recipeReference: {
                fieldNameVariations: {
                    frontendName: 'recipeReference',
                    backendName: 'recipe_reference',
                    databaseName: 'ref_recipe',
                    sqlFunctionRef: 'p_ref_recipe',
                    prettyName: 'Recipe Reference',
                    componentName: 'RecipeReference',
                    kebabName: 'recipeReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipe'][]>,
                databaseTable: 'recipe',
            },
        },
        defaultFetchStrategy: 'm2mAndFk',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'display',
                relatedTable: 'display_option',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'foreignKey',
                column: 'recipe',
                relatedTable: 'recipe',
                relatedColumn: 'id',
                junctionTable: null
            }
        ],
    },
    recipeFunction: {
        entityNameVariations: {
            frontendName: 'recipeFunction',
            backendName: 'recipe_function',
            databaseName: 'recipe_function',
            prettyName: 'Recipe Function',
            componentName: 'RecipeFunction',
            kebabName: 'recipe-function',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_function',
            },
            recipe: {
                fieldNameVariations: {
                    frontendName: 'recipe',
                    backendName: 'recipe',
                    databaseName: 'recipe',
                    sqlFunctionRef: 'p_recipe',
                    prettyName: 'Recipe',
                    componentName: 'Recipe',
                    kebabName: 'recipe',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_function',
            },
            function: {
                fieldNameVariations: {
                    frontendName: 'function',
                    backendName: 'function',
                    databaseName: 'function',
                    sqlFunctionRef: 'p_function',
                    prettyName: 'Function',
                    componentName: 'Function',
                    kebabName: 'function',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_function',
            },
            role: {
                fieldNameVariations: {
                    frontendName: 'role',
                    backendName: 'role',
                    databaseName: 'role',
                    sqlFunctionRef: 'p_role',
                    prettyName: 'Role',
                    componentName: 'Role',
                    kebabName: 'role',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"comparison" | "decision" | "other" | "post_processing" | "pre-Processing" | "rating" | "save_data" | "validation" | undefined>,
                databaseTable: 'recipe_function',
            },
            params: {
                fieldNameVariations: {
                    frontendName: 'params',
                    backendName: 'params',
                    databaseName: 'params',
                    sqlFunctionRef: 'p_params',
                    prettyName: 'Params',
                    componentName: 'Params',
                    kebabName: 'params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'recipe_function',
            },
            systemFunctionReference: {
                fieldNameVariations: {
                    frontendName: 'systemFunctionReference',
                    backendName: 'system_function_reference',
                    databaseName: 'ref_system_function',
                    sqlFunctionRef: 'p_ref_system_function',
                    prettyName: 'System Function Reference',
                    componentName: 'SystemFunctionReference',
                    kebabName: 'system-functionReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['systemFunction'][]>,
                databaseTable: 'system_function',
            },
            recipeReference: {
                fieldNameVariations: {
                    frontendName: 'recipeReference',
                    backendName: 'recipe_reference',
                    databaseName: 'ref_recipe',
                    sqlFunctionRef: 'p_ref_recipe',
                    prettyName: 'Recipe Reference',
                    componentName: 'RecipeReference',
                    kebabName: 'recipeReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipe'][]>,
                databaseTable: 'recipe',
            },
        },
        defaultFetchStrategy: 'm2mAndFk',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'function',
                relatedTable: 'system_function',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'foreignKey',
                column: 'recipe',
                relatedTable: 'recipe',
                relatedColumn: 'id',
                junctionTable: null
            }
        ],
    },
    recipeModel: {
        entityNameVariations: {
            frontendName: 'recipeModel',
            backendName: 'recipe_model',
            databaseName: 'recipe_model',
            prettyName: 'Recipe Model',
            componentName: 'RecipeModel',
            kebabName: 'recipe-model',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_model',
            },
            recipe: {
                fieldNameVariations: {
                    frontendName: 'recipe',
                    backendName: 'recipe',
                    databaseName: 'recipe',
                    sqlFunctionRef: 'p_recipe',
                    prettyName: 'Recipe',
                    componentName: 'Recipe',
                    kebabName: 'recipe',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_model',
            },
            aiModel: {
                fieldNameVariations: {
                    frontendName: 'aiModel',
                    backendName: 'ai_model',
                    databaseName: 'ai_model',
                    sqlFunctionRef: 'p_ai_model',
                    prettyName: 'Ai Model',
                    componentName: 'AiModel',
                    kebabName: 'ai-model',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_model',
            },
            role: {
                fieldNameVariations: {
                    frontendName: 'role',
                    backendName: 'role',
                    databaseName: 'role',
                    sqlFunctionRef: 'p_role',
                    prettyName: 'Role',
                    componentName: 'Role',
                    kebabName: 'role',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "primary_model" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"primary_model" | "trial_model" | "verified_model" | undefined>,
                databaseTable: 'recipe_model',
            },
            priority: {
                fieldNameVariations: {
                    frontendName: 'priority',
                    backendName: 'priority',
                    databaseName: 'priority',
                    sqlFunctionRef: 'p_priority',
                    prettyName: 'Priority',
                    componentName: 'Priority',
                    kebabName: 'priority',
                } as const,
                dataType: 'number' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "1" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'number:smallint' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<number>,
                databaseTable: 'recipe_model',
            },
            aiModelReference: {
                fieldNameVariations: {
                    frontendName: 'aiModelReference',
                    backendName: 'ai_model_reference',
                    databaseName: 'ref_ai_model',
                    sqlFunctionRef: 'p_ref_ai_model',
                    prettyName: 'Ai Model Reference',
                    componentName: 'AiModelReference',
                    kebabName: 'ai-modelReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['aiModel'][]>,
                databaseTable: 'ai_model',
            },
            recipeReference: {
                fieldNameVariations: {
                    frontendName: 'recipeReference',
                    backendName: 'recipe_reference',
                    databaseName: 'ref_recipe',
                    sqlFunctionRef: 'p_ref_recipe',
                    prettyName: 'Recipe Reference',
                    componentName: 'RecipeReference',
                    kebabName: 'recipeReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipe'][]>,
                databaseTable: 'recipe',
            },
        },
        defaultFetchStrategy: 'm2mAndFk',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'ai_model',
                relatedTable: 'ai_model',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'foreignKey',
                column: 'recipe',
                relatedTable: 'recipe',
                relatedColumn: 'id',
                junctionTable: null
            }
        ],
    },
    recipeProcessor: {
        entityNameVariations: {
            frontendName: 'recipeProcessor',
            backendName: 'recipe_processor',
            databaseName: 'recipe_processor',
            prettyName: 'Recipe Processor',
            componentName: 'RecipeProcessor',
            kebabName: 'recipe-processor',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_processor',
            },
            recipe: {
                fieldNameVariations: {
                    frontendName: 'recipe',
                    backendName: 'recipe',
                    databaseName: 'recipe',
                    sqlFunctionRef: 'p_recipe',
                    prettyName: 'Recipe',
                    componentName: 'Recipe',
                    kebabName: 'recipe',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_processor',
            },
            processor: {
                fieldNameVariations: {
                    frontendName: 'processor',
                    backendName: 'processor',
                    databaseName: 'processor',
                    sqlFunctionRef: 'p_processor',
                    prettyName: 'Processor',
                    componentName: 'Processor',
                    kebabName: 'processor',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_processor',
            },
            params: {
                fieldNameVariations: {
                    frontendName: 'params',
                    backendName: 'params',
                    databaseName: 'params',
                    sqlFunctionRef: 'p_params',
                    prettyName: 'Params',
                    componentName: 'Params',
                    kebabName: 'params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'recipe_processor',
            },
            processorReference: {
                fieldNameVariations: {
                    frontendName: 'processorReference',
                    backendName: 'processor_reference',
                    databaseName: 'ref_processor',
                    sqlFunctionRef: 'p_ref_processor',
                    prettyName: 'Processor Reference',
                    componentName: 'ProcessorReference',
                    kebabName: 'processorReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['processor'][]>,
                databaseTable: 'processor',
            },
            recipeReference: {
                fieldNameVariations: {
                    frontendName: 'recipeReference',
                    backendName: 'recipe_reference',
                    databaseName: 'ref_recipe',
                    sqlFunctionRef: 'p_ref_recipe',
                    prettyName: 'Recipe Reference',
                    componentName: 'RecipeReference',
                    kebabName: 'recipeReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipe'][]>,
                databaseTable: 'recipe',
            },
        },
        defaultFetchStrategy: 'm2mAndFk',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'processor',
                relatedTable: 'processor',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'foreignKey',
                column: 'recipe',
                relatedTable: 'recipe',
                relatedColumn: 'id',
                junctionTable: null
            }
        ],
    },
    recipeTool: {
        entityNameVariations: {
            frontendName: 'recipeTool',
            backendName: 'recipe_tool',
            databaseName: 'recipe_tool',
            prettyName: 'Recipe Tool',
            componentName: 'RecipeTool',
            kebabName: 'recipe-tool',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_tool',
            },
            recipe: {
                fieldNameVariations: {
                    frontendName: 'recipe',
                    backendName: 'recipe',
                    databaseName: 'recipe',
                    sqlFunctionRef: 'p_recipe',
                    prettyName: 'Recipe',
                    componentName: 'Recipe',
                    kebabName: 'recipe',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_tool',
            },
            tool: {
                fieldNameVariations: {
                    frontendName: 'tool',
                    backendName: 'tool',
                    databaseName: 'tool',
                    sqlFunctionRef: 'p_tool',
                    prettyName: 'Tool',
                    componentName: 'Tool',
                    kebabName: 'tool',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'recipe_tool',
            },
            params: {
                fieldNameVariations: {
                    frontendName: 'params',
                    backendName: 'params',
                    databaseName: 'params',
                    sqlFunctionRef: 'p_params',
                    prettyName: 'Params',
                    componentName: 'Params',
                    kebabName: 'params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'recipe_tool',
            },
            recipeReference: {
                fieldNameVariations: {
                    frontendName: 'recipeReference',
                    backendName: 'recipe_reference',
                    databaseName: 'ref_recipe',
                    sqlFunctionRef: 'p_ref_recipe',
                    prettyName: 'Recipe Reference',
                    componentName: 'RecipeReference',
                    kebabName: 'recipeReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipe'][]>,
                databaseTable: 'recipe',
            },
            toolReference: {
                fieldNameVariations: {
                    frontendName: 'toolReference',
                    backendName: 'tool_reference',
                    databaseName: 'ref_tool',
                    sqlFunctionRef: 'p_ref_tool',
                    prettyName: 'Tool Reference',
                    componentName: 'ToolReference',
                    kebabName: 'toolReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['tool'][]>,
                databaseTable: 'tool',
            },
        },
        defaultFetchStrategy: 'm2mAndFk',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'recipe',
                relatedTable: 'recipe',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'foreignKey',
                column: 'tool',
                relatedTable: 'tool',
                relatedColumn: 'id',
                junctionTable: null
            }
        ],
    },
    registeredFunction: {
        entityNameVariations: {
            frontendName: 'registeredFunction',
            backendName: 'registered_function',
            databaseName: 'registered_function',
            prettyName: 'Registered Function',
            componentName: 'RegisteredFunction',
            kebabName: 'registered-function',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'registered_function',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'registered_function',
            },
            modulePath: {
                fieldNameVariations: {
                    frontendName: 'modulePath',
                    backendName: 'module_path',
                    databaseName: 'module_path',
                    sqlFunctionRef: 'p_module_path',
                    prettyName: 'Module Path',
                    componentName: 'ModulePath',
                    kebabName: 'module-path',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'registered_function',
            },
            className: {
                fieldNameVariations: {
                    frontendName: 'className',
                    backendName: 'class_name',
                    databaseName: 'class_name',
                    sqlFunctionRef: 'p_class_name',
                    prettyName: 'Class Name',
                    componentName: 'ClassName',
                    kebabName: 'class-name',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'registered_function',
            },
            description: {
                fieldNameVariations: {
                    frontendName: 'description',
                    backendName: 'description',
                    databaseName: 'description',
                    sqlFunctionRef: 'p_description',
                    prettyName: 'Description',
                    componentName: 'Description',
                    kebabName: 'description',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'registered_function',
            },
            returnBroker: {
                fieldNameVariations: {
                    frontendName: 'returnBroker',
                    backendName: 'return_broker',
                    databaseName: 'return_broker',
                    sqlFunctionRef: 'p_return_broker',
                    prettyName: 'Return Broker',
                    componentName: 'ReturnBroker',
                    kebabName: 'return-broker',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'registered_function',
            },
            brokerReference: {
                fieldNameVariations: {
                    frontendName: 'brokerReference',
                    backendName: 'broker_reference',
                    databaseName: 'ref_broker',
                    sqlFunctionRef: 'p_ref_broker',
                    prettyName: 'Broker Reference',
                    componentName: 'BrokerReference',
                    kebabName: 'brokerReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['broker'][]>,
                databaseTable: 'broker',
            },
            systemFunctionReference: {
                fieldNameVariations: {
                    frontendName: 'systemFunctionReference',
                    backendName: 'system_function_reference',
                    databaseName: 'ref_system_function',
                    sqlFunctionRef: 'p_ref_system_function',
                    prettyName: 'System Function Reference',
                    componentName: 'SystemFunctionReference',
                    kebabName: 'system-functionReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['systemFunction'][]>,
                databaseTable: 'system_function',
            },
            argReference: {
                fieldNameVariations: {
                    frontendName: 'argReference',
                    backendName: 'arg_reference',
                    databaseName: 'ref_arg',
                    sqlFunctionRef: 'p_ref_arg',
                    prettyName: 'Arg Reference',
                    componentName: 'ArgReference',
                    kebabName: 'argReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['arg'][]>,
                databaseTable: 'arg',
            },
        },
        defaultFetchStrategy: 'fkAndIfk',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'return_broker',
                relatedTable: 'broker',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'system_function',
                relatedColumn: 'rf_id',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'arg',
                relatedColumn: 'registered_function',
                junctionTable: null
            }
        ],
    },
    systemFunction: {
        entityNameVariations: {
            frontendName: 'systemFunction',
            backendName: 'system_function',
            databaseName: 'system_function',
            prettyName: 'System Function',
            componentName: 'SystemFunction',
            kebabName: 'system-function',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'system_function',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'system_function',
            },
            description: {
                fieldNameVariations: {
                    frontendName: 'description',
                    backendName: 'description',
                    databaseName: 'description',
                    sqlFunctionRef: 'p_description',
                    prettyName: 'Description',
                    componentName: 'Description',
                    kebabName: 'description',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'system_function',
            },
            sample: {
                fieldNameVariations: {
                    frontendName: 'sample',
                    backendName: 'sample',
                    databaseName: 'sample',
                    sqlFunctionRef: 'p_sample',
                    prettyName: 'Sample',
                    componentName: 'Sample',
                    kebabName: 'sample',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'system_function',
            },
            inputParams: {
                fieldNameVariations: {
                    frontendName: 'inputParams',
                    backendName: 'input_params',
                    databaseName: 'input_params',
                    sqlFunctionRef: 'p_input_params',
                    prettyName: 'Input Params',
                    componentName: 'InputParams',
                    kebabName: 'input-params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'system_function',
            },
            outputOptions: {
                fieldNameVariations: {
                    frontendName: 'outputOptions',
                    backendName: 'output_options',
                    databaseName: 'output_options',
                    sqlFunctionRef: 'p_output_options',
                    prettyName: 'Output Options',
                    componentName: 'OutputOptions',
                    kebabName: 'output-options',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'system_function',
            },
            rfId: {
                fieldNameVariations: {
                    frontendName: 'rfId',
                    backendName: 'rf_id',
                    databaseName: 'rf_id',
                    sqlFunctionRef: 'p_rf_id',
                    prettyName: 'Rf Id',
                    componentName: 'RfId',
                    kebabName: 'rf-id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'system_function',
            },
            registeredFunctionReference: {
                fieldNameVariations: {
                    frontendName: 'registeredFunctionReference',
                    backendName: 'registered_function_reference',
                    databaseName: 'ref_registered_function',
                    sqlFunctionRef: 'p_ref_registered_function',
                    prettyName: 'Registered Function Reference',
                    componentName: 'RegisteredFunctionReference',
                    kebabName: 'registered-functionReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['registeredFunction'][]>,
                databaseTable: 'registered_function',
            },
            toolReference: {
                fieldNameVariations: {
                    frontendName: 'toolReference',
                    backendName: 'tool_reference',
                    databaseName: 'ref_tool',
                    sqlFunctionRef: 'p_ref_tool',
                    prettyName: 'Tool Reference',
                    componentName: 'ToolReference',
                    kebabName: 'toolReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['tool'][]>,
                databaseTable: 'tool',
            },
            recipeFunctionReference: {
                fieldNameVariations: {
                    frontendName: 'recipeFunctionReference',
                    backendName: 'recipe_function_reference',
                    databaseName: 'ref_recipe_function',
                    sqlFunctionRef: 'p_ref_recipe_function',
                    prettyName: 'Recipe Function Reference',
                    componentName: 'RecipeFunctionReference',
                    kebabName: 'recipe-functionReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipeFunction'][]>,
                databaseTable: 'recipe_function',
            },
        },
        defaultFetchStrategy: 'fkIfkAndM2M',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'rf_id',
                relatedTable: 'registered_function',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'tool',
                relatedColumn: 'system_function',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'recipe_function',
                relatedColumn: 'function',
                junctionTable: null
            },
            {
                relationshipType: 'manyToMany',
                column: 'function',
                relatedTable: 'recipe',
                relatedColumn: 'recipe',
                junctionTable: 'recipe_function'
            }
        ],
    },
    tool: {
        entityNameVariations: {
            frontendName: 'tool',
            backendName: 'tool',
            databaseName: 'tool',
            prettyName: 'Tool',
            componentName: 'Tool',
            kebabName: 'tool',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'tool',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'tool',
            },
            source: {
                fieldNameVariations: {
                    frontendName: 'source',
                    backendName: 'source',
                    databaseName: 'source',
                    sqlFunctionRef: 'p_source',
                    prettyName: 'Source',
                    componentName: 'Source',
                    kebabName: 'source',
                } as const,
                dataType: 'object' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "{'host': 'ame'}" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'tool',
            },
            description: {
                fieldNameVariations: {
                    frontendName: 'description',
                    backendName: 'description',
                    databaseName: 'description',
                    sqlFunctionRef: 'p_description',
                    prettyName: 'Description',
                    componentName: 'Description',
                    kebabName: 'description',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'tool',
            },
            parameters: {
                fieldNameVariations: {
                    frontendName: 'parameters',
                    backendName: 'parameters',
                    databaseName: 'parameters',
                    sqlFunctionRef: 'p_parameters',
                    prettyName: 'Parameters',
                    componentName: 'Parameters',
                    kebabName: 'parameters',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'tool',
            },
            requiredArgs: {
                fieldNameVariations: {
                    frontendName: 'requiredArgs',
                    backendName: 'required_args',
                    databaseName: 'required_args',
                    sqlFunctionRef: 'p_required_args',
                    prettyName: 'Required Args',
                    componentName: 'RequiredArgs',
                    kebabName: 'required-args',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'tool',
            },
            systemFunction: {
                fieldNameVariations: {
                    frontendName: 'systemFunction',
                    backendName: 'system_function',
                    databaseName: 'system_function',
                    sqlFunctionRef: 'p_system_function',
                    prettyName: 'System Function',
                    componentName: 'SystemFunction',
                    kebabName: 'system-function',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'tool',
            },
            additionalParams: {
                fieldNameVariations: {
                    frontendName: 'additionalParams',
                    backendName: 'additional_params',
                    databaseName: 'additional_params',
                    sqlFunctionRef: 'p_additional_params',
                    prettyName: 'Additional Params',
                    componentName: 'AdditionalParams',
                    kebabName: 'additional-params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'tool',
            },
            systemFunctionReference: {
                fieldNameVariations: {
                    frontendName: 'systemFunctionReference',
                    backendName: 'system_function_reference',
                    databaseName: 'ref_system_function',
                    sqlFunctionRef: 'p_ref_system_function',
                    prettyName: 'System Function Reference',
                    componentName: 'SystemFunctionReference',
                    kebabName: 'system-functionReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['systemFunction'][]>,
                databaseTable: 'system_function',
            },
            recipeToolReference: {
                fieldNameVariations: {
                    frontendName: 'recipeToolReference',
                    backendName: 'recipe_tool_reference',
                    databaseName: 'ref_recipe_tool',
                    sqlFunctionRef: 'p_ref_recipe_tool',
                    prettyName: 'Recipe Tool Reference',
                    componentName: 'RecipeToolReference',
                    kebabName: 'recipe-toolReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['recipeTool'][]>,
                databaseTable: 'recipe_tool',
            },
        },
        defaultFetchStrategy: 'fkIfkAndM2M',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'system_function',
                relatedTable: 'system_function',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'recipe_tool',
                relatedColumn: 'tool',
                junctionTable: null
            },
            {
                relationshipType: 'manyToMany',
                column: 'tool',
                relatedTable: 'recipe',
                relatedColumn: 'recipe',
                junctionTable: 'recipe_tool'
            }
        ],
    },
    transformer: {
        entityNameVariations: {
            frontendName: 'transformer',
            backendName: 'transformer',
            databaseName: 'transformer',
            prettyName: 'Transformer',
            componentName: 'Transformer',
            kebabName: 'transformer',
        },
        schemaType: 'table' as const,
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'transformer',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'transformer',
            },
            inputParams: {
                fieldNameVariations: {
                    frontendName: 'inputParams',
                    backendName: 'input_params',
                    databaseName: 'input_params',
                    sqlFunctionRef: 'p_input_params',
                    prettyName: 'Input Params',
                    componentName: 'InputParams',
                    kebabName: 'input-params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'transformer',
            },
            outputParams: {
                fieldNameVariations: {
                    frontendName: 'outputParams',
                    backendName: 'output_params',
                    databaseName: 'output_params',
                    sqlFunctionRef: 'p_output_params',
                    prettyName: 'Output Params',
                    componentName: 'OutputParams',
                    kebabName: 'output-params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'transformer',
            },
            actionReference: {
                fieldNameVariations: {
                    frontendName: 'actionReference',
                    backendName: 'action_reference',
                    databaseName: 'ref_action',
                    sqlFunctionRef: 'p_ref_action',
                    prettyName: 'Action Reference',
                    componentName: 'ActionReference',
                    kebabName: 'actionReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<AutomationSchema['action'][]>,
                databaseTable: 'action',
            },
        },
        defaultFetchStrategy: 'm2mAndIfk',
        relationships: [
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'action',
                relatedColumn: 'transformer',
                junctionTable: null
            },
            {
                relationshipType: 'manyToMany',
                column: 'transformer',
                relatedTable: 'automation_matrix',
                relatedColumn: 'matrix',
                junctionTable: 'action'
            }
        ],
    },
    userPreferences: {
        entityNameVariations: {
            frontendName: 'userPreferences',
            backendName: 'user_preferences',
            databaseName: 'user_preferences',
            prettyName: 'User Preferences',
            componentName: 'UserPreferences',
            kebabName: 'user-preferences',
        },
        schemaType: 'table' as const,
        entityFields: {
            userId: {
                fieldNameVariations: {
                    frontendName: 'userId',
                    backendName: 'user_id',
                    databaseName: 'user_id',
                    sqlFunctionRef: 'p_user_id',
                    prettyName: 'User Id',
                    componentName: 'UserId',
                    kebabName: 'user-id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'user_preferences',
            },
            preferences: {
                fieldNameVariations: {
                    frontendName: 'preferences',
                    backendName: 'preferences',
                    databaseName: 'preferences',
                    sqlFunctionRef: 'p_preferences',
                    prettyName: 'Preferences',
                    componentName: 'Preferences',
                    kebabName: 'preferences',
                } as const,
                dataType: 'object' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'user_preferences',
            },
            createdAt: {
                fieldNameVariations: {
                    frontendName: 'createdAt',
                    backendName: 'created_at',
                    databaseName: 'created_at',
                    sqlFunctionRef: 'p_created_at',
                    prettyName: 'Created At',
                    componentName: 'CreatedAt',
                    kebabName: 'created-at',
                } as const,
                dataType: 'date' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getCurrentTime()" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'datetime' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Date>,
                databaseTable: 'user_preferences',
            },
            updatedAt: {
                fieldNameVariations: {
                    frontendName: 'updatedAt',
                    backendName: 'updated_at',
                    databaseName: 'updated_at',
                    sqlFunctionRef: 'p_updated_at',
                    prettyName: 'Updated At',
                    componentName: 'UpdatedAt',
                    kebabName: 'updated-at',
                } as const,
                dataType: 'date' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getCurrentTime()" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'datetime' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Date>,
                databaseTable: 'user_preferences',
            },
        },
        defaultFetchStrategy: 'simple',
        relationships: [],
    },
};


export const viewSchemas: Record<AutomationViewName, ViewSchema> = {
    viewRegisteredFunction: {
        entityNameVariations: {
            frontendName: 'viewRegisteredFunction',
            backendName: 'viewRegisteredFunction',
            databaseName: 'view_registered_function',
            prettyName: 'Registered Function View',
            componentName: 'RegisteredFunctionView',
            kebabName: 'view-registered-function',
        },
        schemaType: 'view',
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isArray: false,
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isArray: false,
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
        },
        defaultFetchStrategy: 'simple',
        relationships: null,
    },
    viewRegisteredFunctionAllRels: {
        entityNameVariations: {
            frontendName: 'viewRegisteredFunction',
            backendName: 'viewRegisteredFunction',
            databaseName: 'view_registered_function',
            prettyName: 'Registered Function View',
            componentName: 'RegisteredFunctionView',
            kebabName: 'view-registered-function',
        },
        schemaType: 'view',
        entityFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isArray: false,
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isArray: false,
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
        },
        defaultFetchStrategy: 'simple',
        relationships: null,
    },
};

