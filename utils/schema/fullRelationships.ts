import { AnyEntityDatabaseTable, EntityKeys } from "@/types";

export type EntityRelationshipType =
  | "self-referential"
  | "one-to-one"
  | "one-to-many"
  | "many-to-one"
  | "many-to-many";

export type ForeignKeyDetails = {
  foreignTable: AnyEntityDatabaseTable;
  foreignEntity: EntityKeys;
  column: string;
  fieldName: string;
  foreignField: string;
  foreignColumn: string;
  relationshipType: EntityRelationshipType;
  constraintName: string;
};

export type ReferencedByDetails = {
  foreignTable: AnyEntityDatabaseTable;
  foreignEntity: EntityKeys;
  field: string;
  column: string;
  foreignField: string;
  foreignColumn: string;
  constraintName: string;
};

export type RelationshipDetails = {
  entityName: EntityKeys;
  tableName: AnyEntityDatabaseTable;
  foreignKeys:
    | Partial<Record<EntityKeys, ForeignKeyDetails>>
    | Record<string, never>;
  referencedBy:
    | Partial<Record<EntityKeys, ReferencedByDetails>>
    | Record<string, never>;
};

export type FullEntityRelationships = {
  selfReferential: EntityKeys[];
  manyToMany: EntityKeys[];
  oneToOne: EntityKeys[];
  manyToOne: EntityKeys[];
  oneToMany: EntityKeys[];
  undefined: EntityKeys[];
  inverseReferences: EntityKeys[];
  relationshipDetails: RelationshipDetails;
};

export const asEntityRelationships = (
  data: any
): Record<EntityKeys, FullEntityRelationships> => {
  return data as Record<EntityKeys, FullEntityRelationships>;
};

export const entityRelationships = {
  aiModelEndpoint: {
    selfReferential: [],
    manyToMany: ["aiEndpoint", "aiModel"],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "aiModelEndpoint",
      tableName: "ai_model_endpoint",
      foreignKeys: {
        aiEndpoint: {
          foreignTable: "ai_endpoint",
          foreignEntity: "aiEndpoint",
          column: "ai_endpoint_id",
          fieldName: "ai_endpoint_id",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "ai_model_endpoint_ai_endpoint_id_fkey",
        },
        aiModel: {
          foreignTable: "ai_model",
          foreignEntity: "aiModel",
          column: "ai_model_id",
          fieldName: "ai_model_id",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "ai_model_endpoint_ai_model_id_fkey",
        },
      },
      referencedBy: {},
    },
  },
  flashcardHistory: {
    selfReferential: [],
    manyToMany: ["flashcardData"],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "flashcardHistory",
      tableName: "flashcard_history",
      foreignKeys: {
        flashcardData: {
          foreignTable: "flashcard_data",
          foreignEntity: "flashcardData",
          column: "flashcard_id",
          fieldName: "flashcard_id",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "flashcard_history_flashcard_id_fkey",
        },
      },
      referencedBy: {},
    },
  },
  flashcardSets: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: ["flashcardSetRelations"],
    relationshipDetails: {
      entityName: "flashcardSets",
      tableName: "flashcard_sets",
      foreignKeys: {},
      referencedBy: {
        flashcardSetRelations: {
          foreignTable: "flashcard_set_relations",
          foreignEntity: "flashcardSetRelations",
          field: "set_id",
          column: "set_id",
          foreignField: "set_id",
          foreignColumn: "set_id",
          constraintName: "flashcard_set_relations_set_id_fkey",
        },
      },
    },
  },
  emails: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "emails",
      tableName: "emails",
      foreignKeys: {},
      referencedBy: {},
    },
  },
  flashcardSetRelations: {
    selfReferential: [],
    manyToMany: ["flashcardData", "flashcardSets"],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "flashcardSetRelations",
      tableName: "flashcard_set_relations",
      foreignKeys: {
        flashcardData: {
          foreignTable: "flashcard_data",
          foreignEntity: "flashcardData",
          column: "flashcard_id",
          fieldName: "flashcard_id",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "flashcard_set_relations_flashcard_id_fkey",
        },
        flashcardSets: {
          foreignTable: "flashcard_sets",
          foreignEntity: "flashcardSets",
          column: "set_id",
          fieldName: "set_id",
          foreignField: "set_id",
          foreignColumn: "set_id",
          relationshipType: "many-to-many",
          constraintName: "flashcard_set_relations_set_id_fkey",
        },
      },
      referencedBy: {},
    },
  },
  flashcardImages: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: ["flashcardData"],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "flashcardImages",
      tableName: "flashcard_images",
      foreignKeys: {
        flashcardData: {
          foreignTable: "flashcard_data",
          foreignEntity: "flashcardData",
          column: "flashcard_id",
          fieldName: "flashcard_id",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-one",
          constraintName: "flashcard_images_flashcard_id_fkey",
        },
      },
      referencedBy: {},
    },
  },
  aiSettings: {
    selfReferential: [],
    manyToMany: ["aiEndpoint", "aiModel", "aiProvider"],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "aiSettings",
      tableName: "ai_settings",
      foreignKeys: {
        aiEndpoint: {
          foreignTable: "ai_endpoint",
          foreignEntity: "aiEndpoint",
          column: "ai_endpoint",
          fieldName: "ai_endpoint",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "ai_settings_ai_endpoint_fkey",
        },
        aiModel: {
          foreignTable: "ai_model",
          foreignEntity: "aiModel",
          column: "ai_model",
          fieldName: "ai_model",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "ai_settings_ai_model_fkey",
        },
        aiProvider: {
          foreignTable: "ai_provider",
          foreignEntity: "aiProvider",
          column: "ai_provider",
          fieldName: "ai_provider",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "ai_settings_ai_provider_fkey",
        },
      },
      referencedBy: {},
    },
  },
  messageTemplate: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: ["messageBroker"],
    relationshipDetails: {
      entityName: "messageTemplate",
      tableName: "message_template",
      foreignKeys: {},
      referencedBy: {
        messageBroker: {
          foreignTable: "message_broker",
          foreignEntity: "messageBroker",
          field: "message_id",
          column: "message_id",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "message_broker_message_id_fkey",
        },
      },
    },
  },
  flashcardData: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [
      "flashcardHistory",
      "flashcardSetRelations",
      "flashcardImages",
    ],
    relationshipDetails: {
      entityName: "flashcardData",
      tableName: "flashcard_data",
      foreignKeys: {},
      referencedBy: {
        flashcardHistory: {
          foreignTable: "flashcard_history",
          foreignEntity: "flashcardHistory",
          field: "flashcard_id",
          column: "flashcard_id",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "flashcard_history_flashcard_id_fkey",
        },
        flashcardSetRelations: {
          foreignTable: "flashcard_set_relations",
          foreignEntity: "flashcardSetRelations",
          field: "flashcard_id",
          column: "flashcard_id",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "flashcard_set_relations_flashcard_id_fkey",
        },
        flashcardImages: {
          foreignTable: "flashcard_images",
          foreignEntity: "flashcardImages",
          field: "flashcard_id",
          column: "flashcard_id",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "flashcard_images_flashcard_id_fkey",
        },
      },
    },
  },
  recipeDisplay: {
    selfReferential: [],
    manyToMany: ["displayOption", "recipe"],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "recipeDisplay",
      tableName: "recipe_display",
      foreignKeys: {
        displayOption: {
          foreignTable: "display_option",
          foreignEntity: "displayOption",
          column: "display",
          fieldName: "display",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "recipe_display_display_fkey",
        },
        recipe: {
          foreignTable: "recipe",
          foreignEntity: "recipe",
          column: "recipe",
          fieldName: "recipe",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "recipe_display_recipe_fkey",
        },
      },
      referencedBy: {},
    },
  },
  recipeProcessor: {
    selfReferential: [],
    manyToMany: ["processor", "recipe"],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "recipeProcessor",
      tableName: "recipe_processor",
      foreignKeys: {
        processor: {
          foreignTable: "processor",
          foreignEntity: "processor",
          column: "processor",
          fieldName: "processor",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "recipe_processors_processor_fkey",
        },
        recipe: {
          foreignTable: "recipe",
          foreignEntity: "recipe",
          column: "recipe",
          fieldName: "recipe",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "recipe_processors_recipe_fkey",
        },
      },
      referencedBy: {},
    },
  },
  aiProvider: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: ["aiSettings", "aiModel"],
    relationshipDetails: {
      entityName: "aiProvider",
      tableName: "ai_provider",
      foreignKeys: {},
      referencedBy: {
        aiSettings: {
          foreignTable: "ai_settings",
          foreignEntity: "aiSettings",
          field: "ai_provider",
          column: "ai_provider",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "ai_settings_ai_provider_fkey",
        },
        aiModel: {
          foreignTable: "ai_model",
          foreignEntity: "aiModel",
          field: "model_provider",
          column: "model_provider",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "ai_model_model_provider_fkey",
        },
      },
    },
  },
  messageBroker: {
    selfReferential: [],
    manyToMany: ["broker", "messageTemplate"],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "messageBroker",
      tableName: "message_broker",
      foreignKeys: {
        broker: {
          foreignTable: "broker",
          foreignEntity: "broker",
          column: "broker_id",
          fieldName: "broker_id",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "message_broker_broker_id_fkey",
        },
        messageTemplate: {
          foreignTable: "message_template",
          foreignEntity: "messageTemplate",
          column: "message_id",
          fieldName: "message_id",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "message_broker_message_id_fkey",
        },
      },
      referencedBy: {},
    },
  },
  aiEndpoint: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: ["aiModelEndpoint", "aiSettings"],
    relationshipDetails: {
      entityName: "aiEndpoint",
      tableName: "ai_endpoint",
      foreignKeys: {},
      referencedBy: {
        aiModelEndpoint: {
          foreignTable: "ai_model_endpoint",
          foreignEntity: "aiModelEndpoint",
          field: "ai_endpoint_id",
          column: "ai_endpoint_id",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "ai_model_endpoint_ai_endpoint_id_fkey",
        },
        aiSettings: {
          foreignTable: "ai_settings",
          foreignEntity: "aiSettings",
          field: "ai_endpoint",
          column: "ai_endpoint",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "ai_settings_ai_endpoint_fkey",
        },
      },
    },
  },
  action: {
    selfReferential: [],
    manyToMany: ["automationMatrix", "transformer"],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "action",
      tableName: "action",
      foreignKeys: {
        automationMatrix: {
          foreignTable: "automation_matrix",
          foreignEntity: "automationMatrix",
          column: "matrix",
          fieldName: "matrix",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "action_matrix_fkey",
        },
        transformer: {
          foreignTable: "transformer",
          foreignEntity: "transformer",
          column: "transformer",
          fieldName: "transformer",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "action_transformer_fkey",
        },
      },
      referencedBy: {},
    },
  },
  aiModel: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: ["aiProvider"],
    oneToMany: [],
    undefined: [],
    inverseReferences: ["aiModelEndpoint", "aiSettings", "recipeModel"],
    relationshipDetails: {
      entityName: "aiModel",
      tableName: "ai_model",
      foreignKeys: {
        aiProvider: {
          foreignTable: "ai_provider",
          foreignEntity: "aiProvider",
          column: "model_provider",
          fieldName: "model_provider",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-one",
          constraintName: "ai_model_model_provider_fkey",
        },
      },
      referencedBy: {
        aiModelEndpoint: {
          foreignTable: "ai_model_endpoint",
          foreignEntity: "aiModelEndpoint",
          field: "ai_model_id",
          column: "ai_model_id",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "ai_model_endpoint_ai_model_id_fkey",
        },
        aiSettings: {
          foreignTable: "ai_settings",
          foreignEntity: "aiSettings",
          field: "ai_model",
          column: "ai_model",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "ai_settings_ai_model_fkey",
        },
        recipeModel: {
          foreignTable: "recipe_model",
          foreignEntity: "recipeModel",
          field: "ai_model",
          column: "ai_model",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "recipe_model_ai_model_fkey",
        },
      },
    },
  },
  automationMatrix: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: ["action", "automationBoundaryBroker"],
    relationshipDetails: {
      entityName: "automationMatrix",
      tableName: "automation_matrix",
      foreignKeys: {},
      referencedBy: {
        action: {
          foreignTable: "action",
          foreignEntity: "action",
          field: "matrix",
          column: "matrix",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "action_matrix_fkey",
        },
        automationBoundaryBroker: {
          foreignTable: "automation_boundary_broker",
          foreignEntity: "automationBoundaryBroker",
          field: "matrix",
          column: "matrix",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "boundary_brokers_matrix_fkey",
        },
      },
    },
  },
  fileStructure: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "fileStructure",
      tableName: "file_structure",
      foreignKeys: {},
      referencedBy: {},
    },
  },
  dataInputComponent: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: ["broker"],
    relationshipDetails: {
      entityName: "dataInputComponent",
      tableName: "data_input_component",
      foreignKeys: {},
      referencedBy: {
        broker: {
          foreignTable: "broker",
          foreignEntity: "broker",
          field: "custom_source_component",
          column: "custom_source_component",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "broker_custom_component_fkey",
        },
      },
    },
  },
  dataOutputComponent: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "dataOutputComponent",
      tableName: "data_output_component",
      foreignKeys: {},
      referencedBy: {},
    },
  },
  extractor: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "extractor",
      tableName: "extractor",
      foreignKeys: {},
      referencedBy: {},
    },
  },
  recipe: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [
      "recipeDisplay",
      "recipeProcessor",
      "recipeModel",
      "recipeBroker",
      "recipeTool",
      "recipeFunction",
    ],
    relationshipDetails: {
      entityName: "recipe",
      tableName: "recipe",
      foreignKeys: {},
      referencedBy: {
        recipeDisplay: {
          foreignTable: "recipe_display",
          foreignEntity: "recipeDisplay",
          field: "recipe",
          column: "recipe",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "recipe_display_recipe_fkey",
        },
        recipeProcessor: {
          foreignTable: "recipe_processor",
          foreignEntity: "recipeProcessor",
          field: "recipe",
          column: "recipe",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "recipe_processors_recipe_fkey",
        },
        recipeModel: {
          foreignTable: "recipe_model",
          foreignEntity: "recipeModel",
          field: "recipe",
          column: "recipe",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "recipe_model_recipe_fkey",
        },
        recipeBroker: {
          foreignTable: "recipe_broker",
          foreignEntity: "recipeBroker",
          field: "recipe",
          column: "recipe",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "recipe_broker_recipe_fkey",
        },
        recipeTool: {
          foreignTable: "recipe_tool",
          foreignEntity: "recipeTool",
          field: "recipe",
          column: "recipe",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "recipe_tools_recipe_fkey",
        },
        recipeFunction: {
          foreignTable: "recipe_function",
          foreignEntity: "recipeFunction",
          field: "recipe",
          column: "recipe",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "recipe_function_recipe_fkey",
        },
      },
    },
  },
  recipeBroker: {
    selfReferential: [],
    manyToMany: ["broker", "recipe"],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "recipeBroker",
      tableName: "recipe_broker",
      foreignKeys: {
        broker: {
          foreignTable: "broker",
          foreignEntity: "broker",
          column: "broker",
          fieldName: "broker",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "recipe_broker_broker_fkey",
        },
        recipe: {
          foreignTable: "recipe",
          foreignEntity: "recipe",
          column: "recipe",
          fieldName: "recipe",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "recipe_broker_recipe_fkey",
        },
      },
      referencedBy: {},
    },
  },
  recipeModel: {
    selfReferential: [],
    manyToMany: ["aiModel", "recipe"],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "recipeModel",
      tableName: "recipe_model",
      foreignKeys: {
        aiModel: {
          foreignTable: "ai_model",
          foreignEntity: "aiModel",
          column: "ai_model",
          fieldName: "ai_model",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "recipe_model_ai_model_fkey",
        },
        recipe: {
          foreignTable: "recipe",
          foreignEntity: "recipe",
          column: "recipe",
          fieldName: "recipe",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "recipe_model_recipe_fkey",
        },
      },
      referencedBy: {},
    },
  },
  systemFunction: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: ["registeredFunction"],
    oneToMany: [],
    undefined: [],
    inverseReferences: ["tool", "recipeFunction"],
    relationshipDetails: {
      entityName: "systemFunction",
      tableName: "system_function",
      foreignKeys: {
        registeredFunction: {
          foreignTable: "registered_function",
          foreignEntity: "registeredFunction",
          column: "rf_id",
          fieldName: "rf_id",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-one",
          constraintName: "system_function_function_fkey",
        },
      },
      referencedBy: {
        tool: {
          foreignTable: "tool",
          foreignEntity: "tool",
          field: "system_function",
          column: "system_function",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "tool_system_function_fkey",
        },
        recipeFunction: {
          foreignTable: "recipe_function",
          foreignEntity: "recipeFunction",
          field: "function",
          column: "function",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "recipe_function_function_fkey",
        },
      },
    },
  },
  tool: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: ["systemFunction"],
    oneToMany: [],
    undefined: [],
    inverseReferences: ["recipeTool"],
    relationshipDetails: {
      entityName: "tool",
      tableName: "tool",
      foreignKeys: {
        systemFunction: {
          foreignTable: "system_function",
          foreignEntity: "systemFunction",
          column: "system_function",
          fieldName: "system_function",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-one",
          constraintName: "tool_system_function_fkey",
        },
      },
      referencedBy: {
        recipeTool: {
          foreignTable: "recipe_tool",
          foreignEntity: "recipeTool",
          field: "tool",
          column: "tool",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "recipe_tools_tool_fkey",
        },
      },
    },
  },
  bucketStructures: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "bucketStructures",
      tableName: "bucket_structures",
      foreignKeys: {},
      referencedBy: {},
    },
  },
  registeredFunction: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: ["broker"],
    oneToMany: [],
    undefined: [],
    inverseReferences: ["systemFunction", "arg"],
    relationshipDetails: {
      entityName: "registeredFunction",
      tableName: "registered_function",
      foreignKeys: {
        broker: {
          foreignTable: "broker",
          foreignEntity: "broker",
          column: "return_broker",
          fieldName: "return_broker",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-one",
          constraintName: "registered_function_return_broker_fkey",
        },
      },
      referencedBy: {
        systemFunction: {
          foreignTable: "system_function",
          foreignEntity: "systemFunction",
          field: "rf_id",
          column: "rf_id",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "system_function_function_fkey",
        },
        arg: {
          foreignTable: "arg",
          foreignEntity: "arg",
          field: "registered_function",
          column: "registered_function",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "args_registered_function_fkey",
        },
      },
    },
  },
  arg: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: ["registeredFunction"],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "arg",
      tableName: "arg",
      foreignKeys: {
        registeredFunction: {
          foreignTable: "registered_function",
          foreignEntity: "registeredFunction",
          column: "registered_function",
          fieldName: "registered_function",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-one",
          constraintName: "args_registered_function_fkey",
        },
      },
      referencedBy: {},
    },
  },
  automationBoundaryBroker: {
    selfReferential: [],
    manyToMany: ["broker", "automationMatrix"],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "automationBoundaryBroker",
      tableName: "automation_boundary_broker",
      foreignKeys: {
        broker: {
          foreignTable: "broker",
          foreignEntity: "broker",
          column: "broker",
          fieldName: "broker",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "boundary_brokers_broker_fkey",
        },
        automationMatrix: {
          foreignTable: "automation_matrix",
          foreignEntity: "automationMatrix",
          column: "matrix",
          fieldName: "matrix",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "boundary_brokers_matrix_fkey",
        },
      },
      referencedBy: {},
    },
  },
  broker: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: ["dataInputComponent"],
    oneToMany: [],
    undefined: [],
    inverseReferences: [
      "messageBroker",
      "recipeBroker",
      "registeredFunction",
      "automationBoundaryBroker",
    ],
    relationshipDetails: {
      entityName: "broker",
      tableName: "broker",
      foreignKeys: {
        dataInputComponent: {
          foreignTable: "data_input_component",
          foreignEntity: "dataInputComponent",
          column: "custom_source_component",
          fieldName: "custom_source_component",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-one",
          constraintName: "broker_custom_component_fkey",
        },
      },
      referencedBy: {
        messageBroker: {
          foreignTable: "message_broker",
          foreignEntity: "messageBroker",
          field: "broker_id",
          column: "broker_id",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "message_broker_broker_id_fkey",
        },
        recipeBroker: {
          foreignTable: "recipe_broker",
          foreignEntity: "recipeBroker",
          field: "broker",
          column: "broker",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "recipe_broker_broker_fkey",
        },
        registeredFunction: {
          foreignTable: "registered_function",
          foreignEntity: "registeredFunction",
          field: "return_broker",
          column: "return_broker",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "registered_function_return_broker_fkey",
        },
        automationBoundaryBroker: {
          foreignTable: "automation_boundary_broker",
          foreignEntity: "automationBoundaryBroker",
          field: "broker",
          column: "broker",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "boundary_brokers_broker_fkey",
        },
      },
    },
  },
  displayOption: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: ["recipeDisplay"],
    relationshipDetails: {
      entityName: "displayOption",
      tableName: "display_option",
      foreignKeys: {},
      referencedBy: {
        recipeDisplay: {
          foreignTable: "recipe_display",
          foreignEntity: "recipeDisplay",
          field: "display",
          column: "display",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "recipe_display_display_fkey",
        },
      },
    },
  },
  processor: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: ["recipeProcessor", "processor"],
    relationshipDetails: {
      entityName: "processor",
      tableName: "processor",
      foreignKeys: {
        selfReference: {
          foreignTable: "self_reference",
          foreignEntity: "self_reference",
          column: "depends_default",
          fieldName: "depends_default",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "self-referential",
          constraintName: "processors_depends_default_fkey",
        },
      },
      referencedBy: {
        recipeProcessor: {
          foreignTable: "recipe_processor",
          foreignEntity: "recipeProcessor",
          field: "processor",
          column: "processor",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "recipe_processors_processor_fkey",
        },
      },
    },
  },
  recipeFunction: {
    selfReferential: [],
    manyToMany: ["systemFunction", "recipe"],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "recipeFunction",
      tableName: "recipe_function",
      foreignKeys: {
        systemFunction: {
          foreignTable: "system_function",
          foreignEntity: "systemFunction",
          column: "function",
          fieldName: "function",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "recipe_function_function_fkey",
        },
        recipe: {
          foreignTable: "recipe",
          foreignEntity: "recipe",
          column: "recipe",
          fieldName: "recipe",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "recipe_function_recipe_fkey",
        },
      },
      referencedBy: {},
    },
  },
  bucketTreeStructures: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "bucketTreeStructures",
      tableName: "bucket_tree_structures",
      foreignKeys: {},
      referencedBy: {},
    },
  },
  recipeTool: {
    selfReferential: [],
    manyToMany: ["recipe", "tool"],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "recipeTool",
      tableName: "recipe_tool",
      foreignKeys: {
        recipe: {
          foreignTable: "recipe",
          foreignEntity: "recipe",
          column: "recipe",
          fieldName: "recipe",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "recipe_tools_recipe_fkey",
        },
        tool: {
          foreignTable: "tool",
          foreignEntity: "tool",
          column: "tool",
          fieldName: "tool",
          foreignField: "id",
          foreignColumn: "id",
          relationshipType: "many-to-many",
          constraintName: "recipe_tools_tool_fkey",
        },
      },
      referencedBy: {},
    },
  },
  transformer: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: ["action"],
    relationshipDetails: {
      entityName: "transformer",
      tableName: "transformer",
      foreignKeys: {},
      referencedBy: {
        action: {
          foreignTable: "action",
          foreignEntity: "action",
          field: "transformer",
          column: "transformer",
          foreignField: "id",
          foreignColumn: "id",
          constraintName: "action_transformer_fkey",
        },
      },
    },
  },
  userPreferences: {
    selfReferential: [],
    manyToMany: [],
    oneToOne: [],
    manyToOne: [],
    oneToMany: [],
    undefined: [],
    inverseReferences: [],
    relationshipDetails: {
      entityName: "userPreferences",
      tableName: "user_preferences",
      foreignKeys: {},
      referencedBy: {},
    },
  },
} as const;
