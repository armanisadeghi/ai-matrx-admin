// import {createTypeReference, DataType, FieldConverter, TableRelationship, TypeBrand} from "@/types/tableSchemaTypes";
//
//
// export const initialSchemasFake = {
//     action: {
//         name: {
//             frontend: 'action',
//             backend: 'action',
//             database: 'action',
//             pretty: 'Action',
//             component: 'Action',
//         },
//         schemaType: 'table' as const,
//         fields: {
//             id: {},
//             name: {},
//             matrix: {},
//             transformer: {},
//             nodeType: {
//                 alts: {
//                     frontend: 'nodeType',
//                     backend: 'node_type',
//                     database: 'node_type',
//                     db_p: 'p_node_type',
//                     pretty: 'Node Type',
//                     component: 'NodeType',
//                     kebab: 'node-type',
//                 },
//                 type: 'string',
//                 format: "single",
//                 structure: {
//                     structure: "simple",
//                     typeReference: createTypeReference<string>(),
//                 }
//             },
//             referenceId: {},
//             automationMatrixReference: {},
//             transformerReference: {
//                 alts: {
//                     frontend: 'transformerReference',
//                     backend: 'transformer_reference',
//                     database: 'ref_transformer',
//                     db_p: 'p_ref_transformer',
//                     pretty: 'Transformer Reference',
//                     component: 'TransformerReference',
//                     kebab: 'transformerReference',
//                 },
//                 type: 'string',
//                 format: 'single',
//                 structure: {
//                     structure: 'foreignKey',
//                     typeReference: createTypeReference<TransformerType>(),
//                 }
//             },
//         },
//         relationships: {
//             fetchStrategy: "m2mAndFk",
//             foreignKeys: [
//                 {column: 'matrix', relatedTable: 'automation_matrix', relatedColumn: 'id'},
//                 {column: 'transformer', relatedTable: 'transformer', relatedColumn: 'id'}
//             ],
//             inverseForeignKeys: [],
//             manyToMany: [],
//
//         }
//     },
//     aiEndpoint: {
//         name: {},
//         schemaType: {},
//         fields: {},
//         relationships: {},
//     },
//     transformer: {
//         name: {},
//         schemaType: {},
//         fields: {},
//         relationships: {},
//     },
//     aiModel: {
//         name: {},
//         schemaType: {},
//         fields: {},
//         relationships: {},
//     },
//     arg: {
//         name: {},
//         schemaType: {},
//         fields: {},
//         relationships: {},
//     },
// };
//
//
//
//
// export type TableSchemaFull = {
//     name: {
//         frontend: string;
//         backend: string;
//         database: string;
//         pretty: string;
//         [key: string]: string;
//     };
//     schemaType: 'table' | 'view' | 'function' | 'procedure';
//     fields: Record<string, {
//         alts: {
//             frontend: string;
//             backend: string;
//             database: string;
//             [key: string]: string;
//         };
//         type: DataType;
//         format: 'single' | 'array' | 'object';
//         structure: {
//             structure: 'simple' | 'foreignKey' | 'inverseForeignKey';
//             typeReference: TypeBrand<any>;
//             databaseTable?: TableSchemaFull['name']['database'];
//         };
//     }>;
//     relationships: {
//         fetchStrategy: string;
//         foreignKeys: Array<TableRelationship['foreignKeys']>;
//         inverseForeignKeys: Array<TableRelationship['inverseForeignKeys']>;
//         manyToMany: Array<TableRelationship['manyToMany']>;
//     };
// };
//
//
//
// type InferFieldTypeOld<T extends FieldConverter<any>> =
//     T['type'] extends 'string' ? string :
//     T['type'] extends 'number' ? number :
//     T['type'] extends 'boolean' ? boolean :
//     T['type'] extends 'date' ? Date :
//     // T['type'] extends 'array' ? Array<InferFieldType<T['structure']['typeReference']>> :
//     T['type'] extends 'object' ? object :
//     T['type'] extends 'null' ? null :
//     T['type'] extends 'undefined' ? undefined :
//     T['type'] extends 'function' ? (...args: any[]) => any :
//     T['type'] extends 'symbol' ? symbol :
//     T['type'] extends 'bigint' ? bigint :
//     T['type'] extends 'map' ? Map<any, any> :
//     T['type'] extends 'set' ? Set<any> :
//     T['type'] extends 'tuple' ? any[] :   // For simplicity, assuming tuple as array for now
//     T['type'] extends 'enum' ? any :      // Handle enum appropriately if you have more specific requirements
//     T['type'] extends 'union' ? any :     // Handle union types
//     T['type'] extends 'intersection' ? any : // Handle intersection types
//     T['type'] extends 'literal' ? any :   // Handle literal types
//     T['type'] extends 'void' ? void :
//     T['type'] extends 'never' ? never :
//     T['type'] extends 'any' ? any :
//     unknown;


import {SchemaTypes} from "@/utils/schema/initialSchemas";
import {SchemaRegistry, TypeBrand} from "@/types/tableSchemaTypes";

const initialSchemas: SchemaRegistry = {
    action: {
        tableNameVariations: {
            frontendName: 'action',
            backendName: 'action',
            databaseName: 'action',
            prettyName: 'Action',
            componentName: 'Action',
            kebabName: 'action',
        },
        schemaType: 'table' as const,
        tableFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: 255,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:3' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
            matrix: {
                fieldNameVariations: {
                    frontendName: 'matrix',
                    backendName: 'matrix',
                    databaseName: 'matrix',
                    sqlFunctionRef: 'p_matrix',
                    prettyName: 'Matrix',
                    componentName: 'Matrix',
                    kebabName: 'matrix',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
            transformer: {
                fieldNameVariations: {
                    frontendName: 'transformer',
                    backendName: 'transformer',
                    databaseName: 'transformer',
                    sqlFunctionRef: 'p_transformer',
                    prettyName: 'Transformer',
                    componentName: 'Transformer',
                    kebabName: 'transformer',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
            nodeType: {
                fieldNameVariations: {
                    frontendName: 'nodeType',
                    backendName: 'node_type',
                    databaseName: 'node_type',
                    sqlFunctionRef: 'p_node_type',
                    prettyName: 'Node Type',
                    componentName: 'NodeType',
                    kebabName: 'node-type',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: 50,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input:50' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
            referenceId: {
                fieldNameVariations: {
                    frontendName: 'referenceId',
                    backendName: 'reference_id',
                    databaseName: 'reference_id',
                    sqlFunctionRef: 'p_reference_id',
                    prettyName: 'Reference Id',
                    componentName: 'ReferenceId',
                    kebabName: 'reference-id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'action',
            },
            automationMatrixReference: {
                fieldNameVariations: {
                    frontendName: 'automationMatrixReference',
                    backendName: 'automation_matrix_reference',
                    databaseName: 'ref_automation_matrix',
                    sqlFunctionRef: 'p_ref_automation_matrix',
                    prettyName: 'Automation Matrix Reference',
                    componentName: 'AutomationMatrixReference',
                    kebabName: 'automation-matrixReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<SchemaTypes['automation_matrix']>,
                databaseTable: 'automation_matrix',
            },
            transformerReference: {
                fieldNameVariations: {
                    frontendName: 'transformerReference',
                    backendName: 'transformer_reference',
                    databaseName: 'ref_transformer',
                    sqlFunctionRef: 'p_ref_transformer',
                    prettyName: 'Transformer Reference',
                    componentName: 'TransformerReference',
                    kebabName: 'transformerReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<SchemaTypes['transformer']>,
                databaseTable: 'transformer',
            },
        },
        defaultFetchStrategy: 'm2mAndFk',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'matrix',
                relatedTable: 'automation_matrix',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'foreignKey',
                column: 'transformer',
                relatedTable: 'transformer',
                relatedColumn: 'id',
                junctionTable: null
            }
        ],
    },
    broker: {
        tableNameVariations: {
            frontendName: 'broker',
            backendName: 'broker',
            databaseName: 'broker',
            prettyName: 'Broker',
            componentName: 'Broker',
            kebabName: 'broker',
        },
        schemaType: 'table' as const,
        tableFields: {
            id: {
                fieldNameVariations: {
                    frontendName: 'id',
                    backendName: 'id',
                    databaseName: 'id',
                    sqlFunctionRef: 'p_id',
                    prettyName: 'Id',
                    componentName: 'Id',
                    kebabName: 'id',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "getUUID()" as const,
                isPrimaryKey: true,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'broker',
            },
            name: {
                fieldNameVariations: {
                    frontendName: 'name',
                    backendName: 'name',
                    databaseName: 'name',
                    sqlFunctionRef: 'p_name',
                    prettyName: 'Name',
                    componentName: 'Name',
                    kebabName: 'name',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'broker',
            },
            value: {
                fieldNameVariations: {
                    frontendName: 'value',
                    backendName: 'value',
                    databaseName: 'value',
                    sqlFunctionRef: 'p_value',
                    prettyName: 'Value',
                    componentName: 'Value',
                    kebabName: 'value',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'broker',
            },
            dataType: {
                fieldNameVariations: {
                    frontendName: 'dataType',
                    backendName: 'data_type',
                    databaseName: 'data_type',
                    sqlFunctionRef: 'p_data_type',
                    prettyName: 'Data Type',
                    componentName: 'DataType',
                    kebabName: 'data-type',
                } as const,
                dataType: 'string' as const,
                isRequired: true,
                maxLength: null,
                isArray: false,
                defaultValue: "str" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"bool" | "dict" | "float" | "int" | "list" | "str" | "url" | undefined>,
                databaseTable: 'broker',
            },
            ready: {
                fieldNameVariations: {
                    frontendName: 'ready',
                    backendName: 'ready',
                    databaseName: 'ready',
                    sqlFunctionRef: 'p_ready',
                    prettyName: 'Ready',
                    componentName: 'Ready',
                    kebabName: 'ready',
                } as const,
                dataType: 'boolean' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "false" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'switch' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<boolean>,
                databaseTable: 'broker',
            },
            defaultSource: {
                fieldNameVariations: {
                    frontendName: 'defaultSource',
                    backendName: 'default_source',
                    databaseName: 'default_source',
                    sqlFunctionRef: 'p_default_source',
                    prettyName: 'Default Source',
                    componentName: 'DefaultSource',
                    kebabName: 'default-source',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "none" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"api" | "chance" | "database" | "environment" | "file" | "function" | "generated_data" | "none" | "user_input" | undefined>,
                databaseTable: 'broker',
            },
            displayName: {
                fieldNameVariations: {
                    frontendName: 'displayName',
                    backendName: 'display_name',
                    databaseName: 'display_name',
                    sqlFunctionRef: 'p_display_name',
                    prettyName: 'Display Name',
                    componentName: 'DisplayName',
                    kebabName: 'display-name',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'broker',
            },
            description: {
                fieldNameVariations: {
                    frontendName: 'description',
                    backendName: 'description',
                    databaseName: 'description',
                    sqlFunctionRef: 'p_description',
                    prettyName: 'Description',
                    componentName: 'Description',
                    kebabName: 'description',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'broker',
            },
            tooltip: {
                fieldNameVariations: {
                    frontendName: 'tooltip',
                    backendName: 'tooltip',
                    databaseName: 'tooltip',
                    sqlFunctionRef: 'p_tooltip',
                    prettyName: 'Tooltip',
                    componentName: 'Tooltip',
                    kebabName: 'tooltip',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'broker',
            },
            validationRules: {
                fieldNameVariations: {
                    frontendName: 'validationRules',
                    backendName: 'validation_rules',
                    databaseName: 'validation_rules',
                    sqlFunctionRef: 'p_validation_rules',
                    prettyName: 'Validation Rules',
                    componentName: 'ValidationRules',
                    kebabName: 'validation-rules',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'broker',
            },
            sampleEntries: {
                fieldNameVariations: {
                    frontendName: 'sampleEntries',
                    backendName: 'sample_entries',
                    databaseName: 'sample_entries',
                    sqlFunctionRef: 'p_sample_entries',
                    prettyName: 'Sample Entries',
                    componentName: 'SampleEntries',
                    kebabName: 'sample-entries',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'textarea:5' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'broker',
            },
            customSourceComponent: {
                fieldNameVariations: {
                    frontendName: 'customSourceComponent',
                    backendName: 'custom_source_component',
                    databaseName: 'custom_source_component',
                    sqlFunctionRef: 'p_custom_source_component',
                    prettyName: 'Custom Source Component',
                    componentName: 'CustomSourceComponent',
                    kebabName: 'custom-source-component',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'input' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<string>,
                databaseTable: 'broker',
            },
            additionalParams: {
                fieldNameVariations: {
                    frontendName: 'additionalParams',
                    backendName: 'additional_params',
                    databaseName: 'additional_params',
                    sqlFunctionRef: 'p_additional_params',
                    prettyName: 'Additional Params',
                    componentName: 'AdditionalParams',
                    kebabName: 'additional-params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'broker',
            },
            otherSourceParams: {
                fieldNameVariations: {
                    frontendName: 'otherSourceParams',
                    backendName: 'other_source_params',
                    databaseName: 'other_source_params',
                    sqlFunctionRef: 'p_other_source_params',
                    prettyName: 'Other Source Params',
                    componentName: 'OtherSourceParams',
                    kebabName: 'other-source-params',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'broker',
            },
            defaultDestination: {
                fieldNameVariations: {
                    frontendName: 'defaultDestination',
                    backendName: 'default_destination',
                    databaseName: 'default_destination',
                    sqlFunctionRef: 'p_default_destination',
                    prettyName: 'Default Destination',
                    componentName: 'DefaultDestination',
                    kebabName: 'default-destination',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"api_response" | "database" | "file" | "function" | "user_output" | undefined>,
                databaseTable: 'broker',
            },
            outputComponent: {
                fieldNameVariations: {
                    frontendName: 'outputComponent',
                    backendName: 'output_component',
                    databaseName: 'output_component',
                    sqlFunctionRef: 'p_output_component',
                    prettyName: 'Output Component',
                    componentName: 'OutputComponent',
                    kebabName: 'output-component',
                } as const,
                dataType: 'string' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "null" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'select:enum' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<"3DModelViewer" | "AudioOutput" | "BucketList" | "BudgetVisualizer" | "Calendar" | "Carousel" | "Checklist" | "Clock" | "CodeView" | "ComplexMulti" | "DataFlowDiagram" | "DecisionTree" | "DiffViewer" | "FileOutput" | "FitnessTracker" | "Flowchart" | "Form" | "GanttChart" | "GeographicMap" | "GlossaryView" | "Heatmap" | "HorizontalList" | "ImageView" | "InteractiveChart" | "JsonViewer" | "KanbanBoard" | "LaTeXRenderer" | "LiveTraffic" | "LocalEvents" | "MarkdownViewer" | "MealPlanner" | "MindMap" | "NeedNewOption" | "NetworkGraph" | "NewsAggregator" | "PDFViewer" | "PivotTable" | "PlainText" | "Presentation" | "PublicLiveCam" | "RichTextEditor" | "RunCodeBack" | "RunCodeFront" | "SVGEditor" | "SankeyDiagram" | "SatelliteView" | "SocialMediaInfo" | "SpectrumAnalyzer" | "Spreadsheet" | "Table" | "TaskPrioritization" | "Textarea" | "Thermometer" | "Timeline" | "TravelPlanner" | "TreeView" | "UMLDiagram" | "VerticalList" | "VoiceSentimentAnalysis" | "WeatherDashboard" | "WeatherMap" | "WordHighlighter" | "WordMap" | "chatResponse" | "none" | "video" | undefined>,
                databaseTable: 'broker',
            },
            tags: {
                fieldNameVariations: {
                    frontendName: 'tags',
                    backendName: 'tags',
                    databaseName: 'tags',
                    sqlFunctionRef: 'p_tags',
                    prettyName: 'Tags',
                    componentName: 'Tags',
                    kebabName: 'tags',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: false,
                defaultValue: "[]" as const,
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: [],
                defaultComponent: 'json-editor:200' as const,
                structure: 'single' as const,
                isNative: true,
                typeReference: {} as TypeBrand<Record<string, unknown>>,
                databaseTable: 'broker',
            },
            dataInputComponentReference: {
                fieldNameVariations: {
                    frontendName: 'dataInputComponentReference',
                    backendName: 'data_input_component_reference',
                    databaseName: 'ref_data_input_component',
                    sqlFunctionRef: 'p_ref_data_input_component',
                    prettyName: 'Data Input Component Reference',
                    componentName: 'DataInputComponentReference',
                    kebabName: 'data-input-componentReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<SchemaTypes['data_input_component']>,
                databaseTable: 'data_input_component',
            },
            recipeBrokerReference: {
                fieldNameVariations: {
                    frontendName: 'recipeBrokerReference',
                    backendName: 'recipe_broker_reference',
                    databaseName: 'ref_recipe_broker',
                    sqlFunctionRef: 'p_ref_recipe_broker',
                    prettyName: 'Recipe Broker Reference',
                    componentName: 'RecipeBrokerReference',
                    kebabName: 'recipe-brokerReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<SchemaTypes['recipe_broker']>,
                databaseTable: 'recipe_broker',
            },
            registeredFunctionReference: {
                fieldNameVariations: {
                    frontendName: 'registeredFunctionReference',
                    backendName: 'registered_function_reference',
                    databaseName: 'ref_registered_function',
                    sqlFunctionRef: 'p_ref_registered_function',
                    prettyName: 'Registered Function Reference',
                    componentName: 'RegisteredFunctionReference',
                    kebabName: 'registered-functionReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<SchemaTypes['registered_function']>,
                databaseTable: 'registered_function',
            },
            automationBoundaryBrokerReference: {
                fieldNameVariations: {
                    frontendName: 'automationBoundaryBrokerReference',
                    backendName: 'automation_boundary_broker_reference',
                    databaseName: 'ref_automation_boundary_broker',
                    sqlFunctionRef: 'p_ref_automation_boundary_broker',
                    prettyName: 'Automation Boundary Broker Reference',
                    componentName: 'AutomationBoundaryBrokerReference',
                    kebabName: 'automation-boundary-brokerReference',
                } as const,
                dataType: 'object' as const,
                isRequired: false,
                maxLength: null,
                isArray: true,
                defaultValue: [],
                isPrimaryKey: false,
                defaultGeneratorFunction: null,
                validationFunctions: [],
                exclusionRules: ['notCoreField'],
                defaultComponent: 'inline-form:1' as const,
                structure: 'foreignKey' as const,
                isNative: false,
                typeReference: {} as TypeBrand<SchemaTypes['automation_boundary_broker']>,
                databaseTable: 'automation_boundary_broker',
            },
        },
        defaultFetchStrategy: 'fkIfkAndM2M',
        relationships: [
            {
                relationshipType: 'foreignKey',
                column: 'custom_source_component',
                relatedTable: 'data_input_component',
                relatedColumn: 'id',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'recipe_broker',
                relatedColumn: 'broker',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'registered_function',
                relatedColumn: 'return_broker',
                junctionTable: null
            },
            {
                relationshipType: 'inverseForeignKey',
                column: 'id',
                relatedTable: 'automation_boundary_broker',
                relatedColumn: 'broker',
                junctionTable: null
            },
            {
                relationshipType: 'manyToMany',
                column: 'broker',
                relatedTable: 'automation_matrix',
                relatedColumn: 'matrix',
                junctionTable: 'automation_boundary_broker'
            },
            {
                relationshipType: 'manyToMany',
                column: 'broker',
                relatedTable: 'recipe',
                relatedColumn: 'recipe',
                junctionTable: 'recipe_broker'
            }
        ],
    }
};
