// File: utils/schema/lookupSchema.ts
import {EntityNameToCanonicalMap,FieldNameToCanonicalMap,EntityNameFormatMap,FieldNameFormatMap} from '@/types/entityTypes';

export const entityNameToCanonical: EntityNameToCanonicalMap = {
    Action: "action",
    p_action: "action",
    action: "action",
    p_admins: "admins",
    admins: "admins",
    Admins: "admins",
    "ai-agent": "aiAgent",
    AiAgent: "aiAgent",
    aiAgent: "aiAgent",
    ai_agent: "aiAgent",
    "Ai Agent": "aiAgent",
    p_ai_agent: "aiAgent",
    ai_endpoint: "aiEndpoint",
    aiEndpoint: "aiEndpoint",
    p_ai_endpoint: "aiEndpoint",
    AiEndpoint: "aiEndpoint",
    "Ai Endpoint": "aiEndpoint",
    "ai-endpoint": "aiEndpoint",
    "Ai Model": "aiModel",
    AiModel: "aiModel",
    "ai-model": "aiModel",
    p_ai_model: "aiModel",
    ai_model: "aiModel",
    aiModel: "aiModel",
    AiModelEndpoint: "aiModelEndpoint",
    aiModelEndpoint: "aiModelEndpoint",
    ai_model_endpoint: "aiModelEndpoint",
    "ai-model-endpoint": "aiModelEndpoint",
    p_ai_model_endpoint: "aiModelEndpoint",
    "Ai Model Endpoint": "aiModelEndpoint",
    AiProvider: "aiProvider",
    ai_provider: "aiProvider",
    "ai-provider": "aiProvider",
    p_ai_provider: "aiProvider",
    aiProvider: "aiProvider",
    "Ai Provider": "aiProvider",
    AiSettings: "aiSettings",
    ai_settings: "aiSettings",
    "ai-settings": "aiSettings",
    p_ai_settings: "aiSettings",
    aiSettings: "aiSettings",
    "Ai Settings": "aiSettings",
    aiTrainingData: "aiTrainingData",
    p_ai_training_data: "aiTrainingData",
    ai_training_data: "aiTrainingData",
    AiTrainingData: "aiTrainingData",
    "ai-training-data": "aiTrainingData",
    "Ai Training Data": "aiTrainingData",
    applet: "applet",
    Applet: "applet",
    p_applet: "applet",
    arg: "arg",
    Arg: "arg",
    p_arg: "arg",
    audioLabel: "audioLabel",
    audio_label: "audioLabel",
    p_audio_label: "audioLabel",
    "Audio Label": "audioLabel",
    "audio-label": "audioLabel",
    AudioLabel: "audioLabel",
    audio_recording: "audioRecording",
    "Audio Recording": "audioRecording",
    audioRecording: "audioRecording",
    p_audio_recording: "audioRecording",
    "audio-recording": "audioRecording",
    AudioRecording: "audioRecording",
    "audio-recording-users": "audioRecordingUsers",
    p_audio_recording_users: "audioRecordingUsers",
    "Audio Recording Users": "audioRecordingUsers",
    audio_recording_users: "audioRecordingUsers",
    audioRecordingUsers: "audioRecordingUsers",
    AudioRecordingUsers: "audioRecordingUsers",
    "Automation Boundary Broker": "automationBoundaryBroker",
    automationBoundaryBroker: "automationBoundaryBroker",
    "automation-boundary-broker": "automationBoundaryBroker",
    p_automation_boundary_broker: "automationBoundaryBroker",
    automation_boundary_broker: "automationBoundaryBroker",
    AutomationBoundaryBroker: "automationBoundaryBroker",
    "Automation Matrix": "automationMatrix",
    "automation-matrix": "automationMatrix",
    automation_matrix: "automationMatrix",
    p_automation_matrix: "automationMatrix",
    AutomationMatrix: "automationMatrix",
    automationMatrix: "automationMatrix",
    p_broker: "broker",
    Broker: "broker",
    broker: "broker",
    "Broker Value": "brokerValue",
    "broker-value": "brokerValue",
    BrokerValue: "brokerValue",
    p_broker_value: "brokerValue",
    brokerValue: "brokerValue",
    broker_value: "brokerValue",
    bucket_structures: "bucketStructures",
    "bucket-structures": "bucketStructures",
    "Bucket Structures": "bucketStructures",
    bucketStructures: "bucketStructures",
    p_bucket_structures: "bucketStructures",
    BucketStructures: "bucketStructures",
    BucketTreeStructures: "bucketTreeStructures",
    "Bucket Tree Structures": "bucketTreeStructures",
    p_bucket_tree_structures: "bucketTreeStructures",
    "bucket-tree-structures": "bucketTreeStructures",
    bucketTreeStructures: "bucketTreeStructures",
    bucket_tree_structures: "bucketTreeStructures",
    category: "category",
    p_category: "category",
    Category: "category",
    p_compiled_recipe: "compiledRecipe",
    "Compiled Recipe": "compiledRecipe",
    compiled_recipe: "compiledRecipe",
    CompiledRecipe: "compiledRecipe",
    "compiled-recipe": "compiledRecipe",
    compiledRecipe: "compiledRecipe",
    Conversation: "conversation",
    p_conversation: "conversation",
    conversation: "conversation",
    DataBroker: "dataBroker",
    "data-broker": "dataBroker",
    p_data_broker: "dataBroker",
    data_broker: "dataBroker",
    dataBroker: "dataBroker",
    "Data Broker": "dataBroker",
    dataInputComponent: "dataInputComponent",
    data_input_component: "dataInputComponent",
    p_data_input_component: "dataInputComponent",
    DataInputComponent: "dataInputComponent",
    "Data Input Component": "dataInputComponent",
    "data-input-component": "dataInputComponent",
    "data-output-component": "dataOutputComponent",
    p_data_output_component: "dataOutputComponent",
    dataOutputComponent: "dataOutputComponent",
    "Data Output Component": "dataOutputComponent",
    data_output_component: "dataOutputComponent",
    DataOutputComponent: "dataOutputComponent",
    "display-option": "displayOption",
    p_display_option: "displayOption",
    "Display Option": "displayOption",
    display_option: "displayOption",
    DisplayOption: "displayOption",
    displayOption: "displayOption",
    emails: "emails",
    Emails: "emails",
    p_emails: "emails",
    p_extractor: "extractor",
    Extractor: "extractor",
    extractor: "extractor",
    FileStructure: "fileStructure",
    "file-structure": "fileStructure",
    p_file_structure: "fileStructure",
    "File Structure": "fileStructure",
    fileStructure: "fileStructure",
    file_structure: "fileStructure",
    p_flashcard_data: "flashcardData",
    FlashcardData: "flashcardData",
    flashcard_data: "flashcardData",
    flashcardData: "flashcardData",
    "flashcard-data": "flashcardData",
    "Flashcard Data": "flashcardData",
    "flashcard-history": "flashcardHistory",
    p_flashcard_history: "flashcardHistory",
    "Flashcard History": "flashcardHistory",
    flashcard_history: "flashcardHistory",
    flashcardHistory: "flashcardHistory",
    FlashcardHistory: "flashcardHistory",
    flashcard_images: "flashcardImages",
    FlashcardImages: "flashcardImages",
    "flashcard-images": "flashcardImages",
    "Flashcard Images": "flashcardImages",
    flashcardImages: "flashcardImages",
    p_flashcard_images: "flashcardImages",
    "flashcard-set-relations": "flashcardSetRelations",
    "Flashcard Set Relations": "flashcardSetRelations",
    p_flashcard_set_relations: "flashcardSetRelations",
    flashcard_set_relations: "flashcardSetRelations",
    FlashcardSetRelations: "flashcardSetRelations",
    flashcardSetRelations: "flashcardSetRelations",
    FlashcardSets: "flashcardSets",
    flashcardSets: "flashcardSets",
    flashcard_sets: "flashcardSets",
    "Flashcard Sets": "flashcardSets",
    p_flashcard_sets: "flashcardSets",
    "flashcard-sets": "flashcardSets",
    FullSpectrumPositions: "fullSpectrumPositions",
    full_spectrum_positions: "fullSpectrumPositions",
    "Full Spectrum Positions": "fullSpectrumPositions",
    "full-spectrum-positions": "fullSpectrumPositions",
    p_full_spectrum_positions: "fullSpectrumPositions",
    fullSpectrumPositions: "fullSpectrumPositions",
    p_message: "message",
    Message: "message",
    message: "message",
    message_broker: "messageBroker",
    MessageBroker: "messageBroker",
    messageBroker: "messageBroker",
    "message-broker": "messageBroker",
    "Message Broker": "messageBroker",
    p_message_broker: "messageBroker",
    message_template: "messageTemplate",
    "message-template": "messageTemplate",
    "Message Template": "messageTemplate",
    p_message_template: "messageTemplate",
    messageTemplate: "messageTemplate",
    MessageTemplate: "messageTemplate",
    OrganizationInvitations: "organizationInvitations",
    p_organization_invitations: "organizationInvitations",
    organizationInvitations: "organizationInvitations",
    "Organization Invitations": "organizationInvitations",
    "organization-invitations": "organizationInvitations",
    organization_invitations: "organizationInvitations",
    "organization-members": "organizationMembers",
    p_organization_members: "organizationMembers",
    OrganizationMembers: "organizationMembers",
    "Organization Members": "organizationMembers",
    organizationMembers: "organizationMembers",
    organization_members: "organizationMembers",
    Organizations: "organizations",
    p_organizations: "organizations",
    organizations: "organizations",
    p_permissions: "permissions",
    Permissions: "permissions",
    permissions: "permissions",
    processor: "processor",
    Processor: "processor",
    p_processor: "processor",
    "project-members": "projectMembers",
    "Project Members": "projectMembers",
    p_project_members: "projectMembers",
    project_members: "projectMembers",
    ProjectMembers: "projectMembers",
    projectMembers: "projectMembers",
    Projects: "projects",
    projects: "projects",
    p_projects: "projects",
    recipe: "recipe",
    p_recipe: "recipe",
    Recipe: "recipe",
    p_recipe_broker: "recipeBroker",
    "recipe-broker": "recipeBroker",
    "Recipe Broker": "recipeBroker",
    RecipeBroker: "recipeBroker",
    recipeBroker: "recipeBroker",
    recipe_broker: "recipeBroker",
    recipe_display: "recipeDisplay",
    "Recipe Display": "recipeDisplay",
    recipeDisplay: "recipeDisplay",
    "recipe-display": "recipeDisplay",
    p_recipe_display: "recipeDisplay",
    RecipeDisplay: "recipeDisplay",
    RecipeFunction: "recipeFunction",
    p_recipe_function: "recipeFunction",
    "Recipe Function": "recipeFunction",
    recipeFunction: "recipeFunction",
    "recipe-function": "recipeFunction",
    recipe_function: "recipeFunction",
    recipeMessage: "recipeMessage",
    recipe_message: "recipeMessage",
    "Recipe Message": "recipeMessage",
    p_recipe_message: "recipeMessage",
    RecipeMessage: "recipeMessage",
    "recipe-message": "recipeMessage",
    recipeMessageReorderQueue: "recipeMessageReorderQueue",
    p_recipe_message_reorder_queue: "recipeMessageReorderQueue",
    RecipeMessageReorderQueue: "recipeMessageReorderQueue",
    recipe_message_reorder_queue: "recipeMessageReorderQueue",
    "Recipe Message Reorder Queue": "recipeMessageReorderQueue",
    "recipe-message-reorder-queue": "recipeMessageReorderQueue",
    "recipe-model": "recipeModel",
    RecipeModel: "recipeModel",
    recipeModel: "recipeModel",
    "Recipe Model": "recipeModel",
    recipe_model: "recipeModel",
    p_recipe_model: "recipeModel",
    recipeProcessor: "recipeProcessor",
    recipe_processor: "recipeProcessor",
    "Recipe Processor": "recipeProcessor",
    "recipe-processor": "recipeProcessor",
    p_recipe_processor: "recipeProcessor",
    RecipeProcessor: "recipeProcessor",
    recipe_tool: "recipeTool",
    RecipeTool: "recipeTool",
    "recipe-tool": "recipeTool",
    recipeTool: "recipeTool",
    "Recipe Tool": "recipeTool",
    p_recipe_tool: "recipeTool",
    p_registered_function: "registeredFunction",
    "Registered Function": "registeredFunction",
    "registered-function": "registeredFunction",
    RegisteredFunction: "registeredFunction",
    registeredFunction: "registeredFunction",
    registered_function: "registeredFunction",
    "Scrape Configuration": "scrapeConfiguration",
    ScrapeConfiguration: "scrapeConfiguration",
    "scrape-configuration": "scrapeConfiguration",
    scrape_configuration: "scrapeConfiguration",
    p_scrape_configuration: "scrapeConfiguration",
    scrapeConfiguration: "scrapeConfiguration",
    "scrape-domain": "scrapeDomain",
    scrapeDomain: "scrapeDomain",
    "Scrape Domain": "scrapeDomain",
    scrape_domain: "scrapeDomain",
    ScrapeDomain: "scrapeDomain",
    p_scrape_domain: "scrapeDomain",
    ScrapeDomainDisallowedNotes: "scrapeDomainDisallowedNotes",
    scrape_domain_disallowed_notes: "scrapeDomainDisallowedNotes",
    p_scrape_domain_disallowed_notes: "scrapeDomainDisallowedNotes",
    scrapeDomainDisallowedNotes: "scrapeDomainDisallowedNotes",
    "Scrape Domain Disallowed Notes": "scrapeDomainDisallowedNotes",
    "scrape-domain-disallowed-notes": "scrapeDomainDisallowedNotes",
    scrape_domain_notes: "scrapeDomainNotes",
    "Scrape Domain Notes": "scrapeDomainNotes",
    "scrape-domain-notes": "scrapeDomainNotes",
    scrapeDomainNotes: "scrapeDomainNotes",
    p_scrape_domain_notes: "scrapeDomainNotes",
    ScrapeDomainNotes: "scrapeDomainNotes",
    scrape_domain_quick_scrape_settings: "scrapeDomainQuickScrapeSettings",
    "Scrape Domain Quick Scrape Settings": "scrapeDomainQuickScrapeSettings",
    "scrape-domain-quick-scrape-settings": "scrapeDomainQuickScrapeSettings",
    scrapeDomainQuickScrapeSettings: "scrapeDomainQuickScrapeSettings",
    p_scrape_domain_quick_scrape_settings: "scrapeDomainQuickScrapeSettings",
    ScrapeDomainQuickScrapeSettings: "scrapeDomainQuickScrapeSettings",
    "scrape-domain-robots-txt": "scrapeDomainRobotsTxt",
    ScrapeDomainRobotsTxt: "scrapeDomainRobotsTxt",
    p_scrape_domain_robots_txt: "scrapeDomainRobotsTxt",
    scrapeDomainRobotsTxt: "scrapeDomainRobotsTxt",
    "Scrape Domain Robots Txt": "scrapeDomainRobotsTxt",
    scrape_domain_robots_txt: "scrapeDomainRobotsTxt",
    ScrapeDomainSitemap: "scrapeDomainSitemap",
    scrape_domain_sitemap: "scrapeDomainSitemap",
    "Scrape Domain Sitemap": "scrapeDomainSitemap",
    "scrape-domain-sitemap": "scrapeDomainSitemap",
    p_scrape_domain_sitemap: "scrapeDomainSitemap",
    scrapeDomainSitemap: "scrapeDomainSitemap",
    "scrape-override": "scrapeOverride",
    ScrapeOverride: "scrapeOverride",
    scrapeOverride: "scrapeOverride",
    p_scrape_override: "scrapeOverride",
    "Scrape Override": "scrapeOverride",
    scrape_override: "scrapeOverride",
    p_scrape_override_value: "scrapeOverrideValue",
    "scrape-override-value": "scrapeOverrideValue",
    ScrapeOverrideValue: "scrapeOverrideValue",
    "Scrape Override Value": "scrapeOverrideValue",
    scrapeOverrideValue: "scrapeOverrideValue",
    scrape_override_value: "scrapeOverrideValue",
    "scrape-path-pattern": "scrapePathPattern",
    scrape_path_pattern: "scrapePathPattern",
    p_scrape_path_pattern: "scrapePathPattern",
    scrapePathPattern: "scrapePathPattern",
    "Scrape Path Pattern": "scrapePathPattern",
    ScrapePathPattern: "scrapePathPattern",
    p_scrape_path_pattern_override: "scrapePathPatternOverride",
    "scrape-path-pattern-override": "scrapePathPatternOverride",
    "Scrape Path Pattern Override": "scrapePathPatternOverride",
    scrape_path_pattern_override: "scrapePathPatternOverride",
    scrapePathPatternOverride: "scrapePathPatternOverride",
    ScrapePathPatternOverride: "scrapePathPatternOverride",
    Subcategory: "subcategory",
    p_subcategory: "subcategory",
    subcategory: "subcategory",
    system_function: "systemFunction",
    "system-function": "systemFunction",
    systemFunction: "systemFunction",
    p_system_function: "systemFunction",
    SystemFunction: "systemFunction",
    "System Function": "systemFunction",
    task_assignments: "taskAssignments",
    "task-assignments": "taskAssignments",
    TaskAssignments: "taskAssignments",
    p_task_assignments: "taskAssignments",
    "Task Assignments": "taskAssignments",
    taskAssignments: "taskAssignments",
    TaskAttachments: "taskAttachments",
    p_task_attachments: "taskAttachments",
    "task-attachments": "taskAttachments",
    "Task Attachments": "taskAttachments",
    taskAttachments: "taskAttachments",
    task_attachments: "taskAttachments",
    p_task_comments: "taskComments",
    "task-comments": "taskComments",
    task_comments: "taskComments",
    taskComments: "taskComments",
    "Task Comments": "taskComments",
    TaskComments: "taskComments",
    tasks: "tasks",
    p_tasks: "tasks",
    Tasks: "tasks",
    Tool: "tool",
    tool: "tool",
    p_tool: "tool",
    transformer: "transformer",
    p_transformer: "transformer",
    Transformer: "transformer",
    p_user_preferences: "userPreferences",
    "user-preferences": "userPreferences",
    userPreferences: "userPreferences",
    user_preferences: "userPreferences",
    UserPreferences: "userPreferences",
    "User Preferences": "userPreferences",
    p_wc_claim: "wcClaim",
    wcClaim: "wcClaim",
    "wc-claim": "wcClaim",
    "Wc Claim": "wcClaim",
    wc_claim: "wcClaim",
    WcClaim: "wcClaim",
    WcImpairmentDefinition: "wcImpairmentDefinition",
    wc_impairment_definition: "wcImpairmentDefinition",
    "wc-impairment-definition": "wcImpairmentDefinition",
    p_wc_impairment_definition: "wcImpairmentDefinition",
    "Wc Impairment Definition": "wcImpairmentDefinition",
    wcImpairmentDefinition: "wcImpairmentDefinition",
    wc_injury: "wcInjury",
    wcInjury: "wcInjury",
    WcInjury: "wcInjury",
    "Wc Injury": "wcInjury",
    p_wc_injury: "wcInjury",
    "wc-injury": "wcInjury",
    WcReport: "wcReport",
    "wc-report": "wcReport",
    wcReport: "wcReport",
    "Wc Report": "wcReport",
    p_wc_report: "wcReport",
    wc_report: "wcReport",
};

export const fieldNameToCanonical: FieldNameToCanonicalMap = {
    action: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    matrix: "matrix",
Matrix: "matrix",
p_matrix: "matrix",
    transformer: "transformer",
p_transformer: "transformer",
Transformer: "transformer",
    "node-type": "nodeType",
NodeType: "nodeType",
nodeType: "nodeType",
"Node Type": "nodeType",
p_node_type: "nodeType",
node_type: "nodeType",
    ReferenceId: "referenceId",
reference_id: "referenceId",
p_reference_id: "referenceId",
"Reference Id": "referenceId",
referenceId: "referenceId",
"reference-id": "referenceId"
},
    admins: {
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt"
},
    aiAgent: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_recipe_id: "recipeId",
recipe_id: "recipeId",
"Recipe Id": "recipeId",
recipeId: "recipeId",
RecipeId: "recipeId",
"recipe-id": "recipeId",
    ai_settings_id: "aiSettingsId",
"Ai Settings Id": "aiSettingsId",
aiSettingsId: "aiSettingsId",
AiSettingsId: "aiSettingsId",
p_ai_settings_id: "aiSettingsId",
"ai-settings-id": "aiSettingsId",
    system_message_override: "systemMessageOverride",
systemMessageOverride: "systemMessageOverride",
SystemMessageOverride: "systemMessageOverride",
p_system_message_override: "systemMessageOverride",
"system-message-override": "systemMessageOverride",
"System Message Override": "systemMessageOverride"
},
    aiEndpoint: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_provider: "provider",
provider: "provider",
Provider: "provider",
    Description: "description",
description: "description",
p_description: "description",
    "Additional Cost": "additionalCost",
"additional-cost": "additionalCost",
p_additional_cost: "additionalCost",
additional_cost: "additionalCost",
AdditionalCost: "additionalCost",
additionalCost: "additionalCost",
    cost_details: "costDetails",
p_cost_details: "costDetails",
"Cost Details": "costDetails",
"cost-details": "costDetails",
costDetails: "costDetails",
CostDetails: "costDetails",
    params: "params",
Params: "params",
p_params: "params"
},
    aiModel: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    common_name: "commonName",
commonName: "commonName",
CommonName: "commonName",
"common-name": "commonName",
p_common_name: "commonName",
"Common Name": "commonName",
    model_class: "modelClass",
"Model Class": "modelClass",
p_model_class: "modelClass",
modelClass: "modelClass",
"model-class": "modelClass",
ModelClass: "modelClass",
    p_provider: "provider",
provider: "provider",
Provider: "provider",
    Endpoints: "endpoints",
p_endpoints: "endpoints",
endpoints: "endpoints",
    p_context_window: "contextWindow",
"Context Window": "contextWindow",
context_window: "contextWindow",
"context-window": "contextWindow",
contextWindow: "contextWindow",
ContextWindow: "contextWindow",
    max_tokens: "maxTokens",
"max-tokens": "maxTokens",
MaxTokens: "maxTokens",
"Max Tokens": "maxTokens",
p_max_tokens: "maxTokens",
maxTokens: "maxTokens",
    p_capabilities: "capabilities",
capabilities: "capabilities",
Capabilities: "capabilities",
    p_controls: "controls",
controls: "controls",
Controls: "controls",
    p_model_provider: "modelProvider",
modelProvider: "modelProvider",
model_provider: "modelProvider",
"model-provider": "modelProvider",
ModelProvider: "modelProvider",
"Model Provider": "modelProvider"
},
    aiModelEndpoint: {
    p_id: "id",
Id: "id",
id: "id",
    "Ai Model Id": "aiModelId",
ai_model_id: "aiModelId",
"ai-model-id": "aiModelId",
AiModelId: "aiModelId",
p_ai_model_id: "aiModelId",
aiModelId: "aiModelId",
    aiEndpointId: "aiEndpointId",
"ai-endpoint-id": "aiEndpointId",
ai_endpoint_id: "aiEndpointId",
"Ai Endpoint Id": "aiEndpointId",
AiEndpointId: "aiEndpointId",
p_ai_endpoint_id: "aiEndpointId",
    available: "available",
p_available: "available",
Available: "available",
    EndpointPriority: "endpointPriority",
"endpoint-priority": "endpointPriority",
endpointPriority: "endpointPriority",
p_endpoint_priority: "endpointPriority",
endpoint_priority: "endpointPriority",
"Endpoint Priority": "endpointPriority",
    p_configuration: "configuration",
configuration: "configuration",
Configuration: "configuration",
    p_notes: "notes",
notes: "notes",
Notes: "notes",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt"
},
    aiProvider: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    companyDescription: "companyDescription",
"company-description": "companyDescription",
company_description: "companyDescription",
p_company_description: "companyDescription",
"Company Description": "companyDescription",
CompanyDescription: "companyDescription",
    DocumentationLink: "documentationLink",
p_documentation_link: "documentationLink",
"documentation-link": "documentationLink",
"Documentation Link": "documentationLink",
documentationLink: "documentationLink",
documentation_link: "documentationLink",
    "models-link": "modelsLink",
"Models Link": "modelsLink",
ModelsLink: "modelsLink",
models_link: "modelsLink",
modelsLink: "modelsLink",
p_models_link: "modelsLink"
},
    aiSettings: {
    p_id: "id",
Id: "id",
id: "id",
    AiEndpoint: "aiEndpoint",
ai_endpoint: "aiEndpoint",
p_ai_endpoint: "aiEndpoint",
"Ai Endpoint": "aiEndpoint",
"ai-endpoint": "aiEndpoint",
aiEndpoint: "aiEndpoint",
    AiProvider: "aiProvider",
ai_provider: "aiProvider",
p_ai_provider: "aiProvider",
"Ai Provider": "aiProvider",
aiProvider: "aiProvider",
"ai-provider": "aiProvider",
    "Ai Model": "aiModel",
AiModel: "aiModel",
p_ai_model: "aiModel",
ai_model: "aiModel",
"ai-model": "aiModel",
aiModel: "aiModel",
    p_temperature: "temperature",
Temperature: "temperature",
temperature: "temperature",
    max_tokens: "maxTokens",
"max-tokens": "maxTokens",
MaxTokens: "maxTokens",
"Max Tokens": "maxTokens",
p_max_tokens: "maxTokens",
maxTokens: "maxTokens",
    TopP: "topP",
p_top_p: "topP",
topP: "topP",
"top-p": "topP",
top_p: "topP",
"Top P": "topP",
    "frequency-penalty": "frequencyPenalty",
"Frequency Penalty": "frequencyPenalty",
p_frequency_penalty: "frequencyPenalty",
frequencyPenalty: "frequencyPenalty",
frequency_penalty: "frequencyPenalty",
FrequencyPenalty: "frequencyPenalty",
    presencePenalty: "presencePenalty",
p_presence_penalty: "presencePenalty",
presence_penalty: "presencePenalty",
PresencePenalty: "presencePenalty",
"Presence Penalty": "presencePenalty",
"presence-penalty": "presencePenalty",
    stream: "stream",
p_stream: "stream",
Stream: "stream",
    responseFormat: "responseFormat",
"response-format": "responseFormat",
p_response_format: "responseFormat",
ResponseFormat: "responseFormat",
response_format: "responseFormat",
"Response Format": "responseFormat",
    Size: "size",
p_size: "size",
size: "size",
    quality: "quality",
p_quality: "quality",
Quality: "quality",
    p_count: "count",
count: "count",
Count: "count",
    p_audio_voice: "audioVoice",
"audio-voice": "audioVoice",
"Audio Voice": "audioVoice",
audioVoice: "audioVoice",
audio_voice: "audioVoice",
AudioVoice: "audioVoice",
    audio_format: "audioFormat",
AudioFormat: "audioFormat",
p_audio_format: "audioFormat",
"Audio Format": "audioFormat",
"audio-format": "audioFormat",
audioFormat: "audioFormat",
    p_modalities: "modalities",
Modalities: "modalities",
modalities: "modalities",
    p_tools: "tools",
tools: "tools",
Tools: "tools",
    PresetName: "presetName",
preset_name: "presetName",
"Preset Name": "presetName",
"preset-name": "presetName",
presetName: "presetName",
p_preset_name: "presetName"
},
    aiTrainingData: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    systemPrompt: "systemPrompt",
SystemPrompt: "systemPrompt",
p_system_prompt: "systemPrompt",
"System Prompt": "systemPrompt",
system_prompt: "systemPrompt",
"system-prompt": "systemPrompt",
    p_user_query: "userQuery",
"User Query": "userQuery",
userQuery: "userQuery",
UserQuery: "userQuery",
user_query: "userQuery",
"user-query": "userQuery",
    "thinking-content": "thinkingContent",
p_thinking_content: "thinkingContent",
ThinkingContent: "thinkingContent",
"Thinking Content": "thinkingContent",
thinking_content: "thinkingContent",
thinkingContent: "thinkingContent",
    p_response_content: "responseContent",
"Response Content": "responseContent",
ResponseContent: "responseContent",
"response-content": "responseContent",
response_content: "responseContent",
responseContent: "responseContent",
    "reflection-content": "reflectionContent",
"Reflection Content": "reflectionContent",
reflection_content: "reflectionContent",
ReflectionContent: "reflectionContent",
reflectionContent: "reflectionContent",
p_reflection_content: "reflectionContent",
    qualityScore: "qualityScore",
"Quality Score": "qualityScore",
"quality-score": "qualityScore",
QualityScore: "qualityScore",
p_quality_score: "qualityScore",
quality_score: "qualityScore",
    p_source: "source",
source: "source",
Source: "source",
    metadata: "metadata",
p_metadata: "metadata",
Metadata: "metadata",
    "Questions Thinking": "questionsThinking",
QuestionsThinking: "questionsThinking",
questions_thinking: "questionsThinking",
p_questions_thinking: "questionsThinking",
"questions-thinking": "questionsThinking",
questionsThinking: "questionsThinking",
    p_questions_content: "questionsContent",
questions_content: "questionsContent",
QuestionsContent: "questionsContent",
"Questions Content": "questionsContent",
"questions-content": "questionsContent",
questionsContent: "questionsContent",
    StructuredQuestions: "structuredQuestions",
p_structured_questions: "structuredQuestions",
"structured-questions": "structuredQuestions",
"Structured Questions": "structuredQuestions",
structuredQuestions: "structuredQuestions",
structured_questions: "structuredQuestions",
    reflectionThinking: "reflectionThinking",
"Reflection Thinking": "reflectionThinking",
ReflectionThinking: "reflectionThinking",
"reflection-thinking": "reflectionThinking",
p_reflection_thinking: "reflectionThinking",
reflection_thinking: "reflectionThinking"
},
    applet: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    Description: "description",
description: "description",
p_description: "description",
    creator: "creator",
Creator: "creator",
p_creator: "creator",
    type: "type",
Type: "type",
p_type: "type",
    "compiled-recipe-id": "compiledRecipeId",
compiled_recipe_id: "compiledRecipeId",
p_compiled_recipe_id: "compiledRecipeId",
CompiledRecipeId: "compiledRecipeId",
compiledRecipeId: "compiledRecipeId",
"Compiled Recipe Id": "compiledRecipeId",
    p_slug: "slug",
slug: "slug",
Slug: "slug",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    DataSourceConfig: "dataSourceConfig",
data_source_config: "dataSourceConfig",
"Data Source Config": "dataSourceConfig",
"data-source-config": "dataSourceConfig",
dataSourceConfig: "dataSourceConfig",
p_data_source_config: "dataSourceConfig",
    resultComponentConfig: "resultComponentConfig",
p_result_component_config: "resultComponentConfig",
ResultComponentConfig: "resultComponentConfig",
"result-component-config": "resultComponentConfig",
"Result Component Config": "resultComponentConfig",
result_component_config: "resultComponentConfig",
    next_step_config: "nextStepConfig",
NextStepConfig: "nextStepConfig",
p_next_step_config: "nextStepConfig",
nextStepConfig: "nextStepConfig",
"next-step-config": "nextStepConfig",
"Next Step Config": "nextStepConfig",
    subcategoryId: "subcategoryId",
p_subcategory_id: "subcategoryId",
subcategory_id: "subcategoryId",
"subcategory-id": "subcategoryId",
"Subcategory Id": "subcategoryId",
SubcategoryId: "subcategoryId",
    "cta-text": "ctaText",
ctaText: "ctaText",
cta_text: "ctaText",
p_cta_text: "ctaText",
CtaText: "ctaText",
"Cta Text": "ctaText",
    p_theme: "theme",
Theme: "theme",
theme: "theme"
},
    arg: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_required: "required",
Required: "required",
required: "required",
    default: "default",
Default: "default",
p_default: "default",
    "data-type": "dataType",
p_data_type: "dataType",
"Data Type": "dataType",
dataType: "dataType",
data_type: "dataType",
DataType: "dataType",
    ready: "ready",
Ready: "ready",
p_ready: "ready",
    p_registered_function: "registeredFunction",
RegisteredFunction: "registeredFunction",
"Registered Function": "registeredFunction",
registeredFunction: "registeredFunction",
registered_function: "registeredFunction",
"registered-function": "registeredFunction"
},
    audioLabel: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    name: "name",
Name: "name",
p_name: "name",
    Description: "description",
description: "description",
p_description: "description"
},
    audioRecording: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    name: "name",
Name: "name",
p_name: "name",
    label: "label",
Label: "label",
p_label: "label",
    "file-url": "fileUrl",
fileUrl: "fileUrl",
p_file_url: "fileUrl",
file_url: "fileUrl",
FileUrl: "fileUrl",
"File Url": "fileUrl",
    Duration: "duration",
duration: "duration",
p_duration: "duration",
    "Local Path": "localPath",
localPath: "localPath",
p_local_path: "localPath",
local_path: "localPath",
LocalPath: "localPath",
"local-path": "localPath",
    Size: "size",
p_size: "size",
size: "size",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic"
},
    audioRecordingUsers: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "first-name": "firstName",
"First Name": "firstName",
p_first_name: "firstName",
first_name: "firstName",
FirstName: "firstName",
firstName: "firstName",
    LastName: "lastName",
lastName: "lastName",
last_name: "lastName",
"last-name": "lastName",
p_last_name: "lastName",
"Last Name": "lastName",
    p_email: "email",
Email: "email",
email: "email"
},
    automationBoundaryBroker: {
    p_id: "id",
Id: "id",
id: "id",
    matrix: "matrix",
Matrix: "matrix",
p_matrix: "matrix",
    p_broker: "broker",
Broker: "broker",
broker: "broker",
    spark_source: "sparkSource",
sparkSource: "sparkSource",
SparkSource: "sparkSource",
"Spark Source": "sparkSource",
p_spark_source: "sparkSource",
"spark-source": "sparkSource",
    "beacon-destination": "beaconDestination",
beacon_destination: "beaconDestination",
"Beacon Destination": "beaconDestination",
beaconDestination: "beaconDestination",
p_beacon_destination: "beaconDestination",
BeaconDestination: "beaconDestination"
},
    automationMatrix: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    Description: "description",
description: "description",
p_description: "description",
    AverageSeconds: "averageSeconds",
"average-seconds": "averageSeconds",
p_average_seconds: "averageSeconds",
"Average Seconds": "averageSeconds",
averageSeconds: "averageSeconds",
average_seconds: "averageSeconds",
    "Is Automated": "isAutomated",
p_is_automated: "isAutomated",
is_automated: "isAutomated",
"is-automated": "isAutomated",
isAutomated: "isAutomated",
IsAutomated: "isAutomated",
    CognitionMatrices: "cognitionMatrices",
cognitionMatrices: "cognitionMatrices",
cognition_matrices: "cognitionMatrices",
p_cognition_matrices: "cognitionMatrices",
"cognition-matrices": "cognitionMatrices",
"Cognition Matrices": "cognitionMatrices"
},
    broker: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    value: "value",
Value: "value",
p_value: "value",
    "data-type": "dataType",
p_data_type: "dataType",
"Data Type": "dataType",
dataType: "dataType",
data_type: "dataType",
DataType: "dataType",
    ready: "ready",
Ready: "ready",
p_ready: "ready",
    "Default Source": "defaultSource",
defaultSource: "defaultSource",
"default-source": "defaultSource",
p_default_source: "defaultSource",
default_source: "defaultSource",
DefaultSource: "defaultSource",
    displayName: "displayName",
"display-name": "displayName",
DisplayName: "displayName",
display_name: "displayName",
p_display_name: "displayName",
"Display Name": "displayName",
    Description: "description",
description: "description",
p_description: "description",
    tooltip: "tooltip",
p_tooltip: "tooltip",
Tooltip: "tooltip",
    "validation-rules": "validationRules",
validationRules: "validationRules",
ValidationRules: "validationRules",
validation_rules: "validationRules",
p_validation_rules: "validationRules",
"Validation Rules": "validationRules",
    "Sample Entries": "sampleEntries",
SampleEntries: "sampleEntries",
sampleEntries: "sampleEntries",
"sample-entries": "sampleEntries",
p_sample_entries: "sampleEntries",
sample_entries: "sampleEntries",
    customSourceComponent: "customSourceComponent",
p_custom_source_component: "customSourceComponent",
custom_source_component: "customSourceComponent",
"Custom Source Component": "customSourceComponent",
"custom-source-component": "customSourceComponent",
CustomSourceComponent: "customSourceComponent",
    AdditionalParams: "additionalParams",
additional_params: "additionalParams",
additionalParams: "additionalParams",
"additional-params": "additionalParams",
p_additional_params: "additionalParams",
"Additional Params": "additionalParams",
    "Other Source Params": "otherSourceParams",
otherSourceParams: "otherSourceParams",
other_source_params: "otherSourceParams",
"other-source-params": "otherSourceParams",
OtherSourceParams: "otherSourceParams",
p_other_source_params: "otherSourceParams",
    DefaultDestination: "defaultDestination",
"default-destination": "defaultDestination",
default_destination: "defaultDestination",
defaultDestination: "defaultDestination",
"Default Destination": "defaultDestination",
p_default_destination: "defaultDestination",
    OutputComponent: "outputComponent",
p_output_component: "outputComponent",
"output-component": "outputComponent",
"Output Component": "outputComponent",
output_component: "outputComponent",
outputComponent: "outputComponent",
    p_tags: "tags",
Tags: "tags",
tags: "tags",
    "String Value": "stringValue",
StringValue: "stringValue",
p_string_value: "stringValue",
"string-value": "stringValue",
stringValue: "stringValue",
string_value: "stringValue"
},
    brokerValue: {
    p_id: "id",
Id: "id",
id: "id",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    p_data_broker: "dataBroker",
data_broker: "dataBroker",
DataBroker: "dataBroker",
dataBroker: "dataBroker",
"Data Broker": "dataBroker",
"data-broker": "dataBroker",
    Data: "data",
p_data: "data",
data: "data",
    category: "category",
p_category: "category",
Category: "category",
    "sub-category": "subCategory",
SubCategory: "subCategory",
subCategory: "subCategory",
p_sub_category: "subCategory",
"Sub Category": "subCategory",
sub_category: "subCategory",
    p_tags: "tags",
Tags: "tags",
tags: "tags",
    Comments: "comments",
comments: "comments",
p_comments: "comments",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt"
},
    bucketStructures: {
    "Bucket Id": "bucketId",
bucket_id: "bucketId",
p_bucket_id: "bucketId",
BucketId: "bucketId",
bucketId: "bucketId",
"bucket-id": "bucketId",
    structure: "structure",
Structure: "structure",
p_structure: "structure",
    last_updated: "lastUpdated",
"Last Updated": "lastUpdated",
p_last_updated: "lastUpdated",
LastUpdated: "lastUpdated",
"last-updated": "lastUpdated",
lastUpdated: "lastUpdated"
},
    bucketTreeStructures: {
    "Bucket Id": "bucketId",
bucket_id: "bucketId",
p_bucket_id: "bucketId",
BucketId: "bucketId",
bucketId: "bucketId",
"bucket-id": "bucketId",
    "Tree Structure": "treeStructure",
"tree-structure": "treeStructure",
tree_structure: "treeStructure",
treeStructure: "treeStructure",
TreeStructure: "treeStructure",
p_tree_structure: "treeStructure",
    last_updated: "lastUpdated",
"Last Updated": "lastUpdated",
p_last_updated: "lastUpdated",
LastUpdated: "lastUpdated",
"last-updated": "lastUpdated",
lastUpdated: "lastUpdated"
},
    category: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    Description: "description",
description: "description",
p_description: "description",
    p_slug: "slug",
slug: "slug",
Slug: "slug",
    Icon: "icon",
p_icon: "icon",
icon: "icon",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt"
},
    compiledRecipe: {
    p_id: "id",
Id: "id",
id: "id",
    p_recipe_id: "recipeId",
recipe_id: "recipeId",
"Recipe Id": "recipeId",
recipeId: "recipeId",
RecipeId: "recipeId",
"recipe-id": "recipeId",
    version: "version",
p_version: "version",
Version: "version",
    p_compiled_recipe: "compiledRecipe",
"Compiled Recipe": "compiledRecipe",
CompiledRecipe: "compiledRecipe",
compiledRecipe: "compiledRecipe",
compiled_recipe: "compiledRecipe",
"compiled-recipe": "compiledRecipe",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
authenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
AuthenticatedRead: "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    conversation: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    metadata: "metadata",
p_metadata: "metadata",
Metadata: "metadata",
    label: "label",
Label: "label",
p_label: "label",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic"
},
    dataBroker: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    "data-type": "dataType",
p_data_type: "dataType",
"Data Type": "dataType",
dataType: "dataType",
data_type: "dataType",
DataType: "dataType",
    defaultValue: "defaultValue",
"default-value": "defaultValue",
"Default Value": "defaultValue",
default_value: "defaultValue",
DefaultValue: "defaultValue",
p_default_value: "defaultValue",
    p_input_component: "inputComponent",
InputComponent: "inputComponent",
"Input Component": "inputComponent",
input_component: "inputComponent",
"input-component": "inputComponent",
inputComponent: "inputComponent",
    Color: "color",
color: "color",
p_color: "color",
    OutputComponent: "outputComponent",
p_output_component: "outputComponent",
"output-component": "outputComponent",
"Output Component": "outputComponent",
output_component: "outputComponent",
outputComponent: "outputComponent"
},
    dataInputComponent: {
    p_id: "id",
Id: "id",
id: "id",
    p_options: "options",
options: "options",
Options: "options",
    IncludeOther: "includeOther",
p_include_other: "includeOther",
"Include Other": "includeOther",
include_other: "includeOther",
"include-other": "includeOther",
includeOther: "includeOther",
    Min: "min",
p_min: "min",
min: "min",
    max: "max",
p_max: "max",
Max: "max",
    step: "step",
Step: "step",
p_step: "step",
    acceptable_filetypes: "acceptableFiletypes",
"acceptable-filetypes": "acceptableFiletypes",
p_acceptable_filetypes: "acceptableFiletypes",
AcceptableFiletypes: "acceptableFiletypes",
"Acceptable Filetypes": "acceptableFiletypes",
acceptableFiletypes: "acceptableFiletypes",
    src: "src",
Src: "src",
p_src: "src",
    ColorOverrides: "colorOverrides",
p_color_overrides: "colorOverrides",
"color-overrides": "colorOverrides",
color_overrides: "colorOverrides",
"Color Overrides": "colorOverrides",
colorOverrides: "colorOverrides",
    AdditionalParams: "additionalParams",
additional_params: "additionalParams",
additionalParams: "additionalParams",
"additional-params": "additionalParams",
p_additional_params: "additionalParams",
"Additional Params": "additionalParams",
    "Sub Component": "subComponent",
SubComponent: "subComponent",
subComponent: "subComponent",
sub_component: "subComponent",
"sub-component": "subComponent",
p_sub_component: "subComponent",
    component: "component",
Component: "component",
p_component: "component",
    name: "name",
Name: "name",
p_name: "name",
    Description: "description",
description: "description",
p_description: "description",
    placeholder: "placeholder",
p_placeholder: "placeholder",
Placeholder: "placeholder",
    "Container Class Name": "containerClassName",
p_container_class_name: "containerClassName",
containerClassName: "containerClassName",
"container-class-name": "containerClassName",
container_class_name: "containerClassName",
ContainerClassName: "containerClassName",
    collapsibleClassName: "collapsibleClassName",
CollapsibleClassName: "collapsibleClassName",
"collapsible-class-name": "collapsibleClassName",
collapsible_class_name: "collapsibleClassName",
p_collapsible_class_name: "collapsibleClassName",
"Collapsible Class Name": "collapsibleClassName",
    p_label_class_name: "labelClassName",
"label-class-name": "labelClassName",
"Label Class Name": "labelClassName",
label_class_name: "labelClassName",
labelClassName: "labelClassName",
LabelClassName: "labelClassName",
    description_class_name: "descriptionClassName",
DescriptionClassName: "descriptionClassName",
"Description Class Name": "descriptionClassName",
"description-class-name": "descriptionClassName",
p_description_class_name: "descriptionClassName",
descriptionClassName: "descriptionClassName",
    "Component Class Name": "componentClassName",
ComponentClassName: "componentClassName",
componentClassName: "componentClassName",
component_class_name: "componentClassName",
"component-class-name": "componentClassName",
p_component_class_name: "componentClassName",
    Size: "size",
p_size: "size",
size: "size",
    p_height: "height",
Height: "height",
height: "height",
    p_width: "width",
width: "width",
Width: "width",
    min_height: "minHeight",
MinHeight: "minHeight",
"min-height": "minHeight",
minHeight: "minHeight",
"Min Height": "minHeight",
p_min_height: "minHeight",
    "Max Height": "maxHeight",
maxHeight: "maxHeight",
max_height: "maxHeight",
MaxHeight: "maxHeight",
p_max_height: "maxHeight",
"max-height": "maxHeight",
    p_min_width: "minWidth",
MinWidth: "minWidth",
min_width: "minWidth",
minWidth: "minWidth",
"min-width": "minWidth",
"Min Width": "minWidth",
    p_max_width: "maxWidth",
maxWidth: "maxWidth",
max_width: "maxWidth",
"Max Width": "maxWidth",
"max-width": "maxWidth",
MaxWidth: "maxWidth",
    p_orientation: "orientation",
Orientation: "orientation",
orientation: "orientation"
},
    dataOutputComponent: {
    p_id: "id",
Id: "id",
id: "id",
    "component-type": "componentType",
"Component Type": "componentType",
ComponentType: "componentType",
componentType: "componentType",
component_type: "componentType",
p_component_type: "componentType",
    UiComponent: "uiComponent",
"ui-component": "uiComponent",
uiComponent: "uiComponent",
"Ui Component": "uiComponent",
ui_component: "uiComponent",
p_ui_component: "uiComponent",
    props: "props",
Props: "props",
p_props: "props",
    AdditionalParams: "additionalParams",
additional_params: "additionalParams",
additionalParams: "additionalParams",
"additional-params": "additionalParams",
p_additional_params: "additionalParams",
"Additional Params": "additionalParams"
},
    displayOption: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_default_params: "defaultParams",
default_params: "defaultParams",
DefaultParams: "defaultParams",
"default-params": "defaultParams",
"Default Params": "defaultParams",
defaultParams: "defaultParams",
    p_customizable_params: "customizableParams",
"customizable-params": "customizableParams",
"Customizable Params": "customizableParams",
CustomizableParams: "customizableParams",
customizableParams: "customizableParams",
customizable_params: "customizableParams",
    AdditionalParams: "additionalParams",
additional_params: "additionalParams",
additionalParams: "additionalParams",
"additional-params": "additionalParams",
p_additional_params: "additionalParams",
"Additional Params": "additionalParams"
},
    emails: {
    p_id: "id",
Id: "id",
id: "id",
    Sender: "sender",
p_sender: "sender",
sender: "sender",
    Recipient: "recipient",
recipient: "recipient",
p_recipient: "recipient",
    subject: "subject",
p_subject: "subject",
Subject: "subject",
    Body: "body",
p_body: "body",
body: "body",
    p_timestamp: "timestamp",
timestamp: "timestamp",
Timestamp: "timestamp",
    is_read: "isRead",
"is-read": "isRead",
IsRead: "isRead",
"Is Read": "isRead",
p_is_read: "isRead",
isRead: "isRead"
},
    extractor: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    "Output Type": "outputType",
outputType: "outputType",
output_type: "outputType",
"output-type": "outputType",
p_output_type: "outputType",
OutputType: "outputType",
    default_identifier: "defaultIdentifier",
"Default Identifier": "defaultIdentifier",
p_default_identifier: "defaultIdentifier",
DefaultIdentifier: "defaultIdentifier",
defaultIdentifier: "defaultIdentifier",
"default-identifier": "defaultIdentifier",
    p_default_index: "defaultIndex",
"default-index": "defaultIndex",
"Default Index": "defaultIndex",
default_index: "defaultIndex",
DefaultIndex: "defaultIndex",
defaultIndex: "defaultIndex"
},
    fileStructure: {
    p_id: "id",
Id: "id",
id: "id",
    "Bucket Id": "bucketId",
bucket_id: "bucketId",
p_bucket_id: "bucketId",
BucketId: "bucketId",
bucketId: "bucketId",
"bucket-id": "bucketId",
    Path: "path",
p_path: "path",
path: "path",
    IsFolder: "isFolder",
p_is_folder: "isFolder",
isFolder: "isFolder",
"Is Folder": "isFolder",
is_folder: "isFolder",
"is-folder": "isFolder",
    "File Id": "fileId",
file_id: "fileId",
FileId: "fileId",
"file-id": "fileId",
p_file_id: "fileId",
fileId: "fileId",
    parent_path: "parentPath",
"parent-path": "parentPath",
ParentPath: "parentPath",
"Parent Path": "parentPath",
p_parent_path: "parentPath",
parentPath: "parentPath",
    name: "name",
Name: "name",
p_name: "name",
    metadata: "metadata",
p_metadata: "metadata",
Metadata: "metadata",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt"
},
    flashcardData: {
    p_id: "id",
Id: "id",
id: "id",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    Topic: "topic",
p_topic: "topic",
topic: "topic",
    lesson: "lesson",
p_lesson: "lesson",
Lesson: "lesson",
    Difficulty: "difficulty",
p_difficulty: "difficulty",
difficulty: "difficulty",
    front: "front",
Front: "front",
p_front: "front",
    Back: "back",
p_back: "back",
back: "back",
    p_example: "example",
example: "example",
Example: "example",
    DetailedExplanation: "detailedExplanation",
"Detailed Explanation": "detailedExplanation",
detailed_explanation: "detailedExplanation",
p_detailed_explanation: "detailedExplanation",
"detailed-explanation": "detailedExplanation",
detailedExplanation: "detailedExplanation",
    p_audio_explanation: "audioExplanation",
audio_explanation: "audioExplanation",
AudioExplanation: "audioExplanation",
"audio-explanation": "audioExplanation",
"Audio Explanation": "audioExplanation",
audioExplanation: "audioExplanation",
    p_personal_notes: "personalNotes",
"Personal Notes": "personalNotes",
personal_notes: "personalNotes",
personalNotes: "personalNotes",
PersonalNotes: "personalNotes",
"personal-notes": "personalNotes",
    "Is Deleted": "isDeleted",
isDeleted: "isDeleted",
p_is_deleted: "isDeleted",
IsDeleted: "isDeleted",
is_deleted: "isDeleted",
"is-deleted": "isDeleted",
    public: "public",
Public: "public",
p_public: "public",
    "shared-with": "sharedWith",
SharedWith: "sharedWith",
sharedWith: "sharedWith",
shared_with: "sharedWith",
"Shared With": "sharedWith",
p_shared_with: "sharedWith",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt"
},
    flashcardHistory: {
    p_id: "id",
Id: "id",
id: "id",
    flashcardId: "flashcardId",
FlashcardId: "flashcardId",
"flashcard-id": "flashcardId",
flashcard_id: "flashcardId",
"Flashcard Id": "flashcardId",
p_flashcard_id: "flashcardId",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    "Review Count": "reviewCount",
reviewCount: "reviewCount",
ReviewCount: "reviewCount",
review_count: "reviewCount",
"review-count": "reviewCount",
p_review_count: "reviewCount",
    p_correct_count: "correctCount",
correctCount: "correctCount",
"Correct Count": "correctCount",
CorrectCount: "correctCount",
"correct-count": "correctCount",
correct_count: "correctCount",
    p_incorrect_count: "incorrectCount",
IncorrectCount: "incorrectCount",
"incorrect-count": "incorrectCount",
"Incorrect Count": "incorrectCount",
incorrectCount: "incorrectCount",
incorrect_count: "incorrectCount",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt"
},
    flashcardImages: {
    p_id: "id",
Id: "id",
id: "id",
    flashcardId: "flashcardId",
FlashcardId: "flashcardId",
"flashcard-id": "flashcardId",
flashcard_id: "flashcardId",
"Flashcard Id": "flashcardId",
p_flashcard_id: "flashcardId",
    "File Path": "filePath",
filePath: "filePath",
"file-path": "filePath",
FilePath: "filePath",
file_path: "filePath",
p_file_path: "filePath",
    p_file_name: "fileName",
FileName: "fileName",
"file-name": "fileName",
"File Name": "fileName",
file_name: "fileName",
fileName: "fileName",
    mimeType: "mimeType",
MimeType: "mimeType",
mime_type: "mimeType",
p_mime_type: "mimeType",
"mime-type": "mimeType",
"Mime Type": "mimeType",
    Size: "size",
p_size: "size",
size: "size",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt"
},
    flashcardSetRelations: {
    flashcardId: "flashcardId",
FlashcardId: "flashcardId",
"flashcard-id": "flashcardId",
flashcard_id: "flashcardId",
"Flashcard Id": "flashcardId",
p_flashcard_id: "flashcardId",
    "Set Id": "setId",
p_set_id: "setId",
set_id: "setId",
SetId: "setId",
setId: "setId",
"set-id": "setId",
    order: "order",
Order: "order",
p_order: "order"
},
    flashcardSets: {
    "Set Id": "setId",
p_set_id: "setId",
set_id: "setId",
SetId: "setId",
setId: "setId",
"set-id": "setId",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    name: "name",
Name: "name",
p_name: "name",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    "shared-with": "sharedWith",
SharedWith: "sharedWith",
sharedWith: "sharedWith",
shared_with: "sharedWith",
"Shared With": "sharedWith",
p_shared_with: "sharedWith",
    public: "public",
Public: "public",
p_public: "public",
    Topic: "topic",
p_topic: "topic",
topic: "topic",
    lesson: "lesson",
p_lesson: "lesson",
Lesson: "lesson",
    Difficulty: "difficulty",
p_difficulty: "difficulty",
difficulty: "difficulty",
    "audio-overview": "audioOverview",
audioOverview: "audioOverview",
"Audio Overview": "audioOverview",
audio_overview: "audioOverview",
p_audio_overview: "audioOverview",
AudioOverview: "audioOverview"
},
    fullSpectrumPositions: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    Title: "title",
p_title: "title",
title: "title",
    Description: "description",
description: "description",
p_description: "description",
    "alternate-titles": "alternateTitles",
"Alternate Titles": "alternateTitles",
alternate_titles: "alternateTitles",
alternateTitles: "alternateTitles",
AlternateTitles: "alternateTitles",
p_alternate_titles: "alternateTitles",
    p_qualifications: "qualifications",
qualifications: "qualifications",
Qualifications: "qualifications",
    "sizzle-questions": "sizzleQuestions",
SizzleQuestions: "sizzleQuestions",
p_sizzle_questions: "sizzleQuestions",
"Sizzle Questions": "sizzleQuestions",
sizzleQuestions: "sizzleQuestions",
sizzle_questions: "sizzleQuestions",
    RedFlags: "redFlags",
p_red_flags: "redFlags",
red_flags: "redFlags",
"red-flags": "redFlags",
redFlags: "redFlags",
"Red Flags": "redFlags",
    AdditionalDetails: "additionalDetails",
p_additional_details: "additionalDetails",
additional_details: "additionalDetails",
"Additional Details": "additionalDetails",
additionalDetails: "additionalDetails",
"additional-details": "additionalDetails"
},
    message: {
    p_id: "id",
Id: "id",
id: "id",
    ConversationId: "conversationId",
conversation_id: "conversationId",
p_conversation_id: "conversationId",
conversationId: "conversationId",
"conversation-id": "conversationId",
"Conversation Id": "conversationId",
    Role: "role",
role: "role",
p_role: "role",
    content: "content",
p_content: "content",
Content: "content",
    type: "type",
Type: "type",
p_type: "type",
    display_order: "displayOrder",
"display-order": "displayOrder",
"Display Order": "displayOrder",
displayOrder: "displayOrder",
p_display_order: "displayOrder",
DisplayOrder: "displayOrder",
    systemOrder: "systemOrder",
p_system_order: "systemOrder",
SystemOrder: "systemOrder",
"system-order": "systemOrder",
system_order: "systemOrder",
"System Order": "systemOrder",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    metadata: "metadata",
p_metadata: "metadata",
Metadata: "metadata",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic"
},
    messageBroker: {
    p_id: "id",
Id: "id",
id: "id",
    p_message_id: "messageId",
MessageId: "messageId",
messageId: "messageId",
"message-id": "messageId",
message_id: "messageId",
"Message Id": "messageId",
    p_broker_id: "brokerId",
"broker-id": "brokerId",
"Broker Id": "brokerId",
BrokerId: "brokerId",
brokerId: "brokerId",
broker_id: "brokerId",
    defaultValue: "defaultValue",
"default-value": "defaultValue",
"Default Value": "defaultValue",
default_value: "defaultValue",
DefaultValue: "defaultValue",
p_default_value: "defaultValue",
    defaultComponent: "defaultComponent",
DefaultComponent: "defaultComponent",
default_component: "defaultComponent",
"default-component": "defaultComponent",
"Default Component": "defaultComponent",
p_default_component: "defaultComponent"
},
    messageTemplate: {
    p_id: "id",
Id: "id",
id: "id",
    Role: "role",
role: "role",
p_role: "role",
    type: "type",
Type: "type",
p_type: "type",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    content: "content",
p_content: "content",
Content: "content"
},
    organizationInvitations: {
    p_id: "id",
Id: "id",
id: "id",
    organization_id: "organizationId",
"Organization Id": "organizationId",
"organization-id": "organizationId",
p_organization_id: "organizationId",
organizationId: "organizationId",
OrganizationId: "organizationId",
    p_email: "email",
Email: "email",
email: "email",
    p_token: "token",
token: "token",
Token: "token",
    Role: "role",
role: "role",
p_role: "role",
    invited_at: "invitedAt",
p_invited_at: "invitedAt",
"invited-at": "invitedAt",
InvitedAt: "invitedAt",
"Invited At": "invitedAt",
invitedAt: "invitedAt",
    InvitedBy: "invitedBy",
"invited-by": "invitedBy",
invitedBy: "invitedBy",
"Invited By": "invitedBy",
p_invited_by: "invitedBy",
invited_by: "invitedBy",
    "expires-at": "expiresAt",
p_expires_at: "expiresAt",
ExpiresAt: "expiresAt",
expiresAt: "expiresAt",
expires_at: "expiresAt",
"Expires At": "expiresAt"
},
    organizationMembers: {
    p_id: "id",
Id: "id",
id: "id",
    organization_id: "organizationId",
"Organization Id": "organizationId",
"organization-id": "organizationId",
p_organization_id: "organizationId",
organizationId: "organizationId",
OrganizationId: "organizationId",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    Role: "role",
role: "role",
p_role: "role",
    JoinedAt: "joinedAt",
joinedAt: "joinedAt",
joined_at: "joinedAt",
"Joined At": "joinedAt",
"joined-at": "joinedAt",
p_joined_at: "joinedAt",
    InvitedBy: "invitedBy",
"invited-by": "invitedBy",
invitedBy: "invitedBy",
"Invited By": "invitedBy",
p_invited_by: "invitedBy",
invited_by: "invitedBy"
},
    organizations: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_slug: "slug",
slug: "slug",
Slug: "slug",
    Description: "description",
description: "description",
p_description: "description",
    "Logo Url": "logoUrl",
p_logo_url: "logoUrl",
LogoUrl: "logoUrl",
logoUrl: "logoUrl",
logo_url: "logoUrl",
"logo-url": "logoUrl",
    p_website: "website",
website: "website",
Website: "website",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    created_by: "createdBy",
createdBy: "createdBy",
"created-by": "createdBy",
p_created_by: "createdBy",
CreatedBy: "createdBy",
"Created By": "createdBy",
    is_personal: "isPersonal",
"Is Personal": "isPersonal",
"is-personal": "isPersonal",
p_is_personal: "isPersonal",
IsPersonal: "isPersonal",
isPersonal: "isPersonal",
    settings: "settings",
p_settings: "settings",
Settings: "settings"
},
    permissions: {
    p_id: "id",
Id: "id",
id: "id",
    p_resource_type: "resourceType",
"resource-type": "resourceType",
"Resource Type": "resourceType",
resourceType: "resourceType",
ResourceType: "resourceType",
resource_type: "resourceType",
    resource_id: "resourceId",
ResourceId: "resourceId",
"resource-id": "resourceId",
resourceId: "resourceId",
p_resource_id: "resourceId",
"Resource Id": "resourceId",
    p_granted_to_user_id: "grantedToUserId",
"granted-to-user-id": "grantedToUserId",
GrantedToUserId: "grantedToUserId",
grantedToUserId: "grantedToUserId",
"Granted To User Id": "grantedToUserId",
granted_to_user_id: "grantedToUserId",
    p_granted_to_organization_id: "grantedToOrganizationId",
"Granted To Organization Id": "grantedToOrganizationId",
grantedToOrganizationId: "grantedToOrganizationId",
GrantedToOrganizationId: "grantedToOrganizationId",
"granted-to-organization-id": "grantedToOrganizationId",
granted_to_organization_id: "grantedToOrganizationId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    "permission-level": "permissionLevel",
PermissionLevel: "permissionLevel",
p_permission_level: "permissionLevel",
"Permission Level": "permissionLevel",
permission_level: "permissionLevel",
permissionLevel: "permissionLevel",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    created_by: "createdBy",
createdBy: "createdBy",
"created-by": "createdBy",
p_created_by: "createdBy",
CreatedBy: "createdBy",
"Created By": "createdBy"
},
    processor: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_depends_default: "dependsDefault",
DependsDefault: "dependsDefault",
"Depends Default": "dependsDefault",
"depends-default": "dependsDefault",
dependsDefault: "dependsDefault",
depends_default: "dependsDefault",
    p_default_extractors: "defaultExtractors",
DefaultExtractors: "defaultExtractors",
defaultExtractors: "defaultExtractors",
"Default Extractors": "defaultExtractors",
"default-extractors": "defaultExtractors",
default_extractors: "defaultExtractors",
    params: "params",
Params: "params",
p_params: "params"
},
    projectMembers: {
    p_id: "id",
Id: "id",
id: "id",
    p_project_id: "projectId",
"project-id": "projectId",
project_id: "projectId",
ProjectId: "projectId",
projectId: "projectId",
"Project Id": "projectId",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    Role: "role",
role: "role",
p_role: "role",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt"
},
    projects: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    Description: "description",
description: "description",
p_description: "description",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    created_by: "createdBy",
createdBy: "createdBy",
"created-by": "createdBy",
p_created_by: "createdBy",
CreatedBy: "createdBy",
"Created By": "createdBy"
},
    recipe: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    Description: "description",
description: "description",
p_description: "description",
    p_tags: "tags",
Tags: "tags",
tags: "tags",
    "sample-output": "sampleOutput",
SampleOutput: "sampleOutput",
sampleOutput: "sampleOutput",
sample_output: "sampleOutput",
"Sample Output": "sampleOutput",
p_sample_output: "sampleOutput",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    p_status: "status",
Status: "status",
status: "status",
    version: "version",
p_version: "version",
Version: "version",
    "Post Result Options": "postResultOptions",
PostResultOptions: "postResultOptions",
p_post_result_options: "postResultOptions",
post_result_options: "postResultOptions",
postResultOptions: "postResultOptions",
"post-result-options": "postResultOptions",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId"
},
    recipeBroker: {
    p_id: "id",
Id: "id",
id: "id",
    recipe: "recipe",
p_recipe: "recipe",
Recipe: "recipe",
    p_broker: "broker",
Broker: "broker",
broker: "broker",
    broker_role: "brokerRole",
BrokerRole: "brokerRole",
"broker-role": "brokerRole",
brokerRole: "brokerRole",
"Broker Role": "brokerRole",
p_broker_role: "brokerRole",
    p_required: "required",
Required: "required",
required: "required"
},
    recipeDisplay: {
    p_id: "id",
Id: "id",
id: "id",
    recipe: "recipe",
p_recipe: "recipe",
Recipe: "recipe",
    p_display: "display",
display: "display",
Display: "display",
    Priority: "priority",
p_priority: "priority",
priority: "priority",
    "Display Settings": "displaySettings",
p_display_settings: "displaySettings",
display_settings: "displaySettings",
DisplaySettings: "displaySettings",
displaySettings: "displaySettings",
"display-settings": "displaySettings"
},
    recipeFunction: {
    p_id: "id",
Id: "id",
id: "id",
    recipe: "recipe",
p_recipe: "recipe",
Recipe: "recipe",
    function: "function",
p_function: "function",
Function: "function",
    Role: "role",
role: "role",
p_role: "role",
    params: "params",
Params: "params",
p_params: "params"
},
    recipeMessage: {
    p_id: "id",
Id: "id",
id: "id",
    p_message_id: "messageId",
MessageId: "messageId",
messageId: "messageId",
"message-id": "messageId",
message_id: "messageId",
"Message Id": "messageId",
    p_recipe_id: "recipeId",
recipe_id: "recipeId",
"Recipe Id": "recipeId",
recipeId: "recipeId",
RecipeId: "recipeId",
"recipe-id": "recipeId",
    order: "order",
Order: "order",
p_order: "order"
},
    recipeMessageReorderQueue: {
    p_recipe_id: "recipeId",
recipe_id: "recipeId",
"Recipe Id": "recipeId",
recipeId: "recipeId",
RecipeId: "recipeId",
"recipe-id": "recipeId",
    "last-modified": "lastModified",
p_last_modified: "lastModified",
LastModified: "lastModified",
"Last Modified": "lastModified",
lastModified: "lastModified",
last_modified: "lastModified"
},
    recipeModel: {
    p_id: "id",
Id: "id",
id: "id",
    recipe: "recipe",
p_recipe: "recipe",
Recipe: "recipe",
    "Ai Model": "aiModel",
AiModel: "aiModel",
p_ai_model: "aiModel",
ai_model: "aiModel",
"ai-model": "aiModel",
aiModel: "aiModel",
    Role: "role",
role: "role",
p_role: "role",
    Priority: "priority",
p_priority: "priority",
priority: "priority"
},
    recipeProcessor: {
    p_id: "id",
Id: "id",
id: "id",
    recipe: "recipe",
p_recipe: "recipe",
Recipe: "recipe",
    processor: "processor",
Processor: "processor",
p_processor: "processor",
    params: "params",
Params: "params",
p_params: "params"
},
    recipeTool: {
    p_id: "id",
Id: "id",
id: "id",
    recipe: "recipe",
p_recipe: "recipe",
Recipe: "recipe",
    Tool: "tool",
tool: "tool",
p_tool: "tool",
    params: "params",
Params: "params",
p_params: "params"
},
    registeredFunction: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    modulePath: "modulePath",
"module-path": "modulePath",
ModulePath: "modulePath",
"Module Path": "modulePath",
module_path: "modulePath",
p_module_path: "modulePath",
    p_class_name: "className",
"class-name": "className",
class_name: "className",
ClassName: "className",
className: "className",
"Class Name": "className",
    Description: "description",
description: "description",
p_description: "description",
    "return-broker": "returnBroker",
ReturnBroker: "returnBroker",
return_broker: "returnBroker",
returnBroker: "returnBroker",
"Return Broker": "returnBroker",
p_return_broker: "returnBroker"
},
    scrapeConfiguration: {
    p_id: "id",
Id: "id",
id: "id",
    ScrapeMode: "scrapeMode",
"scrape-mode": "scrapeMode",
p_scrape_mode: "scrapeMode",
scrape_mode: "scrapeMode",
"Scrape Mode": "scrapeMode",
scrapeMode: "scrapeMode",
    p_interaction_settings_id: "interactionSettingsId",
interaction_settings_id: "interactionSettingsId",
"Interaction Settings Id": "interactionSettingsId",
"interaction-settings-id": "interactionSettingsId",
interactionSettingsId: "interactionSettingsId",
InteractionSettingsId: "interactionSettingsId",
    scrape_path_pattern_id: "scrapePathPatternId",
"Scrape Path Pattern Id": "scrapePathPatternId",
p_scrape_path_pattern_id: "scrapePathPatternId",
ScrapePathPatternId: "scrapePathPatternId",
"scrape-path-pattern-id": "scrapePathPatternId",
scrapePathPatternId: "scrapePathPatternId",
    IsActive: "isActive",
"Is Active": "isActive",
is_active: "isActive",
p_is_active: "isActive",
"is-active": "isActive",
isActive: "isActive",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
authenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
AuthenticatedRead: "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeDomain: {
    p_id: "id",
Id: "id",
id: "id",
    Url: "url",
url: "url",
p_url: "url",
    common_name: "commonName",
commonName: "commonName",
CommonName: "commonName",
"common-name": "commonName",
p_common_name: "commonName",
"Common Name": "commonName",
    scrapeAllowed: "scrapeAllowed",
"scrape-allowed": "scrapeAllowed",
"Scrape Allowed": "scrapeAllowed",
scrape_allowed: "scrapeAllowed",
p_scrape_allowed: "scrapeAllowed",
ScrapeAllowed: "scrapeAllowed",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
authenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
AuthenticatedRead: "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeDomainDisallowedNotes: {
    p_id: "id",
Id: "id",
id: "id",
    "Scrape Domain Id": "scrapeDomainId",
p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    p_notes: "notes",
notes: "notes",
Notes: "notes",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
authenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
AuthenticatedRead: "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeDomainNotes: {
    p_id: "id",
Id: "id",
id: "id",
    "Scrape Domain Id": "scrapeDomainId",
p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    p_notes: "notes",
notes: "notes",
Notes: "notes",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
authenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
AuthenticatedRead: "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeDomainQuickScrapeSettings: {
    p_id: "id",
Id: "id",
id: "id",
    "Scrape Domain Id": "scrapeDomainId",
p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    p_enabled: "enabled",
enabled: "enabled",
Enabled: "enabled",
    proxy_type: "proxyType",
"Proxy Type": "proxyType",
ProxyType: "proxyType",
p_proxy_type: "proxyType",
"proxy-type": "proxyType",
proxyType: "proxyType",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
authenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
AuthenticatedRead: "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeDomainRobotsTxt: {
    p_id: "id",
Id: "id",
id: "id",
    "Scrape Domain Id": "scrapeDomainId",
p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    robotsTxt: "robotsTxt",
robots_txt: "robotsTxt",
RobotsTxt: "robotsTxt",
"Robots Txt": "robotsTxt",
"robots-txt": "robotsTxt",
p_robots_txt: "robotsTxt",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
authenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
AuthenticatedRead: "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeDomainSitemap: {
    p_id: "id",
Id: "id",
id: "id",
    "Scrape Domain Id": "scrapeDomainId",
p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    p_sitemap: "sitemap",
sitemap: "sitemap",
Sitemap: "sitemap",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
authenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
AuthenticatedRead: "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeOverride: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    "config-type": "configType",
"Config Type": "configType",
p_config_type: "configType",
ConfigType: "configType",
configType: "configType",
config_type: "configType",
    "selector-type": "selectorType",
"Selector Type": "selectorType",
selector_type: "selectorType",
p_selector_type: "selectorType",
SelectorType: "selectorType",
selectorType: "selectorType",
    match_type: "matchType",
p_match_type: "matchType",
"Match Type": "matchType",
"match-type": "matchType",
matchType: "matchType",
MatchType: "matchType",
    Action: "action",
p_action: "action",
action: "action",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
authenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
AuthenticatedRead: "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeOverrideValue: {
    p_id: "id",
Id: "id",
id: "id",
    value: "value",
Value: "value",
p_value: "value",
    ScrapeOverrideId: "scrapeOverrideId",
p_scrape_override_id: "scrapeOverrideId",
scrapeOverrideId: "scrapeOverrideId",
scrape_override_id: "scrapeOverrideId",
"scrape-override-id": "scrapeOverrideId",
"Scrape Override Id": "scrapeOverrideId",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
authenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
AuthenticatedRead: "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapePathPattern: {
    p_id: "id",
Id: "id",
id: "id",
    "Scrape Domain Id": "scrapeDomainId",
p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    p_path_pattern: "pathPattern",
"Path Pattern": "pathPattern",
PathPattern: "pathPattern",
path_pattern: "pathPattern",
"path-pattern": "pathPattern",
pathPattern: "pathPattern",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
authenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
AuthenticatedRead: "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapePathPatternOverride: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    scrape_path_pattern_id: "scrapePathPatternId",
"Scrape Path Pattern Id": "scrapePathPatternId",
p_scrape_path_pattern_id: "scrapePathPatternId",
ScrapePathPatternId: "scrapePathPatternId",
"scrape-path-pattern-id": "scrapePathPatternId",
scrapePathPatternId: "scrapePathPatternId",
    ScrapeOverrideId: "scrapeOverrideId",
p_scrape_override_id: "scrapeOverrideId",
scrapeOverrideId: "scrapeOverrideId",
scrape_override_id: "scrapeOverrideId",
"scrape-override-id": "scrapeOverrideId",
"Scrape Override Id": "scrapeOverrideId",
    IsActive: "isActive",
"Is Active": "isActive",
is_active: "isActive",
p_is_active: "isActive",
"is-active": "isActive",
isActive: "isActive",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
"is-public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
    authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
authenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
AuthenticatedRead: "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    subcategory: {
    p_id: "id",
Id: "id",
id: "id",
    "Category Id": "categoryId",
"category-id": "categoryId",
categoryId: "categoryId",
p_category_id: "categoryId",
CategoryId: "categoryId",
category_id: "categoryId",
    name: "name",
Name: "name",
p_name: "name",
    Description: "description",
description: "description",
p_description: "description",
    p_slug: "slug",
slug: "slug",
Slug: "slug",
    Icon: "icon",
p_icon: "icon",
icon: "icon",
    features: "features",
Features: "features",
p_features: "features",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt"
},
    systemFunction: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    Description: "description",
description: "description",
p_description: "description",
    sample: "sample",
Sample: "sample",
p_sample: "sample",
    p_input_params: "inputParams",
"Input Params": "inputParams",
InputParams: "inputParams",
inputParams: "inputParams",
input_params: "inputParams",
"input-params": "inputParams",
    outputOptions: "outputOptions",
"Output Options": "outputOptions",
output_options: "outputOptions",
OutputOptions: "outputOptions",
p_output_options: "outputOptions",
"output-options": "outputOptions",
    RfId: "rfId",
rf_id: "rfId",
rfId: "rfId",
"rf-id": "rfId",
"Rf Id": "rfId",
p_rf_id: "rfId"
},
    taskAssignments: {
    p_id: "id",
Id: "id",
id: "id",
    p_task_id: "taskId",
"Task Id": "taskId",
"task-id": "taskId",
task_id: "taskId",
TaskId: "taskId",
taskId: "taskId",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    assigned_by: "assignedBy",
"Assigned By": "assignedBy",
"assigned-by": "assignedBy",
AssignedBy: "assignedBy",
assignedBy: "assignedBy",
p_assigned_by: "assignedBy",
    assignedAt: "assignedAt",
"assigned-at": "assignedAt",
p_assigned_at: "assignedAt",
"Assigned At": "assignedAt",
AssignedAt: "assignedAt",
assigned_at: "assignedAt"
},
    taskAttachments: {
    p_id: "id",
Id: "id",
id: "id",
    p_task_id: "taskId",
"Task Id": "taskId",
"task-id": "taskId",
task_id: "taskId",
TaskId: "taskId",
taskId: "taskId",
    p_file_name: "fileName",
FileName: "fileName",
"file-name": "fileName",
"File Name": "fileName",
file_name: "fileName",
fileName: "fileName",
    "File Type": "fileType",
"file-type": "fileType",
FileType: "fileType",
file_type: "fileType",
p_file_type: "fileType",
fileType: "fileType",
    fileSize: "fileSize",
file_size: "fileSize",
FileSize: "fileSize",
p_file_size: "fileSize",
"file-size": "fileSize",
"File Size": "fileSize",
    "File Path": "filePath",
filePath: "filePath",
"file-path": "filePath",
FilePath: "filePath",
file_path: "filePath",
p_file_path: "filePath",
    UploadedBy: "uploadedBy",
"uploaded-by": "uploadedBy",
p_uploaded_by: "uploadedBy",
uploadedBy: "uploadedBy",
uploaded_by: "uploadedBy",
"Uploaded By": "uploadedBy",
    uploaded_at: "uploadedAt",
UploadedAt: "uploadedAt",
p_uploaded_at: "uploadedAt",
"uploaded-at": "uploadedAt",
"Uploaded At": "uploadedAt",
uploadedAt: "uploadedAt"
},
    taskComments: {
    p_id: "id",
Id: "id",
id: "id",
    p_task_id: "taskId",
"Task Id": "taskId",
"task-id": "taskId",
task_id: "taskId",
TaskId: "taskId",
taskId: "taskId",
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    content: "content",
p_content: "content",
Content: "content",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt"
},
    tasks: {
    p_id: "id",
Id: "id",
id: "id",
    Title: "title",
p_title: "title",
title: "title",
    Description: "description",
description: "description",
p_description: "description",
    p_project_id: "projectId",
"project-id": "projectId",
project_id: "projectId",
ProjectId: "projectId",
projectId: "projectId",
"Project Id": "projectId",
    p_status: "status",
Status: "status",
status: "status",
    dueDate: "dueDate",
"Due Date": "dueDate",
"due-date": "dueDate",
p_due_date: "dueDate",
due_date: "dueDate",
DueDate: "dueDate",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt",
    created_by: "createdBy",
createdBy: "createdBy",
"created-by": "createdBy",
p_created_by: "createdBy",
CreatedBy: "createdBy",
"Created By": "createdBy"
},
    tool: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_source: "source",
source: "source",
Source: "source",
    Description: "description",
description: "description",
p_description: "description",
    Parameters: "parameters",
p_parameters: "parameters",
parameters: "parameters",
    "Required Args": "requiredArgs",
p_required_args: "requiredArgs",
requiredArgs: "requiredArgs",
RequiredArgs: "requiredArgs",
required_args: "requiredArgs",
"required-args": "requiredArgs",
    systemFunction: "systemFunction",
system_function: "systemFunction",
SystemFunction: "systemFunction",
"System Function": "systemFunction",
"system-function": "systemFunction",
p_system_function: "systemFunction",
    AdditionalParams: "additionalParams",
additional_params: "additionalParams",
additionalParams: "additionalParams",
"additional-params": "additionalParams",
p_additional_params: "additionalParams",
"Additional Params": "additionalParams"
},
    transformer: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_input_params: "inputParams",
"Input Params": "inputParams",
InputParams: "inputParams",
inputParams: "inputParams",
input_params: "inputParams",
"input-params": "inputParams",
    p_output_params: "outputParams",
outputParams: "outputParams",
OutputParams: "outputParams",
output_params: "outputParams",
"output-params": "outputParams",
"Output Params": "outputParams"
},
    userPreferences: {
    userId: "userId",
"user-id": "userId",
UserId: "userId",
user_id: "userId",
p_user_id: "userId",
"User Id": "userId",
    p_preferences: "preferences",
Preferences: "preferences",
preferences: "preferences",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt"
},
    wcClaim: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    applicantName: "applicantName",
applicant_name: "applicantName",
ApplicantName: "applicantName",
p_applicant_name: "applicantName",
"applicant-name": "applicantName",
"Applicant Name": "applicantName",
    "Person Id": "personId",
personId: "personId",
PersonId: "personId",
"person-id": "personId",
p_person_id: "personId",
person_id: "personId",
    dateOfBirth: "dateOfBirth",
"date-of-birth": "dateOfBirth",
p_date_of_birth: "dateOfBirth",
DateOfBirth: "dateOfBirth",
"Date Of Birth": "dateOfBirth",
date_of_birth: "dateOfBirth",
    "Date Of Injury": "dateOfInjury",
"date-of-injury": "dateOfInjury",
date_of_injury: "dateOfInjury",
p_date_of_injury: "dateOfInjury",
dateOfInjury: "dateOfInjury",
DateOfInjury: "dateOfInjury",
    "age-at-doi": "ageAtDoi",
AgeAtDoi: "ageAtDoi",
"Age At Doi": "ageAtDoi",
ageAtDoi: "ageAtDoi",
p_age_at_doi: "ageAtDoi",
age_at_doi: "ageAtDoi",
    occupational_code: "occupationalCode",
p_occupational_code: "occupationalCode",
"Occupational Code": "occupationalCode",
OccupationalCode: "occupationalCode",
"occupational-code": "occupationalCode",
occupationalCode: "occupationalCode",
    "weekly-earnings": "weeklyEarnings",
"Weekly Earnings": "weeklyEarnings",
p_weekly_earnings: "weeklyEarnings",
weekly_earnings: "weeklyEarnings",
WeeklyEarnings: "weeklyEarnings",
weeklyEarnings: "weeklyEarnings"
},
    wcImpairmentDefinition: {
    p_id: "id",
Id: "id",
id: "id",
    ImpairmentNumber: "impairmentNumber",
p_impairment_number: "impairmentNumber",
"impairment-number": "impairmentNumber",
impairment_number: "impairmentNumber",
impairmentNumber: "impairmentNumber",
"Impairment Number": "impairmentNumber",
    "Fec Rank": "fecRank",
FecRank: "fecRank",
fec_rank: "fecRank",
"fec-rank": "fecRank",
p_fec_rank: "fecRank",
fecRank: "fecRank",
    name: "name",
Name: "name",
p_name: "name",
    attributes: "attributes",
Attributes: "attributes",
p_attributes: "attributes",
    FingerType: "fingerType",
"finger-type": "fingerType",
p_finger_type: "fingerType",
fingerType: "fingerType",
"Finger Type": "fingerType",
finger_type: "fingerType"
},
    wcInjury: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    reportId: "reportId",
"Report Id": "reportId",
ReportId: "reportId",
p_report_id: "reportId",
report_id: "reportId",
"report-id": "reportId",
    ImpairmentDefinitionId: "impairmentDefinitionId",
p_impairment_definition_id: "impairmentDefinitionId",
impairment_definition_id: "impairmentDefinitionId",
"impairment-definition-id": "impairmentDefinitionId",
impairmentDefinitionId: "impairmentDefinitionId",
"Impairment Definition Id": "impairmentDefinitionId",
    p_digit: "digit",
Digit: "digit",
digit: "digit",
    Le: "le",
le: "le",
p_le: "le",
    Side: "side",
p_side: "side",
side: "side",
    ue: "ue",
p_ue: "ue",
Ue: "ue",
    wpi: "wpi",
Wpi: "wpi",
p_wpi: "wpi",
    pain: "pain",
p_pain: "pain",
Pain: "pain",
    industrial: "industrial",
Industrial: "industrial",
p_industrial: "industrial",
    p_rating: "rating",
Rating: "rating",
rating: "rating",
    p_formula: "formula",
formula: "formula",
Formula: "formula",
    "Updated At": "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
updatedAt: "updatedAt",
p_updated_at: "updatedAt",
"updated-at": "updatedAt"
},
    wcReport: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
"created-at": "createdAt",
"Created At": "createdAt",
p_created_at: "createdAt",
CreatedAt: "createdAt",
created_at: "createdAt",
    claim_id: "claimId",
"Claim Id": "claimId",
p_claim_id: "claimId",
claimId: "claimId",
ClaimId: "claimId",
"claim-id": "claimId",
    "Final Rating": "finalRating",
finalRating: "finalRating",
"final-rating": "finalRating",
FinalRating: "finalRating",
p_final_rating: "finalRating",
final_rating: "finalRating",
    p_left_side_total: "leftSideTotal",
"Left Side Total": "leftSideTotal",
left_side_total: "leftSideTotal",
LeftSideTotal: "leftSideTotal",
"left-side-total": "leftSideTotal",
leftSideTotal: "leftSideTotal",
    RightSideTotal: "rightSideTotal",
right_side_total: "rightSideTotal",
"Right Side Total": "rightSideTotal",
p_right_side_total: "rightSideTotal",
rightSideTotal: "rightSideTotal",
"right-side-total": "rightSideTotal",
    default_side_total: "defaultSideTotal",
"Default Side Total": "defaultSideTotal",
"default-side-total": "defaultSideTotal",
defaultSideTotal: "defaultSideTotal",
DefaultSideTotal: "defaultSideTotal",
p_default_side_total: "defaultSideTotal",
    p_compensation_amount: "compensationAmount",
"compensation-amount": "compensationAmount",
compensationAmount: "compensationAmount",
CompensationAmount: "compensationAmount",
compensation_amount: "compensationAmount",
"Compensation Amount": "compensationAmount",
    compensationWeeks: "compensationWeeks",
compensation_weeks: "compensationWeeks",
CompensationWeeks: "compensationWeeks",
p_compensation_weeks: "compensationWeeks",
"compensation-weeks": "compensationWeeks",
"Compensation Weeks": "compensationWeeks",
    "Compensation Days": "compensationDays",
p_compensation_days: "compensationDays",
"compensation-days": "compensationDays",
compensation_days: "compensationDays",
compensationDays: "compensationDays",
CompensationDays: "compensationDays"
},
};

export const entityNameFormats: EntityNameFormatMap = {
    action: {
    frontend: "action",
    backend: "action",
    database: "action",
    pretty: "Action",
    component: "Action",
    kebab: "action",
    sqlFunctionRef: "p_action",
    RestAPI: "action",
    GraphQL: "action",
    custom: "action"
},
    admins: {
    frontend: "admins",
    backend: "admins",
    database: "admins",
    pretty: "Admins",
    component: "Admins",
    kebab: "admins",
    sqlFunctionRef: "p_admins",
    RestAPI: "admins",
    GraphQL: "admins",
    custom: "admins"
},
    aiAgent: {
    frontend: "aiAgent",
    backend: "ai_agent",
    database: "ai_agent",
    pretty: "Ai Agent",
    component: "AiAgent",
    kebab: "ai-agent",
    sqlFunctionRef: "p_ai_agent",
    RestAPI: "aiAgent",
    GraphQL: "aiAgent",
    custom: "aiAgent"
},
    aiEndpoint: {
    frontend: "aiEndpoint",
    backend: "ai_endpoint",
    database: "ai_endpoint",
    pretty: "Ai Endpoint",
    component: "AiEndpoint",
    kebab: "ai-endpoint",
    sqlFunctionRef: "p_ai_endpoint",
    RestAPI: "aiEndpoint",
    GraphQL: "aiEndpoint",
    custom: "aiEndpoint"
},
    aiModel: {
    frontend: "aiModel",
    backend: "ai_model",
    database: "ai_model",
    pretty: "Ai Model",
    component: "AiModel",
    kebab: "ai-model",
    sqlFunctionRef: "p_ai_model",
    RestAPI: "aiModel",
    GraphQL: "aiModel",
    custom: "aiModel"
},
    aiModelEndpoint: {
    frontend: "aiModelEndpoint",
    backend: "ai_model_endpoint",
    database: "ai_model_endpoint",
    pretty: "Ai Model Endpoint",
    component: "AiModelEndpoint",
    kebab: "ai-model-endpoint",
    sqlFunctionRef: "p_ai_model_endpoint",
    RestAPI: "aiModelEndpoint",
    GraphQL: "aiModelEndpoint",
    custom: "aiModelEndpoint"
},
    aiProvider: {
    frontend: "aiProvider",
    backend: "ai_provider",
    database: "ai_provider",
    pretty: "Ai Provider",
    component: "AiProvider",
    kebab: "ai-provider",
    sqlFunctionRef: "p_ai_provider",
    RestAPI: "aiProvider",
    GraphQL: "aiProvider",
    custom: "aiProvider"
},
    aiSettings: {
    frontend: "aiSettings",
    backend: "ai_settings",
    database: "ai_settings",
    pretty: "Ai Settings",
    component: "AiSettings",
    kebab: "ai-settings",
    sqlFunctionRef: "p_ai_settings",
    RestAPI: "aiSettings",
    GraphQL: "aiSettings",
    custom: "aiSettings"
},
    aiTrainingData: {
    frontend: "aiTrainingData",
    backend: "ai_training_data",
    database: "ai_training_data",
    pretty: "Ai Training Data",
    component: "AiTrainingData",
    kebab: "ai-training-data",
    sqlFunctionRef: "p_ai_training_data",
    RestAPI: "aiTrainingData",
    GraphQL: "aiTrainingData",
    custom: "aiTrainingData"
},
    applet: {
    frontend: "applet",
    backend: "applet",
    database: "applet",
    pretty: "Applet",
    component: "Applet",
    kebab: "applet",
    sqlFunctionRef: "p_applet",
    RestAPI: "applet",
    GraphQL: "applet",
    custom: "applet"
},
    arg: {
    frontend: "arg",
    backend: "arg",
    database: "arg",
    pretty: "Arg",
    component: "Arg",
    kebab: "arg",
    sqlFunctionRef: "p_arg",
    RestAPI: "arg",
    GraphQL: "arg",
    custom: "arg"
},
    audioLabel: {
    frontend: "audioLabel",
    backend: "audio_label",
    database: "audio_label",
    pretty: "Audio Label",
    component: "AudioLabel",
    kebab: "audio-label",
    sqlFunctionRef: "p_audio_label",
    RestAPI: "audioLabel",
    GraphQL: "audioLabel",
    custom: "audioLabel"
},
    audioRecording: {
    frontend: "audioRecording",
    backend: "audio_recording",
    database: "audio_recording",
    pretty: "Audio Recording",
    component: "AudioRecording",
    kebab: "audio-recording",
    sqlFunctionRef: "p_audio_recording",
    RestAPI: "audioRecording",
    GraphQL: "audioRecording",
    custom: "audioRecording"
},
    audioRecordingUsers: {
    frontend: "audioRecordingUsers",
    backend: "audio_recording_users",
    database: "audio_recording_users",
    pretty: "Audio Recording Users",
    component: "AudioRecordingUsers",
    kebab: "audio-recording-users",
    sqlFunctionRef: "p_audio_recording_users",
    RestAPI: "audioRecordingUsers",
    GraphQL: "audioRecordingUsers",
    custom: "audioRecordingUsers"
},
    automationBoundaryBroker: {
    frontend: "automationBoundaryBroker",
    backend: "automation_boundary_broker",
    database: "automation_boundary_broker",
    pretty: "Automation Boundary Broker",
    component: "AutomationBoundaryBroker",
    kebab: "automation-boundary-broker",
    sqlFunctionRef: "p_automation_boundary_broker",
    RestAPI: "automationBoundaryBroker",
    GraphQL: "automationBoundaryBroker",
    custom: "automationBoundaryBroker"
},
    automationMatrix: {
    frontend: "automationMatrix",
    backend: "automation_matrix",
    database: "automation_matrix",
    pretty: "Automation Matrix",
    component: "AutomationMatrix",
    kebab: "automation-matrix",
    sqlFunctionRef: "p_automation_matrix",
    RestAPI: "automationMatrix",
    GraphQL: "automationMatrix",
    custom: "automationMatrix"
},
    broker: {
    frontend: "broker",
    backend: "broker",
    database: "broker",
    pretty: "Broker",
    component: "Broker",
    kebab: "broker",
    sqlFunctionRef: "p_broker",
    RestAPI: "broker",
    GraphQL: "broker",
    custom: "broker"
},
    brokerValue: {
    frontend: "brokerValue",
    backend: "broker_value",
    database: "broker_value",
    pretty: "Broker Value",
    component: "BrokerValue",
    kebab: "broker-value",
    sqlFunctionRef: "p_broker_value",
    RestAPI: "brokerValue",
    GraphQL: "brokerValue",
    custom: "brokerValue"
},
    bucketStructures: {
    frontend: "bucketStructures",
    backend: "bucket_structures",
    database: "bucket_structures",
    pretty: "Bucket Structures",
    component: "BucketStructures",
    kebab: "bucket-structures",
    sqlFunctionRef: "p_bucket_structures",
    RestAPI: "bucketStructures",
    GraphQL: "bucketStructures",
    custom: "bucketStructures"
},
    bucketTreeStructures: {
    frontend: "bucketTreeStructures",
    backend: "bucket_tree_structures",
    database: "bucket_tree_structures",
    pretty: "Bucket Tree Structures",
    component: "BucketTreeStructures",
    kebab: "bucket-tree-structures",
    sqlFunctionRef: "p_bucket_tree_structures",
    RestAPI: "bucketTreeStructures",
    GraphQL: "bucketTreeStructures",
    custom: "bucketTreeStructures"
},
    category: {
    frontend: "category",
    backend: "category",
    database: "category",
    pretty: "Category",
    component: "Category",
    kebab: "category",
    sqlFunctionRef: "p_category",
    RestAPI: "category",
    GraphQL: "category",
    custom: "category"
},
    compiledRecipe: {
    frontend: "compiledRecipe",
    backend: "compiled_recipe",
    database: "compiled_recipe",
    pretty: "Compiled Recipe",
    component: "CompiledRecipe",
    kebab: "compiled-recipe",
    sqlFunctionRef: "p_compiled_recipe",
    RestAPI: "compiledRecipe",
    GraphQL: "compiledRecipe",
    custom: "compiledRecipe"
},
    conversation: {
    frontend: "conversation",
    backend: "conversation",
    database: "conversation",
    pretty: "Conversation",
    component: "Conversation",
    kebab: "conversation",
    sqlFunctionRef: "p_conversation",
    RestAPI: "conversation",
    GraphQL: "conversation",
    custom: "conversation"
},
    dataBroker: {
    frontend: "dataBroker",
    backend: "data_broker",
    database: "data_broker",
    pretty: "Data Broker",
    component: "DataBroker",
    kebab: "data-broker",
    sqlFunctionRef: "p_data_broker",
    RestAPI: "dataBroker",
    GraphQL: "dataBroker",
    custom: "dataBroker"
},
    dataInputComponent: {
    frontend: "dataInputComponent",
    backend: "data_input_component",
    database: "data_input_component",
    pretty: "Data Input Component",
    component: "DataInputComponent",
    kebab: "data-input-component",
    sqlFunctionRef: "p_data_input_component",
    RestAPI: "dataInputComponent",
    GraphQL: "dataInputComponent",
    custom: "dataInputComponent"
},
    dataOutputComponent: {
    frontend: "dataOutputComponent",
    backend: "data_output_component",
    database: "data_output_component",
    pretty: "Data Output Component",
    component: "DataOutputComponent",
    kebab: "data-output-component",
    sqlFunctionRef: "p_data_output_component",
    RestAPI: "dataOutputComponent",
    GraphQL: "dataOutputComponent",
    custom: "dataOutputComponent"
},
    displayOption: {
    frontend: "displayOption",
    backend: "display_option",
    database: "display_option",
    pretty: "Display Option",
    component: "DisplayOption",
    kebab: "display-option",
    sqlFunctionRef: "p_display_option",
    RestAPI: "displayOption",
    GraphQL: "displayOption",
    custom: "displayOption"
},
    emails: {
    frontend: "emails",
    backend: "emails",
    database: "emails",
    pretty: "Emails",
    component: "Emails",
    kebab: "emails",
    sqlFunctionRef: "p_emails",
    RestAPI: "emails",
    GraphQL: "emails",
    custom: "emails"
},
    extractor: {
    frontend: "extractor",
    backend: "extractor",
    database: "extractor",
    pretty: "Extractor",
    component: "Extractor",
    kebab: "extractor",
    sqlFunctionRef: "p_extractor",
    RestAPI: "extractor",
    GraphQL: "extractor",
    custom: "extractor"
},
    fileStructure: {
    frontend: "fileStructure",
    backend: "file_structure",
    database: "file_structure",
    pretty: "File Structure",
    component: "FileStructure",
    kebab: "file-structure",
    sqlFunctionRef: "p_file_structure",
    RestAPI: "fileStructure",
    GraphQL: "fileStructure",
    custom: "fileStructure"
},
    flashcardData: {
    frontend: "flashcardData",
    backend: "flashcard_data",
    database: "flashcard_data",
    pretty: "Flashcard Data",
    component: "FlashcardData",
    kebab: "flashcard-data",
    sqlFunctionRef: "p_flashcard_data",
    RestAPI: "flashcardData",
    GraphQL: "flashcardData",
    custom: "flashcardData"
},
    flashcardHistory: {
    frontend: "flashcardHistory",
    backend: "flashcard_history",
    database: "flashcard_history",
    pretty: "Flashcard History",
    component: "FlashcardHistory",
    kebab: "flashcard-history",
    sqlFunctionRef: "p_flashcard_history",
    RestAPI: "flashcardHistory",
    GraphQL: "flashcardHistory",
    custom: "flashcardHistory"
},
    flashcardImages: {
    frontend: "flashcardImages",
    backend: "flashcard_images",
    database: "flashcard_images",
    pretty: "Flashcard Images",
    component: "FlashcardImages",
    kebab: "flashcard-images",
    sqlFunctionRef: "p_flashcard_images",
    RestAPI: "flashcardImages",
    GraphQL: "flashcardImages",
    custom: "flashcardImages"
},
    flashcardSetRelations: {
    frontend: "flashcardSetRelations",
    backend: "flashcard_set_relations",
    database: "flashcard_set_relations",
    pretty: "Flashcard Set Relations",
    component: "FlashcardSetRelations",
    kebab: "flashcard-set-relations",
    sqlFunctionRef: "p_flashcard_set_relations",
    RestAPI: "flashcardSetRelations",
    GraphQL: "flashcardSetRelations",
    custom: "flashcardSetRelations"
},
    flashcardSets: {
    frontend: "flashcardSets",
    backend: "flashcard_sets",
    database: "flashcard_sets",
    pretty: "Flashcard Sets",
    component: "FlashcardSets",
    kebab: "flashcard-sets",
    sqlFunctionRef: "p_flashcard_sets",
    RestAPI: "flashcardSets",
    GraphQL: "flashcardSets",
    custom: "flashcardSets"
},
    fullSpectrumPositions: {
    frontend: "fullSpectrumPositions",
    backend: "full_spectrum_positions",
    database: "full_spectrum_positions",
    pretty: "Full Spectrum Positions",
    component: "FullSpectrumPositions",
    kebab: "full-spectrum-positions",
    sqlFunctionRef: "p_full_spectrum_positions",
    RestAPI: "fullSpectrumPositions",
    GraphQL: "fullSpectrumPositions",
    custom: "fullSpectrumPositions"
},
    message: {
    frontend: "message",
    backend: "message",
    database: "message",
    pretty: "Message",
    component: "Message",
    kebab: "message",
    sqlFunctionRef: "p_message",
    RestAPI: "message",
    GraphQL: "message",
    custom: "message"
},
    messageBroker: {
    frontend: "messageBroker",
    backend: "message_broker",
    database: "message_broker",
    pretty: "Message Broker",
    component: "MessageBroker",
    kebab: "message-broker",
    sqlFunctionRef: "p_message_broker",
    RestAPI: "messageBroker",
    GraphQL: "messageBroker",
    custom: "messageBroker"
},
    messageTemplate: {
    frontend: "messageTemplate",
    backend: "message_template",
    database: "message_template",
    pretty: "Message Template",
    component: "MessageTemplate",
    kebab: "message-template",
    sqlFunctionRef: "p_message_template",
    RestAPI: "messageTemplate",
    GraphQL: "messageTemplate",
    custom: "messageTemplate"
},
    organizationInvitations: {
    frontend: "organizationInvitations",
    backend: "organization_invitations",
    database: "organization_invitations",
    pretty: "Organization Invitations",
    component: "OrganizationInvitations",
    kebab: "organization-invitations",
    sqlFunctionRef: "p_organization_invitations",
    RestAPI: "organizationInvitations",
    GraphQL: "organizationInvitations",
    custom: "organizationInvitations"
},
    organizationMembers: {
    frontend: "organizationMembers",
    backend: "organization_members",
    database: "organization_members",
    pretty: "Organization Members",
    component: "OrganizationMembers",
    kebab: "organization-members",
    sqlFunctionRef: "p_organization_members",
    RestAPI: "organizationMembers",
    GraphQL: "organizationMembers",
    custom: "organizationMembers"
},
    organizations: {
    frontend: "organizations",
    backend: "organizations",
    database: "organizations",
    pretty: "Organizations",
    component: "Organizations",
    kebab: "organizations",
    sqlFunctionRef: "p_organizations",
    RestAPI: "organizations",
    GraphQL: "organizations",
    custom: "organizations"
},
    permissions: {
    frontend: "permissions",
    backend: "permissions",
    database: "permissions",
    pretty: "Permissions",
    component: "Permissions",
    kebab: "permissions",
    sqlFunctionRef: "p_permissions",
    RestAPI: "permissions",
    GraphQL: "permissions",
    custom: "permissions"
},
    processor: {
    frontend: "processor",
    backend: "processor",
    database: "processor",
    pretty: "Processor",
    component: "Processor",
    kebab: "processor",
    sqlFunctionRef: "p_processor",
    RestAPI: "processor",
    GraphQL: "processor",
    custom: "processor"
},
    projectMembers: {
    frontend: "projectMembers",
    backend: "project_members",
    database: "project_members",
    pretty: "Project Members",
    component: "ProjectMembers",
    kebab: "project-members",
    sqlFunctionRef: "p_project_members",
    RestAPI: "projectMembers",
    GraphQL: "projectMembers",
    custom: "projectMembers"
},
    projects: {
    frontend: "projects",
    backend: "projects",
    database: "projects",
    pretty: "Projects",
    component: "Projects",
    kebab: "projects",
    sqlFunctionRef: "p_projects",
    RestAPI: "projects",
    GraphQL: "projects",
    custom: "projects"
},
    recipe: {
    frontend: "recipe",
    backend: "recipe",
    database: "recipe",
    pretty: "Recipe",
    component: "Recipe",
    kebab: "recipe",
    sqlFunctionRef: "p_recipe",
    RestAPI: "recipe",
    GraphQL: "recipe",
    custom: "recipe"
},
    recipeBroker: {
    frontend: "recipeBroker",
    backend: "recipe_broker",
    database: "recipe_broker",
    pretty: "Recipe Broker",
    component: "RecipeBroker",
    kebab: "recipe-broker",
    sqlFunctionRef: "p_recipe_broker",
    RestAPI: "recipeBroker",
    GraphQL: "recipeBroker",
    custom: "recipeBroker"
},
    recipeDisplay: {
    frontend: "recipeDisplay",
    backend: "recipe_display",
    database: "recipe_display",
    pretty: "Recipe Display",
    component: "RecipeDisplay",
    kebab: "recipe-display",
    sqlFunctionRef: "p_recipe_display",
    RestAPI: "recipeDisplay",
    GraphQL: "recipeDisplay",
    custom: "recipeDisplay"
},
    recipeFunction: {
    frontend: "recipeFunction",
    backend: "recipe_function",
    database: "recipe_function",
    pretty: "Recipe Function",
    component: "RecipeFunction",
    kebab: "recipe-function",
    sqlFunctionRef: "p_recipe_function",
    RestAPI: "recipeFunction",
    GraphQL: "recipeFunction",
    custom: "recipeFunction"
},
    recipeMessage: {
    frontend: "recipeMessage",
    backend: "recipe_message",
    database: "recipe_message",
    pretty: "Recipe Message",
    component: "RecipeMessage",
    kebab: "recipe-message",
    sqlFunctionRef: "p_recipe_message",
    RestAPI: "recipeMessage",
    GraphQL: "recipeMessage",
    custom: "recipeMessage"
},
    recipeMessageReorderQueue: {
    frontend: "recipeMessageReorderQueue",
    backend: "recipe_message_reorder_queue",
    database: "recipe_message_reorder_queue",
    pretty: "Recipe Message Reorder Queue",
    component: "RecipeMessageReorderQueue",
    kebab: "recipe-message-reorder-queue",
    sqlFunctionRef: "p_recipe_message_reorder_queue",
    RestAPI: "recipeMessageReorderQueue",
    GraphQL: "recipeMessageReorderQueue",
    custom: "recipeMessageReorderQueue"
},
    recipeModel: {
    frontend: "recipeModel",
    backend: "recipe_model",
    database: "recipe_model",
    pretty: "Recipe Model",
    component: "RecipeModel",
    kebab: "recipe-model",
    sqlFunctionRef: "p_recipe_model",
    RestAPI: "recipeModel",
    GraphQL: "recipeModel",
    custom: "recipeModel"
},
    recipeProcessor: {
    frontend: "recipeProcessor",
    backend: "recipe_processor",
    database: "recipe_processor",
    pretty: "Recipe Processor",
    component: "RecipeProcessor",
    kebab: "recipe-processor",
    sqlFunctionRef: "p_recipe_processor",
    RestAPI: "recipeProcessor",
    GraphQL: "recipeProcessor",
    custom: "recipeProcessor"
},
    recipeTool: {
    frontend: "recipeTool",
    backend: "recipe_tool",
    database: "recipe_tool",
    pretty: "Recipe Tool",
    component: "RecipeTool",
    kebab: "recipe-tool",
    sqlFunctionRef: "p_recipe_tool",
    RestAPI: "recipeTool",
    GraphQL: "recipeTool",
    custom: "recipeTool"
},
    registeredFunction: {
    frontend: "registeredFunction",
    backend: "registered_function",
    database: "registered_function",
    pretty: "Registered Function",
    component: "RegisteredFunction",
    kebab: "registered-function",
    sqlFunctionRef: "p_registered_function",
    RestAPI: "registeredFunction",
    GraphQL: "registeredFunction",
    custom: "registeredFunction"
},
    scrapeConfiguration: {
    frontend: "scrapeConfiguration",
    backend: "scrape_configuration",
    database: "scrape_configuration",
    pretty: "Scrape Configuration",
    component: "ScrapeConfiguration",
    kebab: "scrape-configuration",
    sqlFunctionRef: "p_scrape_configuration",
    RestAPI: "scrapeConfiguration",
    GraphQL: "scrapeConfiguration",
    custom: "scrapeConfiguration"
},
    scrapeDomain: {
    frontend: "scrapeDomain",
    backend: "scrape_domain",
    database: "scrape_domain",
    pretty: "Scrape Domain",
    component: "ScrapeDomain",
    kebab: "scrape-domain",
    sqlFunctionRef: "p_scrape_domain",
    RestAPI: "scrapeDomain",
    GraphQL: "scrapeDomain",
    custom: "scrapeDomain"
},
    scrapeDomainDisallowedNotes: {
    frontend: "scrapeDomainDisallowedNotes",
    backend: "scrape_domain_disallowed_notes",
    database: "scrape_domain_disallowed_notes",
    pretty: "Scrape Domain Disallowed Notes",
    component: "ScrapeDomainDisallowedNotes",
    kebab: "scrape-domain-disallowed-notes",
    sqlFunctionRef: "p_scrape_domain_disallowed_notes",
    RestAPI: "scrapeDomainDisallowedNotes",
    GraphQL: "scrapeDomainDisallowedNotes",
    custom: "scrapeDomainDisallowedNotes"
},
    scrapeDomainNotes: {
    frontend: "scrapeDomainNotes",
    backend: "scrape_domain_notes",
    database: "scrape_domain_notes",
    pretty: "Scrape Domain Notes",
    component: "ScrapeDomainNotes",
    kebab: "scrape-domain-notes",
    sqlFunctionRef: "p_scrape_domain_notes",
    RestAPI: "scrapeDomainNotes",
    GraphQL: "scrapeDomainNotes",
    custom: "scrapeDomainNotes"
},
    scrapeDomainQuickScrapeSettings: {
    frontend: "scrapeDomainQuickScrapeSettings",
    backend: "scrape_domain_quick_scrape_settings",
    database: "scrape_domain_quick_scrape_settings",
    pretty: "Scrape Domain Quick Scrape Settings",
    component: "ScrapeDomainQuickScrapeSettings",
    kebab: "scrape-domain-quick-scrape-settings",
    sqlFunctionRef: "p_scrape_domain_quick_scrape_settings",
    RestAPI: "scrapeDomainQuickScrapeSettings",
    GraphQL: "scrapeDomainQuickScrapeSettings",
    custom: "scrapeDomainQuickScrapeSettings"
},
    scrapeDomainRobotsTxt: {
    frontend: "scrapeDomainRobotsTxt",
    backend: "scrape_domain_robots_txt",
    database: "scrape_domain_robots_txt",
    pretty: "Scrape Domain Robots Txt",
    component: "ScrapeDomainRobotsTxt",
    kebab: "scrape-domain-robots-txt",
    sqlFunctionRef: "p_scrape_domain_robots_txt",
    RestAPI: "scrapeDomainRobotsTxt",
    GraphQL: "scrapeDomainRobotsTxt",
    custom: "scrapeDomainRobotsTxt"
},
    scrapeDomainSitemap: {
    frontend: "scrapeDomainSitemap",
    backend: "scrape_domain_sitemap",
    database: "scrape_domain_sitemap",
    pretty: "Scrape Domain Sitemap",
    component: "ScrapeDomainSitemap",
    kebab: "scrape-domain-sitemap",
    sqlFunctionRef: "p_scrape_domain_sitemap",
    RestAPI: "scrapeDomainSitemap",
    GraphQL: "scrapeDomainSitemap",
    custom: "scrapeDomainSitemap"
},
    scrapeOverride: {
    frontend: "scrapeOverride",
    backend: "scrape_override",
    database: "scrape_override",
    pretty: "Scrape Override",
    component: "ScrapeOverride",
    kebab: "scrape-override",
    sqlFunctionRef: "p_scrape_override",
    RestAPI: "scrapeOverride",
    GraphQL: "scrapeOverride",
    custom: "scrapeOverride"
},
    scrapeOverrideValue: {
    frontend: "scrapeOverrideValue",
    backend: "scrape_override_value",
    database: "scrape_override_value",
    pretty: "Scrape Override Value",
    component: "ScrapeOverrideValue",
    kebab: "scrape-override-value",
    sqlFunctionRef: "p_scrape_override_value",
    RestAPI: "scrapeOverrideValue",
    GraphQL: "scrapeOverrideValue",
    custom: "scrapeOverrideValue"
},
    scrapePathPattern: {
    frontend: "scrapePathPattern",
    backend: "scrape_path_pattern",
    database: "scrape_path_pattern",
    pretty: "Scrape Path Pattern",
    component: "ScrapePathPattern",
    kebab: "scrape-path-pattern",
    sqlFunctionRef: "p_scrape_path_pattern",
    RestAPI: "scrapePathPattern",
    GraphQL: "scrapePathPattern",
    custom: "scrapePathPattern"
},
    scrapePathPatternOverride: {
    frontend: "scrapePathPatternOverride",
    backend: "scrape_path_pattern_override",
    database: "scrape_path_pattern_override",
    pretty: "Scrape Path Pattern Override",
    component: "ScrapePathPatternOverride",
    kebab: "scrape-path-pattern-override",
    sqlFunctionRef: "p_scrape_path_pattern_override",
    RestAPI: "scrapePathPatternOverride",
    GraphQL: "scrapePathPatternOverride",
    custom: "scrapePathPatternOverride"
},
    subcategory: {
    frontend: "subcategory",
    backend: "subcategory",
    database: "subcategory",
    pretty: "Subcategory",
    component: "Subcategory",
    kebab: "subcategory",
    sqlFunctionRef: "p_subcategory",
    RestAPI: "subcategory",
    GraphQL: "subcategory",
    custom: "subcategory"
},
    systemFunction: {
    frontend: "systemFunction",
    backend: "system_function",
    database: "system_function",
    pretty: "System Function",
    component: "SystemFunction",
    kebab: "system-function",
    sqlFunctionRef: "p_system_function",
    RestAPI: "systemFunction",
    GraphQL: "systemFunction",
    custom: "systemFunction"
},
    taskAssignments: {
    frontend: "taskAssignments",
    backend: "task_assignments",
    database: "task_assignments",
    pretty: "Task Assignments",
    component: "TaskAssignments",
    kebab: "task-assignments",
    sqlFunctionRef: "p_task_assignments",
    RestAPI: "taskAssignments",
    GraphQL: "taskAssignments",
    custom: "taskAssignments"
},
    taskAttachments: {
    frontend: "taskAttachments",
    backend: "task_attachments",
    database: "task_attachments",
    pretty: "Task Attachments",
    component: "TaskAttachments",
    kebab: "task-attachments",
    sqlFunctionRef: "p_task_attachments",
    RestAPI: "taskAttachments",
    GraphQL: "taskAttachments",
    custom: "taskAttachments"
},
    taskComments: {
    frontend: "taskComments",
    backend: "task_comments",
    database: "task_comments",
    pretty: "Task Comments",
    component: "TaskComments",
    kebab: "task-comments",
    sqlFunctionRef: "p_task_comments",
    RestAPI: "taskComments",
    GraphQL: "taskComments",
    custom: "taskComments"
},
    tasks: {
    frontend: "tasks",
    backend: "tasks",
    database: "tasks",
    pretty: "Tasks",
    component: "Tasks",
    kebab: "tasks",
    sqlFunctionRef: "p_tasks",
    RestAPI: "tasks",
    GraphQL: "tasks",
    custom: "tasks"
},
    tool: {
    frontend: "tool",
    backend: "tool",
    database: "tool",
    pretty: "Tool",
    component: "Tool",
    kebab: "tool",
    sqlFunctionRef: "p_tool",
    RestAPI: "tool",
    GraphQL: "tool",
    custom: "tool"
},
    transformer: {
    frontend: "transformer",
    backend: "transformer",
    database: "transformer",
    pretty: "Transformer",
    component: "Transformer",
    kebab: "transformer",
    sqlFunctionRef: "p_transformer",
    RestAPI: "transformer",
    GraphQL: "transformer",
    custom: "transformer"
},
    userPreferences: {
    frontend: "userPreferences",
    backend: "user_preferences",
    database: "user_preferences",
    pretty: "User Preferences",
    component: "UserPreferences",
    kebab: "user-preferences",
    sqlFunctionRef: "p_user_preferences",
    RestAPI: "userPreferences",
    GraphQL: "userPreferences",
    custom: "userPreferences"
},
    wcClaim: {
    frontend: "wcClaim",
    backend: "wc_claim",
    database: "wc_claim",
    pretty: "Wc Claim",
    component: "WcClaim",
    kebab: "wc-claim",
    sqlFunctionRef: "p_wc_claim",
    RestAPI: "wcClaim",
    GraphQL: "wcClaim",
    custom: "wcClaim"
},
    wcImpairmentDefinition: {
    frontend: "wcImpairmentDefinition",
    backend: "wc_impairment_definition",
    database: "wc_impairment_definition",
    pretty: "Wc Impairment Definition",
    component: "WcImpairmentDefinition",
    kebab: "wc-impairment-definition",
    sqlFunctionRef: "p_wc_impairment_definition",
    RestAPI: "wcImpairmentDefinition",
    GraphQL: "wcImpairmentDefinition",
    custom: "wcImpairmentDefinition"
},
    wcInjury: {
    frontend: "wcInjury",
    backend: "wc_injury",
    database: "wc_injury",
    pretty: "Wc Injury",
    component: "WcInjury",
    kebab: "wc-injury",
    sqlFunctionRef: "p_wc_injury",
    RestAPI: "wcInjury",
    GraphQL: "wcInjury",
    custom: "wcInjury"
},
    wcReport: {
    frontend: "wcReport",
    backend: "wc_report",
    database: "wc_report",
    pretty: "Wc Report",
    component: "WcReport",
    kebab: "wc-report",
    sqlFunctionRef: "p_wc_report",
    RestAPI: "wcReport",
    GraphQL: "wcReport",
    custom: "wcReport"
},
};

export const fieldNameFormats: FieldNameFormatMap = {
    action: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    matrix: {
        frontend: "matrix",
        backend: "matrix",
        database: "matrix",
        pretty: "Matrix",
        component: "Matrix",
        kebab: "matrix",
        sqlFunctionRef: "p_matrix",
        RestAPI: "matrix",
        GraphQL: "matrix",
        custom: "matrix"
    },
    transformer: {
        frontend: "transformer",
        backend: "transformer",
        database: "transformer",
        pretty: "Transformer",
        component: "Transformer",
        kebab: "transformer",
        sqlFunctionRef: "p_transformer",
        RestAPI: "transformer",
        GraphQL: "transformer",
        custom: "transformer"
    },
    nodeType: {
        frontend: "nodeType",
        backend: "node_type",
        database: "node_type",
        pretty: "Node Type",
        component: "NodeType",
        kebab: "node-type",
        sqlFunctionRef: "p_node_type",
        RestAPI: "nodeType",
        GraphQL: "nodeType",
        custom: "nodeType"
    },
    referenceId: {
        frontend: "referenceId",
        backend: "reference_id",
        database: "reference_id",
        pretty: "Reference Id",
        component: "ReferenceId",
        kebab: "reference-id",
        sqlFunctionRef: "p_reference_id",
        RestAPI: "referenceId",
        GraphQL: "referenceId",
        custom: "referenceId"
    },
    automationMatrixReference: {
        frontend: "automationMatrixReference",
        backend: "automation_matrix_reference",
        database: "ref_automation_matrix",
        pretty: "Automation Matrix Reference",
        component: "AutomationMatrixReference",
        kebab: "automation-matrixReference",
        sqlFunctionRef: "p_ref_automation_matrix",
        RestAPI: "automationMatrixReference",
        GraphQL: "automationMatrixReference",
        custom: "automationMatrixReference"
    },
    transformerReference: {
        frontend: "transformerReference",
        backend: "transformer_reference",
        database: "ref_transformer",
        pretty: "Transformer Reference",
        component: "TransformerReference",
        kebab: "transformerReference",
        sqlFunctionRef: "p_ref_transformer",
        RestAPI: "transformerReference",
        GraphQL: "transformerReference",
        custom: "transformerReference"
    }
},
    admins: {
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    }
},
    aiAgent: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    recipeId: {
        frontend: "recipeId",
        backend: "recipe_id",
        database: "recipe_id",
        pretty: "Recipe Id",
        component: "RecipeId",
        kebab: "recipe-id",
        sqlFunctionRef: "p_recipe_id",
        RestAPI: "recipeId",
        GraphQL: "recipeId",
        custom: "recipeId"
    },
    aiSettingsId: {
        frontend: "aiSettingsId",
        backend: "ai_settings_id",
        database: "ai_settings_id",
        pretty: "Ai Settings Id",
        component: "AiSettingsId",
        kebab: "ai-settings-id",
        sqlFunctionRef: "p_ai_settings_id",
        RestAPI: "aiSettingsId",
        GraphQL: "aiSettingsId",
        custom: "aiSettingsId"
    },
    systemMessageOverride: {
        frontend: "systemMessageOverride",
        backend: "system_message_override",
        database: "system_message_override",
        pretty: "System Message Override",
        component: "SystemMessageOverride",
        kebab: "system-message-override",
        sqlFunctionRef: "p_system_message_override",
        RestAPI: "systemMessageOverride",
        GraphQL: "systemMessageOverride",
        custom: "systemMessageOverride"
    },
    aiSettingsReference: {
        frontend: "aiSettingsReference",
        backend: "ai_settings_reference",
        database: "ref_ai_settings",
        pretty: "Ai Settings Reference",
        component: "AiSettingsReference",
        kebab: "ai-settingsReference",
        sqlFunctionRef: "p_ref_ai_settings",
        RestAPI: "aiSettingsReference",
        GraphQL: "aiSettingsReference",
        custom: "aiSettingsReference"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    }
},
    aiEndpoint: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    provider: {
        frontend: "provider",
        backend: "provider",
        database: "provider",
        pretty: "Provider",
        component: "Provider",
        kebab: "provider",
        sqlFunctionRef: "p_provider",
        RestAPI: "provider",
        GraphQL: "provider",
        custom: "provider"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    additionalCost: {
        frontend: "additionalCost",
        backend: "additional_cost",
        database: "additional_cost",
        pretty: "Additional Cost",
        component: "AdditionalCost",
        kebab: "additional-cost",
        sqlFunctionRef: "p_additional_cost",
        RestAPI: "additionalCost",
        GraphQL: "additionalCost",
        custom: "additionalCost"
    },
    costDetails: {
        frontend: "costDetails",
        backend: "cost_details",
        database: "cost_details",
        pretty: "Cost Details",
        component: "CostDetails",
        kebab: "cost-details",
        sqlFunctionRef: "p_cost_details",
        RestAPI: "costDetails",
        GraphQL: "costDetails",
        custom: "costDetails"
    },
    params: {
        frontend: "params",
        backend: "params",
        database: "params",
        pretty: "Params",
        component: "Params",
        kebab: "params",
        sqlFunctionRef: "p_params",
        RestAPI: "params",
        GraphQL: "params",
        custom: "params"
    },
    aiModelEndpointInverse: {
        frontend: "aiModelEndpointInverse",
        backend: "ai_model_endpoint_Inverse",
        database: "ifk_ai_model_endpoint",
        pretty: "Ai Model Endpoint Inverse",
        component: "AiModelEndpointInverse",
        kebab: "ai-model-endpointInverse",
        sqlFunctionRef: "p_ifk_ai_model_endpoint",
        RestAPI: "aiModelEndpointInverse",
        GraphQL: "aiModelEndpointInverse",
        custom: "aiModelEndpointInverse"
    },
    aiSettingsInverse: {
        frontend: "aiSettingsInverse",
        backend: "ai_settings_Inverse",
        database: "ifk_ai_settings",
        pretty: "Ai Settings Inverse",
        component: "AiSettingsInverse",
        kebab: "ai-settingsInverse",
        sqlFunctionRef: "p_ifk_ai_settings",
        RestAPI: "aiSettingsInverse",
        GraphQL: "aiSettingsInverse",
        custom: "aiSettingsInverse"
    }
},
    aiModel: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    commonName: {
        frontend: "commonName",
        backend: "common_name",
        database: "common_name",
        pretty: "Common Name",
        component: "CommonName",
        kebab: "common-name",
        sqlFunctionRef: "p_common_name",
        RestAPI: "commonName",
        GraphQL: "commonName",
        custom: "commonName"
    },
    modelClass: {
        frontend: "modelClass",
        backend: "model_class",
        database: "model_class",
        pretty: "Model Class",
        component: "ModelClass",
        kebab: "model-class",
        sqlFunctionRef: "p_model_class",
        RestAPI: "modelClass",
        GraphQL: "modelClass",
        custom: "modelClass"
    },
    provider: {
        frontend: "provider",
        backend: "provider",
        database: "provider",
        pretty: "Provider",
        component: "Provider",
        kebab: "provider",
        sqlFunctionRef: "p_provider",
        RestAPI: "provider",
        GraphQL: "provider",
        custom: "provider"
    },
    endpoints: {
        frontend: "endpoints",
        backend: "endpoints",
        database: "endpoints",
        pretty: "Endpoints",
        component: "Endpoints",
        kebab: "endpoints",
        sqlFunctionRef: "p_endpoints",
        RestAPI: "endpoints",
        GraphQL: "endpoints",
        custom: "endpoints"
    },
    contextWindow: {
        frontend: "contextWindow",
        backend: "context_window",
        database: "context_window",
        pretty: "Context Window",
        component: "ContextWindow",
        kebab: "context-window",
        sqlFunctionRef: "p_context_window",
        RestAPI: "contextWindow",
        GraphQL: "contextWindow",
        custom: "contextWindow"
    },
    maxTokens: {
        frontend: "maxTokens",
        backend: "max_tokens",
        database: "max_tokens",
        pretty: "Max Tokens",
        component: "MaxTokens",
        kebab: "max-tokens",
        sqlFunctionRef: "p_max_tokens",
        RestAPI: "maxTokens",
        GraphQL: "maxTokens",
        custom: "maxTokens"
    },
    capabilities: {
        frontend: "capabilities",
        backend: "capabilities",
        database: "capabilities",
        pretty: "Capabilities",
        component: "Capabilities",
        kebab: "capabilities",
        sqlFunctionRef: "p_capabilities",
        RestAPI: "capabilities",
        GraphQL: "capabilities",
        custom: "capabilities"
    },
    controls: {
        frontend: "controls",
        backend: "controls",
        database: "controls",
        pretty: "Controls",
        component: "Controls",
        kebab: "controls",
        sqlFunctionRef: "p_controls",
        RestAPI: "controls",
        GraphQL: "controls",
        custom: "controls"
    },
    modelProvider: {
        frontend: "modelProvider",
        backend: "model_provider",
        database: "model_provider",
        pretty: "Model Provider",
        component: "ModelProvider",
        kebab: "model-provider",
        sqlFunctionRef: "p_model_provider",
        RestAPI: "modelProvider",
        GraphQL: "modelProvider",
        custom: "modelProvider"
    },
    aiProviderReference: {
        frontend: "aiProviderReference",
        backend: "ai_provider_reference",
        database: "ref_ai_provider",
        pretty: "Ai Provider Reference",
        component: "AiProviderReference",
        kebab: "ai-providerReference",
        sqlFunctionRef: "p_ref_ai_provider",
        RestAPI: "aiProviderReference",
        GraphQL: "aiProviderReference",
        custom: "aiProviderReference"
    },
    aiModelEndpointInverse: {
        frontend: "aiModelEndpointInverse",
        backend: "ai_model_endpoint_Inverse",
        database: "ifk_ai_model_endpoint",
        pretty: "Ai Model Endpoint Inverse",
        component: "AiModelEndpointInverse",
        kebab: "ai-model-endpointInverse",
        sqlFunctionRef: "p_ifk_ai_model_endpoint",
        RestAPI: "aiModelEndpointInverse",
        GraphQL: "aiModelEndpointInverse",
        custom: "aiModelEndpointInverse"
    },
    aiSettingsInverse: {
        frontend: "aiSettingsInverse",
        backend: "ai_settings_Inverse",
        database: "ifk_ai_settings",
        pretty: "Ai Settings Inverse",
        component: "AiSettingsInverse",
        kebab: "ai-settingsInverse",
        sqlFunctionRef: "p_ifk_ai_settings",
        RestAPI: "aiSettingsInverse",
        GraphQL: "aiSettingsInverse",
        custom: "aiSettingsInverse"
    },
    recipeModelInverse: {
        frontend: "recipeModelInverse",
        backend: "recipe_model_Inverse",
        database: "ifk_recipe_model",
        pretty: "Recipe Model Inverse",
        component: "RecipeModelInverse",
        kebab: "recipe-modelInverse",
        sqlFunctionRef: "p_ifk_recipe_model",
        RestAPI: "recipeModelInverse",
        GraphQL: "recipeModelInverse",
        custom: "recipeModelInverse"
    }
},
    aiModelEndpoint: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    aiModelId: {
        frontend: "aiModelId",
        backend: "ai_model_id",
        database: "ai_model_id",
        pretty: "Ai Model Id",
        component: "AiModelId",
        kebab: "ai-model-id",
        sqlFunctionRef: "p_ai_model_id",
        RestAPI: "aiModelId",
        GraphQL: "aiModelId",
        custom: "aiModelId"
    },
    aiEndpointId: {
        frontend: "aiEndpointId",
        backend: "ai_endpoint_id",
        database: "ai_endpoint_id",
        pretty: "Ai Endpoint Id",
        component: "AiEndpointId",
        kebab: "ai-endpoint-id",
        sqlFunctionRef: "p_ai_endpoint_id",
        RestAPI: "aiEndpointId",
        GraphQL: "aiEndpointId",
        custom: "aiEndpointId"
    },
    available: {
        frontend: "available",
        backend: "available",
        database: "available",
        pretty: "Available",
        component: "Available",
        kebab: "available",
        sqlFunctionRef: "p_available",
        RestAPI: "available",
        GraphQL: "available",
        custom: "available"
    },
    endpointPriority: {
        frontend: "endpointPriority",
        backend: "endpoint_priority",
        database: "endpoint_priority",
        pretty: "Endpoint Priority",
        component: "EndpointPriority",
        kebab: "endpoint-priority",
        sqlFunctionRef: "p_endpoint_priority",
        RestAPI: "endpointPriority",
        GraphQL: "endpointPriority",
        custom: "endpointPriority"
    },
    configuration: {
        frontend: "configuration",
        backend: "configuration",
        database: "configuration",
        pretty: "Configuration",
        component: "Configuration",
        kebab: "configuration",
        sqlFunctionRef: "p_configuration",
        RestAPI: "configuration",
        GraphQL: "configuration",
        custom: "configuration"
    },
    notes: {
        frontend: "notes",
        backend: "notes",
        database: "notes",
        pretty: "Notes",
        component: "Notes",
        kebab: "notes",
        sqlFunctionRef: "p_notes",
        RestAPI: "notes",
        GraphQL: "notes",
        custom: "notes"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    aiEndpointReference: {
        frontend: "aiEndpointReference",
        backend: "ai_endpoint_reference",
        database: "ref_ai_endpoint",
        pretty: "Ai Endpoint Reference",
        component: "AiEndpointReference",
        kebab: "ai-endpointReference",
        sqlFunctionRef: "p_ref_ai_endpoint",
        RestAPI: "aiEndpointReference",
        GraphQL: "aiEndpointReference",
        custom: "aiEndpointReference"
    },
    aiModelReference: {
        frontend: "aiModelReference",
        backend: "ai_model_reference",
        database: "ref_ai_model",
        pretty: "Ai Model Reference",
        component: "AiModelReference",
        kebab: "ai-modelReference",
        sqlFunctionRef: "p_ref_ai_model",
        RestAPI: "aiModelReference",
        GraphQL: "aiModelReference",
        custom: "aiModelReference"
    }
},
    aiProvider: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    companyDescription: {
        frontend: "companyDescription",
        backend: "company_description",
        database: "company_description",
        pretty: "Company Description",
        component: "CompanyDescription",
        kebab: "company-description",
        sqlFunctionRef: "p_company_description",
        RestAPI: "companyDescription",
        GraphQL: "companyDescription",
        custom: "companyDescription"
    },
    documentationLink: {
        frontend: "documentationLink",
        backend: "documentation_link",
        database: "documentation_link",
        pretty: "Documentation Link",
        component: "DocumentationLink",
        kebab: "documentation-link",
        sqlFunctionRef: "p_documentation_link",
        RestAPI: "documentationLink",
        GraphQL: "documentationLink",
        custom: "documentationLink"
    },
    modelsLink: {
        frontend: "modelsLink",
        backend: "models_link",
        database: "models_link",
        pretty: "Models Link",
        component: "ModelsLink",
        kebab: "models-link",
        sqlFunctionRef: "p_models_link",
        RestAPI: "modelsLink",
        GraphQL: "modelsLink",
        custom: "modelsLink"
    },
    aiSettingsInverse: {
        frontend: "aiSettingsInverse",
        backend: "ai_settings_Inverse",
        database: "ifk_ai_settings",
        pretty: "Ai Settings Inverse",
        component: "AiSettingsInverse",
        kebab: "ai-settingsInverse",
        sqlFunctionRef: "p_ifk_ai_settings",
        RestAPI: "aiSettingsInverse",
        GraphQL: "aiSettingsInverse",
        custom: "aiSettingsInverse"
    },
    aiModelInverse: {
        frontend: "aiModelInverse",
        backend: "ai_model_Inverse",
        database: "ifk_ai_model",
        pretty: "Ai Model Inverse",
        component: "AiModelInverse",
        kebab: "ai-modelInverse",
        sqlFunctionRef: "p_ifk_ai_model",
        RestAPI: "aiModelInverse",
        GraphQL: "aiModelInverse",
        custom: "aiModelInverse"
    }
},
    aiSettings: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    aiEndpoint: {
        frontend: "aiEndpoint",
        backend: "ai_endpoint",
        database: "ai_endpoint",
        pretty: "Ai Endpoint",
        component: "AiEndpoint",
        kebab: "ai-endpoint",
        sqlFunctionRef: "p_ai_endpoint",
        RestAPI: "aiEndpoint",
        GraphQL: "aiEndpoint",
        custom: "aiEndpoint"
    },
    aiProvider: {
        frontend: "aiProvider",
        backend: "ai_provider",
        database: "ai_provider",
        pretty: "Ai Provider",
        component: "AiProvider",
        kebab: "ai-provider",
        sqlFunctionRef: "p_ai_provider",
        RestAPI: "aiProvider",
        GraphQL: "aiProvider",
        custom: "aiProvider"
    },
    aiModel: {
        frontend: "aiModel",
        backend: "ai_model",
        database: "ai_model",
        pretty: "Ai Model",
        component: "AiModel",
        kebab: "ai-model",
        sqlFunctionRef: "p_ai_model",
        RestAPI: "aiModel",
        GraphQL: "aiModel",
        custom: "aiModel"
    },
    temperature: {
        frontend: "temperature",
        backend: "temperature",
        database: "temperature",
        pretty: "Temperature",
        component: "Temperature",
        kebab: "temperature",
        sqlFunctionRef: "p_temperature",
        RestAPI: "temperature",
        GraphQL: "temperature",
        custom: "temperature"
    },
    maxTokens: {
        frontend: "maxTokens",
        backend: "max_tokens",
        database: "max_tokens",
        pretty: "Max Tokens",
        component: "MaxTokens",
        kebab: "max-tokens",
        sqlFunctionRef: "p_max_tokens",
        RestAPI: "maxTokens",
        GraphQL: "maxTokens",
        custom: "maxTokens"
    },
    topP: {
        frontend: "topP",
        backend: "top_p",
        database: "top_p",
        pretty: "Top P",
        component: "TopP",
        kebab: "top-p",
        sqlFunctionRef: "p_top_p",
        RestAPI: "topP",
        GraphQL: "topP",
        custom: "topP"
    },
    frequencyPenalty: {
        frontend: "frequencyPenalty",
        backend: "frequency_penalty",
        database: "frequency_penalty",
        pretty: "Frequency Penalty",
        component: "FrequencyPenalty",
        kebab: "frequency-penalty",
        sqlFunctionRef: "p_frequency_penalty",
        RestAPI: "frequencyPenalty",
        GraphQL: "frequencyPenalty",
        custom: "frequencyPenalty"
    },
    presencePenalty: {
        frontend: "presencePenalty",
        backend: "presence_penalty",
        database: "presence_penalty",
        pretty: "Presence Penalty",
        component: "PresencePenalty",
        kebab: "presence-penalty",
        sqlFunctionRef: "p_presence_penalty",
        RestAPI: "presencePenalty",
        GraphQL: "presencePenalty",
        custom: "presencePenalty"
    },
    stream: {
        frontend: "stream",
        backend: "stream",
        database: "stream",
        pretty: "Stream",
        component: "Stream",
        kebab: "stream",
        sqlFunctionRef: "p_stream",
        RestAPI: "stream",
        GraphQL: "stream",
        custom: "stream"
    },
    responseFormat: {
        frontend: "responseFormat",
        backend: "response_format",
        database: "response_format",
        pretty: "Response Format",
        component: "ResponseFormat",
        kebab: "response-format",
        sqlFunctionRef: "p_response_format",
        RestAPI: "responseFormat",
        GraphQL: "responseFormat",
        custom: "responseFormat"
    },
    size: {
        frontend: "size",
        backend: "size",
        database: "size",
        pretty: "Size",
        component: "Size",
        kebab: "size",
        sqlFunctionRef: "p_size",
        RestAPI: "size",
        GraphQL: "size",
        custom: "size"
    },
    quality: {
        frontend: "quality",
        backend: "quality",
        database: "quality",
        pretty: "Quality",
        component: "Quality",
        kebab: "quality",
        sqlFunctionRef: "p_quality",
        RestAPI: "quality",
        GraphQL: "quality",
        custom: "quality"
    },
    count: {
        frontend: "count",
        backend: "count",
        database: "count",
        pretty: "Count",
        component: "Count",
        kebab: "count",
        sqlFunctionRef: "p_count",
        RestAPI: "count",
        GraphQL: "count",
        custom: "count"
    },
    audioVoice: {
        frontend: "audioVoice",
        backend: "audio_voice",
        database: "audio_voice",
        pretty: "Audio Voice",
        component: "AudioVoice",
        kebab: "audio-voice",
        sqlFunctionRef: "p_audio_voice",
        RestAPI: "audioVoice",
        GraphQL: "audioVoice",
        custom: "audioVoice"
    },
    audioFormat: {
        frontend: "audioFormat",
        backend: "audio_format",
        database: "audio_format",
        pretty: "Audio Format",
        component: "AudioFormat",
        kebab: "audio-format",
        sqlFunctionRef: "p_audio_format",
        RestAPI: "audioFormat",
        GraphQL: "audioFormat",
        custom: "audioFormat"
    },
    modalities: {
        frontend: "modalities",
        backend: "modalities",
        database: "modalities",
        pretty: "Modalities",
        component: "Modalities",
        kebab: "modalities",
        sqlFunctionRef: "p_modalities",
        RestAPI: "modalities",
        GraphQL: "modalities",
        custom: "modalities"
    },
    tools: {
        frontend: "tools",
        backend: "tools",
        database: "tools",
        pretty: "Tools",
        component: "Tools",
        kebab: "tools",
        sqlFunctionRef: "p_tools",
        RestAPI: "tools",
        GraphQL: "tools",
        custom: "tools"
    },
    presetName: {
        frontend: "presetName",
        backend: "preset_name",
        database: "preset_name",
        pretty: "Preset Name",
        component: "PresetName",
        kebab: "preset-name",
        sqlFunctionRef: "p_preset_name",
        RestAPI: "presetName",
        GraphQL: "presetName",
        custom: "presetName"
    },
    aiEndpointReference: {
        frontend: "aiEndpointReference",
        backend: "ai_endpoint_reference",
        database: "ref_ai_endpoint",
        pretty: "Ai Endpoint Reference",
        component: "AiEndpointReference",
        kebab: "ai-endpointReference",
        sqlFunctionRef: "p_ref_ai_endpoint",
        RestAPI: "aiEndpointReference",
        GraphQL: "aiEndpointReference",
        custom: "aiEndpointReference"
    },
    aiModelReference: {
        frontend: "aiModelReference",
        backend: "ai_model_reference",
        database: "ref_ai_model",
        pretty: "Ai Model Reference",
        component: "AiModelReference",
        kebab: "ai-modelReference",
        sqlFunctionRef: "p_ref_ai_model",
        RestAPI: "aiModelReference",
        GraphQL: "aiModelReference",
        custom: "aiModelReference"
    },
    aiProviderReference: {
        frontend: "aiProviderReference",
        backend: "ai_provider_reference",
        database: "ref_ai_provider",
        pretty: "Ai Provider Reference",
        component: "AiProviderReference",
        kebab: "ai-providerReference",
        sqlFunctionRef: "p_ref_ai_provider",
        RestAPI: "aiProviderReference",
        GraphQL: "aiProviderReference",
        custom: "aiProviderReference"
    },
    aiAgentInverse: {
        frontend: "aiAgentInverse",
        backend: "ai_agent_Inverse",
        database: "ifk_ai_agent",
        pretty: "Ai Agent Inverse",
        component: "AiAgentInverse",
        kebab: "ai-agentInverse",
        sqlFunctionRef: "p_ifk_ai_agent",
        RestAPI: "aiAgentInverse",
        GraphQL: "aiAgentInverse",
        custom: "aiAgentInverse"
    }
},
    aiTrainingData: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    systemPrompt: {
        frontend: "systemPrompt",
        backend: "system_prompt",
        database: "system_prompt",
        pretty: "System Prompt",
        component: "SystemPrompt",
        kebab: "system-prompt",
        sqlFunctionRef: "p_system_prompt",
        RestAPI: "systemPrompt",
        GraphQL: "systemPrompt",
        custom: "systemPrompt"
    },
    userQuery: {
        frontend: "userQuery",
        backend: "user_query",
        database: "user_query",
        pretty: "User Query",
        component: "UserQuery",
        kebab: "user-query",
        sqlFunctionRef: "p_user_query",
        RestAPI: "userQuery",
        GraphQL: "userQuery",
        custom: "userQuery"
    },
    thinkingContent: {
        frontend: "thinkingContent",
        backend: "thinking_content",
        database: "thinking_content",
        pretty: "Thinking Content",
        component: "ThinkingContent",
        kebab: "thinking-content",
        sqlFunctionRef: "p_thinking_content",
        RestAPI: "thinkingContent",
        GraphQL: "thinkingContent",
        custom: "thinkingContent"
    },
    responseContent: {
        frontend: "responseContent",
        backend: "response_content",
        database: "response_content",
        pretty: "Response Content",
        component: "ResponseContent",
        kebab: "response-content",
        sqlFunctionRef: "p_response_content",
        RestAPI: "responseContent",
        GraphQL: "responseContent",
        custom: "responseContent"
    },
    reflectionContent: {
        frontend: "reflectionContent",
        backend: "reflection_content",
        database: "reflection_content",
        pretty: "Reflection Content",
        component: "ReflectionContent",
        kebab: "reflection-content",
        sqlFunctionRef: "p_reflection_content",
        RestAPI: "reflectionContent",
        GraphQL: "reflectionContent",
        custom: "reflectionContent"
    },
    qualityScore: {
        frontend: "qualityScore",
        backend: "quality_score",
        database: "quality_score",
        pretty: "Quality Score",
        component: "QualityScore",
        kebab: "quality-score",
        sqlFunctionRef: "p_quality_score",
        RestAPI: "qualityScore",
        GraphQL: "qualityScore",
        custom: "qualityScore"
    },
    source: {
        frontend: "source",
        backend: "source",
        database: "source",
        pretty: "Source",
        component: "Source",
        kebab: "source",
        sqlFunctionRef: "p_source",
        RestAPI: "source",
        GraphQL: "source",
        custom: "source"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    questionsThinking: {
        frontend: "questionsThinking",
        backend: "questions_thinking",
        database: "questions_thinking",
        pretty: "Questions Thinking",
        component: "QuestionsThinking",
        kebab: "questions-thinking",
        sqlFunctionRef: "p_questions_thinking",
        RestAPI: "questionsThinking",
        GraphQL: "questionsThinking",
        custom: "questionsThinking"
    },
    questionsContent: {
        frontend: "questionsContent",
        backend: "questions_content",
        database: "questions_content",
        pretty: "Questions Content",
        component: "QuestionsContent",
        kebab: "questions-content",
        sqlFunctionRef: "p_questions_content",
        RestAPI: "questionsContent",
        GraphQL: "questionsContent",
        custom: "questionsContent"
    },
    structuredQuestions: {
        frontend: "structuredQuestions",
        backend: "structured_questions",
        database: "structured_questions",
        pretty: "Structured Questions",
        component: "StructuredQuestions",
        kebab: "structured-questions",
        sqlFunctionRef: "p_structured_questions",
        RestAPI: "structuredQuestions",
        GraphQL: "structuredQuestions",
        custom: "structuredQuestions"
    },
    reflectionThinking: {
        frontend: "reflectionThinking",
        backend: "reflection_thinking",
        database: "reflection_thinking",
        pretty: "Reflection Thinking",
        component: "ReflectionThinking",
        kebab: "reflection-thinking",
        sqlFunctionRef: "p_reflection_thinking",
        RestAPI: "reflectionThinking",
        GraphQL: "reflectionThinking",
        custom: "reflectionThinking"
    }
},
    applet: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    creator: {
        frontend: "creator",
        backend: "creator",
        database: "creator",
        pretty: "Creator",
        component: "Creator",
        kebab: "creator",
        sqlFunctionRef: "p_creator",
        RestAPI: "creator",
        GraphQL: "creator",
        custom: "creator"
    },
    type: {
        frontend: "type",
        backend: "type",
        database: "type",
        pretty: "Type",
        component: "Type",
        kebab: "type",
        sqlFunctionRef: "p_type",
        RestAPI: "type",
        GraphQL: "type",
        custom: "type"
    },
    compiledRecipeId: {
        frontend: "compiledRecipeId",
        backend: "compiled_recipe_id",
        database: "compiled_recipe_id",
        pretty: "Compiled Recipe Id",
        component: "CompiledRecipeId",
        kebab: "compiled-recipe-id",
        sqlFunctionRef: "p_compiled_recipe_id",
        RestAPI: "compiledRecipeId",
        GraphQL: "compiledRecipeId",
        custom: "compiledRecipeId"
    },
    slug: {
        frontend: "slug",
        backend: "slug",
        database: "slug",
        pretty: "Slug",
        component: "Slug",
        kebab: "slug",
        sqlFunctionRef: "p_slug",
        RestAPI: "slug",
        GraphQL: "slug",
        custom: "slug"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    dataSourceConfig: {
        frontend: "dataSourceConfig",
        backend: "data_source_config",
        database: "data_source_config",
        pretty: "Data Source Config",
        component: "DataSourceConfig",
        kebab: "data-source-config",
        sqlFunctionRef: "p_data_source_config",
        RestAPI: "dataSourceConfig",
        GraphQL: "dataSourceConfig",
        custom: "dataSourceConfig"
    },
    resultComponentConfig: {
        frontend: "resultComponentConfig",
        backend: "result_component_config",
        database: "result_component_config",
        pretty: "Result Component Config",
        component: "ResultComponentConfig",
        kebab: "result-component-config",
        sqlFunctionRef: "p_result_component_config",
        RestAPI: "resultComponentConfig",
        GraphQL: "resultComponentConfig",
        custom: "resultComponentConfig"
    },
    nextStepConfig: {
        frontend: "nextStepConfig",
        backend: "next_step_config",
        database: "next_step_config",
        pretty: "Next Step Config",
        component: "NextStepConfig",
        kebab: "next-step-config",
        sqlFunctionRef: "p_next_step_config",
        RestAPI: "nextStepConfig",
        GraphQL: "nextStepConfig",
        custom: "nextStepConfig"
    },
    subcategoryId: {
        frontend: "subcategoryId",
        backend: "subcategory_id",
        database: "subcategory_id",
        pretty: "Subcategory Id",
        component: "SubcategoryId",
        kebab: "subcategory-id",
        sqlFunctionRef: "p_subcategory_id",
        RestAPI: "subcategoryId",
        GraphQL: "subcategoryId",
        custom: "subcategoryId"
    },
    ctaText: {
        frontend: "ctaText",
        backend: "cta_text",
        database: "cta_text",
        pretty: "Cta Text",
        component: "CtaText",
        kebab: "cta-text",
        sqlFunctionRef: "p_cta_text",
        RestAPI: "ctaText",
        GraphQL: "ctaText",
        custom: "ctaText"
    },
    theme: {
        frontend: "theme",
        backend: "theme",
        database: "theme",
        pretty: "Theme",
        component: "Theme",
        kebab: "theme",
        sqlFunctionRef: "p_theme",
        RestAPI: "theme",
        GraphQL: "theme",
        custom: "theme"
    },
    compiledRecipeReference: {
        frontend: "compiledRecipeReference",
        backend: "compiled_recipe_reference",
        database: "ref_compiled_recipe",
        pretty: "Compiled Recipe Reference",
        component: "CompiledRecipeReference",
        kebab: "compiled-recipeReference",
        sqlFunctionRef: "p_ref_compiled_recipe",
        RestAPI: "compiledRecipeReference",
        GraphQL: "compiledRecipeReference",
        custom: "compiledRecipeReference"
    },
    subcategoryReference: {
        frontend: "subcategoryReference",
        backend: "subcategory_reference",
        database: "ref_subcategory",
        pretty: "Subcategory Reference",
        component: "SubcategoryReference",
        kebab: "subcategoryReference",
        sqlFunctionRef: "p_ref_subcategory",
        RestAPI: "subcategoryReference",
        GraphQL: "subcategoryReference",
        custom: "subcategoryReference"
    }
},
    arg: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    required: {
        frontend: "required",
        backend: "required",
        database: "required",
        pretty: "Required",
        component: "Required",
        kebab: "required",
        sqlFunctionRef: "p_required",
        RestAPI: "required",
        GraphQL: "required",
        custom: "required"
    },
    default: {
        frontend: "default",
        backend: "default",
        database: "default",
        pretty: "Default",
        component: "Default",
        kebab: "default",
        sqlFunctionRef: "p_default",
        RestAPI: "default",
        GraphQL: "default",
        custom: "default"
    },
    dataType: {
        frontend: "dataType",
        backend: "data_type",
        database: "data_type",
        pretty: "Data Type",
        component: "DataType",
        kebab: "data-type",
        sqlFunctionRef: "p_data_type",
        RestAPI: "dataType",
        GraphQL: "dataType",
        custom: "dataType"
    },
    ready: {
        frontend: "ready",
        backend: "ready",
        database: "ready",
        pretty: "Ready",
        component: "Ready",
        kebab: "ready",
        sqlFunctionRef: "p_ready",
        RestAPI: "ready",
        GraphQL: "ready",
        custom: "ready"
    },
    registeredFunction: {
        frontend: "registeredFunction",
        backend: "registered_function",
        database: "registered_function",
        pretty: "Registered Function",
        component: "RegisteredFunction",
        kebab: "registered-function",
        sqlFunctionRef: "p_registered_function",
        RestAPI: "registeredFunction",
        GraphQL: "registeredFunction",
        custom: "registeredFunction"
    },
    registeredFunctionReference: {
        frontend: "registeredFunctionReference",
        backend: "registered_function_reference",
        database: "ref_registered_function",
        pretty: "Registered Function Reference",
        component: "RegisteredFunctionReference",
        kebab: "registered-functionReference",
        sqlFunctionRef: "p_ref_registered_function",
        RestAPI: "registeredFunctionReference",
        GraphQL: "registeredFunctionReference",
        custom: "registeredFunctionReference"
    }
},
    audioLabel: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    audioRecordingInverse: {
        frontend: "audioRecordingInverse",
        backend: "audio_recording_Inverse",
        database: "ifk_audio_recording",
        pretty: "Audio Recording Inverse",
        component: "AudioRecordingInverse",
        kebab: "audio-recordingInverse",
        sqlFunctionRef: "p_ifk_audio_recording",
        RestAPI: "audioRecordingInverse",
        GraphQL: "audioRecordingInverse",
        custom: "audioRecordingInverse"
    }
},
    audioRecording: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    label: {
        frontend: "label",
        backend: "label",
        database: "label",
        pretty: "Label",
        component: "Label",
        kebab: "label",
        sqlFunctionRef: "p_label",
        RestAPI: "label",
        GraphQL: "label",
        custom: "label"
    },
    fileUrl: {
        frontend: "fileUrl",
        backend: "file_url",
        database: "file_url",
        pretty: "File Url",
        component: "FileUrl",
        kebab: "file-url",
        sqlFunctionRef: "p_file_url",
        RestAPI: "fileUrl",
        GraphQL: "fileUrl",
        custom: "fileUrl"
    },
    duration: {
        frontend: "duration",
        backend: "duration",
        database: "duration",
        pretty: "Duration",
        component: "Duration",
        kebab: "duration",
        sqlFunctionRef: "p_duration",
        RestAPI: "duration",
        GraphQL: "duration",
        custom: "duration"
    },
    localPath: {
        frontend: "localPath",
        backend: "local_path",
        database: "local_path",
        pretty: "Local Path",
        component: "LocalPath",
        kebab: "local-path",
        sqlFunctionRef: "p_local_path",
        RestAPI: "localPath",
        GraphQL: "localPath",
        custom: "localPath"
    },
    size: {
        frontend: "size",
        backend: "size",
        database: "size",
        pretty: "Size",
        component: "Size",
        kebab: "size",
        sqlFunctionRef: "p_size",
        RestAPI: "size",
        GraphQL: "size",
        custom: "size"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    audioLabelReference: {
        frontend: "audioLabelReference",
        backend: "audio_label_reference",
        database: "ref_audio_label",
        pretty: "Audio Label Reference",
        component: "AudioLabelReference",
        kebab: "audio-labelReference",
        sqlFunctionRef: "p_ref_audio_label",
        RestAPI: "audioLabelReference",
        GraphQL: "audioLabelReference",
        custom: "audioLabelReference"
    }
},
    audioRecordingUsers: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    firstName: {
        frontend: "firstName",
        backend: "first_name",
        database: "first_name",
        pretty: "First Name",
        component: "FirstName",
        kebab: "first-name",
        sqlFunctionRef: "p_first_name",
        RestAPI: "firstName",
        GraphQL: "firstName",
        custom: "firstName"
    },
    lastName: {
        frontend: "lastName",
        backend: "last_name",
        database: "last_name",
        pretty: "Last Name",
        component: "LastName",
        kebab: "last-name",
        sqlFunctionRef: "p_last_name",
        RestAPI: "lastName",
        GraphQL: "lastName",
        custom: "lastName"
    },
    email: {
        frontend: "email",
        backend: "email",
        database: "email",
        pretty: "Email",
        component: "Email",
        kebab: "email",
        sqlFunctionRef: "p_email",
        RestAPI: "email",
        GraphQL: "email",
        custom: "email"
    }
},
    automationBoundaryBroker: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    matrix: {
        frontend: "matrix",
        backend: "matrix",
        database: "matrix",
        pretty: "Matrix",
        component: "Matrix",
        kebab: "matrix",
        sqlFunctionRef: "p_matrix",
        RestAPI: "matrix",
        GraphQL: "matrix",
        custom: "matrix"
    },
    broker: {
        frontend: "broker",
        backend: "broker",
        database: "broker",
        pretty: "Broker",
        component: "Broker",
        kebab: "broker",
        sqlFunctionRef: "p_broker",
        RestAPI: "broker",
        GraphQL: "broker",
        custom: "broker"
    },
    sparkSource: {
        frontend: "sparkSource",
        backend: "spark_source",
        database: "spark_source",
        pretty: "Spark Source",
        component: "SparkSource",
        kebab: "spark-source",
        sqlFunctionRef: "p_spark_source",
        RestAPI: "sparkSource",
        GraphQL: "sparkSource",
        custom: "sparkSource"
    },
    beaconDestination: {
        frontend: "beaconDestination",
        backend: "beacon_destination",
        database: "beacon_destination",
        pretty: "Beacon Destination",
        component: "BeaconDestination",
        kebab: "beacon-destination",
        sqlFunctionRef: "p_beacon_destination",
        RestAPI: "beaconDestination",
        GraphQL: "beaconDestination",
        custom: "beaconDestination"
    },
    brokerReference: {
        frontend: "brokerReference",
        backend: "broker_reference",
        database: "ref_broker",
        pretty: "Broker Reference",
        component: "BrokerReference",
        kebab: "brokerReference",
        sqlFunctionRef: "p_ref_broker",
        RestAPI: "brokerReference",
        GraphQL: "brokerReference",
        custom: "brokerReference"
    },
    automationMatrixReference: {
        frontend: "automationMatrixReference",
        backend: "automation_matrix_reference",
        database: "ref_automation_matrix",
        pretty: "Automation Matrix Reference",
        component: "AutomationMatrixReference",
        kebab: "automation-matrixReference",
        sqlFunctionRef: "p_ref_automation_matrix",
        RestAPI: "automationMatrixReference",
        GraphQL: "automationMatrixReference",
        custom: "automationMatrixReference"
    }
},
    automationMatrix: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    averageSeconds: {
        frontend: "averageSeconds",
        backend: "average_seconds",
        database: "average_seconds",
        pretty: "Average Seconds",
        component: "AverageSeconds",
        kebab: "average-seconds",
        sqlFunctionRef: "p_average_seconds",
        RestAPI: "averageSeconds",
        GraphQL: "averageSeconds",
        custom: "averageSeconds"
    },
    isAutomated: {
        frontend: "isAutomated",
        backend: "is_automated",
        database: "is_automated",
        pretty: "Is Automated",
        component: "IsAutomated",
        kebab: "is-automated",
        sqlFunctionRef: "p_is_automated",
        RestAPI: "isAutomated",
        GraphQL: "isAutomated",
        custom: "isAutomated"
    },
    cognitionMatrices: {
        frontend: "cognitionMatrices",
        backend: "cognition_matrices",
        database: "cognition_matrices",
        pretty: "Cognition Matrices",
        component: "CognitionMatrices",
        kebab: "cognition-matrices",
        sqlFunctionRef: "p_cognition_matrices",
        RestAPI: "cognitionMatrices",
        GraphQL: "cognitionMatrices",
        custom: "cognitionMatrices"
    },
    actionInverse: {
        frontend: "actionInverse",
        backend: "action_Inverse",
        database: "ifk_action",
        pretty: "Action Inverse",
        component: "ActionInverse",
        kebab: "actionInverse",
        sqlFunctionRef: "p_ifk_action",
        RestAPI: "actionInverse",
        GraphQL: "actionInverse",
        custom: "actionInverse"
    },
    automationBoundaryBrokerInverse: {
        frontend: "automationBoundaryBrokerInverse",
        backend: "automation_boundary_broker_Inverse",
        database: "ifk_automation_boundary_broker",
        pretty: "Automation Boundary Broker Inverse",
        component: "AutomationBoundaryBrokerInverse",
        kebab: "automation-boundary-brokerInverse",
        sqlFunctionRef: "p_ifk_automation_boundary_broker",
        RestAPI: "automationBoundaryBrokerInverse",
        GraphQL: "automationBoundaryBrokerInverse",
        custom: "automationBoundaryBrokerInverse"
    }
},
    broker: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    value: {
        frontend: "value",
        backend: "value",
        database: "value",
        pretty: "Value",
        component: "Value",
        kebab: "value",
        sqlFunctionRef: "p_value",
        RestAPI: "value",
        GraphQL: "value",
        custom: "value"
    },
    dataType: {
        frontend: "dataType",
        backend: "data_type",
        database: "data_type",
        pretty: "Data Type",
        component: "DataType",
        kebab: "data-type",
        sqlFunctionRef: "p_data_type",
        RestAPI: "dataType",
        GraphQL: "dataType",
        custom: "dataType"
    },
    ready: {
        frontend: "ready",
        backend: "ready",
        database: "ready",
        pretty: "Ready",
        component: "Ready",
        kebab: "ready",
        sqlFunctionRef: "p_ready",
        RestAPI: "ready",
        GraphQL: "ready",
        custom: "ready"
    },
    defaultSource: {
        frontend: "defaultSource",
        backend: "default_source",
        database: "default_source",
        pretty: "Default Source",
        component: "DefaultSource",
        kebab: "default-source",
        sqlFunctionRef: "p_default_source",
        RestAPI: "defaultSource",
        GraphQL: "defaultSource",
        custom: "defaultSource"
    },
    displayName: {
        frontend: "displayName",
        backend: "display_name",
        database: "display_name",
        pretty: "Display Name",
        component: "DisplayName",
        kebab: "display-name",
        sqlFunctionRef: "p_display_name",
        RestAPI: "displayName",
        GraphQL: "displayName",
        custom: "displayName"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    tooltip: {
        frontend: "tooltip",
        backend: "tooltip",
        database: "tooltip",
        pretty: "Tooltip",
        component: "Tooltip",
        kebab: "tooltip",
        sqlFunctionRef: "p_tooltip",
        RestAPI: "tooltip",
        GraphQL: "tooltip",
        custom: "tooltip"
    },
    validationRules: {
        frontend: "validationRules",
        backend: "validation_rules",
        database: "validation_rules",
        pretty: "Validation Rules",
        component: "ValidationRules",
        kebab: "validation-rules",
        sqlFunctionRef: "p_validation_rules",
        RestAPI: "validationRules",
        GraphQL: "validationRules",
        custom: "validationRules"
    },
    sampleEntries: {
        frontend: "sampleEntries",
        backend: "sample_entries",
        database: "sample_entries",
        pretty: "Sample Entries",
        component: "SampleEntries",
        kebab: "sample-entries",
        sqlFunctionRef: "p_sample_entries",
        RestAPI: "sampleEntries",
        GraphQL: "sampleEntries",
        custom: "sampleEntries"
    },
    customSourceComponent: {
        frontend: "customSourceComponent",
        backend: "custom_source_component",
        database: "custom_source_component",
        pretty: "Custom Source Component",
        component: "CustomSourceComponent",
        kebab: "custom-source-component",
        sqlFunctionRef: "p_custom_source_component",
        RestAPI: "customSourceComponent",
        GraphQL: "customSourceComponent",
        custom: "customSourceComponent"
    },
    additionalParams: {
        frontend: "additionalParams",
        backend: "additional_params",
        database: "additional_params",
        pretty: "Additional Params",
        component: "AdditionalParams",
        kebab: "additional-params",
        sqlFunctionRef: "p_additional_params",
        RestAPI: "additionalParams",
        GraphQL: "additionalParams",
        custom: "additionalParams"
    },
    otherSourceParams: {
        frontend: "otherSourceParams",
        backend: "other_source_params",
        database: "other_source_params",
        pretty: "Other Source Params",
        component: "OtherSourceParams",
        kebab: "other-source-params",
        sqlFunctionRef: "p_other_source_params",
        RestAPI: "otherSourceParams",
        GraphQL: "otherSourceParams",
        custom: "otherSourceParams"
    },
    defaultDestination: {
        frontend: "defaultDestination",
        backend: "default_destination",
        database: "default_destination",
        pretty: "Default Destination",
        component: "DefaultDestination",
        kebab: "default-destination",
        sqlFunctionRef: "p_default_destination",
        RestAPI: "defaultDestination",
        GraphQL: "defaultDestination",
        custom: "defaultDestination"
    },
    outputComponent: {
        frontend: "outputComponent",
        backend: "output_component",
        database: "output_component",
        pretty: "Output Component",
        component: "OutputComponent",
        kebab: "output-component",
        sqlFunctionRef: "p_output_component",
        RestAPI: "outputComponent",
        GraphQL: "outputComponent",
        custom: "outputComponent"
    },
    tags: {
        frontend: "tags",
        backend: "tags",
        database: "tags",
        pretty: "Tags",
        component: "Tags",
        kebab: "tags",
        sqlFunctionRef: "p_tags",
        RestAPI: "tags",
        GraphQL: "tags",
        custom: "tags"
    },
    stringValue: {
        frontend: "stringValue",
        backend: "string_value",
        database: "string_value",
        pretty: "String Value",
        component: "StringValue",
        kebab: "string-value",
        sqlFunctionRef: "p_string_value",
        RestAPI: "stringValue",
        GraphQL: "stringValue",
        custom: "stringValue"
    },
    dataInputComponentReference: {
        frontend: "dataInputComponentReference",
        backend: "data_input_component_reference",
        database: "ref_data_input_component",
        pretty: "Data Input Component Reference",
        component: "DataInputComponentReference",
        kebab: "data-input-componentReference",
        sqlFunctionRef: "p_ref_data_input_component",
        RestAPI: "dataInputComponentReference",
        GraphQL: "dataInputComponentReference",
        custom: "dataInputComponentReference"
    },
    recipeBrokerInverse: {
        frontend: "recipeBrokerInverse",
        backend: "recipe_broker_Inverse",
        database: "ifk_recipe_broker",
        pretty: "Recipe Broker Inverse",
        component: "RecipeBrokerInverse",
        kebab: "recipe-brokerInverse",
        sqlFunctionRef: "p_ifk_recipe_broker",
        RestAPI: "recipeBrokerInverse",
        GraphQL: "recipeBrokerInverse",
        custom: "recipeBrokerInverse"
    },
    registeredFunctionInverse: {
        frontend: "registeredFunctionInverse",
        backend: "registered_function_Inverse",
        database: "ifk_registered_function",
        pretty: "Registered Function Inverse",
        component: "RegisteredFunctionInverse",
        kebab: "registered-functionInverse",
        sqlFunctionRef: "p_ifk_registered_function",
        RestAPI: "registeredFunctionInverse",
        GraphQL: "registeredFunctionInverse",
        custom: "registeredFunctionInverse"
    },
    automationBoundaryBrokerInverse: {
        frontend: "automationBoundaryBrokerInverse",
        backend: "automation_boundary_broker_Inverse",
        database: "ifk_automation_boundary_broker",
        pretty: "Automation Boundary Broker Inverse",
        component: "AutomationBoundaryBrokerInverse",
        kebab: "automation-boundary-brokerInverse",
        sqlFunctionRef: "p_ifk_automation_boundary_broker",
        RestAPI: "automationBoundaryBrokerInverse",
        GraphQL: "automationBoundaryBrokerInverse",
        custom: "automationBoundaryBrokerInverse"
    }
},
    brokerValue: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    dataBroker: {
        frontend: "dataBroker",
        backend: "data_broker",
        database: "data_broker",
        pretty: "Data Broker",
        component: "DataBroker",
        kebab: "data-broker",
        sqlFunctionRef: "p_data_broker",
        RestAPI: "dataBroker",
        GraphQL: "dataBroker",
        custom: "dataBroker"
    },
    data: {
        frontend: "data",
        backend: "data",
        database: "data",
        pretty: "Data",
        component: "Data",
        kebab: "data",
        sqlFunctionRef: "p_data",
        RestAPI: "data",
        GraphQL: "data",
        custom: "data"
    },
    category: {
        frontend: "category",
        backend: "category",
        database: "category",
        pretty: "Category",
        component: "Category",
        kebab: "category",
        sqlFunctionRef: "p_category",
        RestAPI: "category",
        GraphQL: "category",
        custom: "category"
    },
    subCategory: {
        frontend: "subCategory",
        backend: "sub_category",
        database: "sub_category",
        pretty: "Sub Category",
        component: "SubCategory",
        kebab: "sub-category",
        sqlFunctionRef: "p_sub_category",
        RestAPI: "subCategory",
        GraphQL: "subCategory",
        custom: "subCategory"
    },
    tags: {
        frontend: "tags",
        backend: "tags",
        database: "tags",
        pretty: "Tags",
        component: "Tags",
        kebab: "tags",
        sqlFunctionRef: "p_tags",
        RestAPI: "tags",
        GraphQL: "tags",
        custom: "tags"
    },
    comments: {
        frontend: "comments",
        backend: "comments",
        database: "comments",
        pretty: "Comments",
        component: "Comments",
        kebab: "comments",
        sqlFunctionRef: "p_comments",
        RestAPI: "comments",
        GraphQL: "comments",
        custom: "comments"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    dataBrokerReference: {
        frontend: "dataBrokerReference",
        backend: "data_broker_reference",
        database: "ref_data_broker",
        pretty: "Data Broker Reference",
        component: "DataBrokerReference",
        kebab: "data-brokerReference",
        sqlFunctionRef: "p_ref_data_broker",
        RestAPI: "dataBrokerReference",
        GraphQL: "dataBrokerReference",
        custom: "dataBrokerReference"
    }
},
    bucketStructures: {
    bucketId: {
        frontend: "bucketId",
        backend: "bucket_id",
        database: "bucket_id",
        pretty: "Bucket Id",
        component: "BucketId",
        kebab: "bucket-id",
        sqlFunctionRef: "p_bucket_id",
        RestAPI: "bucketId",
        GraphQL: "bucketId",
        custom: "bucketId"
    },
    structure: {
        frontend: "structure",
        backend: "structure",
        database: "structure",
        pretty: "Structure",
        component: "Structure",
        kebab: "structure",
        sqlFunctionRef: "p_structure",
        RestAPI: "structure",
        GraphQL: "structure",
        custom: "structure"
    },
    lastUpdated: {
        frontend: "lastUpdated",
        backend: "last_updated",
        database: "last_updated",
        pretty: "Last Updated",
        component: "LastUpdated",
        kebab: "last-updated",
        sqlFunctionRef: "p_last_updated",
        RestAPI: "lastUpdated",
        GraphQL: "lastUpdated",
        custom: "lastUpdated"
    }
},
    bucketTreeStructures: {
    bucketId: {
        frontend: "bucketId",
        backend: "bucket_id",
        database: "bucket_id",
        pretty: "Bucket Id",
        component: "BucketId",
        kebab: "bucket-id",
        sqlFunctionRef: "p_bucket_id",
        RestAPI: "bucketId",
        GraphQL: "bucketId",
        custom: "bucketId"
    },
    treeStructure: {
        frontend: "treeStructure",
        backend: "tree_structure",
        database: "tree_structure",
        pretty: "Tree Structure",
        component: "TreeStructure",
        kebab: "tree-structure",
        sqlFunctionRef: "p_tree_structure",
        RestAPI: "treeStructure",
        GraphQL: "treeStructure",
        custom: "treeStructure"
    },
    lastUpdated: {
        frontend: "lastUpdated",
        backend: "last_updated",
        database: "last_updated",
        pretty: "Last Updated",
        component: "LastUpdated",
        kebab: "last-updated",
        sqlFunctionRef: "p_last_updated",
        RestAPI: "lastUpdated",
        GraphQL: "lastUpdated",
        custom: "lastUpdated"
    }
},
    category: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    slug: {
        frontend: "slug",
        backend: "slug",
        database: "slug",
        pretty: "Slug",
        component: "Slug",
        kebab: "slug",
        sqlFunctionRef: "p_slug",
        RestAPI: "slug",
        GraphQL: "slug",
        custom: "slug"
    },
    icon: {
        frontend: "icon",
        backend: "icon",
        database: "icon",
        pretty: "Icon",
        component: "Icon",
        kebab: "icon",
        sqlFunctionRef: "p_icon",
        RestAPI: "icon",
        GraphQL: "icon",
        custom: "icon"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    subcategoryInverse: {
        frontend: "subcategoryInverse",
        backend: "subcategory_Inverse",
        database: "ifk_subcategory",
        pretty: "Subcategory Inverse",
        component: "SubcategoryInverse",
        kebab: "subcategoryInverse",
        sqlFunctionRef: "p_ifk_subcategory",
        RestAPI: "subcategoryInverse",
        GraphQL: "subcategoryInverse",
        custom: "subcategoryInverse"
    }
},
    compiledRecipe: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    recipeId: {
        frontend: "recipeId",
        backend: "recipe_id",
        database: "recipe_id",
        pretty: "Recipe Id",
        component: "RecipeId",
        kebab: "recipe-id",
        sqlFunctionRef: "p_recipe_id",
        RestAPI: "recipeId",
        GraphQL: "recipeId",
        custom: "recipeId"
    },
    version: {
        frontend: "version",
        backend: "version",
        database: "version",
        pretty: "Version",
        component: "Version",
        kebab: "version",
        sqlFunctionRef: "p_version",
        RestAPI: "version",
        GraphQL: "version",
        custom: "version"
    },
    compiledRecipe: {
        frontend: "compiledRecipe",
        backend: "compiled_recipe",
        database: "compiled_recipe",
        pretty: "Compiled Recipe",
        component: "CompiledRecipe",
        kebab: "compiled-recipe",
        sqlFunctionRef: "p_compiled_recipe",
        RestAPI: "compiledRecipe",
        GraphQL: "compiledRecipe",
        custom: "compiledRecipe"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    },
    appletInverse: {
        frontend: "appletInverse",
        backend: "applet_Inverse",
        database: "ifk_applet",
        pretty: "Applet Inverse",
        component: "AppletInverse",
        kebab: "appletInverse",
        sqlFunctionRef: "p_ifk_applet",
        RestAPI: "appletInverse",
        GraphQL: "appletInverse",
        custom: "appletInverse"
    }
},
    conversation: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    label: {
        frontend: "label",
        backend: "label",
        database: "label",
        pretty: "Label",
        component: "Label",
        kebab: "label",
        sqlFunctionRef: "p_label",
        RestAPI: "label",
        GraphQL: "label",
        custom: "label"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    messageInverse: {
        frontend: "messageInverse",
        backend: "message_Inverse",
        database: "ifk_message",
        pretty: "Message Inverse",
        component: "MessageInverse",
        kebab: "messageInverse",
        sqlFunctionRef: "p_ifk_message",
        RestAPI: "messageInverse",
        GraphQL: "messageInverse",
        custom: "messageInverse"
    }
},
    dataBroker: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    dataType: {
        frontend: "dataType",
        backend: "data_type",
        database: "data_type",
        pretty: "Data Type",
        component: "DataType",
        kebab: "data-type",
        sqlFunctionRef: "p_data_type",
        RestAPI: "dataType",
        GraphQL: "dataType",
        custom: "dataType"
    },
    defaultValue: {
        frontend: "defaultValue",
        backend: "default_value",
        database: "default_value",
        pretty: "Default Value",
        component: "DefaultValue",
        kebab: "default-value",
        sqlFunctionRef: "p_default_value",
        RestAPI: "defaultValue",
        GraphQL: "defaultValue",
        custom: "defaultValue"
    },
    inputComponent: {
        frontend: "inputComponent",
        backend: "input_component",
        database: "input_component",
        pretty: "Input Component",
        component: "InputComponent",
        kebab: "input-component",
        sqlFunctionRef: "p_input_component",
        RestAPI: "inputComponent",
        GraphQL: "inputComponent",
        custom: "inputComponent"
    },
    color: {
        frontend: "color",
        backend: "color",
        database: "color",
        pretty: "Color",
        component: "Color",
        kebab: "color",
        sqlFunctionRef: "p_color",
        RestAPI: "color",
        GraphQL: "color",
        custom: "color"
    },
    outputComponent: {
        frontend: "outputComponent",
        backend: "output_component",
        database: "output_component",
        pretty: "Output Component",
        component: "OutputComponent",
        kebab: "output-component",
        sqlFunctionRef: "p_output_component",
        RestAPI: "outputComponent",
        GraphQL: "outputComponent",
        custom: "outputComponent"
    },
    dataInputComponentReference: {
        frontend: "dataInputComponentReference",
        backend: "data_input_component_reference",
        database: "ref_data_input_component",
        pretty: "Data Input Component Reference",
        component: "DataInputComponentReference",
        kebab: "data-input-componentReference",
        sqlFunctionRef: "p_ref_data_input_component",
        RestAPI: "dataInputComponentReference",
        GraphQL: "dataInputComponentReference",
        custom: "dataInputComponentReference"
    },
    dataOutputComponentReference: {
        frontend: "dataOutputComponentReference",
        backend: "data_output_component_reference",
        database: "ref_data_output_component",
        pretty: "Data Output Component Reference",
        component: "DataOutputComponentReference",
        kebab: "data-output-componentReference",
        sqlFunctionRef: "p_ref_data_output_component",
        RestAPI: "dataOutputComponentReference",
        GraphQL: "dataOutputComponentReference",
        custom: "dataOutputComponentReference"
    },
    brokerValueInverse: {
        frontend: "brokerValueInverse",
        backend: "broker_value_Inverse",
        database: "ifk_broker_value",
        pretty: "Broker Value Inverse",
        component: "BrokerValueInverse",
        kebab: "broker-valueInverse",
        sqlFunctionRef: "p_ifk_broker_value",
        RestAPI: "brokerValueInverse",
        GraphQL: "brokerValueInverse",
        custom: "brokerValueInverse"
    },
    messageBrokerInverse: {
        frontend: "messageBrokerInverse",
        backend: "message_broker_Inverse",
        database: "ifk_message_broker",
        pretty: "Message Broker Inverse",
        component: "MessageBrokerInverse",
        kebab: "message-brokerInverse",
        sqlFunctionRef: "p_ifk_message_broker",
        RestAPI: "messageBrokerInverse",
        GraphQL: "messageBrokerInverse",
        custom: "messageBrokerInverse"
    }
},
    dataInputComponent: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    options: {
        frontend: "options",
        backend: "options",
        database: "options",
        pretty: "Options",
        component: "Options",
        kebab: "options",
        sqlFunctionRef: "p_options",
        RestAPI: "options",
        GraphQL: "options",
        custom: "options"
    },
    includeOther: {
        frontend: "includeOther",
        backend: "include_other",
        database: "include_other",
        pretty: "Include Other",
        component: "IncludeOther",
        kebab: "include-other",
        sqlFunctionRef: "p_include_other",
        RestAPI: "includeOther",
        GraphQL: "includeOther",
        custom: "includeOther"
    },
    min: {
        frontend: "min",
        backend: "min",
        database: "min",
        pretty: "Min",
        component: "Min",
        kebab: "min",
        sqlFunctionRef: "p_min",
        RestAPI: "min",
        GraphQL: "min",
        custom: "min"
    },
    max: {
        frontend: "max",
        backend: "max",
        database: "max",
        pretty: "Max",
        component: "Max",
        kebab: "max",
        sqlFunctionRef: "p_max",
        RestAPI: "max",
        GraphQL: "max",
        custom: "max"
    },
    step: {
        frontend: "step",
        backend: "step",
        database: "step",
        pretty: "Step",
        component: "Step",
        kebab: "step",
        sqlFunctionRef: "p_step",
        RestAPI: "step",
        GraphQL: "step",
        custom: "step"
    },
    acceptableFiletypes: {
        frontend: "acceptableFiletypes",
        backend: "acceptable_filetypes",
        database: "acceptable_filetypes",
        pretty: "Acceptable Filetypes",
        component: "AcceptableFiletypes",
        kebab: "acceptable-filetypes",
        sqlFunctionRef: "p_acceptable_filetypes",
        RestAPI: "acceptableFiletypes",
        GraphQL: "acceptableFiletypes",
        custom: "acceptableFiletypes"
    },
    src: {
        frontend: "src",
        backend: "src",
        database: "src",
        pretty: "Src",
        component: "Src",
        kebab: "src",
        sqlFunctionRef: "p_src",
        RestAPI: "src",
        GraphQL: "src",
        custom: "src"
    },
    colorOverrides: {
        frontend: "colorOverrides",
        backend: "color_overrides",
        database: "color_overrides",
        pretty: "Color Overrides",
        component: "ColorOverrides",
        kebab: "color-overrides",
        sqlFunctionRef: "p_color_overrides",
        RestAPI: "colorOverrides",
        GraphQL: "colorOverrides",
        custom: "colorOverrides"
    },
    additionalParams: {
        frontend: "additionalParams",
        backend: "additional_params",
        database: "additional_params",
        pretty: "Additional Params",
        component: "AdditionalParams",
        kebab: "additional-params",
        sqlFunctionRef: "p_additional_params",
        RestAPI: "additionalParams",
        GraphQL: "additionalParams",
        custom: "additionalParams"
    },
    subComponent: {
        frontend: "subComponent",
        backend: "sub_component",
        database: "sub_component",
        pretty: "Sub Component",
        component: "SubComponent",
        kebab: "sub-component",
        sqlFunctionRef: "p_sub_component",
        RestAPI: "subComponent",
        GraphQL: "subComponent",
        custom: "subComponent"
    },
    component: {
        frontend: "component",
        backend: "component",
        database: "component",
        pretty: "Component",
        component: "Component",
        kebab: "component",
        sqlFunctionRef: "p_component",
        RestAPI: "component",
        GraphQL: "component",
        custom: "component"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    placeholder: {
        frontend: "placeholder",
        backend: "placeholder",
        database: "placeholder",
        pretty: "Placeholder",
        component: "Placeholder",
        kebab: "placeholder",
        sqlFunctionRef: "p_placeholder",
        RestAPI: "placeholder",
        GraphQL: "placeholder",
        custom: "placeholder"
    },
    containerClassName: {
        frontend: "containerClassName",
        backend: "container_class_name",
        database: "container_class_name",
        pretty: "Container Class Name",
        component: "ContainerClassName",
        kebab: "container-class-name",
        sqlFunctionRef: "p_container_class_name",
        RestAPI: "containerClassName",
        GraphQL: "containerClassName",
        custom: "containerClassName"
    },
    collapsibleClassName: {
        frontend: "collapsibleClassName",
        backend: "collapsible_class_name",
        database: "collapsible_class_name",
        pretty: "Collapsible Class Name",
        component: "CollapsibleClassName",
        kebab: "collapsible-class-name",
        sqlFunctionRef: "p_collapsible_class_name",
        RestAPI: "collapsibleClassName",
        GraphQL: "collapsibleClassName",
        custom: "collapsibleClassName"
    },
    labelClassName: {
        frontend: "labelClassName",
        backend: "label_class_name",
        database: "label_class_name",
        pretty: "Label Class Name",
        component: "LabelClassName",
        kebab: "label-class-name",
        sqlFunctionRef: "p_label_class_name",
        RestAPI: "labelClassName",
        GraphQL: "labelClassName",
        custom: "labelClassName"
    },
    descriptionClassName: {
        frontend: "descriptionClassName",
        backend: "description_class_name",
        database: "description_class_name",
        pretty: "Description Class Name",
        component: "DescriptionClassName",
        kebab: "description-class-name",
        sqlFunctionRef: "p_description_class_name",
        RestAPI: "descriptionClassName",
        GraphQL: "descriptionClassName",
        custom: "descriptionClassName"
    },
    componentClassName: {
        frontend: "componentClassName",
        backend: "component_class_name",
        database: "component_class_name",
        pretty: "Component Class Name",
        component: "ComponentClassName",
        kebab: "component-class-name",
        sqlFunctionRef: "p_component_class_name",
        RestAPI: "componentClassName",
        GraphQL: "componentClassName",
        custom: "componentClassName"
    },
    size: {
        frontend: "size",
        backend: "size",
        database: "size",
        pretty: "Size",
        component: "Size",
        kebab: "size",
        sqlFunctionRef: "p_size",
        RestAPI: "size",
        GraphQL: "size",
        custom: "size"
    },
    height: {
        frontend: "height",
        backend: "height",
        database: "height",
        pretty: "Height",
        component: "Height",
        kebab: "height",
        sqlFunctionRef: "p_height",
        RestAPI: "height",
        GraphQL: "height",
        custom: "height"
    },
    width: {
        frontend: "width",
        backend: "width",
        database: "width",
        pretty: "Width",
        component: "Width",
        kebab: "width",
        sqlFunctionRef: "p_width",
        RestAPI: "width",
        GraphQL: "width",
        custom: "width"
    },
    minHeight: {
        frontend: "minHeight",
        backend: "min_height",
        database: "min_height",
        pretty: "Min Height",
        component: "MinHeight",
        kebab: "min-height",
        sqlFunctionRef: "p_min_height",
        RestAPI: "minHeight",
        GraphQL: "minHeight",
        custom: "minHeight"
    },
    maxHeight: {
        frontend: "maxHeight",
        backend: "max_height",
        database: "max_height",
        pretty: "Max Height",
        component: "MaxHeight",
        kebab: "max-height",
        sqlFunctionRef: "p_max_height",
        RestAPI: "maxHeight",
        GraphQL: "maxHeight",
        custom: "maxHeight"
    },
    minWidth: {
        frontend: "minWidth",
        backend: "min_width",
        database: "min_width",
        pretty: "Min Width",
        component: "MinWidth",
        kebab: "min-width",
        sqlFunctionRef: "p_min_width",
        RestAPI: "minWidth",
        GraphQL: "minWidth",
        custom: "minWidth"
    },
    maxWidth: {
        frontend: "maxWidth",
        backend: "max_width",
        database: "max_width",
        pretty: "Max Width",
        component: "MaxWidth",
        kebab: "max-width",
        sqlFunctionRef: "p_max_width",
        RestAPI: "maxWidth",
        GraphQL: "maxWidth",
        custom: "maxWidth"
    },
    orientation: {
        frontend: "orientation",
        backend: "orientation",
        database: "orientation",
        pretty: "Orientation",
        component: "Orientation",
        kebab: "orientation",
        sqlFunctionRef: "p_orientation",
        RestAPI: "orientation",
        GraphQL: "orientation",
        custom: "orientation"
    },
    messageBrokerInverse: {
        frontend: "messageBrokerInverse",
        backend: "message_broker_Inverse",
        database: "ifk_message_broker",
        pretty: "Message Broker Inverse",
        component: "MessageBrokerInverse",
        kebab: "message-brokerInverse",
        sqlFunctionRef: "p_ifk_message_broker",
        RestAPI: "messageBrokerInverse",
        GraphQL: "messageBrokerInverse",
        custom: "messageBrokerInverse"
    },
    brokerInverse: {
        frontend: "brokerInverse",
        backend: "broker_Inverse",
        database: "ifk_broker",
        pretty: "Broker Inverse",
        component: "BrokerInverse",
        kebab: "brokerInverse",
        sqlFunctionRef: "p_ifk_broker",
        RestAPI: "brokerInverse",
        GraphQL: "brokerInverse",
        custom: "brokerInverse"
    },
    dataBrokerInverse: {
        frontend: "dataBrokerInverse",
        backend: "data_broker_Inverse",
        database: "ifk_data_broker",
        pretty: "Data Broker Inverse",
        component: "DataBrokerInverse",
        kebab: "data-brokerInverse",
        sqlFunctionRef: "p_ifk_data_broker",
        RestAPI: "dataBrokerInverse",
        GraphQL: "dataBrokerInverse",
        custom: "dataBrokerInverse"
    }
},
    dataOutputComponent: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    componentType: {
        frontend: "componentType",
        backend: "component_type",
        database: "component_type",
        pretty: "Component Type",
        component: "ComponentType",
        kebab: "component-type",
        sqlFunctionRef: "p_component_type",
        RestAPI: "componentType",
        GraphQL: "componentType",
        custom: "componentType"
    },
    uiComponent: {
        frontend: "uiComponent",
        backend: "ui_component",
        database: "ui_component",
        pretty: "Ui Component",
        component: "UiComponent",
        kebab: "ui-component",
        sqlFunctionRef: "p_ui_component",
        RestAPI: "uiComponent",
        GraphQL: "uiComponent",
        custom: "uiComponent"
    },
    props: {
        frontend: "props",
        backend: "props",
        database: "props",
        pretty: "Props",
        component: "Props",
        kebab: "props",
        sqlFunctionRef: "p_props",
        RestAPI: "props",
        GraphQL: "props",
        custom: "props"
    },
    additionalParams: {
        frontend: "additionalParams",
        backend: "additional_params",
        database: "additional_params",
        pretty: "Additional Params",
        component: "AdditionalParams",
        kebab: "additional-params",
        sqlFunctionRef: "p_additional_params",
        RestAPI: "additionalParams",
        GraphQL: "additionalParams",
        custom: "additionalParams"
    },
    dataBrokerInverse: {
        frontend: "dataBrokerInverse",
        backend: "data_broker_Inverse",
        database: "ifk_data_broker",
        pretty: "Data Broker Inverse",
        component: "DataBrokerInverse",
        kebab: "data-brokerInverse",
        sqlFunctionRef: "p_ifk_data_broker",
        RestAPI: "dataBrokerInverse",
        GraphQL: "dataBrokerInverse",
        custom: "dataBrokerInverse"
    }
},
    displayOption: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    defaultParams: {
        frontend: "defaultParams",
        backend: "default_params",
        database: "default_params",
        pretty: "Default Params",
        component: "DefaultParams",
        kebab: "default-params",
        sqlFunctionRef: "p_default_params",
        RestAPI: "defaultParams",
        GraphQL: "defaultParams",
        custom: "defaultParams"
    },
    customizableParams: {
        frontend: "customizableParams",
        backend: "customizable_params",
        database: "customizable_params",
        pretty: "Customizable Params",
        component: "CustomizableParams",
        kebab: "customizable-params",
        sqlFunctionRef: "p_customizable_params",
        RestAPI: "customizableParams",
        GraphQL: "customizableParams",
        custom: "customizableParams"
    },
    additionalParams: {
        frontend: "additionalParams",
        backend: "additional_params",
        database: "additional_params",
        pretty: "Additional Params",
        component: "AdditionalParams",
        kebab: "additional-params",
        sqlFunctionRef: "p_additional_params",
        RestAPI: "additionalParams",
        GraphQL: "additionalParams",
        custom: "additionalParams"
    },
    recipeDisplayInverse: {
        frontend: "recipeDisplayInverse",
        backend: "recipe_display_Inverse",
        database: "ifk_recipe_display",
        pretty: "Recipe Display Inverse",
        component: "RecipeDisplayInverse",
        kebab: "recipe-displayInverse",
        sqlFunctionRef: "p_ifk_recipe_display",
        RestAPI: "recipeDisplayInverse",
        GraphQL: "recipeDisplayInverse",
        custom: "recipeDisplayInverse"
    }
},
    emails: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    sender: {
        frontend: "sender",
        backend: "sender",
        database: "sender",
        pretty: "Sender",
        component: "Sender",
        kebab: "sender",
        sqlFunctionRef: "p_sender",
        RestAPI: "sender",
        GraphQL: "sender",
        custom: "sender"
    },
    recipient: {
        frontend: "recipient",
        backend: "recipient",
        database: "recipient",
        pretty: "Recipient",
        component: "Recipient",
        kebab: "recipient",
        sqlFunctionRef: "p_recipient",
        RestAPI: "recipient",
        GraphQL: "recipient",
        custom: "recipient"
    },
    subject: {
        frontend: "subject",
        backend: "subject",
        database: "subject",
        pretty: "Subject",
        component: "Subject",
        kebab: "subject",
        sqlFunctionRef: "p_subject",
        RestAPI: "subject",
        GraphQL: "subject",
        custom: "subject"
    },
    body: {
        frontend: "body",
        backend: "body",
        database: "body",
        pretty: "Body",
        component: "Body",
        kebab: "body",
        sqlFunctionRef: "p_body",
        RestAPI: "body",
        GraphQL: "body",
        custom: "body"
    },
    timestamp: {
        frontend: "timestamp",
        backend: "timestamp",
        database: "timestamp",
        pretty: "Timestamp",
        component: "Timestamp",
        kebab: "timestamp",
        sqlFunctionRef: "p_timestamp",
        RestAPI: "timestamp",
        GraphQL: "timestamp",
        custom: "timestamp"
    },
    isRead: {
        frontend: "isRead",
        backend: "is_read",
        database: "is_read",
        pretty: "Is Read",
        component: "IsRead",
        kebab: "is-read",
        sqlFunctionRef: "p_is_read",
        RestAPI: "isRead",
        GraphQL: "isRead",
        custom: "isRead"
    }
},
    extractor: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    outputType: {
        frontend: "outputType",
        backend: "output_type",
        database: "output_type",
        pretty: "Output Type",
        component: "OutputType",
        kebab: "output-type",
        sqlFunctionRef: "p_output_type",
        RestAPI: "outputType",
        GraphQL: "outputType",
        custom: "outputType"
    },
    defaultIdentifier: {
        frontend: "defaultIdentifier",
        backend: "default_identifier",
        database: "default_identifier",
        pretty: "Default Identifier",
        component: "DefaultIdentifier",
        kebab: "default-identifier",
        sqlFunctionRef: "p_default_identifier",
        RestAPI: "defaultIdentifier",
        GraphQL: "defaultIdentifier",
        custom: "defaultIdentifier"
    },
    defaultIndex: {
        frontend: "defaultIndex",
        backend: "default_index",
        database: "default_index",
        pretty: "Default Index",
        component: "DefaultIndex",
        kebab: "default-index",
        sqlFunctionRef: "p_default_index",
        RestAPI: "defaultIndex",
        GraphQL: "defaultIndex",
        custom: "defaultIndex"
    }
},
    fileStructure: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    bucketId: {
        frontend: "bucketId",
        backend: "bucket_id",
        database: "bucket_id",
        pretty: "Bucket Id",
        component: "BucketId",
        kebab: "bucket-id",
        sqlFunctionRef: "p_bucket_id",
        RestAPI: "bucketId",
        GraphQL: "bucketId",
        custom: "bucketId"
    },
    path: {
        frontend: "path",
        backend: "path",
        database: "path",
        pretty: "Path",
        component: "Path",
        kebab: "path",
        sqlFunctionRef: "p_path",
        RestAPI: "path",
        GraphQL: "path",
        custom: "path"
    },
    isFolder: {
        frontend: "isFolder",
        backend: "is_folder",
        database: "is_folder",
        pretty: "Is Folder",
        component: "IsFolder",
        kebab: "is-folder",
        sqlFunctionRef: "p_is_folder",
        RestAPI: "isFolder",
        GraphQL: "isFolder",
        custom: "isFolder"
    },
    fileId: {
        frontend: "fileId",
        backend: "file_id",
        database: "file_id",
        pretty: "File Id",
        component: "FileId",
        kebab: "file-id",
        sqlFunctionRef: "p_file_id",
        RestAPI: "fileId",
        GraphQL: "fileId",
        custom: "fileId"
    },
    parentPath: {
        frontend: "parentPath",
        backend: "parent_path",
        database: "parent_path",
        pretty: "Parent Path",
        component: "ParentPath",
        kebab: "parent-path",
        sqlFunctionRef: "p_parent_path",
        RestAPI: "parentPath",
        GraphQL: "parentPath",
        custom: "parentPath"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    }
},
    flashcardData: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    topic: {
        frontend: "topic",
        backend: "topic",
        database: "topic",
        pretty: "Topic",
        component: "Topic",
        kebab: "topic",
        sqlFunctionRef: "p_topic",
        RestAPI: "topic",
        GraphQL: "topic",
        custom: "topic"
    },
    lesson: {
        frontend: "lesson",
        backend: "lesson",
        database: "lesson",
        pretty: "Lesson",
        component: "Lesson",
        kebab: "lesson",
        sqlFunctionRef: "p_lesson",
        RestAPI: "lesson",
        GraphQL: "lesson",
        custom: "lesson"
    },
    difficulty: {
        frontend: "difficulty",
        backend: "difficulty",
        database: "difficulty",
        pretty: "Difficulty",
        component: "Difficulty",
        kebab: "difficulty",
        sqlFunctionRef: "p_difficulty",
        RestAPI: "difficulty",
        GraphQL: "difficulty",
        custom: "difficulty"
    },
    front: {
        frontend: "front",
        backend: "front",
        database: "front",
        pretty: "Front",
        component: "Front",
        kebab: "front",
        sqlFunctionRef: "p_front",
        RestAPI: "front",
        GraphQL: "front",
        custom: "front"
    },
    back: {
        frontend: "back",
        backend: "back",
        database: "back",
        pretty: "Back",
        component: "Back",
        kebab: "back",
        sqlFunctionRef: "p_back",
        RestAPI: "back",
        GraphQL: "back",
        custom: "back"
    },
    example: {
        frontend: "example",
        backend: "example",
        database: "example",
        pretty: "Example",
        component: "Example",
        kebab: "example",
        sqlFunctionRef: "p_example",
        RestAPI: "example",
        GraphQL: "example",
        custom: "example"
    },
    detailedExplanation: {
        frontend: "detailedExplanation",
        backend: "detailed_explanation",
        database: "detailed_explanation",
        pretty: "Detailed Explanation",
        component: "DetailedExplanation",
        kebab: "detailed-explanation",
        sqlFunctionRef: "p_detailed_explanation",
        RestAPI: "detailedExplanation",
        GraphQL: "detailedExplanation",
        custom: "detailedExplanation"
    },
    audioExplanation: {
        frontend: "audioExplanation",
        backend: "audio_explanation",
        database: "audio_explanation",
        pretty: "Audio Explanation",
        component: "AudioExplanation",
        kebab: "audio-explanation",
        sqlFunctionRef: "p_audio_explanation",
        RestAPI: "audioExplanation",
        GraphQL: "audioExplanation",
        custom: "audioExplanation"
    },
    personalNotes: {
        frontend: "personalNotes",
        backend: "personal_notes",
        database: "personal_notes",
        pretty: "Personal Notes",
        component: "PersonalNotes",
        kebab: "personal-notes",
        sqlFunctionRef: "p_personal_notes",
        RestAPI: "personalNotes",
        GraphQL: "personalNotes",
        custom: "personalNotes"
    },
    isDeleted: {
        frontend: "isDeleted",
        backend: "is_deleted",
        database: "is_deleted",
        pretty: "Is Deleted",
        component: "IsDeleted",
        kebab: "is-deleted",
        sqlFunctionRef: "p_is_deleted",
        RestAPI: "isDeleted",
        GraphQL: "isDeleted",
        custom: "isDeleted"
    },
    public: {
        frontend: "public",
        backend: "public",
        database: "public",
        pretty: "Public",
        component: "Public",
        kebab: "public",
        sqlFunctionRef: "p_public",
        RestAPI: "public",
        GraphQL: "public",
        custom: "public"
    },
    sharedWith: {
        frontend: "sharedWith",
        backend: "shared_with",
        database: "shared_with",
        pretty: "Shared With",
        component: "SharedWith",
        kebab: "shared-with",
        sqlFunctionRef: "p_shared_with",
        RestAPI: "sharedWith",
        GraphQL: "sharedWith",
        custom: "sharedWith"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    flashcardHistoryInverse: {
        frontend: "flashcardHistoryInverse",
        backend: "flashcard_history_Inverse",
        database: "ifk_flashcard_history",
        pretty: "Flashcard History Inverse",
        component: "FlashcardHistoryInverse",
        kebab: "flashcard-historyInverse",
        sqlFunctionRef: "p_ifk_flashcard_history",
        RestAPI: "flashcardHistoryInverse",
        GraphQL: "flashcardHistoryInverse",
        custom: "flashcardHistoryInverse"
    },
    flashcardSetRelationsInverse: {
        frontend: "flashcardSetRelationsInverse",
        backend: "flashcard_set_relations_Inverse",
        database: "ifk_flashcard_set_relations",
        pretty: "Flashcard Set Relations Inverse",
        component: "FlashcardSetRelationsInverse",
        kebab: "flashcard-set-relationsInverse",
        sqlFunctionRef: "p_ifk_flashcard_set_relations",
        RestAPI: "flashcardSetRelationsInverse",
        GraphQL: "flashcardSetRelationsInverse",
        custom: "flashcardSetRelationsInverse"
    },
    flashcardImagesInverse: {
        frontend: "flashcardImagesInverse",
        backend: "flashcard_images_Inverse",
        database: "ifk_flashcard_images",
        pretty: "Flashcard Images Inverse",
        component: "FlashcardImagesInverse",
        kebab: "flashcard-imagesInverse",
        sqlFunctionRef: "p_ifk_flashcard_images",
        RestAPI: "flashcardImagesInverse",
        GraphQL: "flashcardImagesInverse",
        custom: "flashcardImagesInverse"
    }
},
    flashcardHistory: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    flashcardId: {
        frontend: "flashcardId",
        backend: "flashcard_id",
        database: "flashcard_id",
        pretty: "Flashcard Id",
        component: "FlashcardId",
        kebab: "flashcard-id",
        sqlFunctionRef: "p_flashcard_id",
        RestAPI: "flashcardId",
        GraphQL: "flashcardId",
        custom: "flashcardId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    reviewCount: {
        frontend: "reviewCount",
        backend: "review_count",
        database: "review_count",
        pretty: "Review Count",
        component: "ReviewCount",
        kebab: "review-count",
        sqlFunctionRef: "p_review_count",
        RestAPI: "reviewCount",
        GraphQL: "reviewCount",
        custom: "reviewCount"
    },
    correctCount: {
        frontend: "correctCount",
        backend: "correct_count",
        database: "correct_count",
        pretty: "Correct Count",
        component: "CorrectCount",
        kebab: "correct-count",
        sqlFunctionRef: "p_correct_count",
        RestAPI: "correctCount",
        GraphQL: "correctCount",
        custom: "correctCount"
    },
    incorrectCount: {
        frontend: "incorrectCount",
        backend: "incorrect_count",
        database: "incorrect_count",
        pretty: "Incorrect Count",
        component: "IncorrectCount",
        kebab: "incorrect-count",
        sqlFunctionRef: "p_incorrect_count",
        RestAPI: "incorrectCount",
        GraphQL: "incorrectCount",
        custom: "incorrectCount"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    flashcardDataReference: {
        frontend: "flashcardDataReference",
        backend: "flashcard_data_reference",
        database: "ref_flashcard_data",
        pretty: "Flashcard Data Reference",
        component: "FlashcardDataReference",
        kebab: "flashcard-dataReference",
        sqlFunctionRef: "p_ref_flashcard_data",
        RestAPI: "flashcardDataReference",
        GraphQL: "flashcardDataReference",
        custom: "flashcardDataReference"
    }
},
    flashcardImages: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    flashcardId: {
        frontend: "flashcardId",
        backend: "flashcard_id",
        database: "flashcard_id",
        pretty: "Flashcard Id",
        component: "FlashcardId",
        kebab: "flashcard-id",
        sqlFunctionRef: "p_flashcard_id",
        RestAPI: "flashcardId",
        GraphQL: "flashcardId",
        custom: "flashcardId"
    },
    filePath: {
        frontend: "filePath",
        backend: "file_path",
        database: "file_path",
        pretty: "File Path",
        component: "FilePath",
        kebab: "file-path",
        sqlFunctionRef: "p_file_path",
        RestAPI: "filePath",
        GraphQL: "filePath",
        custom: "filePath"
    },
    fileName: {
        frontend: "fileName",
        backend: "file_name",
        database: "file_name",
        pretty: "File Name",
        component: "FileName",
        kebab: "file-name",
        sqlFunctionRef: "p_file_name",
        RestAPI: "fileName",
        GraphQL: "fileName",
        custom: "fileName"
    },
    mimeType: {
        frontend: "mimeType",
        backend: "mime_type",
        database: "mime_type",
        pretty: "Mime Type",
        component: "MimeType",
        kebab: "mime-type",
        sqlFunctionRef: "p_mime_type",
        RestAPI: "mimeType",
        GraphQL: "mimeType",
        custom: "mimeType"
    },
    size: {
        frontend: "size",
        backend: "size",
        database: "size",
        pretty: "Size",
        component: "Size",
        kebab: "size",
        sqlFunctionRef: "p_size",
        RestAPI: "size",
        GraphQL: "size",
        custom: "size"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    flashcardDataReference: {
        frontend: "flashcardDataReference",
        backend: "flashcard_data_reference",
        database: "ref_flashcard_data",
        pretty: "Flashcard Data Reference",
        component: "FlashcardDataReference",
        kebab: "flashcard-dataReference",
        sqlFunctionRef: "p_ref_flashcard_data",
        RestAPI: "flashcardDataReference",
        GraphQL: "flashcardDataReference",
        custom: "flashcardDataReference"
    }
},
    flashcardSetRelations: {
    flashcardId: {
        frontend: "flashcardId",
        backend: "flashcard_id",
        database: "flashcard_id",
        pretty: "Flashcard Id",
        component: "FlashcardId",
        kebab: "flashcard-id",
        sqlFunctionRef: "p_flashcard_id",
        RestAPI: "flashcardId",
        GraphQL: "flashcardId",
        custom: "flashcardId"
    },
    setId: {
        frontend: "setId",
        backend: "set_id",
        database: "set_id",
        pretty: "Set Id",
        component: "SetId",
        kebab: "set-id",
        sqlFunctionRef: "p_set_id",
        RestAPI: "setId",
        GraphQL: "setId",
        custom: "setId"
    },
    order: {
        frontend: "order",
        backend: "order",
        database: "order",
        pretty: "Order",
        component: "Order",
        kebab: "order",
        sqlFunctionRef: "p_order",
        RestAPI: "order",
        GraphQL: "order",
        custom: "order"
    },
    flashcardDataReference: {
        frontend: "flashcardDataReference",
        backend: "flashcard_data_reference",
        database: "ref_flashcard_data",
        pretty: "Flashcard Data Reference",
        component: "FlashcardDataReference",
        kebab: "flashcard-dataReference",
        sqlFunctionRef: "p_ref_flashcard_data",
        RestAPI: "flashcardDataReference",
        GraphQL: "flashcardDataReference",
        custom: "flashcardDataReference"
    },
    flashcardSetsReference: {
        frontend: "flashcardSetsReference",
        backend: "flashcard_sets_reference",
        database: "ref_flashcard_sets",
        pretty: "Flashcard Sets Reference",
        component: "FlashcardSetsReference",
        kebab: "flashcard-setsReference",
        sqlFunctionRef: "p_ref_flashcard_sets",
        RestAPI: "flashcardSetsReference",
        GraphQL: "flashcardSetsReference",
        custom: "flashcardSetsReference"
    }
},
    flashcardSets: {
    setId: {
        frontend: "setId",
        backend: "set_id",
        database: "set_id",
        pretty: "Set Id",
        component: "SetId",
        kebab: "set-id",
        sqlFunctionRef: "p_set_id",
        RestAPI: "setId",
        GraphQL: "setId",
        custom: "setId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    sharedWith: {
        frontend: "sharedWith",
        backend: "shared_with",
        database: "shared_with",
        pretty: "Shared With",
        component: "SharedWith",
        kebab: "shared-with",
        sqlFunctionRef: "p_shared_with",
        RestAPI: "sharedWith",
        GraphQL: "sharedWith",
        custom: "sharedWith"
    },
    public: {
        frontend: "public",
        backend: "public",
        database: "public",
        pretty: "Public",
        component: "Public",
        kebab: "public",
        sqlFunctionRef: "p_public",
        RestAPI: "public",
        GraphQL: "public",
        custom: "public"
    },
    topic: {
        frontend: "topic",
        backend: "topic",
        database: "topic",
        pretty: "Topic",
        component: "Topic",
        kebab: "topic",
        sqlFunctionRef: "p_topic",
        RestAPI: "topic",
        GraphQL: "topic",
        custom: "topic"
    },
    lesson: {
        frontend: "lesson",
        backend: "lesson",
        database: "lesson",
        pretty: "Lesson",
        component: "Lesson",
        kebab: "lesson",
        sqlFunctionRef: "p_lesson",
        RestAPI: "lesson",
        GraphQL: "lesson",
        custom: "lesson"
    },
    difficulty: {
        frontend: "difficulty",
        backend: "difficulty",
        database: "difficulty",
        pretty: "Difficulty",
        component: "Difficulty",
        kebab: "difficulty",
        sqlFunctionRef: "p_difficulty",
        RestAPI: "difficulty",
        GraphQL: "difficulty",
        custom: "difficulty"
    },
    audioOverview: {
        frontend: "audioOverview",
        backend: "audio_overview",
        database: "audio_overview",
        pretty: "Audio Overview",
        component: "AudioOverview",
        kebab: "audio-overview",
        sqlFunctionRef: "p_audio_overview",
        RestAPI: "audioOverview",
        GraphQL: "audioOverview",
        custom: "audioOverview"
    },
    flashcardSetRelationsInverse: {
        frontend: "flashcardSetRelationsInverse",
        backend: "flashcard_set_relations_Inverse",
        database: "ifk_flashcard_set_relations",
        pretty: "Flashcard Set Relations Inverse",
        component: "FlashcardSetRelationsInverse",
        kebab: "flashcard-set-relationsInverse",
        sqlFunctionRef: "p_ifk_flashcard_set_relations",
        RestAPI: "flashcardSetRelationsInverse",
        GraphQL: "flashcardSetRelationsInverse",
        custom: "flashcardSetRelationsInverse"
    }
},
    fullSpectrumPositions: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    title: {
        frontend: "title",
        backend: "title",
        database: "title",
        pretty: "Title",
        component: "Title",
        kebab: "title",
        sqlFunctionRef: "p_title",
        RestAPI: "title",
        GraphQL: "title",
        custom: "title"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    alternateTitles: {
        frontend: "alternateTitles",
        backend: "alternate_titles",
        database: "alternate_titles",
        pretty: "Alternate Titles",
        component: "AlternateTitles",
        kebab: "alternate-titles",
        sqlFunctionRef: "p_alternate_titles",
        RestAPI: "alternateTitles",
        GraphQL: "alternateTitles",
        custom: "alternateTitles"
    },
    qualifications: {
        frontend: "qualifications",
        backend: "qualifications",
        database: "qualifications",
        pretty: "Qualifications",
        component: "Qualifications",
        kebab: "qualifications",
        sqlFunctionRef: "p_qualifications",
        RestAPI: "qualifications",
        GraphQL: "qualifications",
        custom: "qualifications"
    },
    sizzleQuestions: {
        frontend: "sizzleQuestions",
        backend: "sizzle_questions",
        database: "sizzle_questions",
        pretty: "Sizzle Questions",
        component: "SizzleQuestions",
        kebab: "sizzle-questions",
        sqlFunctionRef: "p_sizzle_questions",
        RestAPI: "sizzleQuestions",
        GraphQL: "sizzleQuestions",
        custom: "sizzleQuestions"
    },
    redFlags: {
        frontend: "redFlags",
        backend: "red_flags",
        database: "red_flags",
        pretty: "Red Flags",
        component: "RedFlags",
        kebab: "red-flags",
        sqlFunctionRef: "p_red_flags",
        RestAPI: "redFlags",
        GraphQL: "redFlags",
        custom: "redFlags"
    },
    additionalDetails: {
        frontend: "additionalDetails",
        backend: "additional_details",
        database: "additional_details",
        pretty: "Additional Details",
        component: "AdditionalDetails",
        kebab: "additional-details",
        sqlFunctionRef: "p_additional_details",
        RestAPI: "additionalDetails",
        GraphQL: "additionalDetails",
        custom: "additionalDetails"
    }
},
    message: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    conversationId: {
        frontend: "conversationId",
        backend: "conversation_id",
        database: "conversation_id",
        pretty: "Conversation Id",
        component: "ConversationId",
        kebab: "conversation-id",
        sqlFunctionRef: "p_conversation_id",
        RestAPI: "conversationId",
        GraphQL: "conversationId",
        custom: "conversationId"
    },
    role: {
        frontend: "role",
        backend: "role",
        database: "role",
        pretty: "Role",
        component: "Role",
        kebab: "role",
        sqlFunctionRef: "p_role",
        RestAPI: "role",
        GraphQL: "role",
        custom: "role"
    },
    content: {
        frontend: "content",
        backend: "content",
        database: "content",
        pretty: "Content",
        component: "Content",
        kebab: "content",
        sqlFunctionRef: "p_content",
        RestAPI: "content",
        GraphQL: "content",
        custom: "content"
    },
    type: {
        frontend: "type",
        backend: "type",
        database: "type",
        pretty: "Type",
        component: "Type",
        kebab: "type",
        sqlFunctionRef: "p_type",
        RestAPI: "type",
        GraphQL: "type",
        custom: "type"
    },
    displayOrder: {
        frontend: "displayOrder",
        backend: "display_order",
        database: "display_order",
        pretty: "Display Order",
        component: "DisplayOrder",
        kebab: "display-order",
        sqlFunctionRef: "p_display_order",
        RestAPI: "displayOrder",
        GraphQL: "displayOrder",
        custom: "displayOrder"
    },
    systemOrder: {
        frontend: "systemOrder",
        backend: "system_order",
        database: "system_order",
        pretty: "System Order",
        component: "SystemOrder",
        kebab: "system-order",
        sqlFunctionRef: "p_system_order",
        RestAPI: "systemOrder",
        GraphQL: "systemOrder",
        custom: "systemOrder"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    conversationReference: {
        frontend: "conversationReference",
        backend: "conversation_reference",
        database: "ref_conversation",
        pretty: "Conversation Reference",
        component: "ConversationReference",
        kebab: "conversationReference",
        sqlFunctionRef: "p_ref_conversation",
        RestAPI: "conversationReference",
        GraphQL: "conversationReference",
        custom: "conversationReference"
    }
},
    messageBroker: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    messageId: {
        frontend: "messageId",
        backend: "message_id",
        database: "message_id",
        pretty: "Message Id",
        component: "MessageId",
        kebab: "message-id",
        sqlFunctionRef: "p_message_id",
        RestAPI: "messageId",
        GraphQL: "messageId",
        custom: "messageId"
    },
    brokerId: {
        frontend: "brokerId",
        backend: "broker_id",
        database: "broker_id",
        pretty: "Broker Id",
        component: "BrokerId",
        kebab: "broker-id",
        sqlFunctionRef: "p_broker_id",
        RestAPI: "brokerId",
        GraphQL: "brokerId",
        custom: "brokerId"
    },
    defaultValue: {
        frontend: "defaultValue",
        backend: "default_value",
        database: "default_value",
        pretty: "Default Value",
        component: "DefaultValue",
        kebab: "default-value",
        sqlFunctionRef: "p_default_value",
        RestAPI: "defaultValue",
        GraphQL: "defaultValue",
        custom: "defaultValue"
    },
    defaultComponent: {
        frontend: "defaultComponent",
        backend: "default_component",
        database: "default_component",
        pretty: "Default Component",
        component: "DefaultComponent",
        kebab: "default-component",
        sqlFunctionRef: "p_default_component",
        RestAPI: "defaultComponent",
        GraphQL: "defaultComponent",
        custom: "defaultComponent"
    },
    dataBrokerReference: {
        frontend: "dataBrokerReference",
        backend: "data_broker_reference",
        database: "ref_data_broker",
        pretty: "Data Broker Reference",
        component: "DataBrokerReference",
        kebab: "data-brokerReference",
        sqlFunctionRef: "p_ref_data_broker",
        RestAPI: "dataBrokerReference",
        GraphQL: "dataBrokerReference",
        custom: "dataBrokerReference"
    },
    dataInputComponentReference: {
        frontend: "dataInputComponentReference",
        backend: "data_input_component_reference",
        database: "ref_data_input_component",
        pretty: "Data Input Component Reference",
        component: "DataInputComponentReference",
        kebab: "data-input-componentReference",
        sqlFunctionRef: "p_ref_data_input_component",
        RestAPI: "dataInputComponentReference",
        GraphQL: "dataInputComponentReference",
        custom: "dataInputComponentReference"
    },
    messageTemplateReference: {
        frontend: "messageTemplateReference",
        backend: "message_template_reference",
        database: "ref_message_template",
        pretty: "Message Template Reference",
        component: "MessageTemplateReference",
        kebab: "message-templateReference",
        sqlFunctionRef: "p_ref_message_template",
        RestAPI: "messageTemplateReference",
        GraphQL: "messageTemplateReference",
        custom: "messageTemplateReference"
    }
},
    messageTemplate: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    role: {
        frontend: "role",
        backend: "role",
        database: "role",
        pretty: "Role",
        component: "Role",
        kebab: "role",
        sqlFunctionRef: "p_role",
        RestAPI: "role",
        GraphQL: "role",
        custom: "role"
    },
    type: {
        frontend: "type",
        backend: "type",
        database: "type",
        pretty: "Type",
        component: "Type",
        kebab: "type",
        sqlFunctionRef: "p_type",
        RestAPI: "type",
        GraphQL: "type",
        custom: "type"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    content: {
        frontend: "content",
        backend: "content",
        database: "content",
        pretty: "Content",
        component: "Content",
        kebab: "content",
        sqlFunctionRef: "p_content",
        RestAPI: "content",
        GraphQL: "content",
        custom: "content"
    },
    messageBrokerInverse: {
        frontend: "messageBrokerInverse",
        backend: "message_broker_Inverse",
        database: "ifk_message_broker",
        pretty: "Message Broker Inverse",
        component: "MessageBrokerInverse",
        kebab: "message-brokerInverse",
        sqlFunctionRef: "p_ifk_message_broker",
        RestAPI: "messageBrokerInverse",
        GraphQL: "messageBrokerInverse",
        custom: "messageBrokerInverse"
    },
    recipeMessageInverse: {
        frontend: "recipeMessageInverse",
        backend: "recipe_message_Inverse",
        database: "ifk_recipe_message",
        pretty: "Recipe Message Inverse",
        component: "RecipeMessageInverse",
        kebab: "recipe-messageInverse",
        sqlFunctionRef: "p_ifk_recipe_message",
        RestAPI: "recipeMessageInverse",
        GraphQL: "recipeMessageInverse",
        custom: "recipeMessageInverse"
    }
},
    organizationInvitations: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    organizationId: {
        frontend: "organizationId",
        backend: "organization_id",
        database: "organization_id",
        pretty: "Organization Id",
        component: "OrganizationId",
        kebab: "organization-id",
        sqlFunctionRef: "p_organization_id",
        RestAPI: "organizationId",
        GraphQL: "organizationId",
        custom: "organizationId"
    },
    email: {
        frontend: "email",
        backend: "email",
        database: "email",
        pretty: "Email",
        component: "Email",
        kebab: "email",
        sqlFunctionRef: "p_email",
        RestAPI: "email",
        GraphQL: "email",
        custom: "email"
    },
    token: {
        frontend: "token",
        backend: "token",
        database: "token",
        pretty: "Token",
        component: "Token",
        kebab: "token",
        sqlFunctionRef: "p_token",
        RestAPI: "token",
        GraphQL: "token",
        custom: "token"
    },
    role: {
        frontend: "role",
        backend: "role",
        database: "role",
        pretty: "Role",
        component: "Role",
        kebab: "role",
        sqlFunctionRef: "p_role",
        RestAPI: "role",
        GraphQL: "role",
        custom: "role"
    },
    invitedAt: {
        frontend: "invitedAt",
        backend: "invited_at",
        database: "invited_at",
        pretty: "Invited At",
        component: "InvitedAt",
        kebab: "invited-at",
        sqlFunctionRef: "p_invited_at",
        RestAPI: "invitedAt",
        GraphQL: "invitedAt",
        custom: "invitedAt"
    },
    invitedBy: {
        frontend: "invitedBy",
        backend: "invited_by",
        database: "invited_by",
        pretty: "Invited By",
        component: "InvitedBy",
        kebab: "invited-by",
        sqlFunctionRef: "p_invited_by",
        RestAPI: "invitedBy",
        GraphQL: "invitedBy",
        custom: "invitedBy"
    },
    expiresAt: {
        frontend: "expiresAt",
        backend: "expires_at",
        database: "expires_at",
        pretty: "Expires At",
        component: "ExpiresAt",
        kebab: "expires-at",
        sqlFunctionRef: "p_expires_at",
        RestAPI: "expiresAt",
        GraphQL: "expiresAt",
        custom: "expiresAt"
    },
    organizationsReference: {
        frontend: "organizationsReference",
        backend: "organizations_reference",
        database: "ref_organizations",
        pretty: "Organizations Reference",
        component: "OrganizationsReference",
        kebab: "organizationsReference",
        sqlFunctionRef: "p_ref_organizations",
        RestAPI: "organizationsReference",
        GraphQL: "organizationsReference",
        custom: "organizationsReference"
    }
},
    organizationMembers: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    organizationId: {
        frontend: "organizationId",
        backend: "organization_id",
        database: "organization_id",
        pretty: "Organization Id",
        component: "OrganizationId",
        kebab: "organization-id",
        sqlFunctionRef: "p_organization_id",
        RestAPI: "organizationId",
        GraphQL: "organizationId",
        custom: "organizationId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    role: {
        frontend: "role",
        backend: "role",
        database: "role",
        pretty: "Role",
        component: "Role",
        kebab: "role",
        sqlFunctionRef: "p_role",
        RestAPI: "role",
        GraphQL: "role",
        custom: "role"
    },
    joinedAt: {
        frontend: "joinedAt",
        backend: "joined_at",
        database: "joined_at",
        pretty: "Joined At",
        component: "JoinedAt",
        kebab: "joined-at",
        sqlFunctionRef: "p_joined_at",
        RestAPI: "joinedAt",
        GraphQL: "joinedAt",
        custom: "joinedAt"
    },
    invitedBy: {
        frontend: "invitedBy",
        backend: "invited_by",
        database: "invited_by",
        pretty: "Invited By",
        component: "InvitedBy",
        kebab: "invited-by",
        sqlFunctionRef: "p_invited_by",
        RestAPI: "invitedBy",
        GraphQL: "invitedBy",
        custom: "invitedBy"
    },
    organizationsReference: {
        frontend: "organizationsReference",
        backend: "organizations_reference",
        database: "ref_organizations",
        pretty: "Organizations Reference",
        component: "OrganizationsReference",
        kebab: "organizationsReference",
        sqlFunctionRef: "p_ref_organizations",
        RestAPI: "organizationsReference",
        GraphQL: "organizationsReference",
        custom: "organizationsReference"
    }
},
    organizations: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    slug: {
        frontend: "slug",
        backend: "slug",
        database: "slug",
        pretty: "Slug",
        component: "Slug",
        kebab: "slug",
        sqlFunctionRef: "p_slug",
        RestAPI: "slug",
        GraphQL: "slug",
        custom: "slug"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    logoUrl: {
        frontend: "logoUrl",
        backend: "logo_url",
        database: "logo_url",
        pretty: "Logo Url",
        component: "LogoUrl",
        kebab: "logo-url",
        sqlFunctionRef: "p_logo_url",
        RestAPI: "logoUrl",
        GraphQL: "logoUrl",
        custom: "logoUrl"
    },
    website: {
        frontend: "website",
        backend: "website",
        database: "website",
        pretty: "Website",
        component: "Website",
        kebab: "website",
        sqlFunctionRef: "p_website",
        RestAPI: "website",
        GraphQL: "website",
        custom: "website"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    createdBy: {
        frontend: "createdBy",
        backend: "created_by",
        database: "created_by",
        pretty: "Created By",
        component: "CreatedBy",
        kebab: "created-by",
        sqlFunctionRef: "p_created_by",
        RestAPI: "createdBy",
        GraphQL: "createdBy",
        custom: "createdBy"
    },
    isPersonal: {
        frontend: "isPersonal",
        backend: "is_personal",
        database: "is_personal",
        pretty: "Is Personal",
        component: "IsPersonal",
        kebab: "is-personal",
        sqlFunctionRef: "p_is_personal",
        RestAPI: "isPersonal",
        GraphQL: "isPersonal",
        custom: "isPersonal"
    },
    settings: {
        frontend: "settings",
        backend: "settings",
        database: "settings",
        pretty: "Settings",
        component: "Settings",
        kebab: "settings",
        sqlFunctionRef: "p_settings",
        RestAPI: "settings",
        GraphQL: "settings",
        custom: "settings"
    },
    permissionsInverse: {
        frontend: "permissionsInverse",
        backend: "permissions_Inverse",
        database: "ifk_permissions",
        pretty: "Permissions Inverse",
        component: "PermissionsInverse",
        kebab: "permissionsInverse",
        sqlFunctionRef: "p_ifk_permissions",
        RestAPI: "permissionsInverse",
        GraphQL: "permissionsInverse",
        custom: "permissionsInverse"
    },
    organizationMembersInverse: {
        frontend: "organizationMembersInverse",
        backend: "organization_members_Inverse",
        database: "ifk_organization_members",
        pretty: "Organization Members Inverse",
        component: "OrganizationMembersInverse",
        kebab: "organization-membersInverse",
        sqlFunctionRef: "p_ifk_organization_members",
        RestAPI: "organizationMembersInverse",
        GraphQL: "organizationMembersInverse",
        custom: "organizationMembersInverse"
    },
    organizationInvitationsInverse: {
        frontend: "organizationInvitationsInverse",
        backend: "organization_invitations_Inverse",
        database: "ifk_organization_invitations",
        pretty: "Organization Invitations Inverse",
        component: "OrganizationInvitationsInverse",
        kebab: "organization-invitationsInverse",
        sqlFunctionRef: "p_ifk_organization_invitations",
        RestAPI: "organizationInvitationsInverse",
        GraphQL: "organizationInvitationsInverse",
        custom: "organizationInvitationsInverse"
    }
},
    permissions: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    resourceType: {
        frontend: "resourceType",
        backend: "resource_type",
        database: "resource_type",
        pretty: "Resource Type",
        component: "ResourceType",
        kebab: "resource-type",
        sqlFunctionRef: "p_resource_type",
        RestAPI: "resourceType",
        GraphQL: "resourceType",
        custom: "resourceType"
    },
    resourceId: {
        frontend: "resourceId",
        backend: "resource_id",
        database: "resource_id",
        pretty: "Resource Id",
        component: "ResourceId",
        kebab: "resource-id",
        sqlFunctionRef: "p_resource_id",
        RestAPI: "resourceId",
        GraphQL: "resourceId",
        custom: "resourceId"
    },
    grantedToUserId: {
        frontend: "grantedToUserId",
        backend: "granted_to_user_id",
        database: "granted_to_user_id",
        pretty: "Granted To User Id",
        component: "GrantedToUserId",
        kebab: "granted-to-user-id",
        sqlFunctionRef: "p_granted_to_user_id",
        RestAPI: "grantedToUserId",
        GraphQL: "grantedToUserId",
        custom: "grantedToUserId"
    },
    grantedToOrganizationId: {
        frontend: "grantedToOrganizationId",
        backend: "granted_to_organization_id",
        database: "granted_to_organization_id",
        pretty: "Granted To Organization Id",
        component: "GrantedToOrganizationId",
        kebab: "granted-to-organization-id",
        sqlFunctionRef: "p_granted_to_organization_id",
        RestAPI: "grantedToOrganizationId",
        GraphQL: "grantedToOrganizationId",
        custom: "grantedToOrganizationId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    permissionLevel: {
        frontend: "permissionLevel",
        backend: "permission_level",
        database: "permission_level",
        pretty: "Permission Level",
        component: "PermissionLevel",
        kebab: "permission-level",
        sqlFunctionRef: "p_permission_level",
        RestAPI: "permissionLevel",
        GraphQL: "permissionLevel",
        custom: "permissionLevel"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    createdBy: {
        frontend: "createdBy",
        backend: "created_by",
        database: "created_by",
        pretty: "Created By",
        component: "CreatedBy",
        kebab: "created-by",
        sqlFunctionRef: "p_created_by",
        RestAPI: "createdBy",
        GraphQL: "createdBy",
        custom: "createdBy"
    },
    organizationsReference: {
        frontend: "organizationsReference",
        backend: "organizations_reference",
        database: "ref_organizations",
        pretty: "Organizations Reference",
        component: "OrganizationsReference",
        kebab: "organizationsReference",
        sqlFunctionRef: "p_ref_organizations",
        RestAPI: "organizationsReference",
        GraphQL: "organizationsReference",
        custom: "organizationsReference"
    }
},
    processor: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    dependsDefault: {
        frontend: "dependsDefault",
        backend: "depends_default",
        database: "depends_default",
        pretty: "Depends Default",
        component: "DependsDefault",
        kebab: "depends-default",
        sqlFunctionRef: "p_depends_default",
        RestAPI: "dependsDefault",
        GraphQL: "dependsDefault",
        custom: "dependsDefault"
    },
    defaultExtractors: {
        frontend: "defaultExtractors",
        backend: "default_extractors",
        database: "default_extractors",
        pretty: "Default Extractors",
        component: "DefaultExtractors",
        kebab: "default-extractors",
        sqlFunctionRef: "p_default_extractors",
        RestAPI: "defaultExtractors",
        GraphQL: "defaultExtractors",
        custom: "defaultExtractors"
    },
    params: {
        frontend: "params",
        backend: "params",
        database: "params",
        pretty: "Params",
        component: "Params",
        kebab: "params",
        sqlFunctionRef: "p_params",
        RestAPI: "params",
        GraphQL: "params",
        custom: "params"
    },
    processorReference: {
        frontend: "processorReference",
        backend: "processor_reference",
        database: "ref_processor",
        pretty: "Processor Reference",
        component: "ProcessorReference",
        kebab: "processorReference",
        sqlFunctionRef: "p_ref_processor",
        RestAPI: "processorReference",
        GraphQL: "processorReference",
        custom: "processorReference"
    },
    recipeProcessorInverse: {
        frontend: "recipeProcessorInverse",
        backend: "recipe_processor_Inverse",
        database: "ifk_recipe_processor",
        pretty: "Recipe Processor Inverse",
        component: "RecipeProcessorInverse",
        kebab: "recipe-processorInverse",
        sqlFunctionRef: "p_ifk_recipe_processor",
        RestAPI: "recipeProcessorInverse",
        GraphQL: "recipeProcessorInverse",
        custom: "recipeProcessorInverse"
    }
},
    projectMembers: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    projectId: {
        frontend: "projectId",
        backend: "project_id",
        database: "project_id",
        pretty: "Project Id",
        component: "ProjectId",
        kebab: "project-id",
        sqlFunctionRef: "p_project_id",
        RestAPI: "projectId",
        GraphQL: "projectId",
        custom: "projectId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    role: {
        frontend: "role",
        backend: "role",
        database: "role",
        pretty: "Role",
        component: "Role",
        kebab: "role",
        sqlFunctionRef: "p_role",
        RestAPI: "role",
        GraphQL: "role",
        custom: "role"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    projectsReference: {
        frontend: "projectsReference",
        backend: "projects_reference",
        database: "ref_projects",
        pretty: "Projects Reference",
        component: "ProjectsReference",
        kebab: "projectsReference",
        sqlFunctionRef: "p_ref_projects",
        RestAPI: "projectsReference",
        GraphQL: "projectsReference",
        custom: "projectsReference"
    }
},
    projects: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    createdBy: {
        frontend: "createdBy",
        backend: "created_by",
        database: "created_by",
        pretty: "Created By",
        component: "CreatedBy",
        kebab: "created-by",
        sqlFunctionRef: "p_created_by",
        RestAPI: "createdBy",
        GraphQL: "createdBy",
        custom: "createdBy"
    },
    projectMembersInverse: {
        frontend: "projectMembersInverse",
        backend: "project_members_Inverse",
        database: "ifk_project_members",
        pretty: "Project Members Inverse",
        component: "ProjectMembersInverse",
        kebab: "project-membersInverse",
        sqlFunctionRef: "p_ifk_project_members",
        RestAPI: "projectMembersInverse",
        GraphQL: "projectMembersInverse",
        custom: "projectMembersInverse"
    },
    tasksInverse: {
        frontend: "tasksInverse",
        backend: "tasks_Inverse",
        database: "ifk_tasks",
        pretty: "Tasks Inverse",
        component: "TasksInverse",
        kebab: "tasksInverse",
        sqlFunctionRef: "p_ifk_tasks",
        RestAPI: "tasksInverse",
        GraphQL: "tasksInverse",
        custom: "tasksInverse"
    }
},
    recipe: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    tags: {
        frontend: "tags",
        backend: "tags",
        database: "tags",
        pretty: "Tags",
        component: "Tags",
        kebab: "tags",
        sqlFunctionRef: "p_tags",
        RestAPI: "tags",
        GraphQL: "tags",
        custom: "tags"
    },
    sampleOutput: {
        frontend: "sampleOutput",
        backend: "sample_output",
        database: "sample_output",
        pretty: "Sample Output",
        component: "SampleOutput",
        kebab: "sample-output",
        sqlFunctionRef: "p_sample_output",
        RestAPI: "sampleOutput",
        GraphQL: "sampleOutput",
        custom: "sampleOutput"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    status: {
        frontend: "status",
        backend: "status",
        database: "status",
        pretty: "Status",
        component: "Status",
        kebab: "status",
        sqlFunctionRef: "p_status",
        RestAPI: "status",
        GraphQL: "status",
        custom: "status"
    },
    version: {
        frontend: "version",
        backend: "version",
        database: "version",
        pretty: "Version",
        component: "Version",
        kebab: "version",
        sqlFunctionRef: "p_version",
        RestAPI: "version",
        GraphQL: "version",
        custom: "version"
    },
    postResultOptions: {
        frontend: "postResultOptions",
        backend: "post_result_options",
        database: "post_result_options",
        pretty: "Post Result Options",
        component: "PostResultOptions",
        kebab: "post-result-options",
        sqlFunctionRef: "p_post_result_options",
        RestAPI: "postResultOptions",
        GraphQL: "postResultOptions",
        custom: "postResultOptions"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    compiledRecipeInverse: {
        frontend: "compiledRecipeInverse",
        backend: "compiled_recipe_Inverse",
        database: "ifk_compiled_recipe",
        pretty: "Compiled Recipe Inverse",
        component: "CompiledRecipeInverse",
        kebab: "compiled-recipeInverse",
        sqlFunctionRef: "p_ifk_compiled_recipe",
        RestAPI: "compiledRecipeInverse",
        GraphQL: "compiledRecipeInverse",
        custom: "compiledRecipeInverse"
    },
    aiAgentInverse: {
        frontend: "aiAgentInverse",
        backend: "ai_agent_Inverse",
        database: "ifk_ai_agent",
        pretty: "Ai Agent Inverse",
        component: "AiAgentInverse",
        kebab: "ai-agentInverse",
        sqlFunctionRef: "p_ifk_ai_agent",
        RestAPI: "aiAgentInverse",
        GraphQL: "aiAgentInverse",
        custom: "aiAgentInverse"
    },
    recipeDisplayInverse: {
        frontend: "recipeDisplayInverse",
        backend: "recipe_display_Inverse",
        database: "ifk_recipe_display",
        pretty: "Recipe Display Inverse",
        component: "RecipeDisplayInverse",
        kebab: "recipe-displayInverse",
        sqlFunctionRef: "p_ifk_recipe_display",
        RestAPI: "recipeDisplayInverse",
        GraphQL: "recipeDisplayInverse",
        custom: "recipeDisplayInverse"
    },
    recipeProcessorInverse: {
        frontend: "recipeProcessorInverse",
        backend: "recipe_processor_Inverse",
        database: "ifk_recipe_processor",
        pretty: "Recipe Processor Inverse",
        component: "RecipeProcessorInverse",
        kebab: "recipe-processorInverse",
        sqlFunctionRef: "p_ifk_recipe_processor",
        RestAPI: "recipeProcessorInverse",
        GraphQL: "recipeProcessorInverse",
        custom: "recipeProcessorInverse"
    },
    recipeModelInverse: {
        frontend: "recipeModelInverse",
        backend: "recipe_model_Inverse",
        database: "ifk_recipe_model",
        pretty: "Recipe Model Inverse",
        component: "RecipeModelInverse",
        kebab: "recipe-modelInverse",
        sqlFunctionRef: "p_ifk_recipe_model",
        RestAPI: "recipeModelInverse",
        GraphQL: "recipeModelInverse",
        custom: "recipeModelInverse"
    },
    recipeBrokerInverse: {
        frontend: "recipeBrokerInverse",
        backend: "recipe_broker_Inverse",
        database: "ifk_recipe_broker",
        pretty: "Recipe Broker Inverse",
        component: "RecipeBrokerInverse",
        kebab: "recipe-brokerInverse",
        sqlFunctionRef: "p_ifk_recipe_broker",
        RestAPI: "recipeBrokerInverse",
        GraphQL: "recipeBrokerInverse",
        custom: "recipeBrokerInverse"
    },
    recipeMessageInverse: {
        frontend: "recipeMessageInverse",
        backend: "recipe_message_Inverse",
        database: "ifk_recipe_message",
        pretty: "Recipe Message Inverse",
        component: "RecipeMessageInverse",
        kebab: "recipe-messageInverse",
        sqlFunctionRef: "p_ifk_recipe_message",
        RestAPI: "recipeMessageInverse",
        GraphQL: "recipeMessageInverse",
        custom: "recipeMessageInverse"
    },
    recipeToolInverse: {
        frontend: "recipeToolInverse",
        backend: "recipe_tool_Inverse",
        database: "ifk_recipe_tool",
        pretty: "Recipe Tool Inverse",
        component: "RecipeToolInverse",
        kebab: "recipe-toolInverse",
        sqlFunctionRef: "p_ifk_recipe_tool",
        RestAPI: "recipeToolInverse",
        GraphQL: "recipeToolInverse",
        custom: "recipeToolInverse"
    },
    recipeFunctionInverse: {
        frontend: "recipeFunctionInverse",
        backend: "recipe_function_Inverse",
        database: "ifk_recipe_function",
        pretty: "Recipe Function Inverse",
        component: "RecipeFunctionInverse",
        kebab: "recipe-functionInverse",
        sqlFunctionRef: "p_ifk_recipe_function",
        RestAPI: "recipeFunctionInverse",
        GraphQL: "recipeFunctionInverse",
        custom: "recipeFunctionInverse"
    }
},
    recipeBroker: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    recipe: {
        frontend: "recipe",
        backend: "recipe",
        database: "recipe",
        pretty: "Recipe",
        component: "Recipe",
        kebab: "recipe",
        sqlFunctionRef: "p_recipe",
        RestAPI: "recipe",
        GraphQL: "recipe",
        custom: "recipe"
    },
    broker: {
        frontend: "broker",
        backend: "broker",
        database: "broker",
        pretty: "Broker",
        component: "Broker",
        kebab: "broker",
        sqlFunctionRef: "p_broker",
        RestAPI: "broker",
        GraphQL: "broker",
        custom: "broker"
    },
    brokerRole: {
        frontend: "brokerRole",
        backend: "broker_role",
        database: "broker_role",
        pretty: "Broker Role",
        component: "BrokerRole",
        kebab: "broker-role",
        sqlFunctionRef: "p_broker_role",
        RestAPI: "brokerRole",
        GraphQL: "brokerRole",
        custom: "brokerRole"
    },
    required: {
        frontend: "required",
        backend: "required",
        database: "required",
        pretty: "Required",
        component: "Required",
        kebab: "required",
        sqlFunctionRef: "p_required",
        RestAPI: "required",
        GraphQL: "required",
        custom: "required"
    },
    brokerReference: {
        frontend: "brokerReference",
        backend: "broker_reference",
        database: "ref_broker",
        pretty: "Broker Reference",
        component: "BrokerReference",
        kebab: "brokerReference",
        sqlFunctionRef: "p_ref_broker",
        RestAPI: "brokerReference",
        GraphQL: "brokerReference",
        custom: "brokerReference"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    }
},
    recipeDisplay: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    recipe: {
        frontend: "recipe",
        backend: "recipe",
        database: "recipe",
        pretty: "Recipe",
        component: "Recipe",
        kebab: "recipe",
        sqlFunctionRef: "p_recipe",
        RestAPI: "recipe",
        GraphQL: "recipe",
        custom: "recipe"
    },
    display: {
        frontend: "display",
        backend: "display",
        database: "display",
        pretty: "Display",
        component: "Display",
        kebab: "display",
        sqlFunctionRef: "p_display",
        RestAPI: "display",
        GraphQL: "display",
        custom: "display"
    },
    priority: {
        frontend: "priority",
        backend: "priority",
        database: "priority",
        pretty: "Priority",
        component: "Priority",
        kebab: "priority",
        sqlFunctionRef: "p_priority",
        RestAPI: "priority",
        GraphQL: "priority",
        custom: "priority"
    },
    displaySettings: {
        frontend: "displaySettings",
        backend: "display_settings",
        database: "display_settings",
        pretty: "Display Settings",
        component: "DisplaySettings",
        kebab: "display-settings",
        sqlFunctionRef: "p_display_settings",
        RestAPI: "displaySettings",
        GraphQL: "displaySettings",
        custom: "displaySettings"
    },
    displayOptionReference: {
        frontend: "displayOptionReference",
        backend: "display_option_reference",
        database: "ref_display_option",
        pretty: "Display Option Reference",
        component: "DisplayOptionReference",
        kebab: "display-optionReference",
        sqlFunctionRef: "p_ref_display_option",
        RestAPI: "displayOptionReference",
        GraphQL: "displayOptionReference",
        custom: "displayOptionReference"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    }
},
    recipeFunction: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    recipe: {
        frontend: "recipe",
        backend: "recipe",
        database: "recipe",
        pretty: "Recipe",
        component: "Recipe",
        kebab: "recipe",
        sqlFunctionRef: "p_recipe",
        RestAPI: "recipe",
        GraphQL: "recipe",
        custom: "recipe"
    },
    function: {
        frontend: "function",
        backend: "function",
        database: "function",
        pretty: "Function",
        component: "Function",
        kebab: "function",
        sqlFunctionRef: "p_function",
        RestAPI: "function",
        GraphQL: "function",
        custom: "function"
    },
    role: {
        frontend: "role",
        backend: "role",
        database: "role",
        pretty: "Role",
        component: "Role",
        kebab: "role",
        sqlFunctionRef: "p_role",
        RestAPI: "role",
        GraphQL: "role",
        custom: "role"
    },
    params: {
        frontend: "params",
        backend: "params",
        database: "params",
        pretty: "Params",
        component: "Params",
        kebab: "params",
        sqlFunctionRef: "p_params",
        RestAPI: "params",
        GraphQL: "params",
        custom: "params"
    },
    systemFunctionReference: {
        frontend: "systemFunctionReference",
        backend: "system_function_reference",
        database: "ref_system_function",
        pretty: "System Function Reference",
        component: "SystemFunctionReference",
        kebab: "system-functionReference",
        sqlFunctionRef: "p_ref_system_function",
        RestAPI: "systemFunctionReference",
        GraphQL: "systemFunctionReference",
        custom: "systemFunctionReference"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    }
},
    recipeMessage: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    messageId: {
        frontend: "messageId",
        backend: "message_id",
        database: "message_id",
        pretty: "Message Id",
        component: "MessageId",
        kebab: "message-id",
        sqlFunctionRef: "p_message_id",
        RestAPI: "messageId",
        GraphQL: "messageId",
        custom: "messageId"
    },
    recipeId: {
        frontend: "recipeId",
        backend: "recipe_id",
        database: "recipe_id",
        pretty: "Recipe Id",
        component: "RecipeId",
        kebab: "recipe-id",
        sqlFunctionRef: "p_recipe_id",
        RestAPI: "recipeId",
        GraphQL: "recipeId",
        custom: "recipeId"
    },
    order: {
        frontend: "order",
        backend: "order",
        database: "order",
        pretty: "Order",
        component: "Order",
        kebab: "order",
        sqlFunctionRef: "p_order",
        RestAPI: "order",
        GraphQL: "order",
        custom: "order"
    },
    messageTemplateReference: {
        frontend: "messageTemplateReference",
        backend: "message_template_reference",
        database: "ref_message_template",
        pretty: "Message Template Reference",
        component: "MessageTemplateReference",
        kebab: "message-templateReference",
        sqlFunctionRef: "p_ref_message_template",
        RestAPI: "messageTemplateReference",
        GraphQL: "messageTemplateReference",
        custom: "messageTemplateReference"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    }
},
    recipeMessageReorderQueue: {
    recipeId: {
        frontend: "recipeId",
        backend: "recipe_id",
        database: "recipe_id",
        pretty: "Recipe Id",
        component: "RecipeId",
        kebab: "recipe-id",
        sqlFunctionRef: "p_recipe_id",
        RestAPI: "recipeId",
        GraphQL: "recipeId",
        custom: "recipeId"
    },
    lastModified: {
        frontend: "lastModified",
        backend: "last_modified",
        database: "last_modified",
        pretty: "Last Modified",
        component: "LastModified",
        kebab: "last-modified",
        sqlFunctionRef: "p_last_modified",
        RestAPI: "lastModified",
        GraphQL: "lastModified",
        custom: "lastModified"
    }
},
    recipeModel: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    recipe: {
        frontend: "recipe",
        backend: "recipe",
        database: "recipe",
        pretty: "Recipe",
        component: "Recipe",
        kebab: "recipe",
        sqlFunctionRef: "p_recipe",
        RestAPI: "recipe",
        GraphQL: "recipe",
        custom: "recipe"
    },
    aiModel: {
        frontend: "aiModel",
        backend: "ai_model",
        database: "ai_model",
        pretty: "Ai Model",
        component: "AiModel",
        kebab: "ai-model",
        sqlFunctionRef: "p_ai_model",
        RestAPI: "aiModel",
        GraphQL: "aiModel",
        custom: "aiModel"
    },
    role: {
        frontend: "role",
        backend: "role",
        database: "role",
        pretty: "Role",
        component: "Role",
        kebab: "role",
        sqlFunctionRef: "p_role",
        RestAPI: "role",
        GraphQL: "role",
        custom: "role"
    },
    priority: {
        frontend: "priority",
        backend: "priority",
        database: "priority",
        pretty: "Priority",
        component: "Priority",
        kebab: "priority",
        sqlFunctionRef: "p_priority",
        RestAPI: "priority",
        GraphQL: "priority",
        custom: "priority"
    },
    aiModelReference: {
        frontend: "aiModelReference",
        backend: "ai_model_reference",
        database: "ref_ai_model",
        pretty: "Ai Model Reference",
        component: "AiModelReference",
        kebab: "ai-modelReference",
        sqlFunctionRef: "p_ref_ai_model",
        RestAPI: "aiModelReference",
        GraphQL: "aiModelReference",
        custom: "aiModelReference"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    }
},
    recipeProcessor: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    recipe: {
        frontend: "recipe",
        backend: "recipe",
        database: "recipe",
        pretty: "Recipe",
        component: "Recipe",
        kebab: "recipe",
        sqlFunctionRef: "p_recipe",
        RestAPI: "recipe",
        GraphQL: "recipe",
        custom: "recipe"
    },
    processor: {
        frontend: "processor",
        backend: "processor",
        database: "processor",
        pretty: "Processor",
        component: "Processor",
        kebab: "processor",
        sqlFunctionRef: "p_processor",
        RestAPI: "processor",
        GraphQL: "processor",
        custom: "processor"
    },
    params: {
        frontend: "params",
        backend: "params",
        database: "params",
        pretty: "Params",
        component: "Params",
        kebab: "params",
        sqlFunctionRef: "p_params",
        RestAPI: "params",
        GraphQL: "params",
        custom: "params"
    },
    processorReference: {
        frontend: "processorReference",
        backend: "processor_reference",
        database: "ref_processor",
        pretty: "Processor Reference",
        component: "ProcessorReference",
        kebab: "processorReference",
        sqlFunctionRef: "p_ref_processor",
        RestAPI: "processorReference",
        GraphQL: "processorReference",
        custom: "processorReference"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    }
},
    recipeTool: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    recipe: {
        frontend: "recipe",
        backend: "recipe",
        database: "recipe",
        pretty: "Recipe",
        component: "Recipe",
        kebab: "recipe",
        sqlFunctionRef: "p_recipe",
        RestAPI: "recipe",
        GraphQL: "recipe",
        custom: "recipe"
    },
    tool: {
        frontend: "tool",
        backend: "tool",
        database: "tool",
        pretty: "Tool",
        component: "Tool",
        kebab: "tool",
        sqlFunctionRef: "p_tool",
        RestAPI: "tool",
        GraphQL: "tool",
        custom: "tool"
    },
    params: {
        frontend: "params",
        backend: "params",
        database: "params",
        pretty: "Params",
        component: "Params",
        kebab: "params",
        sqlFunctionRef: "p_params",
        RestAPI: "params",
        GraphQL: "params",
        custom: "params"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    },
    toolReference: {
        frontend: "toolReference",
        backend: "tool_reference",
        database: "ref_tool",
        pretty: "Tool Reference",
        component: "ToolReference",
        kebab: "toolReference",
        sqlFunctionRef: "p_ref_tool",
        RestAPI: "toolReference",
        GraphQL: "toolReference",
        custom: "toolReference"
    }
},
    registeredFunction: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    modulePath: {
        frontend: "modulePath",
        backend: "module_path",
        database: "module_path",
        pretty: "Module Path",
        component: "ModulePath",
        kebab: "module-path",
        sqlFunctionRef: "p_module_path",
        RestAPI: "modulePath",
        GraphQL: "modulePath",
        custom: "modulePath"
    },
    className: {
        frontend: "className",
        backend: "class_name",
        database: "class_name",
        pretty: "Class Name",
        component: "ClassName",
        kebab: "class-name",
        sqlFunctionRef: "p_class_name",
        RestAPI: "className",
        GraphQL: "className",
        custom: "className"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    returnBroker: {
        frontend: "returnBroker",
        backend: "return_broker",
        database: "return_broker",
        pretty: "Return Broker",
        component: "ReturnBroker",
        kebab: "return-broker",
        sqlFunctionRef: "p_return_broker",
        RestAPI: "returnBroker",
        GraphQL: "returnBroker",
        custom: "returnBroker"
    },
    brokerReference: {
        frontend: "brokerReference",
        backend: "broker_reference",
        database: "ref_broker",
        pretty: "Broker Reference",
        component: "BrokerReference",
        kebab: "brokerReference",
        sqlFunctionRef: "p_ref_broker",
        RestAPI: "brokerReference",
        GraphQL: "brokerReference",
        custom: "brokerReference"
    },
    systemFunctionInverse: {
        frontend: "systemFunctionInverse",
        backend: "system_function_Inverse",
        database: "ifk_system_function",
        pretty: "System Function Inverse",
        component: "SystemFunctionInverse",
        kebab: "system-functionInverse",
        sqlFunctionRef: "p_ifk_system_function",
        RestAPI: "systemFunctionInverse",
        GraphQL: "systemFunctionInverse",
        custom: "systemFunctionInverse"
    },
    argInverse: {
        frontend: "argInverse",
        backend: "arg_Inverse",
        database: "ifk_arg",
        pretty: "Arg Inverse",
        component: "ArgInverse",
        kebab: "argInverse",
        sqlFunctionRef: "p_ifk_arg",
        RestAPI: "argInverse",
        GraphQL: "argInverse",
        custom: "argInverse"
    }
},
    scrapeConfiguration: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeMode: {
        frontend: "scrapeMode",
        backend: "scrape_mode",
        database: "scrape_mode",
        pretty: "Scrape Mode",
        component: "ScrapeMode",
        kebab: "scrape-mode",
        sqlFunctionRef: "p_scrape_mode",
        RestAPI: "scrapeMode",
        GraphQL: "scrapeMode",
        custom: "scrapeMode"
    },
    interactionSettingsId: {
        frontend: "interactionSettingsId",
        backend: "interaction_settings_id",
        database: "interaction_settings_id",
        pretty: "Interaction Settings Id",
        component: "InteractionSettingsId",
        kebab: "interaction-settings-id",
        sqlFunctionRef: "p_interaction_settings_id",
        RestAPI: "interactionSettingsId",
        GraphQL: "interactionSettingsId",
        custom: "interactionSettingsId"
    },
    scrapePathPatternId: {
        frontend: "scrapePathPatternId",
        backend: "scrape_path_pattern_id",
        database: "scrape_path_pattern_id",
        pretty: "Scrape Path Pattern Id",
        component: "ScrapePathPatternId",
        kebab: "scrape-path-pattern-id",
        sqlFunctionRef: "p_scrape_path_pattern_id",
        RestAPI: "scrapePathPatternId",
        GraphQL: "scrapePathPatternId",
        custom: "scrapePathPatternId"
    },
    isActive: {
        frontend: "isActive",
        backend: "is_active",
        database: "is_active",
        pretty: "Is Active",
        component: "IsActive",
        kebab: "is-active",
        sqlFunctionRef: "p_is_active",
        RestAPI: "isActive",
        GraphQL: "isActive",
        custom: "isActive"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapePathPatternReference: {
        frontend: "scrapePathPatternReference",
        backend: "scrape_path_pattern_reference",
        database: "ref_scrape_path_pattern",
        pretty: "Scrape Path Pattern Reference",
        component: "ScrapePathPatternReference",
        kebab: "scrape-path-patternReference",
        sqlFunctionRef: "p_ref_scrape_path_pattern",
        RestAPI: "scrapePathPatternReference",
        GraphQL: "scrapePathPatternReference",
        custom: "scrapePathPatternReference"
    }
},
    scrapeDomain: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    url: {
        frontend: "url",
        backend: "url",
        database: "url",
        pretty: "Url",
        component: "Url",
        kebab: "url",
        sqlFunctionRef: "p_url",
        RestAPI: "url",
        GraphQL: "url",
        custom: "url"
    },
    commonName: {
        frontend: "commonName",
        backend: "common_name",
        database: "common_name",
        pretty: "Common Name",
        component: "CommonName",
        kebab: "common-name",
        sqlFunctionRef: "p_common_name",
        RestAPI: "commonName",
        GraphQL: "commonName",
        custom: "commonName"
    },
    scrapeAllowed: {
        frontend: "scrapeAllowed",
        backend: "scrape_allowed",
        database: "scrape_allowed",
        pretty: "Scrape Allowed",
        component: "ScrapeAllowed",
        kebab: "scrape-allowed",
        sqlFunctionRef: "p_scrape_allowed",
        RestAPI: "scrapeAllowed",
        GraphQL: "scrapeAllowed",
        custom: "scrapeAllowed"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapePathPatternInverse: {
        frontend: "scrapePathPatternInverse",
        backend: "scrape_path_pattern_Inverse",
        database: "ifk_scrape_path_pattern",
        pretty: "Scrape Path Pattern Inverse",
        component: "ScrapePathPatternInverse",
        kebab: "scrape-path-patternInverse",
        sqlFunctionRef: "p_ifk_scrape_path_pattern",
        RestAPI: "scrapePathPatternInverse",
        GraphQL: "scrapePathPatternInverse",
        custom: "scrapePathPatternInverse"
    },
    scrapeDomainQuickScrapeSettingsInverse: {
        frontend: "scrapeDomainQuickScrapeSettingsInverse",
        backend: "scrape_domain_quick_scrape_settings_Inverse",
        database: "ifk_scrape_domain_quick_scrape_settings",
        pretty: "Scrape Domain Quick Scrape Settings Inverse",
        component: "ScrapeDomainQuickScrapeSettingsInverse",
        kebab: "scrape-domain-quick-scrape-settingsInverse",
        sqlFunctionRef: "p_ifk_scrape_domain_quick_scrape_settings",
        RestAPI: "scrapeDomainQuickScrapeSettingsInverse",
        GraphQL: "scrapeDomainQuickScrapeSettingsInverse",
        custom: "scrapeDomainQuickScrapeSettingsInverse"
    },
    scrapeDomainDisallowedNotesInverse: {
        frontend: "scrapeDomainDisallowedNotesInverse",
        backend: "scrape_domain_disallowed_notes_Inverse",
        database: "ifk_scrape_domain_disallowed_notes",
        pretty: "Scrape Domain Disallowed Notes Inverse",
        component: "ScrapeDomainDisallowedNotesInverse",
        kebab: "scrape-domain-disallowed-notesInverse",
        sqlFunctionRef: "p_ifk_scrape_domain_disallowed_notes",
        RestAPI: "scrapeDomainDisallowedNotesInverse",
        GraphQL: "scrapeDomainDisallowedNotesInverse",
        custom: "scrapeDomainDisallowedNotesInverse"
    },
    scrapeDomainRobotsTxtInverse: {
        frontend: "scrapeDomainRobotsTxtInverse",
        backend: "scrape_domain_robots_txt_Inverse",
        database: "ifk_scrape_domain_robots_txt",
        pretty: "Scrape Domain Robots Txt Inverse",
        component: "ScrapeDomainRobotsTxtInverse",
        kebab: "scrape-domain-robots-txtInverse",
        sqlFunctionRef: "p_ifk_scrape_domain_robots_txt",
        RestAPI: "scrapeDomainRobotsTxtInverse",
        GraphQL: "scrapeDomainRobotsTxtInverse",
        custom: "scrapeDomainRobotsTxtInverse"
    },
    scrapeDomainNotesInverse: {
        frontend: "scrapeDomainNotesInverse",
        backend: "scrape_domain_notes_Inverse",
        database: "ifk_scrape_domain_notes",
        pretty: "Scrape Domain Notes Inverse",
        component: "ScrapeDomainNotesInverse",
        kebab: "scrape-domain-notesInverse",
        sqlFunctionRef: "p_ifk_scrape_domain_notes",
        RestAPI: "scrapeDomainNotesInverse",
        GraphQL: "scrapeDomainNotesInverse",
        custom: "scrapeDomainNotesInverse"
    },
    scrapeDomainSitemapInverse: {
        frontend: "scrapeDomainSitemapInverse",
        backend: "scrape_domain_sitemap_Inverse",
        database: "ifk_scrape_domain_sitemap",
        pretty: "Scrape Domain Sitemap Inverse",
        component: "ScrapeDomainSitemapInverse",
        kebab: "scrape-domain-sitemapInverse",
        sqlFunctionRef: "p_ifk_scrape_domain_sitemap",
        RestAPI: "scrapeDomainSitemapInverse",
        GraphQL: "scrapeDomainSitemapInverse",
        custom: "scrapeDomainSitemapInverse"
    }
},
    scrapeDomainDisallowedNotes: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    notes: {
        frontend: "notes",
        backend: "notes",
        database: "notes",
        pretty: "Notes",
        component: "Notes",
        kebab: "notes",
        sqlFunctionRef: "p_notes",
        RestAPI: "notes",
        GraphQL: "notes",
        custom: "notes"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    }
},
    scrapeDomainNotes: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    notes: {
        frontend: "notes",
        backend: "notes",
        database: "notes",
        pretty: "Notes",
        component: "Notes",
        kebab: "notes",
        sqlFunctionRef: "p_notes",
        RestAPI: "notes",
        GraphQL: "notes",
        custom: "notes"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    }
},
    scrapeDomainQuickScrapeSettings: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    enabled: {
        frontend: "enabled",
        backend: "enabled",
        database: "enabled",
        pretty: "Enabled",
        component: "Enabled",
        kebab: "enabled",
        sqlFunctionRef: "p_enabled",
        RestAPI: "enabled",
        GraphQL: "enabled",
        custom: "enabled"
    },
    proxyType: {
        frontend: "proxyType",
        backend: "proxy_type",
        database: "proxy_type",
        pretty: "Proxy Type",
        component: "ProxyType",
        kebab: "proxy-type",
        sqlFunctionRef: "p_proxy_type",
        RestAPI: "proxyType",
        GraphQL: "proxyType",
        custom: "proxyType"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    }
},
    scrapeDomainRobotsTxt: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    robotsTxt: {
        frontend: "robotsTxt",
        backend: "robots_txt",
        database: "robots_txt",
        pretty: "Robots Txt",
        component: "RobotsTxt",
        kebab: "robots-txt",
        sqlFunctionRef: "p_robots_txt",
        RestAPI: "robotsTxt",
        GraphQL: "robotsTxt",
        custom: "robotsTxt"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    }
},
    scrapeDomainSitemap: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    sitemap: {
        frontend: "sitemap",
        backend: "sitemap",
        database: "sitemap",
        pretty: "Sitemap",
        component: "Sitemap",
        kebab: "sitemap",
        sqlFunctionRef: "p_sitemap",
        RestAPI: "sitemap",
        GraphQL: "sitemap",
        custom: "sitemap"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    }
},
    scrapeOverride: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    configType: {
        frontend: "configType",
        backend: "config_type",
        database: "config_type",
        pretty: "Config Type",
        component: "ConfigType",
        kebab: "config-type",
        sqlFunctionRef: "p_config_type",
        RestAPI: "configType",
        GraphQL: "configType",
        custom: "configType"
    },
    selectorType: {
        frontend: "selectorType",
        backend: "selector_type",
        database: "selector_type",
        pretty: "Selector Type",
        component: "SelectorType",
        kebab: "selector-type",
        sqlFunctionRef: "p_selector_type",
        RestAPI: "selectorType",
        GraphQL: "selectorType",
        custom: "selectorType"
    },
    matchType: {
        frontend: "matchType",
        backend: "match_type",
        database: "match_type",
        pretty: "Match Type",
        component: "MatchType",
        kebab: "match-type",
        sqlFunctionRef: "p_match_type",
        RestAPI: "matchType",
        GraphQL: "matchType",
        custom: "matchType"
    },
    action: {
        frontend: "action",
        backend: "action",
        database: "action",
        pretty: "Action",
        component: "Action",
        kebab: "action",
        sqlFunctionRef: "p_action",
        RestAPI: "action",
        GraphQL: "action",
        custom: "action"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeOverrideValueInverse: {
        frontend: "scrapeOverrideValueInverse",
        backend: "scrape_override_value_Inverse",
        database: "ifk_scrape_override_value",
        pretty: "Scrape Override Value Inverse",
        component: "ScrapeOverrideValueInverse",
        kebab: "scrape-override-valueInverse",
        sqlFunctionRef: "p_ifk_scrape_override_value",
        RestAPI: "scrapeOverrideValueInverse",
        GraphQL: "scrapeOverrideValueInverse",
        custom: "scrapeOverrideValueInverse"
    },
    scrapePathPatternOverrideInverse: {
        frontend: "scrapePathPatternOverrideInverse",
        backend: "scrape_path_pattern_override_Inverse",
        database: "ifk_scrape_path_pattern_override",
        pretty: "Scrape Path Pattern Override Inverse",
        component: "ScrapePathPatternOverrideInverse",
        kebab: "scrape-path-pattern-overrideInverse",
        sqlFunctionRef: "p_ifk_scrape_path_pattern_override",
        RestAPI: "scrapePathPatternOverrideInverse",
        GraphQL: "scrapePathPatternOverrideInverse",
        custom: "scrapePathPatternOverrideInverse"
    }
},
    scrapeOverrideValue: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    value: {
        frontend: "value",
        backend: "value",
        database: "value",
        pretty: "Value",
        component: "Value",
        kebab: "value",
        sqlFunctionRef: "p_value",
        RestAPI: "value",
        GraphQL: "value",
        custom: "value"
    },
    scrapeOverrideId: {
        frontend: "scrapeOverrideId",
        backend: "scrape_override_id",
        database: "scrape_override_id",
        pretty: "Scrape Override Id",
        component: "ScrapeOverrideId",
        kebab: "scrape-override-id",
        sqlFunctionRef: "p_scrape_override_id",
        RestAPI: "scrapeOverrideId",
        GraphQL: "scrapeOverrideId",
        custom: "scrapeOverrideId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeOverrideReference: {
        frontend: "scrapeOverrideReference",
        backend: "scrape_override_reference",
        database: "ref_scrape_override",
        pretty: "Scrape Override Reference",
        component: "ScrapeOverrideReference",
        kebab: "scrape-overrideReference",
        sqlFunctionRef: "p_ref_scrape_override",
        RestAPI: "scrapeOverrideReference",
        GraphQL: "scrapeOverrideReference",
        custom: "scrapeOverrideReference"
    }
},
    scrapePathPattern: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    pathPattern: {
        frontend: "pathPattern",
        backend: "path_pattern",
        database: "path_pattern",
        pretty: "Path Pattern",
        component: "PathPattern",
        kebab: "path-pattern",
        sqlFunctionRef: "p_path_pattern",
        RestAPI: "pathPattern",
        GraphQL: "pathPattern",
        custom: "pathPattern"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    },
    scrapeConfigurationInverse: {
        frontend: "scrapeConfigurationInverse",
        backend: "scrape_configuration_Inverse",
        database: "ifk_scrape_configuration",
        pretty: "Scrape Configuration Inverse",
        component: "ScrapeConfigurationInverse",
        kebab: "scrape-configurationInverse",
        sqlFunctionRef: "p_ifk_scrape_configuration",
        RestAPI: "scrapeConfigurationInverse",
        GraphQL: "scrapeConfigurationInverse",
        custom: "scrapeConfigurationInverse"
    },
    scrapePathPatternOverrideInverse: {
        frontend: "scrapePathPatternOverrideInverse",
        backend: "scrape_path_pattern_override_Inverse",
        database: "ifk_scrape_path_pattern_override",
        pretty: "Scrape Path Pattern Override Inverse",
        component: "ScrapePathPatternOverrideInverse",
        kebab: "scrape-path-pattern-overrideInverse",
        sqlFunctionRef: "p_ifk_scrape_path_pattern_override",
        RestAPI: "scrapePathPatternOverrideInverse",
        GraphQL: "scrapePathPatternOverrideInverse",
        custom: "scrapePathPatternOverrideInverse"
    }
},
    scrapePathPatternOverride: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    scrapePathPatternId: {
        frontend: "scrapePathPatternId",
        backend: "scrape_path_pattern_id",
        database: "scrape_path_pattern_id",
        pretty: "Scrape Path Pattern Id",
        component: "ScrapePathPatternId",
        kebab: "scrape-path-pattern-id",
        sqlFunctionRef: "p_scrape_path_pattern_id",
        RestAPI: "scrapePathPatternId",
        GraphQL: "scrapePathPatternId",
        custom: "scrapePathPatternId"
    },
    scrapeOverrideId: {
        frontend: "scrapeOverrideId",
        backend: "scrape_override_id",
        database: "scrape_override_id",
        pretty: "Scrape Override Id",
        component: "ScrapeOverrideId",
        kebab: "scrape-override-id",
        sqlFunctionRef: "p_scrape_override_id",
        RestAPI: "scrapeOverrideId",
        GraphQL: "scrapeOverrideId",
        custom: "scrapeOverrideId"
    },
    isActive: {
        frontend: "isActive",
        backend: "is_active",
        database: "is_active",
        pretty: "Is Active",
        component: "IsActive",
        kebab: "is-active",
        sqlFunctionRef: "p_is_active",
        RestAPI: "isActive",
        GraphQL: "isActive",
        custom: "isActive"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeOverrideReference: {
        frontend: "scrapeOverrideReference",
        backend: "scrape_override_reference",
        database: "ref_scrape_override",
        pretty: "Scrape Override Reference",
        component: "ScrapeOverrideReference",
        kebab: "scrape-overrideReference",
        sqlFunctionRef: "p_ref_scrape_override",
        RestAPI: "scrapeOverrideReference",
        GraphQL: "scrapeOverrideReference",
        custom: "scrapeOverrideReference"
    },
    scrapePathPatternReference: {
        frontend: "scrapePathPatternReference",
        backend: "scrape_path_pattern_reference",
        database: "ref_scrape_path_pattern",
        pretty: "Scrape Path Pattern Reference",
        component: "ScrapePathPatternReference",
        kebab: "scrape-path-patternReference",
        sqlFunctionRef: "p_ref_scrape_path_pattern",
        RestAPI: "scrapePathPatternReference",
        GraphQL: "scrapePathPatternReference",
        custom: "scrapePathPatternReference"
    }
},
    subcategory: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    categoryId: {
        frontend: "categoryId",
        backend: "category_id",
        database: "category_id",
        pretty: "Category Id",
        component: "CategoryId",
        kebab: "category-id",
        sqlFunctionRef: "p_category_id",
        RestAPI: "categoryId",
        GraphQL: "categoryId",
        custom: "categoryId"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    slug: {
        frontend: "slug",
        backend: "slug",
        database: "slug",
        pretty: "Slug",
        component: "Slug",
        kebab: "slug",
        sqlFunctionRef: "p_slug",
        RestAPI: "slug",
        GraphQL: "slug",
        custom: "slug"
    },
    icon: {
        frontend: "icon",
        backend: "icon",
        database: "icon",
        pretty: "Icon",
        component: "Icon",
        kebab: "icon",
        sqlFunctionRef: "p_icon",
        RestAPI: "icon",
        GraphQL: "icon",
        custom: "icon"
    },
    features: {
        frontend: "features",
        backend: "features",
        database: "features",
        pretty: "Features",
        component: "Features",
        kebab: "features",
        sqlFunctionRef: "p_features",
        RestAPI: "features",
        GraphQL: "features",
        custom: "features"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    categoryReference: {
        frontend: "categoryReference",
        backend: "category_reference",
        database: "ref_category",
        pretty: "Category Reference",
        component: "CategoryReference",
        kebab: "categoryReference",
        sqlFunctionRef: "p_ref_category",
        RestAPI: "categoryReference",
        GraphQL: "categoryReference",
        custom: "categoryReference"
    },
    appletInverse: {
        frontend: "appletInverse",
        backend: "applet_Inverse",
        database: "ifk_applet",
        pretty: "Applet Inverse",
        component: "AppletInverse",
        kebab: "appletInverse",
        sqlFunctionRef: "p_ifk_applet",
        RestAPI: "appletInverse",
        GraphQL: "appletInverse",
        custom: "appletInverse"
    }
},
    systemFunction: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    sample: {
        frontend: "sample",
        backend: "sample",
        database: "sample",
        pretty: "Sample",
        component: "Sample",
        kebab: "sample",
        sqlFunctionRef: "p_sample",
        RestAPI: "sample",
        GraphQL: "sample",
        custom: "sample"
    },
    inputParams: {
        frontend: "inputParams",
        backend: "input_params",
        database: "input_params",
        pretty: "Input Params",
        component: "InputParams",
        kebab: "input-params",
        sqlFunctionRef: "p_input_params",
        RestAPI: "inputParams",
        GraphQL: "inputParams",
        custom: "inputParams"
    },
    outputOptions: {
        frontend: "outputOptions",
        backend: "output_options",
        database: "output_options",
        pretty: "Output Options",
        component: "OutputOptions",
        kebab: "output-options",
        sqlFunctionRef: "p_output_options",
        RestAPI: "outputOptions",
        GraphQL: "outputOptions",
        custom: "outputOptions"
    },
    rfId: {
        frontend: "rfId",
        backend: "rf_id",
        database: "rf_id",
        pretty: "Rf Id",
        component: "RfId",
        kebab: "rf-id",
        sqlFunctionRef: "p_rf_id",
        RestAPI: "rfId",
        GraphQL: "rfId",
        custom: "rfId"
    },
    registeredFunctionReference: {
        frontend: "registeredFunctionReference",
        backend: "registered_function_reference",
        database: "ref_registered_function",
        pretty: "Registered Function Reference",
        component: "RegisteredFunctionReference",
        kebab: "registered-functionReference",
        sqlFunctionRef: "p_ref_registered_function",
        RestAPI: "registeredFunctionReference",
        GraphQL: "registeredFunctionReference",
        custom: "registeredFunctionReference"
    },
    toolInverse: {
        frontend: "toolInverse",
        backend: "tool_Inverse",
        database: "ifk_tool",
        pretty: "Tool Inverse",
        component: "ToolInverse",
        kebab: "toolInverse",
        sqlFunctionRef: "p_ifk_tool",
        RestAPI: "toolInverse",
        GraphQL: "toolInverse",
        custom: "toolInverse"
    },
    recipeFunctionInverse: {
        frontend: "recipeFunctionInverse",
        backend: "recipe_function_Inverse",
        database: "ifk_recipe_function",
        pretty: "Recipe Function Inverse",
        component: "RecipeFunctionInverse",
        kebab: "recipe-functionInverse",
        sqlFunctionRef: "p_ifk_recipe_function",
        RestAPI: "recipeFunctionInverse",
        GraphQL: "recipeFunctionInverse",
        custom: "recipeFunctionInverse"
    }
},
    taskAssignments: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    taskId: {
        frontend: "taskId",
        backend: "task_id",
        database: "task_id",
        pretty: "Task Id",
        component: "TaskId",
        kebab: "task-id",
        sqlFunctionRef: "p_task_id",
        RestAPI: "taskId",
        GraphQL: "taskId",
        custom: "taskId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    assignedBy: {
        frontend: "assignedBy",
        backend: "assigned_by",
        database: "assigned_by",
        pretty: "Assigned By",
        component: "AssignedBy",
        kebab: "assigned-by",
        sqlFunctionRef: "p_assigned_by",
        RestAPI: "assignedBy",
        GraphQL: "assignedBy",
        custom: "assignedBy"
    },
    assignedAt: {
        frontend: "assignedAt",
        backend: "assigned_at",
        database: "assigned_at",
        pretty: "Assigned At",
        component: "AssignedAt",
        kebab: "assigned-at",
        sqlFunctionRef: "p_assigned_at",
        RestAPI: "assignedAt",
        GraphQL: "assignedAt",
        custom: "assignedAt"
    },
    tasksReference: {
        frontend: "tasksReference",
        backend: "tasks_reference",
        database: "ref_tasks",
        pretty: "Tasks Reference",
        component: "TasksReference",
        kebab: "tasksReference",
        sqlFunctionRef: "p_ref_tasks",
        RestAPI: "tasksReference",
        GraphQL: "tasksReference",
        custom: "tasksReference"
    }
},
    taskAttachments: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    taskId: {
        frontend: "taskId",
        backend: "task_id",
        database: "task_id",
        pretty: "Task Id",
        component: "TaskId",
        kebab: "task-id",
        sqlFunctionRef: "p_task_id",
        RestAPI: "taskId",
        GraphQL: "taskId",
        custom: "taskId"
    },
    fileName: {
        frontend: "fileName",
        backend: "file_name",
        database: "file_name",
        pretty: "File Name",
        component: "FileName",
        kebab: "file-name",
        sqlFunctionRef: "p_file_name",
        RestAPI: "fileName",
        GraphQL: "fileName",
        custom: "fileName"
    },
    fileType: {
        frontend: "fileType",
        backend: "file_type",
        database: "file_type",
        pretty: "File Type",
        component: "FileType",
        kebab: "file-type",
        sqlFunctionRef: "p_file_type",
        RestAPI: "fileType",
        GraphQL: "fileType",
        custom: "fileType"
    },
    fileSize: {
        frontend: "fileSize",
        backend: "file_size",
        database: "file_size",
        pretty: "File Size",
        component: "FileSize",
        kebab: "file-size",
        sqlFunctionRef: "p_file_size",
        RestAPI: "fileSize",
        GraphQL: "fileSize",
        custom: "fileSize"
    },
    filePath: {
        frontend: "filePath",
        backend: "file_path",
        database: "file_path",
        pretty: "File Path",
        component: "FilePath",
        kebab: "file-path",
        sqlFunctionRef: "p_file_path",
        RestAPI: "filePath",
        GraphQL: "filePath",
        custom: "filePath"
    },
    uploadedBy: {
        frontend: "uploadedBy",
        backend: "uploaded_by",
        database: "uploaded_by",
        pretty: "Uploaded By",
        component: "UploadedBy",
        kebab: "uploaded-by",
        sqlFunctionRef: "p_uploaded_by",
        RestAPI: "uploadedBy",
        GraphQL: "uploadedBy",
        custom: "uploadedBy"
    },
    uploadedAt: {
        frontend: "uploadedAt",
        backend: "uploaded_at",
        database: "uploaded_at",
        pretty: "Uploaded At",
        component: "UploadedAt",
        kebab: "uploaded-at",
        sqlFunctionRef: "p_uploaded_at",
        RestAPI: "uploadedAt",
        GraphQL: "uploadedAt",
        custom: "uploadedAt"
    },
    tasksReference: {
        frontend: "tasksReference",
        backend: "tasks_reference",
        database: "ref_tasks",
        pretty: "Tasks Reference",
        component: "TasksReference",
        kebab: "tasksReference",
        sqlFunctionRef: "p_ref_tasks",
        RestAPI: "tasksReference",
        GraphQL: "tasksReference",
        custom: "tasksReference"
    }
},
    taskComments: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    taskId: {
        frontend: "taskId",
        backend: "task_id",
        database: "task_id",
        pretty: "Task Id",
        component: "TaskId",
        kebab: "task-id",
        sqlFunctionRef: "p_task_id",
        RestAPI: "taskId",
        GraphQL: "taskId",
        custom: "taskId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    content: {
        frontend: "content",
        backend: "content",
        database: "content",
        pretty: "Content",
        component: "Content",
        kebab: "content",
        sqlFunctionRef: "p_content",
        RestAPI: "content",
        GraphQL: "content",
        custom: "content"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    tasksReference: {
        frontend: "tasksReference",
        backend: "tasks_reference",
        database: "ref_tasks",
        pretty: "Tasks Reference",
        component: "TasksReference",
        kebab: "tasksReference",
        sqlFunctionRef: "p_ref_tasks",
        RestAPI: "tasksReference",
        GraphQL: "tasksReference",
        custom: "tasksReference"
    }
},
    tasks: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    title: {
        frontend: "title",
        backend: "title",
        database: "title",
        pretty: "Title",
        component: "Title",
        kebab: "title",
        sqlFunctionRef: "p_title",
        RestAPI: "title",
        GraphQL: "title",
        custom: "title"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    projectId: {
        frontend: "projectId",
        backend: "project_id",
        database: "project_id",
        pretty: "Project Id",
        component: "ProjectId",
        kebab: "project-id",
        sqlFunctionRef: "p_project_id",
        RestAPI: "projectId",
        GraphQL: "projectId",
        custom: "projectId"
    },
    status: {
        frontend: "status",
        backend: "status",
        database: "status",
        pretty: "Status",
        component: "Status",
        kebab: "status",
        sqlFunctionRef: "p_status",
        RestAPI: "status",
        GraphQL: "status",
        custom: "status"
    },
    dueDate: {
        frontend: "dueDate",
        backend: "due_date",
        database: "due_date",
        pretty: "Due Date",
        component: "DueDate",
        kebab: "due-date",
        sqlFunctionRef: "p_due_date",
        RestAPI: "dueDate",
        GraphQL: "dueDate",
        custom: "dueDate"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    createdBy: {
        frontend: "createdBy",
        backend: "created_by",
        database: "created_by",
        pretty: "Created By",
        component: "CreatedBy",
        kebab: "created-by",
        sqlFunctionRef: "p_created_by",
        RestAPI: "createdBy",
        GraphQL: "createdBy",
        custom: "createdBy"
    },
    projectsReference: {
        frontend: "projectsReference",
        backend: "projects_reference",
        database: "ref_projects",
        pretty: "Projects Reference",
        component: "ProjectsReference",
        kebab: "projectsReference",
        sqlFunctionRef: "p_ref_projects",
        RestAPI: "projectsReference",
        GraphQL: "projectsReference",
        custom: "projectsReference"
    },
    taskAssignmentsInverse: {
        frontend: "taskAssignmentsInverse",
        backend: "task_assignments_Inverse",
        database: "ifk_task_assignments",
        pretty: "Task Assignments Inverse",
        component: "TaskAssignmentsInverse",
        kebab: "task-assignmentsInverse",
        sqlFunctionRef: "p_ifk_task_assignments",
        RestAPI: "taskAssignmentsInverse",
        GraphQL: "taskAssignmentsInverse",
        custom: "taskAssignmentsInverse"
    },
    taskAttachmentsInverse: {
        frontend: "taskAttachmentsInverse",
        backend: "task_attachments_Inverse",
        database: "ifk_task_attachments",
        pretty: "Task Attachments Inverse",
        component: "TaskAttachmentsInverse",
        kebab: "task-attachmentsInverse",
        sqlFunctionRef: "p_ifk_task_attachments",
        RestAPI: "taskAttachmentsInverse",
        GraphQL: "taskAttachmentsInverse",
        custom: "taskAttachmentsInverse"
    },
    taskCommentsInverse: {
        frontend: "taskCommentsInverse",
        backend: "task_comments_Inverse",
        database: "ifk_task_comments",
        pretty: "Task Comments Inverse",
        component: "TaskCommentsInverse",
        kebab: "task-commentsInverse",
        sqlFunctionRef: "p_ifk_task_comments",
        RestAPI: "taskCommentsInverse",
        GraphQL: "taskCommentsInverse",
        custom: "taskCommentsInverse"
    }
},
    tool: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    source: {
        frontend: "source",
        backend: "source",
        database: "source",
        pretty: "Source",
        component: "Source",
        kebab: "source",
        sqlFunctionRef: "p_source",
        RestAPI: "source",
        GraphQL: "source",
        custom: "source"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    parameters: {
        frontend: "parameters",
        backend: "parameters",
        database: "parameters",
        pretty: "Parameters",
        component: "Parameters",
        kebab: "parameters",
        sqlFunctionRef: "p_parameters",
        RestAPI: "parameters",
        GraphQL: "parameters",
        custom: "parameters"
    },
    requiredArgs: {
        frontend: "requiredArgs",
        backend: "required_args",
        database: "required_args",
        pretty: "Required Args",
        component: "RequiredArgs",
        kebab: "required-args",
        sqlFunctionRef: "p_required_args",
        RestAPI: "requiredArgs",
        GraphQL: "requiredArgs",
        custom: "requiredArgs"
    },
    systemFunction: {
        frontend: "systemFunction",
        backend: "system_function",
        database: "system_function",
        pretty: "System Function",
        component: "SystemFunction",
        kebab: "system-function",
        sqlFunctionRef: "p_system_function",
        RestAPI: "systemFunction",
        GraphQL: "systemFunction",
        custom: "systemFunction"
    },
    additionalParams: {
        frontend: "additionalParams",
        backend: "additional_params",
        database: "additional_params",
        pretty: "Additional Params",
        component: "AdditionalParams",
        kebab: "additional-params",
        sqlFunctionRef: "p_additional_params",
        RestAPI: "additionalParams",
        GraphQL: "additionalParams",
        custom: "additionalParams"
    },
    systemFunctionReference: {
        frontend: "systemFunctionReference",
        backend: "system_function_reference",
        database: "ref_system_function",
        pretty: "System Function Reference",
        component: "SystemFunctionReference",
        kebab: "system-functionReference",
        sqlFunctionRef: "p_ref_system_function",
        RestAPI: "systemFunctionReference",
        GraphQL: "systemFunctionReference",
        custom: "systemFunctionReference"
    },
    recipeToolInverse: {
        frontend: "recipeToolInverse",
        backend: "recipe_tool_Inverse",
        database: "ifk_recipe_tool",
        pretty: "Recipe Tool Inverse",
        component: "RecipeToolInverse",
        kebab: "recipe-toolInverse",
        sqlFunctionRef: "p_ifk_recipe_tool",
        RestAPI: "recipeToolInverse",
        GraphQL: "recipeToolInverse",
        custom: "recipeToolInverse"
    }
},
    transformer: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    inputParams: {
        frontend: "inputParams",
        backend: "input_params",
        database: "input_params",
        pretty: "Input Params",
        component: "InputParams",
        kebab: "input-params",
        sqlFunctionRef: "p_input_params",
        RestAPI: "inputParams",
        GraphQL: "inputParams",
        custom: "inputParams"
    },
    outputParams: {
        frontend: "outputParams",
        backend: "output_params",
        database: "output_params",
        pretty: "Output Params",
        component: "OutputParams",
        kebab: "output-params",
        sqlFunctionRef: "p_output_params",
        RestAPI: "outputParams",
        GraphQL: "outputParams",
        custom: "outputParams"
    },
    actionInverse: {
        frontend: "actionInverse",
        backend: "action_Inverse",
        database: "ifk_action",
        pretty: "Action Inverse",
        component: "ActionInverse",
        kebab: "actionInverse",
        sqlFunctionRef: "p_ifk_action",
        RestAPI: "actionInverse",
        GraphQL: "actionInverse",
        custom: "actionInverse"
    }
},
    userPreferences: {
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    preferences: {
        frontend: "preferences",
        backend: "preferences",
        database: "preferences",
        pretty: "Preferences",
        component: "Preferences",
        kebab: "preferences",
        sqlFunctionRef: "p_preferences",
        RestAPI: "preferences",
        GraphQL: "preferences",
        custom: "preferences"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    }
},
    wcClaim: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    applicantName: {
        frontend: "applicantName",
        backend: "applicant_name",
        database: "applicant_name",
        pretty: "Applicant Name",
        component: "ApplicantName",
        kebab: "applicant-name",
        sqlFunctionRef: "p_applicant_name",
        RestAPI: "applicantName",
        GraphQL: "applicantName",
        custom: "applicantName"
    },
    personId: {
        frontend: "personId",
        backend: "person_id",
        database: "person_id",
        pretty: "Person Id",
        component: "PersonId",
        kebab: "person-id",
        sqlFunctionRef: "p_person_id",
        RestAPI: "personId",
        GraphQL: "personId",
        custom: "personId"
    },
    dateOfBirth: {
        frontend: "dateOfBirth",
        backend: "date_of_birth",
        database: "date_of_birth",
        pretty: "Date Of Birth",
        component: "DateOfBirth",
        kebab: "date-of-birth",
        sqlFunctionRef: "p_date_of_birth",
        RestAPI: "dateOfBirth",
        GraphQL: "dateOfBirth",
        custom: "dateOfBirth"
    },
    dateOfInjury: {
        frontend: "dateOfInjury",
        backend: "date_of_injury",
        database: "date_of_injury",
        pretty: "Date Of Injury",
        component: "DateOfInjury",
        kebab: "date-of-injury",
        sqlFunctionRef: "p_date_of_injury",
        RestAPI: "dateOfInjury",
        GraphQL: "dateOfInjury",
        custom: "dateOfInjury"
    },
    ageAtDoi: {
        frontend: "ageAtDoi",
        backend: "age_at_doi",
        database: "age_at_doi",
        pretty: "Age At Doi",
        component: "AgeAtDoi",
        kebab: "age-at-doi",
        sqlFunctionRef: "p_age_at_doi",
        RestAPI: "ageAtDoi",
        GraphQL: "ageAtDoi",
        custom: "ageAtDoi"
    },
    occupationalCode: {
        frontend: "occupationalCode",
        backend: "occupational_code",
        database: "occupational_code",
        pretty: "Occupational Code",
        component: "OccupationalCode",
        kebab: "occupational-code",
        sqlFunctionRef: "p_occupational_code",
        RestAPI: "occupationalCode",
        GraphQL: "occupationalCode",
        custom: "occupationalCode"
    },
    weeklyEarnings: {
        frontend: "weeklyEarnings",
        backend: "weekly_earnings",
        database: "weekly_earnings",
        pretty: "Weekly Earnings",
        component: "WeeklyEarnings",
        kebab: "weekly-earnings",
        sqlFunctionRef: "p_weekly_earnings",
        RestAPI: "weeklyEarnings",
        GraphQL: "weeklyEarnings",
        custom: "weeklyEarnings"
    },
    wcReportInverse: {
        frontend: "wcReportInverse",
        backend: "wc_report_Inverse",
        database: "ifk_wc_report",
        pretty: "Wc Report Inverse",
        component: "WcReportInverse",
        kebab: "wc-reportInverse",
        sqlFunctionRef: "p_ifk_wc_report",
        RestAPI: "wcReportInverse",
        GraphQL: "wcReportInverse",
        custom: "wcReportInverse"
    }
},
    wcImpairmentDefinition: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    impairmentNumber: {
        frontend: "impairmentNumber",
        backend: "impairment_number",
        database: "impairment_number",
        pretty: "Impairment Number",
        component: "ImpairmentNumber",
        kebab: "impairment-number",
        sqlFunctionRef: "p_impairment_number",
        RestAPI: "impairmentNumber",
        GraphQL: "impairmentNumber",
        custom: "impairmentNumber"
    },
    fecRank: {
        frontend: "fecRank",
        backend: "fec_rank",
        database: "fec_rank",
        pretty: "Fec Rank",
        component: "FecRank",
        kebab: "fec-rank",
        sqlFunctionRef: "p_fec_rank",
        RestAPI: "fecRank",
        GraphQL: "fecRank",
        custom: "fecRank"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    attributes: {
        frontend: "attributes",
        backend: "attributes",
        database: "attributes",
        pretty: "Attributes",
        component: "Attributes",
        kebab: "attributes",
        sqlFunctionRef: "p_attributes",
        RestAPI: "attributes",
        GraphQL: "attributes",
        custom: "attributes"
    },
    fingerType: {
        frontend: "fingerType",
        backend: "finger_type",
        database: "finger_type",
        pretty: "Finger Type",
        component: "FingerType",
        kebab: "finger-type",
        sqlFunctionRef: "p_finger_type",
        RestAPI: "fingerType",
        GraphQL: "fingerType",
        custom: "fingerType"
    },
    wcInjuryInverse: {
        frontend: "wcInjuryInverse",
        backend: "wc_injury_Inverse",
        database: "ifk_wc_injury",
        pretty: "Wc Injury Inverse",
        component: "WcInjuryInverse",
        kebab: "wc-injuryInverse",
        sqlFunctionRef: "p_ifk_wc_injury",
        RestAPI: "wcInjuryInverse",
        GraphQL: "wcInjuryInverse",
        custom: "wcInjuryInverse"
    }
},
    wcInjury: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    reportId: {
        frontend: "reportId",
        backend: "report_id",
        database: "report_id",
        pretty: "Report Id",
        component: "ReportId",
        kebab: "report-id",
        sqlFunctionRef: "p_report_id",
        RestAPI: "reportId",
        GraphQL: "reportId",
        custom: "reportId"
    },
    impairmentDefinitionId: {
        frontend: "impairmentDefinitionId",
        backend: "impairment_definition_id",
        database: "impairment_definition_id",
        pretty: "Impairment Definition Id",
        component: "ImpairmentDefinitionId",
        kebab: "impairment-definition-id",
        sqlFunctionRef: "p_impairment_definition_id",
        RestAPI: "impairmentDefinitionId",
        GraphQL: "impairmentDefinitionId",
        custom: "impairmentDefinitionId"
    },
    digit: {
        frontend: "digit",
        backend: "digit",
        database: "digit",
        pretty: "Digit",
        component: "Digit",
        kebab: "digit",
        sqlFunctionRef: "p_digit",
        RestAPI: "digit",
        GraphQL: "digit",
        custom: "digit"
    },
    le: {
        frontend: "le",
        backend: "le",
        database: "le",
        pretty: "Le",
        component: "Le",
        kebab: "le",
        sqlFunctionRef: "p_le",
        RestAPI: "le",
        GraphQL: "le",
        custom: "le"
    },
    side: {
        frontend: "side",
        backend: "side",
        database: "side",
        pretty: "Side",
        component: "Side",
        kebab: "side",
        sqlFunctionRef: "p_side",
        RestAPI: "side",
        GraphQL: "side",
        custom: "side"
    },
    ue: {
        frontend: "ue",
        backend: "ue",
        database: "ue",
        pretty: "Ue",
        component: "Ue",
        kebab: "ue",
        sqlFunctionRef: "p_ue",
        RestAPI: "ue",
        GraphQL: "ue",
        custom: "ue"
    },
    wpi: {
        frontend: "wpi",
        backend: "wpi",
        database: "wpi",
        pretty: "Wpi",
        component: "Wpi",
        kebab: "wpi",
        sqlFunctionRef: "p_wpi",
        RestAPI: "wpi",
        GraphQL: "wpi",
        custom: "wpi"
    },
    pain: {
        frontend: "pain",
        backend: "pain",
        database: "pain",
        pretty: "Pain",
        component: "Pain",
        kebab: "pain",
        sqlFunctionRef: "p_pain",
        RestAPI: "pain",
        GraphQL: "pain",
        custom: "pain"
    },
    industrial: {
        frontend: "industrial",
        backend: "industrial",
        database: "industrial",
        pretty: "Industrial",
        component: "Industrial",
        kebab: "industrial",
        sqlFunctionRef: "p_industrial",
        RestAPI: "industrial",
        GraphQL: "industrial",
        custom: "industrial"
    },
    rating: {
        frontend: "rating",
        backend: "rating",
        database: "rating",
        pretty: "Rating",
        component: "Rating",
        kebab: "rating",
        sqlFunctionRef: "p_rating",
        RestAPI: "rating",
        GraphQL: "rating",
        custom: "rating"
    },
    formula: {
        frontend: "formula",
        backend: "formula",
        database: "formula",
        pretty: "Formula",
        component: "Formula",
        kebab: "formula",
        sqlFunctionRef: "p_formula",
        RestAPI: "formula",
        GraphQL: "formula",
        custom: "formula"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    wcImpairmentDefinitionReference: {
        frontend: "wcImpairmentDefinitionReference",
        backend: "wc_impairment_definition_reference",
        database: "ref_wc_impairment_definition",
        pretty: "Wc Impairment Definition Reference",
        component: "WcImpairmentDefinitionReference",
        kebab: "wc-impairment-definitionReference",
        sqlFunctionRef: "p_ref_wc_impairment_definition",
        RestAPI: "wcImpairmentDefinitionReference",
        GraphQL: "wcImpairmentDefinitionReference",
        custom: "wcImpairmentDefinitionReference"
    },
    wcReportReference: {
        frontend: "wcReportReference",
        backend: "wc_report_reference",
        database: "ref_wc_report",
        pretty: "Wc Report Reference",
        component: "WcReportReference",
        kebab: "wc-reportReference",
        sqlFunctionRef: "p_ref_wc_report",
        RestAPI: "wcReportReference",
        GraphQL: "wcReportReference",
        custom: "wcReportReference"
    }
},
    wcReport: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    claimId: {
        frontend: "claimId",
        backend: "claim_id",
        database: "claim_id",
        pretty: "Claim Id",
        component: "ClaimId",
        kebab: "claim-id",
        sqlFunctionRef: "p_claim_id",
        RestAPI: "claimId",
        GraphQL: "claimId",
        custom: "claimId"
    },
    finalRating: {
        frontend: "finalRating",
        backend: "final_rating",
        database: "final_rating",
        pretty: "Final Rating",
        component: "FinalRating",
        kebab: "final-rating",
        sqlFunctionRef: "p_final_rating",
        RestAPI: "finalRating",
        GraphQL: "finalRating",
        custom: "finalRating"
    },
    leftSideTotal: {
        frontend: "leftSideTotal",
        backend: "left_side_total",
        database: "left_side_total",
        pretty: "Left Side Total",
        component: "LeftSideTotal",
        kebab: "left-side-total",
        sqlFunctionRef: "p_left_side_total",
        RestAPI: "leftSideTotal",
        GraphQL: "leftSideTotal",
        custom: "leftSideTotal"
    },
    rightSideTotal: {
        frontend: "rightSideTotal",
        backend: "right_side_total",
        database: "right_side_total",
        pretty: "Right Side Total",
        component: "RightSideTotal",
        kebab: "right-side-total",
        sqlFunctionRef: "p_right_side_total",
        RestAPI: "rightSideTotal",
        GraphQL: "rightSideTotal",
        custom: "rightSideTotal"
    },
    defaultSideTotal: {
        frontend: "defaultSideTotal",
        backend: "default_side_total",
        database: "default_side_total",
        pretty: "Default Side Total",
        component: "DefaultSideTotal",
        kebab: "default-side-total",
        sqlFunctionRef: "p_default_side_total",
        RestAPI: "defaultSideTotal",
        GraphQL: "defaultSideTotal",
        custom: "defaultSideTotal"
    },
    compensationAmount: {
        frontend: "compensationAmount",
        backend: "compensation_amount",
        database: "compensation_amount",
        pretty: "Compensation Amount",
        component: "CompensationAmount",
        kebab: "compensation-amount",
        sqlFunctionRef: "p_compensation_amount",
        RestAPI: "compensationAmount",
        GraphQL: "compensationAmount",
        custom: "compensationAmount"
    },
    compensationWeeks: {
        frontend: "compensationWeeks",
        backend: "compensation_weeks",
        database: "compensation_weeks",
        pretty: "Compensation Weeks",
        component: "CompensationWeeks",
        kebab: "compensation-weeks",
        sqlFunctionRef: "p_compensation_weeks",
        RestAPI: "compensationWeeks",
        GraphQL: "compensationWeeks",
        custom: "compensationWeeks"
    },
    compensationDays: {
        frontend: "compensationDays",
        backend: "compensation_days",
        database: "compensation_days",
        pretty: "Compensation Days",
        component: "CompensationDays",
        kebab: "compensation-days",
        sqlFunctionRef: "p_compensation_days",
        RestAPI: "compensationDays",
        GraphQL: "compensationDays",
        custom: "compensationDays"
    },
    wcClaimReference: {
        frontend: "wcClaimReference",
        backend: "wc_claim_reference",
        database: "ref_wc_claim",
        pretty: "Wc Claim Reference",
        component: "WcClaimReference",
        kebab: "wc-claimReference",
        sqlFunctionRef: "p_ref_wc_claim",
        RestAPI: "wcClaimReference",
        GraphQL: "wcClaimReference",
        custom: "wcClaimReference"
    },
    wcInjuryInverse: {
        frontend: "wcInjuryInverse",
        backend: "wc_injury_Inverse",
        database: "ifk_wc_injury",
        pretty: "Wc Injury Inverse",
        component: "WcInjuryInverse",
        kebab: "wc-injuryInverse",
        sqlFunctionRef: "p_ifk_wc_injury",
        RestAPI: "wcInjuryInverse",
        GraphQL: "wcInjuryInverse",
        custom: "wcInjuryInverse"
    }
},
};

export const viewNameLookup: Record<string, string> = {
    view_registered_function: "viewRegisteredFunction",
    ViewRegisteredFunction: "viewRegisteredFunction",
    p_view_registered_function: "viewRegisteredFunction",
    "view-registered-function": "viewRegisteredFunction",
    "View Registered Function": "viewRegisteredFunction",
    viewRegisteredFunction: "viewRegisteredFunction",
    view_registered_function_all_rels: "viewRegisteredFunctionAllRels",
    viewRegisteredFunctionAllRels: "viewRegisteredFunctionAllRels",
    "view-registered-function-all-rels": "viewRegisteredFunctionAllRels",
    p_view_registered_function_all_rels: "viewRegisteredFunctionAllRels",
    ViewRegisteredFunctionAllRels: "viewRegisteredFunctionAllRels",
    "View Registered Function All Rels": "viewRegisteredFunctionAllRels",
};