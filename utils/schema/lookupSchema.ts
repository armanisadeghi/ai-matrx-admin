// File: utils/schema/lookupSchema.ts
import {EntityNameToCanonicalMap,FieldNameToCanonicalMap,EntityNameFormatMap,FieldNameFormatMap} from '@/types/entityTypes';

export const entityNameToCanonical: EntityNameToCanonicalMap = {
    p_action: "action",
    Action: "action",
    action: "action",
    admins: "admins",
    p_admins: "admins",
    Admins: "admins",
    AiAgent: "aiAgent",
    "Ai Agent": "aiAgent",
    "ai-agent": "aiAgent",
    aiAgent: "aiAgent",
    p_ai_agent: "aiAgent",
    ai_agent: "aiAgent",
    "ai-endpoint": "aiEndpoint",
    aiEndpoint: "aiEndpoint",
    ai_endpoint: "aiEndpoint",
    p_ai_endpoint: "aiEndpoint",
    AiEndpoint: "aiEndpoint",
    "Ai Endpoint": "aiEndpoint",
    "Ai Model": "aiModel",
    ai_model: "aiModel",
    aiModel: "aiModel",
    p_ai_model: "aiModel",
    "ai-model": "aiModel",
    AiModel: "aiModel",
    p_ai_model_endpoint: "aiModelEndpoint",
    AiModelEndpoint: "aiModelEndpoint",
    aiModelEndpoint: "aiModelEndpoint",
    "ai-model-endpoint": "aiModelEndpoint",
    ai_model_endpoint: "aiModelEndpoint",
    "Ai Model Endpoint": "aiModelEndpoint",
    ai_provider: "aiProvider",
    "Ai Provider": "aiProvider",
    AiProvider: "aiProvider",
    "ai-provider": "aiProvider",
    p_ai_provider: "aiProvider",
    aiProvider: "aiProvider",
    p_ai_settings: "aiSettings",
    aiSettings: "aiSettings",
    "Ai Settings": "aiSettings",
    ai_settings: "aiSettings",
    AiSettings: "aiSettings",
    "ai-settings": "aiSettings",
    AiTrainingData: "aiTrainingData",
    ai_training_data: "aiTrainingData",
    "Ai Training Data": "aiTrainingData",
    "ai-training-data": "aiTrainingData",
    p_ai_training_data: "aiTrainingData",
    aiTrainingData: "aiTrainingData",
    applet: "applet",
    Applet: "applet",
    p_applet: "applet",
    applet_containers: "appletContainers",
    AppletContainers: "appletContainers",
    "Applet Containers": "appletContainers",
    "applet-containers": "appletContainers",
    p_applet_containers: "appletContainers",
    appletContainers: "appletContainers",
    Arg: "arg",
    arg: "arg",
    p_arg: "arg",
    "audio-label": "audioLabel",
    audioLabel: "audioLabel",
    "Audio Label": "audioLabel",
    p_audio_label: "audioLabel",
    AudioLabel: "audioLabel",
    audio_label: "audioLabel",
    "audio-recording": "audioRecording",
    AudioRecording: "audioRecording",
    audioRecording: "audioRecording",
    audio_recording: "audioRecording",
    "Audio Recording": "audioRecording",
    p_audio_recording: "audioRecording",
    audioRecordingUsers: "audioRecordingUsers",
    audio_recording_users: "audioRecordingUsers",
    "Audio Recording Users": "audioRecordingUsers",
    AudioRecordingUsers: "audioRecordingUsers",
    p_audio_recording_users: "audioRecordingUsers",
    "audio-recording-users": "audioRecordingUsers",
    automationBoundaryBroker: "automationBoundaryBroker",
    p_automation_boundary_broker: "automationBoundaryBroker",
    AutomationBoundaryBroker: "automationBoundaryBroker",
    "Automation Boundary Broker": "automationBoundaryBroker",
    automation_boundary_broker: "automationBoundaryBroker",
    "automation-boundary-broker": "automationBoundaryBroker",
    automationMatrix: "automationMatrix",
    automation_matrix: "automationMatrix",
    "Automation Matrix": "automationMatrix",
    p_automation_matrix: "automationMatrix",
    "automation-matrix": "automationMatrix",
    AutomationMatrix: "automationMatrix",
    Broker: "broker",
    p_broker: "broker",
    broker: "broker",
    BrokerValue: "brokerValue",
    brokerValue: "brokerValue",
    broker_value: "brokerValue",
    "Broker Value": "brokerValue",
    "broker-value": "brokerValue",
    p_broker_value: "brokerValue",
    p_bucket_structures: "bucketStructures",
    "Bucket Structures": "bucketStructures",
    BucketStructures: "bucketStructures",
    bucketStructures: "bucketStructures",
    bucket_structures: "bucketStructures",
    "bucket-structures": "bucketStructures",
    bucket_tree_structures: "bucketTreeStructures",
    "Bucket Tree Structures": "bucketTreeStructures",
    p_bucket_tree_structures: "bucketTreeStructures",
    bucketTreeStructures: "bucketTreeStructures",
    "bucket-tree-structures": "bucketTreeStructures",
    BucketTreeStructures: "bucketTreeStructures",
    Category: "category",
    category: "category",
    p_category: "category",
    compiledRecipe: "compiledRecipe",
    compiled_recipe: "compiledRecipe",
    "compiled-recipe": "compiledRecipe",
    p_compiled_recipe: "compiledRecipe",
    "Compiled Recipe": "compiledRecipe",
    CompiledRecipe: "compiledRecipe",
    component_groups: "componentGroups",
    "Component Groups": "componentGroups",
    p_component_groups: "componentGroups",
    ComponentGroups: "componentGroups",
    "component-groups": "componentGroups",
    componentGroups: "componentGroups",
    container_fields: "containerFields",
    containerFields: "containerFields",
    ContainerFields: "containerFields",
    p_container_fields: "containerFields",
    "container-fields": "containerFields",
    "Container Fields": "containerFields",
    Conversation: "conversation",
    p_conversation: "conversation",
    conversation: "conversation",
    p_custom_app_configs: "customAppConfigs",
    customAppConfigs: "customAppConfigs",
    CustomAppConfigs: "customAppConfigs",
    "custom-app-configs": "customAppConfigs",
    "Custom App Configs": "customAppConfigs",
    custom_app_configs: "customAppConfigs",
    custom_applet_configs: "customAppletConfigs",
    p_custom_applet_configs: "customAppletConfigs",
    "custom-applet-configs": "customAppletConfigs",
    "Custom Applet Configs": "customAppletConfigs",
    customAppletConfigs: "customAppletConfigs",
    CustomAppletConfigs: "customAppletConfigs",
    "data-broker": "dataBroker",
    dataBroker: "dataBroker",
    p_data_broker: "dataBroker",
    "Data Broker": "dataBroker",
    DataBroker: "dataBroker",
    data_broker: "dataBroker",
    data_input_component: "dataInputComponent",
    "data-input-component": "dataInputComponent",
    p_data_input_component: "dataInputComponent",
    "Data Input Component": "dataInputComponent",
    dataInputComponent: "dataInputComponent",
    DataInputComponent: "dataInputComponent",
    dataOutputComponent: "dataOutputComponent",
    data_output_component: "dataOutputComponent",
    "data-output-component": "dataOutputComponent",
    p_data_output_component: "dataOutputComponent",
    DataOutputComponent: "dataOutputComponent",
    "Data Output Component": "dataOutputComponent",
    "Display Option": "displayOption",
    DisplayOption: "displayOption",
    displayOption: "displayOption",
    p_display_option: "displayOption",
    display_option: "displayOption",
    "display-option": "displayOption",
    Emails: "emails",
    p_emails: "emails",
    emails: "emails",
    Extractor: "extractor",
    extractor: "extractor",
    p_extractor: "extractor",
    "Field Components": "fieldComponents",
    field_components: "fieldComponents",
    "field-components": "fieldComponents",
    FieldComponents: "fieldComponents",
    p_field_components: "fieldComponents",
    fieldComponents: "fieldComponents",
    "file-structure": "fileStructure",
    fileStructure: "fileStructure",
    FileStructure: "fileStructure",
    "File Structure": "fileStructure",
    p_file_structure: "fileStructure",
    file_structure: "fileStructure",
    p_flashcard_data: "flashcardData",
    flashcard_data: "flashcardData",
    "flashcard-data": "flashcardData",
    FlashcardData: "flashcardData",
    "Flashcard Data": "flashcardData",
    flashcardData: "flashcardData",
    "flashcard-history": "flashcardHistory",
    FlashcardHistory: "flashcardHistory",
    flashcard_history: "flashcardHistory",
    p_flashcard_history: "flashcardHistory",
    flashcardHistory: "flashcardHistory",
    "Flashcard History": "flashcardHistory",
    "Flashcard Images": "flashcardImages",
    flashcard_images: "flashcardImages",
    "flashcard-images": "flashcardImages",
    FlashcardImages: "flashcardImages",
    flashcardImages: "flashcardImages",
    p_flashcard_images: "flashcardImages",
    flashcard_set_relations: "flashcardSetRelations",
    flashcardSetRelations: "flashcardSetRelations",
    FlashcardSetRelations: "flashcardSetRelations",
    p_flashcard_set_relations: "flashcardSetRelations",
    "Flashcard Set Relations": "flashcardSetRelations",
    "flashcard-set-relations": "flashcardSetRelations",
    p_flashcard_sets: "flashcardSets",
    FlashcardSets: "flashcardSets",
    "Flashcard Sets": "flashcardSets",
    "flashcard-sets": "flashcardSets",
    flashcard_sets: "flashcardSets",
    flashcardSets: "flashcardSets",
    "Full Spectrum Positions": "fullSpectrumPositions",
    FullSpectrumPositions: "fullSpectrumPositions",
    fullSpectrumPositions: "fullSpectrumPositions",
    full_spectrum_positions: "fullSpectrumPositions",
    "full-spectrum-positions": "fullSpectrumPositions",
    p_full_spectrum_positions: "fullSpectrumPositions",
    htmlExtractions: "htmlExtractions",
    HtmlExtractions: "htmlExtractions",
    html_extractions: "htmlExtractions",
    p_html_extractions: "htmlExtractions",
    "html-extractions": "htmlExtractions",
    "Html Extractions": "htmlExtractions",
    Message: "message",
    p_message: "message",
    message: "message",
    message_broker: "messageBroker",
    "Message Broker": "messageBroker",
    messageBroker: "messageBroker",
    p_message_broker: "messageBroker",
    "message-broker": "messageBroker",
    MessageBroker: "messageBroker",
    "message-template": "messageTemplate",
    messageTemplate: "messageTemplate",
    p_message_template: "messageTemplate",
    MessageTemplate: "messageTemplate",
    message_template: "messageTemplate",
    "Message Template": "messageTemplate",
    OrganizationInvitations: "organizationInvitations",
    "Organization Invitations": "organizationInvitations",
    "organization-invitations": "organizationInvitations",
    organization_invitations: "organizationInvitations",
    p_organization_invitations: "organizationInvitations",
    organizationInvitations: "organizationInvitations",
    "organization-members": "organizationMembers",
    organizationMembers: "organizationMembers",
    "Organization Members": "organizationMembers",
    p_organization_members: "organizationMembers",
    OrganizationMembers: "organizationMembers",
    organization_members: "organizationMembers",
    organizations: "organizations",
    p_organizations: "organizations",
    Organizations: "organizations",
    Permissions: "permissions",
    p_permissions: "permissions",
    permissions: "permissions",
    p_processor: "processor",
    Processor: "processor",
    processor: "processor",
    projectMembers: "projectMembers",
    project_members: "projectMembers",
    "project-members": "projectMembers",
    ProjectMembers: "projectMembers",
    p_project_members: "projectMembers",
    "Project Members": "projectMembers",
    p_projects: "projects",
    Projects: "projects",
    projects: "projects",
    Prompts: "prompts",
    p_prompts: "prompts",
    prompts: "prompts",
    recipe: "recipe",
    Recipe: "recipe",
    p_recipe: "recipe",
    p_recipe_broker: "recipeBroker",
    "Recipe Broker": "recipeBroker",
    RecipeBroker: "recipeBroker",
    recipeBroker: "recipeBroker",
    "recipe-broker": "recipeBroker",
    recipe_broker: "recipeBroker",
    p_recipe_display: "recipeDisplay",
    recipe_display: "recipeDisplay",
    RecipeDisplay: "recipeDisplay",
    "recipe-display": "recipeDisplay",
    "Recipe Display": "recipeDisplay",
    recipeDisplay: "recipeDisplay",
    RecipeFunction: "recipeFunction",
    recipe_function: "recipeFunction",
    p_recipe_function: "recipeFunction",
    recipeFunction: "recipeFunction",
    "Recipe Function": "recipeFunction",
    "recipe-function": "recipeFunction",
    p_recipe_message: "recipeMessage",
    recipeMessage: "recipeMessage",
    "recipe-message": "recipeMessage",
    recipe_message: "recipeMessage",
    RecipeMessage: "recipeMessage",
    "Recipe Message": "recipeMessage",
    recipeMessageReorderQueue: "recipeMessageReorderQueue",
    p_recipe_message_reorder_queue: "recipeMessageReorderQueue",
    recipe_message_reorder_queue: "recipeMessageReorderQueue",
    "recipe-message-reorder-queue": "recipeMessageReorderQueue",
    "Recipe Message Reorder Queue": "recipeMessageReorderQueue",
    RecipeMessageReorderQueue: "recipeMessageReorderQueue",
    p_recipe_model: "recipeModel",
    "Recipe Model": "recipeModel",
    RecipeModel: "recipeModel",
    "recipe-model": "recipeModel",
    recipe_model: "recipeModel",
    recipeModel: "recipeModel",
    "Recipe Processor": "recipeProcessor",
    RecipeProcessor: "recipeProcessor",
    "recipe-processor": "recipeProcessor",
    p_recipe_processor: "recipeProcessor",
    recipeProcessor: "recipeProcessor",
    recipe_processor: "recipeProcessor",
    recipe_tool: "recipeTool",
    "recipe-tool": "recipeTool",
    p_recipe_tool: "recipeTool",
    recipeTool: "recipeTool",
    RecipeTool: "recipeTool",
    "Recipe Tool": "recipeTool",
    RegisteredFunction: "registeredFunction",
    registered_function: "registeredFunction",
    registeredFunction: "registeredFunction",
    "registered-function": "registeredFunction",
    p_registered_function: "registeredFunction",
    "Registered Function": "registeredFunction",
    p_schema_templates: "schemaTemplates",
    schema_templates: "schemaTemplates",
    SchemaTemplates: "schemaTemplates",
    "Schema Templates": "schemaTemplates",
    schemaTemplates: "schemaTemplates",
    "schema-templates": "schemaTemplates",
    "Scrape Base Config": "scrapeBaseConfig",
    p_scrape_base_config: "scrapeBaseConfig",
    ScrapeBaseConfig: "scrapeBaseConfig",
    scrape_base_config: "scrapeBaseConfig",
    "scrape-base-config": "scrapeBaseConfig",
    scrapeBaseConfig: "scrapeBaseConfig",
    scrapeCachePolicy: "scrapeCachePolicy",
    p_scrape_cache_policy: "scrapeCachePolicy",
    ScrapeCachePolicy: "scrapeCachePolicy",
    "scrape-cache-policy": "scrapeCachePolicy",
    "Scrape Cache Policy": "scrapeCachePolicy",
    scrape_cache_policy: "scrapeCachePolicy",
    scrape_configuration: "scrapeConfiguration",
    p_scrape_configuration: "scrapeConfiguration",
    ScrapeConfiguration: "scrapeConfiguration",
    "Scrape Configuration": "scrapeConfiguration",
    "scrape-configuration": "scrapeConfiguration",
    scrapeConfiguration: "scrapeConfiguration",
    p_scrape_cycle_run: "scrapeCycleRun",
    scrape_cycle_run: "scrapeCycleRun",
    scrapeCycleRun: "scrapeCycleRun",
    ScrapeCycleRun: "scrapeCycleRun",
    "Scrape Cycle Run": "scrapeCycleRun",
    "scrape-cycle-run": "scrapeCycleRun",
    "scrape-cycle-tracker": "scrapeCycleTracker",
    p_scrape_cycle_tracker: "scrapeCycleTracker",
    scrapeCycleTracker: "scrapeCycleTracker",
    ScrapeCycleTracker: "scrapeCycleTracker",
    scrape_cycle_tracker: "scrapeCycleTracker",
    "Scrape Cycle Tracker": "scrapeCycleTracker",
    scrapeDomain: "scrapeDomain",
    scrape_domain: "scrapeDomain",
    p_scrape_domain: "scrapeDomain",
    ScrapeDomain: "scrapeDomain",
    "scrape-domain": "scrapeDomain",
    "Scrape Domain": "scrapeDomain",
    ScrapeDomainDisallowedNotes: "scrapeDomainDisallowedNotes",
    p_scrape_domain_disallowed_notes: "scrapeDomainDisallowedNotes",
    scrape_domain_disallowed_notes: "scrapeDomainDisallowedNotes",
    "scrape-domain-disallowed-notes": "scrapeDomainDisallowedNotes",
    scrapeDomainDisallowedNotes: "scrapeDomainDisallowedNotes",
    "Scrape Domain Disallowed Notes": "scrapeDomainDisallowedNotes",
    ScrapeDomainNotes: "scrapeDomainNotes",
    p_scrape_domain_notes: "scrapeDomainNotes",
    "scrape-domain-notes": "scrapeDomainNotes",
    "Scrape Domain Notes": "scrapeDomainNotes",
    scrapeDomainNotes: "scrapeDomainNotes",
    scrape_domain_notes: "scrapeDomainNotes",
    p_scrape_domain_quick_scrape_settings: "scrapeDomainQuickScrapeSettings",
    ScrapeDomainQuickScrapeSettings: "scrapeDomainQuickScrapeSettings",
    "scrape-domain-quick-scrape-settings": "scrapeDomainQuickScrapeSettings",
    scrape_domain_quick_scrape_settings: "scrapeDomainQuickScrapeSettings",
    scrapeDomainQuickScrapeSettings: "scrapeDomainQuickScrapeSettings",
    "Scrape Domain Quick Scrape Settings": "scrapeDomainQuickScrapeSettings",
    scrapeDomainRobotsTxt: "scrapeDomainRobotsTxt",
    "scrape-domain-robots-txt": "scrapeDomainRobotsTxt",
    "Scrape Domain Robots Txt": "scrapeDomainRobotsTxt",
    p_scrape_domain_robots_txt: "scrapeDomainRobotsTxt",
    ScrapeDomainRobotsTxt: "scrapeDomainRobotsTxt",
    scrape_domain_robots_txt: "scrapeDomainRobotsTxt",
    p_scrape_domain_sitemap: "scrapeDomainSitemap",
    scrape_domain_sitemap: "scrapeDomainSitemap",
    scrapeDomainSitemap: "scrapeDomainSitemap",
    "scrape-domain-sitemap": "scrapeDomainSitemap",
    ScrapeDomainSitemap: "scrapeDomainSitemap",
    "Scrape Domain Sitemap": "scrapeDomainSitemap",
    scrape_job: "scrapeJob",
    "Scrape Job": "scrapeJob",
    scrapeJob: "scrapeJob",
    "scrape-job": "scrapeJob",
    p_scrape_job: "scrapeJob",
    ScrapeJob: "scrapeJob",
    p_scrape_override: "scrapeOverride",
    scrape_override: "scrapeOverride",
    "Scrape Override": "scrapeOverride",
    ScrapeOverride: "scrapeOverride",
    "scrape-override": "scrapeOverride",
    scrapeOverride: "scrapeOverride",
    "scrape-override-value": "scrapeOverrideValue",
    p_scrape_override_value: "scrapeOverrideValue",
    ScrapeOverrideValue: "scrapeOverrideValue",
    scrape_override_value: "scrapeOverrideValue",
    "Scrape Override Value": "scrapeOverrideValue",
    scrapeOverrideValue: "scrapeOverrideValue",
    "Scrape Parsed Page": "scrapeParsedPage",
    scrape_parsed_page: "scrapeParsedPage",
    ScrapeParsedPage: "scrapeParsedPage",
    "scrape-parsed-page": "scrapeParsedPage",
    scrapeParsedPage: "scrapeParsedPage",
    p_scrape_parsed_page: "scrapeParsedPage",
    "Scrape Path Pattern": "scrapePathPattern",
    scrape_path_pattern: "scrapePathPattern",
    p_scrape_path_pattern: "scrapePathPattern",
    ScrapePathPattern: "scrapePathPattern",
    "scrape-path-pattern": "scrapePathPattern",
    scrapePathPattern: "scrapePathPattern",
    p_scrape_path_pattern_cache_policy: "scrapePathPatternCachePolicy",
    scrapePathPatternCachePolicy: "scrapePathPatternCachePolicy",
    scrape_path_pattern_cache_policy: "scrapePathPatternCachePolicy",
    ScrapePathPatternCachePolicy: "scrapePathPatternCachePolicy",
    "scrape-path-pattern-cache-policy": "scrapePathPatternCachePolicy",
    "Scrape Path Pattern Cache Policy": "scrapePathPatternCachePolicy",
    scrapePathPatternOverride: "scrapePathPatternOverride",
    "scrape-path-pattern-override": "scrapePathPatternOverride",
    p_scrape_path_pattern_override: "scrapePathPatternOverride",
    "Scrape Path Pattern Override": "scrapePathPatternOverride",
    ScrapePathPatternOverride: "scrapePathPatternOverride",
    scrape_path_pattern_override: "scrapePathPatternOverride",
    "Scrape Quick Failure Log": "scrapeQuickFailureLog",
    p_scrape_quick_failure_log: "scrapeQuickFailureLog",
    "scrape-quick-failure-log": "scrapeQuickFailureLog",
    scrape_quick_failure_log: "scrapeQuickFailureLog",
    ScrapeQuickFailureLog: "scrapeQuickFailureLog",
    scrapeQuickFailureLog: "scrapeQuickFailureLog",
    p_scrape_task: "scrapeTask",
    "Scrape Task": "scrapeTask",
    ScrapeTask: "scrapeTask",
    scrapeTask: "scrapeTask",
    scrape_task: "scrapeTask",
    "scrape-task": "scrapeTask",
    "scrape-task-response": "scrapeTaskResponse",
    scrapeTaskResponse: "scrapeTaskResponse",
    ScrapeTaskResponse: "scrapeTaskResponse",
    p_scrape_task_response: "scrapeTaskResponse",
    "Scrape Task Response": "scrapeTaskResponse",
    scrape_task_response: "scrapeTaskResponse",
    subcategory: "subcategory",
    Subcategory: "subcategory",
    p_subcategory: "subcategory",
    SystemFunction: "systemFunction",
    systemFunction: "systemFunction",
    "system-function": "systemFunction",
    "System Function": "systemFunction",
    p_system_function: "systemFunction",
    system_function: "systemFunction",
    "Table Data": "tableData",
    p_table_data: "tableData",
    table_data: "tableData",
    "table-data": "tableData",
    tableData: "tableData",
    TableData: "tableData",
    p_table_fields: "tableFields",
    "Table Fields": "tableFields",
    TableFields: "tableFields",
    "table-fields": "tableFields",
    table_fields: "tableFields",
    tableFields: "tableFields",
    taskAssignments: "taskAssignments",
    task_assignments: "taskAssignments",
    p_task_assignments: "taskAssignments",
    TaskAssignments: "taskAssignments",
    "task-assignments": "taskAssignments",
    "Task Assignments": "taskAssignments",
    p_task_attachments: "taskAttachments",
    TaskAttachments: "taskAttachments",
    task_attachments: "taskAttachments",
    "task-attachments": "taskAttachments",
    taskAttachments: "taskAttachments",
    "Task Attachments": "taskAttachments",
    p_task_comments: "taskComments",
    task_comments: "taskComments",
    TaskComments: "taskComments",
    taskComments: "taskComments",
    "task-comments": "taskComments",
    "Task Comments": "taskComments",
    tasks: "tasks",
    Tasks: "tasks",
    p_tasks: "tasks",
    p_tool: "tool",
    tool: "tool",
    Tool: "tool",
    p_transformer: "transformer",
    transformer: "transformer",
    Transformer: "transformer",
    "user-list-items": "userListItems",
    userListItems: "userListItems",
    "User List Items": "userListItems",
    p_user_list_items: "userListItems",
    UserListItems: "userListItems",
    user_list_items: "userListItems",
    userLists: "userLists",
    "user-lists": "userLists",
    p_user_lists: "userLists",
    UserLists: "userLists",
    user_lists: "userLists",
    "User Lists": "userLists",
    p_user_preferences: "userPreferences",
    UserPreferences: "userPreferences",
    "User Preferences": "userPreferences",
    "user-preferences": "userPreferences",
    userPreferences: "userPreferences",
    user_preferences: "userPreferences",
    user_tables: "userTables",
    p_user_tables: "userTables",
    "User Tables": "userTables",
    UserTables: "userTables",
    "user-tables": "userTables",
    userTables: "userTables",
    "wc-claim": "wcClaim",
    "Wc Claim": "wcClaim",
    wcClaim: "wcClaim",
    p_wc_claim: "wcClaim",
    wc_claim: "wcClaim",
    WcClaim: "wcClaim",
    wc_impairment_definition: "wcImpairmentDefinition",
    "wc-impairment-definition": "wcImpairmentDefinition",
    p_wc_impairment_definition: "wcImpairmentDefinition",
    wcImpairmentDefinition: "wcImpairmentDefinition",
    WcImpairmentDefinition: "wcImpairmentDefinition",
    "Wc Impairment Definition": "wcImpairmentDefinition",
    wcInjury: "wcInjury",
    WcInjury: "wcInjury",
    "wc-injury": "wcInjury",
    wc_injury: "wcInjury",
    p_wc_injury: "wcInjury",
    "Wc Injury": "wcInjury",
    wc_report: "wcReport",
    wcReport: "wcReport",
    p_wc_report: "wcReport",
    "Wc Report": "wcReport",
    "wc-report": "wcReport",
    WcReport: "wcReport",
    Workflow: "workflow",
    p_workflow: "workflow",
    workflow: "workflow",
    p_workflow_data: "workflowData",
    "Workflow Data": "workflowData",
    workflow_data: "workflowData",
    WorkflowData: "workflowData",
    "workflow-data": "workflowData",
    workflowData: "workflowData",
    "workflow-edge": "workflowEdge",
    p_workflow_edge: "workflowEdge",
    WorkflowEdge: "workflowEdge",
    workflowEdge: "workflowEdge",
    workflow_edge: "workflowEdge",
    "Workflow Edge": "workflowEdge",
    workflow_node: "workflowNode",
    "workflow-node": "workflowNode",
    p_workflow_node: "workflowNode",
    "Workflow Node": "workflowNode",
    workflowNode: "workflowNode",
    WorkflowNode: "workflowNode",
    p_workflow_node_data: "workflowNodeData",
    WorkflowNodeData: "workflowNodeData",
    workflowNodeData: "workflowNodeData",
    "workflow-node-data": "workflowNodeData",
    workflow_node_data: "workflowNodeData",
    "Workflow Node Data": "workflowNodeData",
    p_workflow_relay: "workflowRelay",
    "Workflow Relay": "workflowRelay",
    WorkflowRelay: "workflowRelay",
    "workflow-relay": "workflowRelay",
    workflowRelay: "workflowRelay",
    workflow_relay: "workflowRelay",
    workflow_user_input: "workflowUserInput",
    WorkflowUserInput: "workflowUserInput",
    "Workflow User Input": "workflowUserInput",
    p_workflow_user_input: "workflowUserInput",
    "workflow-user-input": "workflowUserInput",
    workflowUserInput: "workflowUserInput",
};

export const fieldNameToCanonical: FieldNameToCanonicalMap = {
    action: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    matrix: "matrix",
Matrix: "matrix",
p_matrix: "matrix",
    p_transformer: "transformer",
transformer: "transformer",
Transformer: "transformer",
    nodeType: "nodeType",
"node-type": "nodeType",
node_type: "nodeType",
"Node Type": "nodeType",
p_node_type: "nodeType",
NodeType: "nodeType",
    ReferenceId: "referenceId",
"reference-id": "referenceId",
p_reference_id: "referenceId",
"Reference Id": "referenceId",
referenceId: "referenceId",
reference_id: "referenceId"
},
    admins: {
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt"
},
    aiAgent: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    recipe_id: "recipeId",
RecipeId: "recipeId",
"recipe-id": "recipeId",
recipeId: "recipeId",
"Recipe Id": "recipeId",
p_recipe_id: "recipeId",
    AiSettingsId: "aiSettingsId",
"ai-settings-id": "aiSettingsId",
p_ai_settings_id: "aiSettingsId",
ai_settings_id: "aiSettingsId",
"Ai Settings Id": "aiSettingsId",
aiSettingsId: "aiSettingsId",
    p_system_message_override: "systemMessageOverride",
SystemMessageOverride: "systemMessageOverride",
"System Message Override": "systemMessageOverride",
system_message_override: "systemMessageOverride",
systemMessageOverride: "systemMessageOverride",
"system-message-override": "systemMessageOverride"
},
    aiEndpoint: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_provider: "provider",
provider: "provider",
Provider: "provider",
    p_description: "description",
description: "description",
Description: "description",
    AdditionalCost: "additionalCost",
"Additional Cost": "additionalCost",
"additional-cost": "additionalCost",
p_additional_cost: "additionalCost",
additional_cost: "additionalCost",
additionalCost: "additionalCost",
    "cost-details": "costDetails",
CostDetails: "costDetails",
cost_details: "costDetails",
"Cost Details": "costDetails",
costDetails: "costDetails",
p_cost_details: "costDetails",
    Params: "params",
p_params: "params",
params: "params"
},
    aiModel: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    commonName: "commonName",
"Common Name": "commonName",
CommonName: "commonName",
p_common_name: "commonName",
common_name: "commonName",
"common-name": "commonName",
    modelClass: "modelClass",
p_model_class: "modelClass",
ModelClass: "modelClass",
"Model Class": "modelClass",
model_class: "modelClass",
"model-class": "modelClass",
    p_provider: "provider",
provider: "provider",
Provider: "provider",
    endpoints: "endpoints",
p_endpoints: "endpoints",
Endpoints: "endpoints",
    contextWindow: "contextWindow",
"context-window": "contextWindow",
context_window: "contextWindow",
ContextWindow: "contextWindow",
"Context Window": "contextWindow",
p_context_window: "contextWindow",
    p_max_tokens: "maxTokens",
MaxTokens: "maxTokens",
maxTokens: "maxTokens",
"max-tokens": "maxTokens",
max_tokens: "maxTokens",
"Max Tokens": "maxTokens",
    capabilities: "capabilities",
p_capabilities: "capabilities",
Capabilities: "capabilities",
    p_controls: "controls",
controls: "controls",
Controls: "controls",
    ModelProvider: "modelProvider",
"model-provider": "modelProvider",
modelProvider: "modelProvider",
p_model_provider: "modelProvider",
model_provider: "modelProvider",
"Model Provider": "modelProvider"
},
    aiModelEndpoint: {
    p_id: "id",
Id: "id",
id: "id",
    aiModelId: "aiModelId",
p_ai_model_id: "aiModelId",
"ai-model-id": "aiModelId",
"Ai Model Id": "aiModelId",
AiModelId: "aiModelId",
ai_model_id: "aiModelId",
    AiEndpointId: "aiEndpointId",
"ai-endpoint-id": "aiEndpointId",
"Ai Endpoint Id": "aiEndpointId",
aiEndpointId: "aiEndpointId",
ai_endpoint_id: "aiEndpointId",
p_ai_endpoint_id: "aiEndpointId",
    Available: "available",
p_available: "available",
available: "available",
    EndpointPriority: "endpointPriority",
"endpoint-priority": "endpointPriority",
endpoint_priority: "endpointPriority",
"Endpoint Priority": "endpointPriority",
p_endpoint_priority: "endpointPriority",
endpointPriority: "endpointPriority",
    Configuration: "configuration",
p_configuration: "configuration",
configuration: "configuration",
    p_notes: "notes",
notes: "notes",
Notes: "notes",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt"
},
    aiProvider: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    CompanyDescription: "companyDescription",
company_description: "companyDescription",
p_company_description: "companyDescription",
companyDescription: "companyDescription",
"Company Description": "companyDescription",
"company-description": "companyDescription",
    "Documentation Link": "documentationLink",
documentationLink: "documentationLink",
p_documentation_link: "documentationLink",
"documentation-link": "documentationLink",
documentation_link: "documentationLink",
DocumentationLink: "documentationLink",
    modelsLink: "modelsLink",
"models-link": "modelsLink",
models_link: "modelsLink",
p_models_link: "modelsLink",
"Models Link": "modelsLink",
ModelsLink: "modelsLink"
},
    aiSettings: {
    p_id: "id",
Id: "id",
id: "id",
    AiEndpoint: "aiEndpoint",
"ai-endpoint": "aiEndpoint",
"Ai Endpoint": "aiEndpoint",
p_ai_endpoint: "aiEndpoint",
aiEndpoint: "aiEndpoint",
ai_endpoint: "aiEndpoint",
    aiProvider: "aiProvider",
"ai-provider": "aiProvider",
ai_provider: "aiProvider",
p_ai_provider: "aiProvider",
AiProvider: "aiProvider",
"Ai Provider": "aiProvider",
    ai_model: "aiModel",
"Ai Model": "aiModel",
aiModel: "aiModel",
p_ai_model: "aiModel",
"ai-model": "aiModel",
AiModel: "aiModel",
    p_temperature: "temperature",
temperature: "temperature",
Temperature: "temperature",
    p_max_tokens: "maxTokens",
MaxTokens: "maxTokens",
maxTokens: "maxTokens",
"max-tokens": "maxTokens",
max_tokens: "maxTokens",
"Max Tokens": "maxTokens",
    "top-p": "topP",
p_top_p: "topP",
TopP: "topP",
topP: "topP",
top_p: "topP",
"Top P": "topP",
    FrequencyPenalty: "frequencyPenalty",
frequency_penalty: "frequencyPenalty",
p_frequency_penalty: "frequencyPenalty",
"Frequency Penalty": "frequencyPenalty",
"frequency-penalty": "frequencyPenalty",
frequencyPenalty: "frequencyPenalty",
    presencePenalty: "presencePenalty",
"presence-penalty": "presencePenalty",
presence_penalty: "presencePenalty",
PresencePenalty: "presencePenalty",
p_presence_penalty: "presencePenalty",
"Presence Penalty": "presencePenalty",
    stream: "stream",
Stream: "stream",
p_stream: "stream",
    "Response Format": "responseFormat",
ResponseFormat: "responseFormat",
response_format: "responseFormat",
responseFormat: "responseFormat",
"response-format": "responseFormat",
p_response_format: "responseFormat",
    p_size: "size",
Size: "size",
size: "size",
    quality: "quality",
Quality: "quality",
p_quality: "quality",
    p_count: "count",
Count: "count",
count: "count",
    audio_voice: "audioVoice",
"Audio Voice": "audioVoice",
"audio-voice": "audioVoice",
p_audio_voice: "audioVoice",
AudioVoice: "audioVoice",
audioVoice: "audioVoice",
    "Audio Format": "audioFormat",
AudioFormat: "audioFormat",
"audio-format": "audioFormat",
p_audio_format: "audioFormat",
audio_format: "audioFormat",
audioFormat: "audioFormat",
    Modalities: "modalities",
p_modalities: "modalities",
modalities: "modalities",
    p_tools: "tools",
tools: "tools",
Tools: "tools",
    preset_name: "presetName",
"preset-name": "presetName",
presetName: "presetName",
p_preset_name: "presetName",
"Preset Name": "presetName",
PresetName: "presetName"
},
    aiTrainingData: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    p_system_prompt: "systemPrompt",
systemPrompt: "systemPrompt",
"System Prompt": "systemPrompt",
system_prompt: "systemPrompt",
SystemPrompt: "systemPrompt",
"system-prompt": "systemPrompt",
    UserQuery: "userQuery",
userQuery: "userQuery",
"User Query": "userQuery",
p_user_query: "userQuery",
user_query: "userQuery",
"user-query": "userQuery",
    ThinkingContent: "thinkingContent",
p_thinking_content: "thinkingContent",
"thinking-content": "thinkingContent",
"Thinking Content": "thinkingContent",
thinkingContent: "thinkingContent",
thinking_content: "thinkingContent",
    response_content: "responseContent",
p_response_content: "responseContent",
"Response Content": "responseContent",
"response-content": "responseContent",
responseContent: "responseContent",
ResponseContent: "responseContent",
    p_reflection_content: "reflectionContent",
"Reflection Content": "reflectionContent",
"reflection-content": "reflectionContent",
reflectionContent: "reflectionContent",
ReflectionContent: "reflectionContent",
reflection_content: "reflectionContent",
    quality_score: "qualityScore",
p_quality_score: "qualityScore",
"Quality Score": "qualityScore",
QualityScore: "qualityScore",
"quality-score": "qualityScore",
qualityScore: "qualityScore",
    source: "source",
p_source: "source",
Source: "source",
    Metadata: "metadata",
metadata: "metadata",
p_metadata: "metadata",
    "Questions Thinking": "questionsThinking",
"questions-thinking": "questionsThinking",
questions_thinking: "questionsThinking",
questionsThinking: "questionsThinking",
p_questions_thinking: "questionsThinking",
QuestionsThinking: "questionsThinking",
    "Questions Content": "questionsContent",
p_questions_content: "questionsContent",
questionsContent: "questionsContent",
questions_content: "questionsContent",
QuestionsContent: "questionsContent",
"questions-content": "questionsContent",
    structured_questions: "structuredQuestions",
"Structured Questions": "structuredQuestions",
"structured-questions": "structuredQuestions",
StructuredQuestions: "structuredQuestions",
structuredQuestions: "structuredQuestions",
p_structured_questions: "structuredQuestions",
    ReflectionThinking: "reflectionThinking",
"Reflection Thinking": "reflectionThinking",
"reflection-thinking": "reflectionThinking",
reflection_thinking: "reflectionThinking",
reflectionThinking: "reflectionThinking",
p_reflection_thinking: "reflectionThinking"
},
    applet: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_description: "description",
description: "description",
Description: "description",
    Creator: "creator",
p_creator: "creator",
creator: "creator",
    type: "type",
Type: "type",
p_type: "type",
    "Compiled Recipe Id": "compiledRecipeId",
p_compiled_recipe_id: "compiledRecipeId",
compiledRecipeId: "compiledRecipeId",
CompiledRecipeId: "compiledRecipeId",
compiled_recipe_id: "compiledRecipeId",
"compiled-recipe-id": "compiledRecipeId",
    Slug: "slug",
p_slug: "slug",
slug: "slug",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    p_data_source_config: "dataSourceConfig",
"data-source-config": "dataSourceConfig",
"Data Source Config": "dataSourceConfig",
DataSourceConfig: "dataSourceConfig",
data_source_config: "dataSourceConfig",
dataSourceConfig: "dataSourceConfig",
    result_component_config: "resultComponentConfig",
"result-component-config": "resultComponentConfig",
p_result_component_config: "resultComponentConfig",
ResultComponentConfig: "resultComponentConfig",
resultComponentConfig: "resultComponentConfig",
"Result Component Config": "resultComponentConfig",
    next_step_config: "nextStepConfig",
"next-step-config": "nextStepConfig",
p_next_step_config: "nextStepConfig",
nextStepConfig: "nextStepConfig",
NextStepConfig: "nextStepConfig",
"Next Step Config": "nextStepConfig",
    p_subcategory_id: "subcategoryId",
subcategory_id: "subcategoryId",
"Subcategory Id": "subcategoryId",
"subcategory-id": "subcategoryId",
SubcategoryId: "subcategoryId",
subcategoryId: "subcategoryId",
    cta_text: "ctaText",
CtaText: "ctaText",
"cta-text": "ctaText",
p_cta_text: "ctaText",
ctaText: "ctaText",
"Cta Text": "ctaText",
    Theme: "theme",
theme: "theme",
p_theme: "theme"
},
    appletContainers: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    applet_id: "appletId",
AppletId: "appletId",
appletId: "appletId",
"Applet Id": "appletId",
p_applet_id: "appletId",
"applet-id": "appletId",
    container_id: "containerId",
"container-id": "containerId",
"Container Id": "containerId",
containerId: "containerId",
p_container_id: "containerId",
ContainerId: "containerId",
    Order: "order",
p_order: "order",
order: "order"
},
    arg: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_required: "required",
Required: "required",
required: "required",
    p_default_junk: "defaultJunk",
default_junk: "defaultJunk",
DefaultJunk: "defaultJunk",
"Default Junk": "defaultJunk",
defaultJunk: "defaultJunk",
"default-junk": "defaultJunk",
    data_type: "dataType",
"Data Type": "dataType",
DataType: "dataType",
"data-type": "dataType",
p_data_type: "dataType",
dataType: "dataType",
    Ready: "ready",
ready: "ready",
p_ready: "ready",
    RegisteredFunction: "registeredFunction",
"Registered Function": "registeredFunction",
p_registered_function: "registeredFunction",
registered_function: "registeredFunction",
registeredFunction: "registeredFunction",
"registered-function": "registeredFunction",
    "default-value": "defaultValue",
default_value: "defaultValue",
p_default_value: "defaultValue",
DefaultValue: "defaultValue",
defaultValue: "defaultValue",
"Default Value": "defaultValue",
    p_description: "description",
description: "description",
Description: "description",
    p_examples: "examples",
examples: "examples",
Examples: "examples"
},
    audioLabel: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    name: "name",
Name: "name",
p_name: "name",
    p_description: "description",
description: "description",
Description: "description"
},
    audioRecording: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    name: "name",
Name: "name",
p_name: "name",
    label: "label",
Label: "label",
p_label: "label",
    "file-url": "fileUrl",
p_file_url: "fileUrl",
"File Url": "fileUrl",
file_url: "fileUrl",
FileUrl: "fileUrl",
fileUrl: "fileUrl",
    p_duration: "duration",
Duration: "duration",
duration: "duration",
    "Local Path": "localPath",
local_path: "localPath",
localPath: "localPath",
"local-path": "localPath",
LocalPath: "localPath",
p_local_path: "localPath",
    p_size: "size",
Size: "size",
size: "size",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic"
},
    audioRecordingUsers: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    FirstName: "firstName",
p_first_name: "firstName",
"first-name": "firstName",
firstName: "firstName",
"First Name": "firstName",
first_name: "firstName",
    last_name: "lastName",
"Last Name": "lastName",
LastName: "lastName",
lastName: "lastName",
p_last_name: "lastName",
"last-name": "lastName",
    Email: "email",
email: "email",
p_email: "email"
},
    automationBoundaryBroker: {
    p_id: "id",
Id: "id",
id: "id",
    matrix: "matrix",
Matrix: "matrix",
p_matrix: "matrix",
    Broker: "broker",
p_broker: "broker",
broker: "broker",
    p_spark_source: "sparkSource",
"spark-source": "sparkSource",
sparkSource: "sparkSource",
SparkSource: "sparkSource",
spark_source: "sparkSource",
"Spark Source": "sparkSource",
    BeaconDestination: "beaconDestination",
"Beacon Destination": "beaconDestination",
p_beacon_destination: "beaconDestination",
beaconDestination: "beaconDestination",
beacon_destination: "beaconDestination",
"beacon-destination": "beaconDestination"
},
    automationMatrix: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_description: "description",
description: "description",
Description: "description",
    "Average Seconds": "averageSeconds",
p_average_seconds: "averageSeconds",
"average-seconds": "averageSeconds",
AverageSeconds: "averageSeconds",
average_seconds: "averageSeconds",
averageSeconds: "averageSeconds",
    p_is_automated: "isAutomated",
"is-automated": "isAutomated",
is_automated: "isAutomated",
IsAutomated: "isAutomated",
isAutomated: "isAutomated",
"Is Automated": "isAutomated",
    "Cognition Matrices": "cognitionMatrices",
cognition_matrices: "cognitionMatrices",
cognitionMatrices: "cognitionMatrices",
"cognition-matrices": "cognitionMatrices",
p_cognition_matrices: "cognitionMatrices",
CognitionMatrices: "cognitionMatrices"
},
    broker: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    Value: "value",
value: "value",
p_value: "value",
    data_type: "dataType",
"Data Type": "dataType",
DataType: "dataType",
"data-type": "dataType",
p_data_type: "dataType",
dataType: "dataType",
    Ready: "ready",
ready: "ready",
p_ready: "ready",
    "Default Source": "defaultSource",
DefaultSource: "defaultSource",
default_source: "defaultSource",
defaultSource: "defaultSource",
p_default_source: "defaultSource",
"default-source": "defaultSource",
    DisplayName: "displayName",
"display-name": "displayName",
display_name: "displayName",
displayName: "displayName",
p_display_name: "displayName",
"Display Name": "displayName",
    p_description: "description",
description: "description",
Description: "description",
    tooltip: "tooltip",
p_tooltip: "tooltip",
Tooltip: "tooltip",
    p_validation_rules: "validationRules",
validationRules: "validationRules",
"validation-rules": "validationRules",
"Validation Rules": "validationRules",
ValidationRules: "validationRules",
validation_rules: "validationRules",
    p_sample_entries: "sampleEntries",
sample_entries: "sampleEntries",
"Sample Entries": "sampleEntries",
sampleEntries: "sampleEntries",
SampleEntries: "sampleEntries",
"sample-entries": "sampleEntries",
    "custom-source-component": "customSourceComponent",
"Custom Source Component": "customSourceComponent",
customSourceComponent: "customSourceComponent",
custom_source_component: "customSourceComponent",
CustomSourceComponent: "customSourceComponent",
p_custom_source_component: "customSourceComponent",
    p_additional_params: "additionalParams",
additionalParams: "additionalParams",
"Additional Params": "additionalParams",
additional_params: "additionalParams",
AdditionalParams: "additionalParams",
"additional-params": "additionalParams",
    otherSourceParams: "otherSourceParams",
OtherSourceParams: "otherSourceParams",
other_source_params: "otherSourceParams",
p_other_source_params: "otherSourceParams",
"Other Source Params": "otherSourceParams",
"other-source-params": "otherSourceParams",
    defaultDestination: "defaultDestination",
"default-destination": "defaultDestination",
p_default_destination: "defaultDestination",
default_destination: "defaultDestination",
"Default Destination": "defaultDestination",
DefaultDestination: "defaultDestination",
    output_component: "outputComponent",
outputComponent: "outputComponent",
"output-component": "outputComponent",
OutputComponent: "outputComponent",
"Output Component": "outputComponent",
p_output_component: "outputComponent",
    tags: "tags",
p_tags: "tags",
Tags: "tags",
    string_value: "stringValue",
StringValue: "stringValue",
p_string_value: "stringValue",
"String Value": "stringValue",
stringValue: "stringValue",
"string-value": "stringValue"
},
    brokerValue: {
    p_id: "id",
Id: "id",
id: "id",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    data_broker: "dataBroker",
p_data_broker: "dataBroker",
"data-broker": "dataBroker",
dataBroker: "dataBroker",
DataBroker: "dataBroker",
"Data Broker": "dataBroker",
    Data: "data",
p_data: "data",
data: "data",
    Category: "category",
category: "category",
p_category: "category",
    "sub-category": "subCategory",
"Sub Category": "subCategory",
subCategory: "subCategory",
sub_category: "subCategory",
SubCategory: "subCategory",
p_sub_category: "subCategory",
    tags: "tags",
p_tags: "tags",
Tags: "tags",
    Comments: "comments",
p_comments: "comments",
comments: "comments",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt"
},
    bucketStructures: {
    bucket_id: "bucketId",
"bucket-id": "bucketId",
p_bucket_id: "bucketId",
bucketId: "bucketId",
"Bucket Id": "bucketId",
BucketId: "bucketId",
    Structure: "structure",
p_structure: "structure",
structure: "structure",
    lastUpdated: "lastUpdated",
last_updated: "lastUpdated",
"Last Updated": "lastUpdated",
p_last_updated: "lastUpdated",
"last-updated": "lastUpdated",
LastUpdated: "lastUpdated"
},
    bucketTreeStructures: {
    bucket_id: "bucketId",
"bucket-id": "bucketId",
p_bucket_id: "bucketId",
bucketId: "bucketId",
"Bucket Id": "bucketId",
BucketId: "bucketId",
    "Tree Structure": "treeStructure",
TreeStructure: "treeStructure",
treeStructure: "treeStructure",
"tree-structure": "treeStructure",
tree_structure: "treeStructure",
p_tree_structure: "treeStructure",
    lastUpdated: "lastUpdated",
last_updated: "lastUpdated",
"Last Updated": "lastUpdated",
p_last_updated: "lastUpdated",
"last-updated": "lastUpdated",
LastUpdated: "lastUpdated"
},
    category: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_description: "description",
description: "description",
Description: "description",
    Slug: "slug",
p_slug: "slug",
slug: "slug",
    Icon: "icon",
p_icon: "icon",
icon: "icon",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt"
},
    compiledRecipe: {
    p_id: "id",
Id: "id",
id: "id",
    recipe_id: "recipeId",
RecipeId: "recipeId",
"recipe-id": "recipeId",
recipeId: "recipeId",
"Recipe Id": "recipeId",
p_recipe_id: "recipeId",
    p_version: "version",
Version: "version",
version: "version",
    compiledRecipe: "compiledRecipe",
compiled_recipe: "compiledRecipe",
"compiled-recipe": "compiledRecipe",
p_compiled_recipe: "compiledRecipe",
"Compiled Recipe": "compiledRecipe",
CompiledRecipe: "compiledRecipe",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    componentGroups: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    label: "label",
Label: "label",
p_label: "label",
    short_label: "shortLabel",
"Short Label": "shortLabel",
p_short_label: "shortLabel",
"short-label": "shortLabel",
shortLabel: "shortLabel",
ShortLabel: "shortLabel",
    p_description: "description",
description: "description",
Description: "description",
    hide_description: "hideDescription",
"hide-description": "hideDescription",
"Hide Description": "hideDescription",
hideDescription: "hideDescription",
HideDescription: "hideDescription",
p_hide_description: "hideDescription",
    p_help_text: "helpText",
"help-text": "helpText",
help_text: "helpText",
"Help Text": "helpText",
HelpText: "helpText",
helpText: "helpText",
    fields: "fields",
p_fields: "fields",
Fields: "fields",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    PublicRead: "publicRead",
"Public Read": "publicRead",
public_read: "publicRead",
publicRead: "publicRead",
"public-read": "publicRead",
p_public_read: "publicRead"
},
    containerFields: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    field_id: "fieldId",
"Field Id": "fieldId",
fieldId: "fieldId",
p_field_id: "fieldId",
"field-id": "fieldId",
FieldId: "fieldId",
    container_id: "containerId",
"container-id": "containerId",
"Container Id": "containerId",
containerId: "containerId",
p_container_id: "containerId",
ContainerId: "containerId",
    Order: "order",
p_order: "order",
order: "order"
},
    conversation: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    Metadata: "metadata",
metadata: "metadata",
p_metadata: "metadata",
    label: "label",
Label: "label",
p_label: "label",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    p_description: "description",
description: "description",
Description: "description",
    keywords: "keywords",
Keywords: "keywords",
p_keywords: "keywords",
    group: "group",
Group: "group",
p_group: "group"
},
    customAppConfigs: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    PublicRead: "publicRead",
"Public Read": "publicRead",
public_read: "publicRead",
publicRead: "publicRead",
"public-read": "publicRead",
p_public_read: "publicRead",
    name: "name",
Name: "name",
p_name: "name",
    p_description: "description",
description: "description",
Description: "description",
    Slug: "slug",
p_slug: "slug",
slug: "slug",
    p_main_app_icon: "mainAppIcon",
mainAppIcon: "mainAppIcon",
main_app_icon: "mainAppIcon",
MainAppIcon: "mainAppIcon",
"main-app-icon": "mainAppIcon",
"Main App Icon": "mainAppIcon",
    main_app_submit_icon: "mainAppSubmitIcon",
mainAppSubmitIcon: "mainAppSubmitIcon",
"main-app-submit-icon": "mainAppSubmitIcon",
MainAppSubmitIcon: "mainAppSubmitIcon",
p_main_app_submit_icon: "mainAppSubmitIcon",
"Main App Submit Icon": "mainAppSubmitIcon",
    Creator: "creator",
p_creator: "creator",
creator: "creator",
    "primary-color": "primaryColor",
"Primary Color": "primaryColor",
p_primary_color: "primaryColor",
primary_color: "primaryColor",
primaryColor: "primaryColor",
PrimaryColor: "primaryColor",
    p_accent_color: "accentColor",
AccentColor: "accentColor",
accentColor: "accentColor",
"accent-color": "accentColor",
"Accent Color": "accentColor",
accent_color: "accentColor",
    p_applet_list: "appletList",
"Applet List": "appletList",
applet_list: "appletList",
"applet-list": "appletList",
AppletList: "appletList",
appletList: "appletList",
    extraButtons: "extraButtons",
extra_buttons: "extraButtons",
ExtraButtons: "extraButtons",
p_extra_buttons: "extraButtons",
"Extra Buttons": "extraButtons",
"extra-buttons": "extraButtons",
    "layout-type": "layoutType",
p_layout_type: "layoutType",
LayoutType: "layoutType",
layout_type: "layoutType",
"Layout Type": "layoutType",
layoutType: "layoutType",
    ImageUrl: "imageUrl",
"Image Url": "imageUrl",
"image-url": "imageUrl",
p_image_url: "imageUrl",
image_url: "imageUrl",
imageUrl: "imageUrl",
    "App Data Context": "appDataContext",
AppDataContext: "appDataContext",
"app-data-context": "appDataContext",
app_data_context: "appDataContext",
p_app_data_context: "appDataContext",
appDataContext: "appDataContext"
},
    customAppletConfigs: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    PublicRead: "publicRead",
"Public Read": "publicRead",
public_read: "publicRead",
publicRead: "publicRead",
"public-read": "publicRead",
p_public_read: "publicRead",
    name: "name",
Name: "name",
p_name: "name",
    p_description: "description",
description: "description",
Description: "description",
    Slug: "slug",
p_slug: "slug",
slug: "slug",
    appletIcon: "appletIcon",
p_applet_icon: "appletIcon",
"applet-icon": "appletIcon",
AppletIcon: "appletIcon",
applet_icon: "appletIcon",
"Applet Icon": "appletIcon",
    AppletSubmitText: "appletSubmitText",
applet_submit_text: "appletSubmitText",
"Applet Submit Text": "appletSubmitText",
"applet-submit-text": "appletSubmitText",
p_applet_submit_text: "appletSubmitText",
appletSubmitText: "appletSubmitText",
    Creator: "creator",
p_creator: "creator",
creator: "creator",
    "primary-color": "primaryColor",
"Primary Color": "primaryColor",
p_primary_color: "primaryColor",
primary_color: "primaryColor",
primaryColor: "primaryColor",
PrimaryColor: "primaryColor",
    p_accent_color: "accentColor",
AccentColor: "accentColor",
accentColor: "accentColor",
"accent-color": "accentColor",
"Accent Color": "accentColor",
accent_color: "accentColor",
    "layout-type": "layoutType",
p_layout_type: "layoutType",
LayoutType: "layoutType",
layout_type: "layoutType",
"Layout Type": "layoutType",
layoutType: "layoutType",
    p_containers: "containers",
Containers: "containers",
containers: "containers",
    p_data_source_config: "dataSourceConfig",
"data-source-config": "dataSourceConfig",
"Data Source Config": "dataSourceConfig",
DataSourceConfig: "dataSourceConfig",
data_source_config: "dataSourceConfig",
dataSourceConfig: "dataSourceConfig",
    result_component_config: "resultComponentConfig",
"result-component-config": "resultComponentConfig",
p_result_component_config: "resultComponentConfig",
ResultComponentConfig: "resultComponentConfig",
resultComponentConfig: "resultComponentConfig",
"Result Component Config": "resultComponentConfig",
    next_step_config: "nextStepConfig",
"next-step-config": "nextStepConfig",
p_next_step_config: "nextStepConfig",
nextStepConfig: "nextStepConfig",
NextStepConfig: "nextStepConfig",
"Next Step Config": "nextStepConfig",
    "Compiled Recipe Id": "compiledRecipeId",
p_compiled_recipe_id: "compiledRecipeId",
compiledRecipeId: "compiledRecipeId",
CompiledRecipeId: "compiledRecipeId",
compiled_recipe_id: "compiledRecipeId",
"compiled-recipe-id": "compiledRecipeId",
    p_subcategory_id: "subcategoryId",
subcategory_id: "subcategoryId",
"Subcategory Id": "subcategoryId",
"subcategory-id": "subcategoryId",
SubcategoryId: "subcategoryId",
subcategoryId: "subcategoryId",
    ImageUrl: "imageUrl",
"Image Url": "imageUrl",
"image-url": "imageUrl",
p_image_url: "imageUrl",
image_url: "imageUrl",
imageUrl: "imageUrl",
    app_id: "appId",
p_app_id: "appId",
"app-id": "appId",
"App Id": "appId",
appId: "appId",
AppId: "appId",
    BrokerMap: "brokerMap",
"broker-map": "brokerMap",
brokerMap: "brokerMap",
p_broker_map: "brokerMap",
"Broker Map": "brokerMap",
broker_map: "brokerMap",
    "overview-label": "overviewLabel",
p_overview_label: "overviewLabel",
"Overview Label": "overviewLabel",
overviewLabel: "overviewLabel",
overview_label: "overviewLabel",
OverviewLabel: "overviewLabel",
    dataDestinationConfig: "dataDestinationConfig",
"Data Destination Config": "dataDestinationConfig",
data_destination_config: "dataDestinationConfig",
DataDestinationConfig: "dataDestinationConfig",
p_data_destination_config: "dataDestinationConfig",
"data-destination-config": "dataDestinationConfig"
},
    dataBroker: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    data_type: "dataType",
"Data Type": "dataType",
DataType: "dataType",
"data-type": "dataType",
p_data_type: "dataType",
dataType: "dataType",
    "default-value": "defaultValue",
default_value: "defaultValue",
p_default_value: "defaultValue",
DefaultValue: "defaultValue",
defaultValue: "defaultValue",
"Default Value": "defaultValue",
    InputComponent: "inputComponent",
"Input Component": "inputComponent",
input_component: "inputComponent",
"input-component": "inputComponent",
p_input_component: "inputComponent",
inputComponent: "inputComponent",
    Color: "color",
color: "color",
p_color: "color",
    output_component: "outputComponent",
outputComponent: "outputComponent",
"output-component": "outputComponent",
OutputComponent: "outputComponent",
"Output Component": "outputComponent",
p_output_component: "outputComponent",
    field_component_id: "fieldComponentId",
"field-component-id": "fieldComponentId",
FieldComponentId: "fieldComponentId",
fieldComponentId: "fieldComponentId",
p_field_component_id: "fieldComponentId",
"Field Component Id": "fieldComponentId",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    PublicRead: "publicRead",
"Public Read": "publicRead",
public_read: "publicRead",
publicRead: "publicRead",
"public-read": "publicRead",
p_public_read: "publicRead",
    defaultScope: "defaultScope",
DefaultScope: "defaultScope",
"Default Scope": "defaultScope",
"default-scope": "defaultScope",
p_default_scope: "defaultScope",
default_scope: "defaultScope"
},
    dataInputComponent: {
    p_id: "id",
Id: "id",
id: "id",
    Options: "options",
options: "options",
p_options: "options",
    "include-other": "includeOther",
include_other: "includeOther",
"Include Other": "includeOther",
IncludeOther: "includeOther",
includeOther: "includeOther",
p_include_other: "includeOther",
    Min: "min",
p_min: "min",
min: "min",
    max: "max",
Max: "max",
p_max: "max",
    step: "step",
p_step: "step",
Step: "step",
    AcceptableFiletypes: "acceptableFiletypes",
"acceptable-filetypes": "acceptableFiletypes",
acceptableFiletypes: "acceptableFiletypes",
"Acceptable Filetypes": "acceptableFiletypes",
p_acceptable_filetypes: "acceptableFiletypes",
acceptable_filetypes: "acceptableFiletypes",
    src: "src",
p_src: "src",
Src: "src",
    colorOverrides: "colorOverrides",
"color-overrides": "colorOverrides",
"Color Overrides": "colorOverrides",
color_overrides: "colorOverrides",
p_color_overrides: "colorOverrides",
ColorOverrides: "colorOverrides",
    p_additional_params: "additionalParams",
additionalParams: "additionalParams",
"Additional Params": "additionalParams",
additional_params: "additionalParams",
AdditionalParams: "additionalParams",
"additional-params": "additionalParams",
    subComponent: "subComponent",
sub_component: "subComponent",
p_sub_component: "subComponent",
"sub-component": "subComponent",
"Sub Component": "subComponent",
SubComponent: "subComponent",
    component: "component",
Component: "component",
p_component: "component",
    name: "name",
Name: "name",
p_name: "name",
    p_description: "description",
description: "description",
Description: "description",
    Placeholder: "placeholder",
placeholder: "placeholder",
p_placeholder: "placeholder",
    "Container Class Name": "containerClassName",
containerClassName: "containerClassName",
container_class_name: "containerClassName",
p_container_class_name: "containerClassName",
ContainerClassName: "containerClassName",
"container-class-name": "containerClassName",
    CollapsibleClassName: "collapsibleClassName",
collapsible_class_name: "collapsibleClassName",
p_collapsible_class_name: "collapsibleClassName",
collapsibleClassName: "collapsibleClassName",
"collapsible-class-name": "collapsibleClassName",
"Collapsible Class Name": "collapsibleClassName",
    "Label Class Name": "labelClassName",
p_label_class_name: "labelClassName",
LabelClassName: "labelClassName",
label_class_name: "labelClassName",
labelClassName: "labelClassName",
"label-class-name": "labelClassName",
    description_class_name: "descriptionClassName",
descriptionClassName: "descriptionClassName",
DescriptionClassName: "descriptionClassName",
"description-class-name": "descriptionClassName",
"Description Class Name": "descriptionClassName",
p_description_class_name: "descriptionClassName",
    ComponentClassName: "componentClassName",
componentClassName: "componentClassName",
"Component Class Name": "componentClassName",
component_class_name: "componentClassName",
p_component_class_name: "componentClassName",
"component-class-name": "componentClassName",
    p_size: "size",
Size: "size",
size: "size",
    height: "height",
Height: "height",
p_height: "height",
    width: "width",
p_width: "width",
Width: "width",
    minHeight: "minHeight",
min_height: "minHeight",
"Min Height": "minHeight",
MinHeight: "minHeight",
"min-height": "minHeight",
p_min_height: "minHeight",
    MaxHeight: "maxHeight",
max_height: "maxHeight",
"Max Height": "maxHeight",
"max-height": "maxHeight",
maxHeight: "maxHeight",
p_max_height: "maxHeight",
    p_min_width: "minWidth",
MinWidth: "minWidth",
min_width: "minWidth",
"Min Width": "minWidth",
minWidth: "minWidth",
"min-width": "minWidth",
    max_width: "maxWidth",
"Max Width": "maxWidth",
MaxWidth: "maxWidth",
maxWidth: "maxWidth",
"max-width": "maxWidth",
p_max_width: "maxWidth",
    Orientation: "orientation",
p_orientation: "orientation",
orientation: "orientation"
},
    dataOutputComponent: {
    p_id: "id",
Id: "id",
id: "id",
    componentType: "componentType",
p_component_type: "componentType",
ComponentType: "componentType",
component_type: "componentType",
"Component Type": "componentType",
"component-type": "componentType",
    ui_component: "uiComponent",
p_ui_component: "uiComponent",
UiComponent: "uiComponent",
uiComponent: "uiComponent",
"ui-component": "uiComponent",
"Ui Component": "uiComponent",
    props: "props",
Props: "props",
p_props: "props",
    p_additional_params: "additionalParams",
additionalParams: "additionalParams",
"Additional Params": "additionalParams",
additional_params: "additionalParams",
AdditionalParams: "additionalParams",
"additional-params": "additionalParams"
},
    displayOption: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_default_params: "defaultParams",
defaultParams: "defaultParams",
"default-params": "defaultParams",
default_params: "defaultParams",
"Default Params": "defaultParams",
DefaultParams: "defaultParams",
    customizable_params: "customizableParams",
"customizable-params": "customizableParams",
CustomizableParams: "customizableParams",
customizableParams: "customizableParams",
"Customizable Params": "customizableParams",
p_customizable_params: "customizableParams",
    p_additional_params: "additionalParams",
additionalParams: "additionalParams",
"Additional Params": "additionalParams",
additional_params: "additionalParams",
AdditionalParams: "additionalParams",
"additional-params": "additionalParams"
},
    emails: {
    p_id: "id",
Id: "id",
id: "id",
    p_sender: "sender",
sender: "sender",
Sender: "sender",
    Recipient: "recipient",
p_recipient: "recipient",
recipient: "recipient",
    subject: "subject",
p_subject: "subject",
Subject: "subject",
    Body: "body",
p_body: "body",
body: "body",
    Timestamp: "timestamp",
timestamp: "timestamp",
p_timestamp: "timestamp",
    p_is_read: "isRead",
"Is Read": "isRead",
is_read: "isRead",
isRead: "isRead",
IsRead: "isRead",
"is-read": "isRead"
},
    extractor: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    outputType: "outputType",
"output-type": "outputType",
"Output Type": "outputType",
OutputType: "outputType",
output_type: "outputType",
p_output_type: "outputType",
    defaultIdentifier: "defaultIdentifier",
default_identifier: "defaultIdentifier",
p_default_identifier: "defaultIdentifier",
DefaultIdentifier: "defaultIdentifier",
"default-identifier": "defaultIdentifier",
"Default Identifier": "defaultIdentifier",
    "Default Index": "defaultIndex",
"default-index": "defaultIndex",
defaultIndex: "defaultIndex",
DefaultIndex: "defaultIndex",
p_default_index: "defaultIndex",
default_index: "defaultIndex"
},
    fieldComponents: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    label: "label",
Label: "label",
p_label: "label",
    p_description: "description",
description: "description",
Description: "description",
    p_help_text: "helpText",
"help-text": "helpText",
help_text: "helpText",
"Help Text": "helpText",
HelpText: "helpText",
helpText: "helpText",
    p_component_group: "componentGroup",
"component-group": "componentGroup",
component_group: "componentGroup",
componentGroup: "componentGroup",
ComponentGroup: "componentGroup",
"Component Group": "componentGroup",
    "Icon Name": "iconName",
"icon-name": "iconName",
p_icon_name: "iconName",
iconName: "iconName",
IconName: "iconName",
icon_name: "iconName",
    component: "component",
Component: "component",
p_component: "component",
    p_required: "required",
Required: "required",
required: "required",
    Placeholder: "placeholder",
placeholder: "placeholder",
p_placeholder: "placeholder",
    "default-value": "defaultValue",
default_value: "defaultValue",
p_default_value: "defaultValue",
DefaultValue: "defaultValue",
defaultValue: "defaultValue",
"Default Value": "defaultValue",
    "include-other": "includeOther",
include_other: "includeOther",
"Include Other": "includeOther",
IncludeOther: "includeOther",
includeOther: "includeOther",
p_include_other: "includeOther",
    Options: "options",
options: "options",
p_options: "options",
    "component-props": "componentProps",
component_props: "componentProps",
p_component_props: "componentProps",
componentProps: "componentProps",
ComponentProps: "componentProps",
"Component Props": "componentProps",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    PublicRead: "publicRead",
"Public Read": "publicRead",
public_read: "publicRead",
publicRead: "publicRead",
"public-read": "publicRead",
p_public_read: "publicRead"
},
    fileStructure: {
    p_id: "id",
Id: "id",
id: "id",
    bucket_id: "bucketId",
"bucket-id": "bucketId",
p_bucket_id: "bucketId",
bucketId: "bucketId",
"Bucket Id": "bucketId",
BucketId: "bucketId",
    path: "path",
Path: "path",
p_path: "path",
    isFolder: "isFolder",
IsFolder: "isFolder",
is_folder: "isFolder",
"is-folder": "isFolder",
p_is_folder: "isFolder",
"Is Folder": "isFolder",
    "file-id": "fileId",
FileId: "fileId",
"File Id": "fileId",
file_id: "fileId",
p_file_id: "fileId",
fileId: "fileId",
    parent_path: "parentPath",
"parent-path": "parentPath",
p_parent_path: "parentPath",
"Parent Path": "parentPath",
parentPath: "parentPath",
ParentPath: "parentPath",
    name: "name",
Name: "name",
p_name: "name",
    Metadata: "metadata",
metadata: "metadata",
p_metadata: "metadata",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt"
},
    flashcardData: {
    p_id: "id",
Id: "id",
id: "id",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    Topic: "topic",
topic: "topic",
p_topic: "topic",
    lesson: "lesson",
Lesson: "lesson",
p_lesson: "lesson",
    p_difficulty: "difficulty",
difficulty: "difficulty",
Difficulty: "difficulty",
    Front: "front",
p_front: "front",
front: "front",
    p_back: "back",
Back: "back",
back: "back",
    example: "example",
p_example: "example",
Example: "example",
    "Detailed Explanation": "detailedExplanation",
"detailed-explanation": "detailedExplanation",
p_detailed_explanation: "detailedExplanation",
detailedExplanation: "detailedExplanation",
DetailedExplanation: "detailedExplanation",
detailed_explanation: "detailedExplanation",
    "audio-explanation": "audioExplanation",
AudioExplanation: "audioExplanation",
audio_explanation: "audioExplanation",
p_audio_explanation: "audioExplanation",
audioExplanation: "audioExplanation",
"Audio Explanation": "audioExplanation",
    personalNotes: "personalNotes",
p_personal_notes: "personalNotes",
"personal-notes": "personalNotes",
PersonalNotes: "personalNotes",
personal_notes: "personalNotes",
"Personal Notes": "personalNotes",
    isDeleted: "isDeleted",
p_is_deleted: "isDeleted",
IsDeleted: "isDeleted",
is_deleted: "isDeleted",
"Is Deleted": "isDeleted",
"is-deleted": "isDeleted",
    public: "public",
p_public: "public",
Public: "public",
    "Shared With": "sharedWith",
sharedWith: "sharedWith",
shared_with: "sharedWith",
SharedWith: "sharedWith",
p_shared_with: "sharedWith",
"shared-with": "sharedWith",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt"
},
    flashcardHistory: {
    p_id: "id",
Id: "id",
id: "id",
    flashcardId: "flashcardId",
FlashcardId: "flashcardId",
"flashcard-id": "flashcardId",
flashcard_id: "flashcardId",
p_flashcard_id: "flashcardId",
"Flashcard Id": "flashcardId",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_review_count: "reviewCount",
review_count: "reviewCount",
ReviewCount: "reviewCount",
"review-count": "reviewCount",
reviewCount: "reviewCount",
"Review Count": "reviewCount",
    "Correct Count": "correctCount",
correctCount: "correctCount",
"correct-count": "correctCount",
correct_count: "correctCount",
CorrectCount: "correctCount",
p_correct_count: "correctCount",
    p_incorrect_count: "incorrectCount",
incorrectCount: "incorrectCount",
incorrect_count: "incorrectCount",
"Incorrect Count": "incorrectCount",
"incorrect-count": "incorrectCount",
IncorrectCount: "incorrectCount",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt"
},
    flashcardImages: {
    p_id: "id",
Id: "id",
id: "id",
    flashcardId: "flashcardId",
FlashcardId: "flashcardId",
"flashcard-id": "flashcardId",
flashcard_id: "flashcardId",
p_flashcard_id: "flashcardId",
"Flashcard Id": "flashcardId",
    "file-path": "filePath",
FilePath: "filePath",
p_file_path: "filePath",
file_path: "filePath",
"File Path": "filePath",
filePath: "filePath",
    FileName: "fileName",
"file-name": "fileName",
fileName: "fileName",
file_name: "fileName",
p_file_name: "fileName",
"File Name": "fileName",
    mime_type: "mimeType",
p_mime_type: "mimeType",
MimeType: "mimeType",
"mime-type": "mimeType",
mimeType: "mimeType",
"Mime Type": "mimeType",
    p_size: "size",
Size: "size",
size: "size",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt"
},
    flashcardSetRelations: {
    flashcardId: "flashcardId",
FlashcardId: "flashcardId",
"flashcard-id": "flashcardId",
flashcard_id: "flashcardId",
p_flashcard_id: "flashcardId",
"Flashcard Id": "flashcardId",
    setId: "setId",
"set-id": "setId",
"Set Id": "setId",
p_set_id: "setId",
set_id: "setId",
SetId: "setId",
    Order: "order",
p_order: "order",
order: "order"
},
    flashcardSets: {
    setId: "setId",
"set-id": "setId",
"Set Id": "setId",
p_set_id: "setId",
set_id: "setId",
SetId: "setId",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    name: "name",
Name: "name",
p_name: "name",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    "Shared With": "sharedWith",
sharedWith: "sharedWith",
shared_with: "sharedWith",
SharedWith: "sharedWith",
p_shared_with: "sharedWith",
"shared-with": "sharedWith",
    public: "public",
p_public: "public",
Public: "public",
    Topic: "topic",
topic: "topic",
p_topic: "topic",
    lesson: "lesson",
Lesson: "lesson",
p_lesson: "lesson",
    p_difficulty: "difficulty",
difficulty: "difficulty",
Difficulty: "difficulty",
    p_audio_overview: "audioOverview",
"Audio Overview": "audioOverview",
AudioOverview: "audioOverview",
audio_overview: "audioOverview",
audioOverview: "audioOverview",
"audio-overview": "audioOverview"
},
    fullSpectrumPositions: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    Title: "title",
title: "title",
p_title: "title",
    p_description: "description",
description: "description",
Description: "description",
    AlternateTitles: "alternateTitles",
p_alternate_titles: "alternateTitles",
"alternate-titles": "alternateTitles",
alternate_titles: "alternateTitles",
alternateTitles: "alternateTitles",
"Alternate Titles": "alternateTitles",
    Qualifications: "qualifications",
p_qualifications: "qualifications",
qualifications: "qualifications",
    sizzleQuestions: "sizzleQuestions",
"Sizzle Questions": "sizzleQuestions",
"sizzle-questions": "sizzleQuestions",
p_sizzle_questions: "sizzleQuestions",
SizzleQuestions: "sizzleQuestions",
sizzle_questions: "sizzleQuestions",
    RedFlags: "redFlags",
"red-flags": "redFlags",
red_flags: "redFlags",
"Red Flags": "redFlags",
p_red_flags: "redFlags",
redFlags: "redFlags",
    additionalDetails: "additionalDetails",
additional_details: "additionalDetails",
"Additional Details": "additionalDetails",
"additional-details": "additionalDetails",
p_additional_details: "additionalDetails",
AdditionalDetails: "additionalDetails"
},
    htmlExtractions: {
    p_id: "id",
Id: "id",
id: "id",
    url: "url",
Url: "url",
p_url: "url",
    Title: "title",
title: "title",
p_title: "title",
    "html-content": "htmlContent",
html_content: "htmlContent",
p_html_content: "htmlContent",
HtmlContent: "htmlContent",
htmlContent: "htmlContent",
"Html Content": "htmlContent",
    meta_description: "metaDescription",
MetaDescription: "metaDescription",
metaDescription: "metaDescription",
"meta-description": "metaDescription",
"Meta Description": "metaDescription",
p_meta_description: "metaDescription",
    p_meta_keywords: "metaKeywords",
metaKeywords: "metaKeywords",
MetaKeywords: "metaKeywords",
meta_keywords: "metaKeywords",
"Meta Keywords": "metaKeywords",
"meta-keywords": "metaKeywords",
    "Content Length": "contentLength",
p_content_length: "contentLength",
contentLength: "contentLength",
ContentLength: "contentLength",
content_length: "contentLength",
"content-length": "contentLength",
    extractedAt: "extractedAt",
ExtractedAt: "extractedAt",
extracted_at: "extractedAt",
"Extracted At": "extractedAt",
"extracted-at": "extractedAt",
p_extracted_at: "extractedAt",
    "user-agent": "userAgent",
user_agent: "userAgent",
UserAgent: "userAgent",
p_user_agent: "userAgent",
"User Agent": "userAgent",
userAgent: "userAgent",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId"
},
    message: {
    p_id: "id",
Id: "id",
id: "id",
    conversation_id: "conversationId",
"Conversation Id": "conversationId",
"conversation-id": "conversationId",
conversationId: "conversationId",
p_conversation_id: "conversationId",
ConversationId: "conversationId",
    role: "role",
p_role: "role",
Role: "role",
    p_content: "content",
Content: "content",
content: "content",
    type: "type",
Type: "type",
p_type: "type",
    DisplayOrder: "displayOrder",
displayOrder: "displayOrder",
display_order: "displayOrder",
"Display Order": "displayOrder",
p_display_order: "displayOrder",
"display-order": "displayOrder",
    system_order: "systemOrder",
p_system_order: "systemOrder",
"system-order": "systemOrder",
"System Order": "systemOrder",
systemOrder: "systemOrder",
SystemOrder: "systemOrder",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    Metadata: "metadata",
metadata: "metadata",
p_metadata: "metadata",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic"
},
    messageBroker: {
    p_id: "id",
Id: "id",
id: "id",
    "message-id": "messageId",
message_id: "messageId",
"Message Id": "messageId",
MessageId: "messageId",
p_message_id: "messageId",
messageId: "messageId",
    brokerId: "brokerId",
p_broker_id: "brokerId",
BrokerId: "brokerId",
broker_id: "brokerId",
"Broker Id": "brokerId",
"broker-id": "brokerId",
    "default-value": "defaultValue",
default_value: "defaultValue",
p_default_value: "defaultValue",
DefaultValue: "defaultValue",
defaultValue: "defaultValue",
"Default Value": "defaultValue",
    "Default Component": "defaultComponent",
p_default_component: "defaultComponent",
DefaultComponent: "defaultComponent",
"default-component": "defaultComponent",
default_component: "defaultComponent",
defaultComponent: "defaultComponent"
},
    messageTemplate: {
    p_id: "id",
Id: "id",
id: "id",
    role: "role",
p_role: "role",
Role: "role",
    type: "type",
Type: "type",
p_type: "type",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    p_content: "content",
Content: "content",
content: "content"
},
    organizationInvitations: {
    p_id: "id",
Id: "id",
id: "id",
    organization_id: "organizationId",
OrganizationId: "organizationId",
"Organization Id": "organizationId",
p_organization_id: "organizationId",
organizationId: "organizationId",
"organization-id": "organizationId",
    Email: "email",
email: "email",
p_email: "email",
    p_token: "token",
Token: "token",
token: "token",
    role: "role",
p_role: "role",
Role: "role",
    "invited-at": "invitedAt",
invitedAt: "invitedAt",
"Invited At": "invitedAt",
InvitedAt: "invitedAt",
p_invited_at: "invitedAt",
invited_at: "invitedAt",
    invitedBy: "invitedBy",
"invited-by": "invitedBy",
"Invited By": "invitedBy",
invited_by: "invitedBy",
InvitedBy: "invitedBy",
p_invited_by: "invitedBy",
    p_expires_at: "expiresAt",
"Expires At": "expiresAt",
expires_at: "expiresAt",
"expires-at": "expiresAt",
ExpiresAt: "expiresAt",
expiresAt: "expiresAt"
},
    organizationMembers: {
    p_id: "id",
Id: "id",
id: "id",
    organization_id: "organizationId",
OrganizationId: "organizationId",
"Organization Id": "organizationId",
p_organization_id: "organizationId",
organizationId: "organizationId",
"organization-id": "organizationId",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    role: "role",
p_role: "role",
Role: "role",
    p_joined_at: "joinedAt",
joinedAt: "joinedAt",
"Joined At": "joinedAt",
JoinedAt: "joinedAt",
"joined-at": "joinedAt",
joined_at: "joinedAt",
    invitedBy: "invitedBy",
"invited-by": "invitedBy",
"Invited By": "invitedBy",
invited_by: "invitedBy",
InvitedBy: "invitedBy",
p_invited_by: "invitedBy"
},
    organizations: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    Slug: "slug",
p_slug: "slug",
slug: "slug",
    p_description: "description",
description: "description",
Description: "description",
    LogoUrl: "logoUrl",
p_logo_url: "logoUrl",
logoUrl: "logoUrl",
"logo-url": "logoUrl",
logo_url: "logoUrl",
"Logo Url": "logoUrl",
    website: "website",
p_website: "website",
Website: "website",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    "Created By": "createdBy",
CreatedBy: "createdBy",
created_by: "createdBy",
"created-by": "createdBy",
createdBy: "createdBy",
p_created_by: "createdBy",
    is_personal: "isPersonal",
"is-personal": "isPersonal",
isPersonal: "isPersonal",
p_is_personal: "isPersonal",
"Is Personal": "isPersonal",
IsPersonal: "isPersonal",
    p_settings: "settings",
Settings: "settings",
settings: "settings"
},
    permissions: {
    p_id: "id",
Id: "id",
id: "id",
    p_resource_type: "resourceType",
resource_type: "resourceType",
ResourceType: "resourceType",
resourceType: "resourceType",
"resource-type": "resourceType",
"Resource Type": "resourceType",
    p_resource_id: "resourceId",
resourceId: "resourceId",
ResourceId: "resourceId",
"Resource Id": "resourceId",
resource_id: "resourceId",
"resource-id": "resourceId",
    "Granted To User Id": "grantedToUserId",
"granted-to-user-id": "grantedToUserId",
p_granted_to_user_id: "grantedToUserId",
granted_to_user_id: "grantedToUserId",
GrantedToUserId: "grantedToUserId",
grantedToUserId: "grantedToUserId",
    "Granted To Organization Id": "grantedToOrganizationId",
granted_to_organization_id: "grantedToOrganizationId",
p_granted_to_organization_id: "grantedToOrganizationId",
grantedToOrganizationId: "grantedToOrganizationId",
GrantedToOrganizationId: "grantedToOrganizationId",
"granted-to-organization-id": "grantedToOrganizationId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    "Permission Level": "permissionLevel",
"permission-level": "permissionLevel",
p_permission_level: "permissionLevel",
permission_level: "permissionLevel",
permissionLevel: "permissionLevel",
PermissionLevel: "permissionLevel",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "Created By": "createdBy",
CreatedBy: "createdBy",
created_by: "createdBy",
"created-by": "createdBy",
createdBy: "createdBy",
p_created_by: "createdBy"
},
    processor: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    "depends-default": "dependsDefault",
DependsDefault: "dependsDefault",
p_depends_default: "dependsDefault",
depends_default: "dependsDefault",
dependsDefault: "dependsDefault",
"Depends Default": "dependsDefault",
    "Default Extractors": "defaultExtractors",
"default-extractors": "defaultExtractors",
default_extractors: "defaultExtractors",
defaultExtractors: "defaultExtractors",
p_default_extractors: "defaultExtractors",
DefaultExtractors: "defaultExtractors",
    Params: "params",
p_params: "params",
params: "params"
},
    projectMembers: {
    p_id: "id",
Id: "id",
id: "id",
    projectId: "projectId",
"project-id": "projectId",
"Project Id": "projectId",
project_id: "projectId",
p_project_id: "projectId",
ProjectId: "projectId",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    role: "role",
p_role: "role",
Role: "role",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt"
},
    projects: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_description: "description",
description: "description",
Description: "description",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    "Created By": "createdBy",
CreatedBy: "createdBy",
created_by: "createdBy",
"created-by": "createdBy",
createdBy: "createdBy",
p_created_by: "createdBy"
},
    prompts: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    name: "name",
Name: "name",
p_name: "name",
    p_messages: "messages",
messages: "messages",
Messages: "messages",
    variableDefaults: "variableDefaults",
p_variable_defaults: "variableDefaults",
"Variable Defaults": "variableDefaults",
variable_defaults: "variableDefaults",
VariableDefaults: "variableDefaults",
"variable-defaults": "variableDefaults",
    p_tools: "tools",
tools: "tools",
Tools: "tools",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    PublicRead: "publicRead",
"Public Read": "publicRead",
public_read: "publicRead",
publicRead: "publicRead",
"public-read": "publicRead",
p_public_read: "publicRead"
},
    recipe: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_description: "description",
description: "description",
Description: "description",
    tags: "tags",
p_tags: "tags",
Tags: "tags",
    "sample-output": "sampleOutput",
sample_output: "sampleOutput",
SampleOutput: "sampleOutput",
p_sample_output: "sampleOutput",
"Sample Output": "sampleOutput",
sampleOutput: "sampleOutput",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    p_status: "status",
Status: "status",
status: "status",
    p_version: "version",
Version: "version",
version: "version",
    "post-result-options": "postResultOptions",
PostResultOptions: "postResultOptions",
post_result_options: "postResultOptions",
p_post_result_options: "postResultOptions",
"Post Result Options": "postResultOptions",
postResultOptions: "postResultOptions",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId"
},
    recipeBroker: {
    p_id: "id",
Id: "id",
id: "id",
    recipe: "recipe",
Recipe: "recipe",
p_recipe: "recipe",
    Broker: "broker",
p_broker: "broker",
broker: "broker",
    broker_role: "brokerRole",
"Broker Role": "brokerRole",
p_broker_role: "brokerRole",
BrokerRole: "brokerRole",
brokerRole: "brokerRole",
"broker-role": "brokerRole",
    p_required: "required",
Required: "required",
required: "required"
},
    recipeDisplay: {
    p_id: "id",
Id: "id",
id: "id",
    recipe: "recipe",
Recipe: "recipe",
p_recipe: "recipe",
    Display: "display",
p_display: "display",
display: "display",
    priority: "priority",
Priority: "priority",
p_priority: "priority",
    display_settings: "displaySettings",
"display-settings": "displaySettings",
"Display Settings": "displaySettings",
displaySettings: "displaySettings",
DisplaySettings: "displaySettings",
p_display_settings: "displaySettings"
},
    recipeFunction: {
    p_id: "id",
Id: "id",
id: "id",
    recipe: "recipe",
Recipe: "recipe",
p_recipe: "recipe",
    Function: "function",
p_function: "function",
function: "function",
    role: "role",
p_role: "role",
Role: "role",
    Params: "params",
p_params: "params",
params: "params"
},
    recipeMessage: {
    p_id: "id",
Id: "id",
id: "id",
    "message-id": "messageId",
message_id: "messageId",
"Message Id": "messageId",
MessageId: "messageId",
p_message_id: "messageId",
messageId: "messageId",
    recipe_id: "recipeId",
RecipeId: "recipeId",
"recipe-id": "recipeId",
recipeId: "recipeId",
"Recipe Id": "recipeId",
p_recipe_id: "recipeId",
    Order: "order",
p_order: "order",
order: "order"
},
    recipeMessageReorderQueue: {
    recipe_id: "recipeId",
RecipeId: "recipeId",
"recipe-id": "recipeId",
recipeId: "recipeId",
"Recipe Id": "recipeId",
p_recipe_id: "recipeId",
    "Last Modified": "lastModified",
LastModified: "lastModified",
"last-modified": "lastModified",
last_modified: "lastModified",
p_last_modified: "lastModified",
lastModified: "lastModified"
},
    recipeModel: {
    p_id: "id",
Id: "id",
id: "id",
    recipe: "recipe",
Recipe: "recipe",
p_recipe: "recipe",
    ai_model: "aiModel",
"Ai Model": "aiModel",
aiModel: "aiModel",
p_ai_model: "aiModel",
"ai-model": "aiModel",
AiModel: "aiModel",
    role: "role",
p_role: "role",
Role: "role",
    priority: "priority",
Priority: "priority",
p_priority: "priority"
},
    recipeProcessor: {
    p_id: "id",
Id: "id",
id: "id",
    recipe: "recipe",
Recipe: "recipe",
p_recipe: "recipe",
    p_processor: "processor",
Processor: "processor",
processor: "processor",
    Params: "params",
p_params: "params",
params: "params"
},
    recipeTool: {
    p_id: "id",
Id: "id",
id: "id",
    recipe: "recipe",
Recipe: "recipe",
p_recipe: "recipe",
    p_tool: "tool",
tool: "tool",
Tool: "tool",
    Params: "params",
p_params: "params",
params: "params"
},
    registeredFunction: {
    p_id: "id",
Id: "id",
id: "id",
    func_name: "funcName",
"func-name": "funcName",
"Func Name": "funcName",
funcName: "funcName",
p_func_name: "funcName",
FuncName: "funcName",
    "Module Path": "modulePath",
p_module_path: "modulePath",
"module-path": "modulePath",
modulePath: "modulePath",
module_path: "modulePath",
ModulePath: "modulePath",
    ClassName: "className",
className: "className",
p_class_name: "className",
"Class Name": "className",
"class-name": "className",
class_name: "className",
    p_description: "description",
description: "description",
Description: "description",
    "Return Broker": "returnBroker",
return_broker: "returnBroker",
ReturnBroker: "returnBroker",
"return-broker": "returnBroker",
p_return_broker: "returnBroker",
returnBroker: "returnBroker",
    name: "name",
Name: "name",
p_name: "name",
    tags: "tags",
p_tags: "tags",
Tags: "tags",
    Category: "category",
category: "category",
p_category: "category",
    Icon: "icon",
p_icon: "icon",
icon: "icon",
    "node-description": "nodeDescription",
NodeDescription: "nodeDescription",
nodeDescription: "nodeDescription",
"Node Description": "nodeDescription",
node_description: "nodeDescription",
p_node_description: "nodeDescription"
},
    schemaTemplates: {
    p_id: "id",
Id: "id",
id: "id",
    template_name: "templateName",
TemplateName: "templateName",
p_template_name: "templateName",
templateName: "templateName",
"template-name": "templateName",
"Template Name": "templateName",
    p_description: "description",
description: "description",
Description: "description",
    fields: "fields",
p_fields: "fields",
Fields: "fields",
    p_version: "version",
Version: "version",
version: "version",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt"
},
    scrapeBaseConfig: {
    p_id: "id",
Id: "id",
id: "id",
    "selector-type": "selectorType",
"Selector Type": "selectorType",
p_selector_type: "selectorType",
selectorType: "selectorType",
SelectorType: "selectorType",
selector_type: "selectorType",
    Exact: "exact",
exact: "exact",
p_exact: "exact",
    partial: "partial",
p_partial: "partial",
Partial: "partial",
    Regex: "regex",
p_regex: "regex",
regex: "regex",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeCachePolicy: {
    p_id: "id",
Id: "id",
id: "id",
    "Rescrape After": "rescrapeAfter",
rescrapeAfter: "rescrapeAfter",
"rescrape-after": "rescrapeAfter",
p_rescrape_after: "rescrapeAfter",
RescrapeAfter: "rescrapeAfter",
rescrape_after: "rescrapeAfter",
    "stale-after": "staleAfter",
p_stale_after: "staleAfter",
stale_after: "staleAfter",
"Stale After": "staleAfter",
staleAfter: "staleAfter",
StaleAfter: "staleAfter",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeConfiguration: {
    p_id: "id",
Id: "id",
id: "id",
    ScrapeMode: "scrapeMode",
scrapeMode: "scrapeMode",
p_scrape_mode: "scrapeMode",
"Scrape Mode": "scrapeMode",
scrape_mode: "scrapeMode",
"scrape-mode": "scrapeMode",
    interaction_settings_id: "interactionSettingsId",
interactionSettingsId: "interactionSettingsId",
p_interaction_settings_id: "interactionSettingsId",
InteractionSettingsId: "interactionSettingsId",
"Interaction Settings Id": "interactionSettingsId",
"interaction-settings-id": "interactionSettingsId",
    "scrape-path-pattern-id": "scrapePathPatternId",
scrapePathPatternId: "scrapePathPatternId",
ScrapePathPatternId: "scrapePathPatternId",
"Scrape Path Pattern Id": "scrapePathPatternId",
scrape_path_pattern_id: "scrapePathPatternId",
p_scrape_path_pattern_id: "scrapePathPatternId",
    isActive: "isActive",
is_active: "isActive",
"is-active": "isActive",
p_is_active: "isActive",
IsActive: "isActive",
"Is Active": "isActive",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeCycleRun: {
    p_id: "id",
Id: "id",
id: "id",
    "Scrape Cycle Tracker Id": "scrapeCycleTrackerId",
scrape_cycle_tracker_id: "scrapeCycleTrackerId",
scrapeCycleTrackerId: "scrapeCycleTrackerId",
p_scrape_cycle_tracker_id: "scrapeCycleTrackerId",
"scrape-cycle-tracker-id": "scrapeCycleTrackerId",
ScrapeCycleTrackerId: "scrapeCycleTrackerId",
    p_run_number: "runNumber",
"run-number": "runNumber",
runNumber: "runNumber",
run_number: "runNumber",
RunNumber: "runNumber",
"Run Number": "runNumber",
    CompletedAt: "completedAt",
completedAt: "completedAt",
"Completed At": "completedAt",
"completed-at": "completedAt",
completed_at: "completedAt",
p_completed_at: "completedAt",
    "allow-pattern": "allowPattern",
p_allow_pattern: "allowPattern",
AllowPattern: "allowPattern",
allowPattern: "allowPattern",
"Allow Pattern": "allowPattern",
allow_pattern: "allowPattern",
    DisallowPatterns: "disallowPatterns",
disallow_patterns: "disallowPatterns",
"disallow-patterns": "disallowPatterns",
disallowPatterns: "disallowPatterns",
"Disallow Patterns": "disallowPatterns",
p_disallow_patterns: "disallowPatterns",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeCycleTracker: {
    p_id: "id",
Id: "id",
id: "id",
    TargetUrl: "targetUrl",
target_url: "targetUrl",
p_target_url: "targetUrl",
"target-url": "targetUrl",
targetUrl: "targetUrl",
"Target Url": "targetUrl",
    page_name: "pageName",
"Page Name": "pageName",
PageName: "pageName",
"page-name": "pageName",
p_page_name: "pageName",
pageName: "pageName",
    "scrape-path-pattern-cache-policy-id": "scrapePathPatternCachePolicyId",
p_scrape_path_pattern_cache_policy_id: "scrapePathPatternCachePolicyId",
scrape_path_pattern_cache_policy_id: "scrapePathPatternCachePolicyId",
ScrapePathPatternCachePolicyId: "scrapePathPatternCachePolicyId",
scrapePathPatternCachePolicyId: "scrapePathPatternCachePolicyId",
"Scrape Path Pattern Cache Policy Id": "scrapePathPatternCachePolicyId",
    "Scrape Job Id": "scrapeJobId",
"scrape-job-id": "scrapeJobId",
scrapeJobId: "scrapeJobId",
ScrapeJobId: "scrapeJobId",
scrape_job_id: "scrapeJobId",
p_scrape_job_id: "scrapeJobId",
    last_run_at: "lastRunAt",
"last-run-at": "lastRunAt",
lastRunAt: "lastRunAt",
p_last_run_at: "lastRunAt",
LastRunAt: "lastRunAt",
"Last Run At": "lastRunAt",
    p_next_run_at: "nextRunAt",
"Next Run At": "nextRunAt",
nextRunAt: "nextRunAt",
"next-run-at": "nextRunAt",
NextRunAt: "nextRunAt",
next_run_at: "nextRunAt",
    isActive: "isActive",
is_active: "isActive",
"is-active": "isActive",
p_is_active: "isActive",
IsActive: "isActive",
"Is Active": "isActive",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeDomain: {
    p_id: "id",
Id: "id",
id: "id",
    url: "url",
Url: "url",
p_url: "url",
    commonName: "commonName",
"Common Name": "commonName",
CommonName: "commonName",
p_common_name: "commonName",
common_name: "commonName",
"common-name": "commonName",
    scrape_allowed: "scrapeAllowed",
p_scrape_allowed: "scrapeAllowed",
"Scrape Allowed": "scrapeAllowed",
"scrape-allowed": "scrapeAllowed",
ScrapeAllowed: "scrapeAllowed",
scrapeAllowed: "scrapeAllowed",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeDomainDisallowedNotes: {
    p_id: "id",
Id: "id",
id: "id",
    p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
"Scrape Domain Id": "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    p_notes: "notes",
notes: "notes",
Notes: "notes",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeDomainNotes: {
    p_id: "id",
Id: "id",
id: "id",
    p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
"Scrape Domain Id": "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    p_notes: "notes",
notes: "notes",
Notes: "notes",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeDomainQuickScrapeSettings: {
    p_id: "id",
Id: "id",
id: "id",
    p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
"Scrape Domain Id": "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    p_enabled: "enabled",
Enabled: "enabled",
enabled: "enabled",
    "Proxy Type": "proxyType",
"proxy-type": "proxyType",
ProxyType: "proxyType",
p_proxy_type: "proxyType",
proxyType: "proxyType",
proxy_type: "proxyType",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeDomainRobotsTxt: {
    p_id: "id",
Id: "id",
id: "id",
    p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
"Scrape Domain Id": "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    RobotsTxt: "robotsTxt",
robotsTxt: "robotsTxt",
p_robots_txt: "robotsTxt",
"Robots Txt": "robotsTxt",
robots_txt: "robotsTxt",
"robots-txt": "robotsTxt",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeDomainSitemap: {
    p_id: "id",
Id: "id",
id: "id",
    p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
"Scrape Domain Id": "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    p_sitemap: "sitemap",
sitemap: "sitemap",
Sitemap: "sitemap",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeJob: {
    p_id: "id",
Id: "id",
id: "id",
    p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
"Scrape Domain Id": "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    start_urls: "startUrls",
StartUrls: "startUrls",
startUrls: "startUrls",
p_start_urls: "startUrls",
"start-urls": "startUrls",
"Start Urls": "startUrls",
    "scrape-status": "scrapeStatus",
scrape_status: "scrapeStatus",
p_scrape_status: "scrapeStatus",
"Scrape Status": "scrapeStatus",
scrapeStatus: "scrapeStatus",
ScrapeStatus: "scrapeStatus",
    parse_status: "parseStatus",
p_parse_status: "parseStatus",
ParseStatus: "parseStatus",
parseStatus: "parseStatus",
"parse-status": "parseStatus",
"Parse Status": "parseStatus",
    p_attempt_limit: "attemptLimit",
"Attempt Limit": "attemptLimit",
attemptLimit: "attemptLimit",
AttemptLimit: "attemptLimit",
attempt_limit: "attemptLimit",
"attempt-limit": "attemptLimit",
    "started-at": "startedAt",
StartedAt: "startedAt",
"Started At": "startedAt",
startedAt: "startedAt",
started_at: "startedAt",
p_started_at: "startedAt",
    FinishedAt: "finishedAt",
p_finished_at: "finishedAt",
"finished-at": "finishedAt",
finished_at: "finishedAt",
"Finished At": "finishedAt",
finishedAt: "finishedAt",
    name: "name",
Name: "name",
p_name: "name",
    p_description: "description",
description: "description",
Description: "description",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeOverride: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    "config-type": "configType",
"Config Type": "configType",
ConfigType: "configType",
configType: "configType",
config_type: "configType",
p_config_type: "configType",
    "selector-type": "selectorType",
"Selector Type": "selectorType",
p_selector_type: "selectorType",
selectorType: "selectorType",
SelectorType: "selectorType",
selector_type: "selectorType",
    "match-type": "matchType",
match_type: "matchType",
p_match_type: "matchType",
matchType: "matchType",
MatchType: "matchType",
"Match Type": "matchType",
    p_action: "action",
Action: "action",
action: "action",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeOverrideValue: {
    p_id: "id",
Id: "id",
id: "id",
    Value: "value",
value: "value",
p_value: "value",
    "Scrape Override Id": "scrapeOverrideId",
p_scrape_override_id: "scrapeOverrideId",
scrapeOverrideId: "scrapeOverrideId",
ScrapeOverrideId: "scrapeOverrideId",
scrape_override_id: "scrapeOverrideId",
"scrape-override-id": "scrapeOverrideId",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeParsedPage: {
    p_id: "id",
Id: "id",
id: "id",
    page_name: "pageName",
"Page Name": "pageName",
PageName: "pageName",
"page-name": "pageName",
p_page_name: "pageName",
pageName: "pageName",
    p_validity: "validity",
Validity: "validity",
validity: "validity",
    "remote-path": "remotePath",
remotePath: "remotePath",
RemotePath: "remotePath",
"Remote Path": "remotePath",
remote_path: "remotePath",
p_remote_path: "remotePath",
    "Local Path": "localPath",
local_path: "localPath",
localPath: "localPath",
"local-path": "localPath",
LocalPath: "localPath",
p_local_path: "localPath",
    "scrape-path-pattern-cache-policy-id": "scrapePathPatternCachePolicyId",
p_scrape_path_pattern_cache_policy_id: "scrapePathPatternCachePolicyId",
scrape_path_pattern_cache_policy_id: "scrapePathPatternCachePolicyId",
ScrapePathPatternCachePolicyId: "scrapePathPatternCachePolicyId",
scrapePathPatternCachePolicyId: "scrapePathPatternCachePolicyId",
"Scrape Path Pattern Cache Policy Id": "scrapePathPatternCachePolicyId",
    ScrapeTaskId: "scrapeTaskId",
"Scrape Task Id": "scrapeTaskId",
p_scrape_task_id: "scrapeTaskId",
"scrape-task-id": "scrapeTaskId",
scrape_task_id: "scrapeTaskId",
scrapeTaskId: "scrapeTaskId",
    scrape_task_response_id: "scrapeTaskResponseId",
"Scrape Task Response Id": "scrapeTaskResponseId",
"scrape-task-response-id": "scrapeTaskResponseId",
p_scrape_task_response_id: "scrapeTaskResponseId",
ScrapeTaskResponseId: "scrapeTaskResponseId",
scrapeTaskResponseId: "scrapeTaskResponseId",
    scrape_cycle_run_id: "scrapeCycleRunId",
"Scrape Cycle Run Id": "scrapeCycleRunId",
scrapeCycleRunId: "scrapeCycleRunId",
ScrapeCycleRunId: "scrapeCycleRunId",
p_scrape_cycle_run_id: "scrapeCycleRunId",
"scrape-cycle-run-id": "scrapeCycleRunId",
    "Scrape Cycle Tracker Id": "scrapeCycleTrackerId",
scrape_cycle_tracker_id: "scrapeCycleTrackerId",
scrapeCycleTrackerId: "scrapeCycleTrackerId",
p_scrape_cycle_tracker_id: "scrapeCycleTrackerId",
"scrape-cycle-tracker-id": "scrapeCycleTrackerId",
ScrapeCycleTrackerId: "scrapeCycleTrackerId",
    scrapeConfigurationId: "scrapeConfigurationId",
ScrapeConfigurationId: "scrapeConfigurationId",
scrape_configuration_id: "scrapeConfigurationId",
"Scrape Configuration Id": "scrapeConfigurationId",
"scrape-configuration-id": "scrapeConfigurationId",
p_scrape_configuration_id: "scrapeConfigurationId",
    scrapePathPatternOverrideId: "scrapePathPatternOverrideId",
p_scrape_path_pattern_override_id: "scrapePathPatternOverrideId",
"scrape-path-pattern-override-id": "scrapePathPatternOverrideId",
scrape_path_pattern_override_id: "scrapePathPatternOverrideId",
"Scrape Path Pattern Override Id": "scrapePathPatternOverrideId",
ScrapePathPatternOverrideId: "scrapePathPatternOverrideId",
    scraped_at: "scrapedAt",
ScrapedAt: "scrapedAt",
"scraped-at": "scrapedAt",
p_scraped_at: "scrapedAt",
"Scraped At": "scrapedAt",
scrapedAt: "scrapedAt",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    p_expires_at: "expiresAt",
"Expires At": "expiresAt",
expires_at: "expiresAt",
"expires-at": "expiresAt",
ExpiresAt: "expiresAt",
expiresAt: "expiresAt"
},
    scrapePathPattern: {
    p_id: "id",
Id: "id",
id: "id",
    p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
"Scrape Domain Id": "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    p_path_pattern: "pathPattern",
PathPattern: "pathPattern",
"path-pattern": "pathPattern",
pathPattern: "pathPattern",
"Path Pattern": "pathPattern",
path_pattern: "pathPattern",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapePathPatternCachePolicy: {
    p_id: "id",
Id: "id",
id: "id",
    p_scrape_cache_policy_id: "scrapeCachePolicyId",
scrapeCachePolicyId: "scrapeCachePolicyId",
scrape_cache_policy_id: "scrapeCachePolicyId",
"scrape-cache-policy-id": "scrapeCachePolicyId",
ScrapeCachePolicyId: "scrapeCachePolicyId",
"Scrape Cache Policy Id": "scrapeCachePolicyId",
    "scrape-path-pattern-id": "scrapePathPatternId",
scrapePathPatternId: "scrapePathPatternId",
ScrapePathPatternId: "scrapePathPatternId",
"Scrape Path Pattern Id": "scrapePathPatternId",
scrape_path_pattern_id: "scrapePathPatternId",
p_scrape_path_pattern_id: "scrapePathPatternId",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapePathPatternOverride: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    "scrape-path-pattern-id": "scrapePathPatternId",
scrapePathPatternId: "scrapePathPatternId",
ScrapePathPatternId: "scrapePathPatternId",
"Scrape Path Pattern Id": "scrapePathPatternId",
scrape_path_pattern_id: "scrapePathPatternId",
p_scrape_path_pattern_id: "scrapePathPatternId",
    "Scrape Override Id": "scrapeOverrideId",
p_scrape_override_id: "scrapeOverrideId",
scrapeOverrideId: "scrapeOverrideId",
ScrapeOverrideId: "scrapeOverrideId",
scrape_override_id: "scrapeOverrideId",
"scrape-override-id": "scrapeOverrideId",
    isActive: "isActive",
is_active: "isActive",
"is-active": "isActive",
p_is_active: "isActive",
IsActive: "isActive",
"Is Active": "isActive",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeQuickFailureLog: {
    p_id: "id",
Id: "id",
id: "id",
    p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
"Scrape Domain Id": "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    domain_name: "domainName",
"domain-name": "domainName",
"Domain Name": "domainName",
domainName: "domainName",
p_domain_name: "domainName",
DomainName: "domainName",
    TargetUrl: "targetUrl",
target_url: "targetUrl",
p_target_url: "targetUrl",
"target-url": "targetUrl",
targetUrl: "targetUrl",
"Target Url": "targetUrl",
    failureReason: "failureReason",
"Failure Reason": "failureReason",
FailureReason: "failureReason",
failure_reason: "failureReason",
p_failure_reason: "failureReason",
"failure-reason": "failureReason",
    errorLog: "errorLog",
ErrorLog: "errorLog",
error_log: "errorLog",
p_error_log: "errorLog",
"error-log": "errorLog",
"Error Log": "errorLog",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeTask: {
    p_id: "id",
Id: "id",
id: "id",
    TargetUrl: "targetUrl",
target_url: "targetUrl",
p_target_url: "targetUrl",
"target-url": "targetUrl",
targetUrl: "targetUrl",
"Target Url": "targetUrl",
    page_name: "pageName",
"Page Name": "pageName",
PageName: "pageName",
"page-name": "pageName",
p_page_name: "pageName",
pageName: "pageName",
    p_scrape_domain_id: "scrapeDomainId",
scrape_domain_id: "scrapeDomainId",
scrapeDomainId: "scrapeDomainId",
"Scrape Domain Id": "scrapeDomainId",
"scrape-domain-id": "scrapeDomainId",
ScrapeDomainId: "scrapeDomainId",
    "Parent Task": "parentTask",
parentTask: "parentTask",
parent_task: "parentTask",
p_parent_task: "parentTask",
ParentTask: "parentTask",
"parent-task": "parentTask",
    attempts_left: "attemptsLeft",
AttemptsLeft: "attemptsLeft",
attemptsLeft: "attemptsLeft",
"attempts-left": "attemptsLeft",
p_attempts_left: "attemptsLeft",
"Attempts Left": "attemptsLeft",
    ScrapeMode: "scrapeMode",
scrapeMode: "scrapeMode",
p_scrape_mode: "scrapeMode",
"Scrape Mode": "scrapeMode",
scrape_mode: "scrapeMode",
"scrape-mode": "scrapeMode",
    interaction_config: "interactionConfig",
"interaction-config": "interactionConfig",
interactionConfig: "interactionConfig",
"Interaction Config": "interactionConfig",
p_interaction_config: "interactionConfig",
InteractionConfig: "interactionConfig",
    "Scrape Job Id": "scrapeJobId",
"scrape-job-id": "scrapeJobId",
scrapeJobId: "scrapeJobId",
ScrapeJobId: "scrapeJobId",
scrape_job_id: "scrapeJobId",
p_scrape_job_id: "scrapeJobId",
    priority: "priority",
Priority: "priority",
p_priority: "priority",
    discovered_links: "discoveredLinks",
discoveredLinks: "discoveredLinks",
"Discovered Links": "discoveredLinks",
p_discovered_links: "discoveredLinks",
"discovered-links": "discoveredLinks",
DiscoveredLinks: "discoveredLinks",
    "Spawned Concurrent Tasks": "spawnedConcurrentTasks",
"spawned-concurrent-tasks": "spawnedConcurrentTasks",
SpawnedConcurrentTasks: "spawnedConcurrentTasks",
p_spawned_concurrent_tasks: "spawnedConcurrentTasks",
spawned_concurrent_tasks: "spawnedConcurrentTasks",
spawnedConcurrentTasks: "spawnedConcurrentTasks",
    scrape_cycle_run_id: "scrapeCycleRunId",
"Scrape Cycle Run Id": "scrapeCycleRunId",
scrapeCycleRunId: "scrapeCycleRunId",
ScrapeCycleRunId: "scrapeCycleRunId",
p_scrape_cycle_run_id: "scrapeCycleRunId",
"scrape-cycle-run-id": "scrapeCycleRunId",
    failureReason: "failureReason",
"Failure Reason": "failureReason",
FailureReason: "failureReason",
failure_reason: "failureReason",
p_failure_reason: "failureReason",
"failure-reason": "failureReason",
    "scrape-status": "scrapeStatus",
scrape_status: "scrapeStatus",
p_scrape_status: "scrapeStatus",
"Scrape Status": "scrapeStatus",
scrapeStatus: "scrapeStatus",
ScrapeStatus: "scrapeStatus",
    parse_status: "parseStatus",
p_parse_status: "parseStatus",
ParseStatus: "parseStatus",
parseStatus: "parseStatus",
"parse-status": "parseStatus",
"Parse Status": "parseStatus",
    "cancel-message": "cancelMessage",
p_cancel_message: "cancelMessage",
cancelMessage: "cancelMessage",
"Cancel Message": "cancelMessage",
CancelMessage: "cancelMessage",
cancel_message: "cancelMessage",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    scrapeTaskResponse: {
    p_id: "id",
Id: "id",
id: "id",
    ScrapeTaskId: "scrapeTaskId",
"Scrape Task Id": "scrapeTaskId",
p_scrape_task_id: "scrapeTaskId",
"scrape-task-id": "scrapeTaskId",
scrape_task_id: "scrapeTaskId",
scrapeTaskId: "scrapeTaskId",
    failureReason: "failureReason",
"Failure Reason": "failureReason",
FailureReason: "failureReason",
failure_reason: "failureReason",
p_failure_reason: "failureReason",
"failure-reason": "failureReason",
    status_code: "statusCode",
"Status Code": "statusCode",
"status-code": "statusCode",
statusCode: "statusCode",
p_status_code: "statusCode",
StatusCode: "statusCode",
    p_content_path: "contentPath",
content_path: "contentPath",
"Content Path": "contentPath",
contentPath: "contentPath",
ContentPath: "contentPath",
"content-path": "contentPath",
    p_content_size: "contentSize",
"Content Size": "contentSize",
contentSize: "contentSize",
content_size: "contentSize",
ContentSize: "contentSize",
"content-size": "contentSize",
    p_content_type: "contentType",
"Content Type": "contentType",
"content-type": "contentType",
ContentType: "contentType",
content_type: "contentType",
contentType: "contentType",
    ResponseHeaders: "responseHeaders",
"response-headers": "responseHeaders",
responseHeaders: "responseHeaders",
response_headers: "responseHeaders",
"Response Headers": "responseHeaders",
p_response_headers: "responseHeaders",
    "response-url": "responseUrl",
p_response_url: "responseUrl",
ResponseUrl: "responseUrl",
responseUrl: "responseUrl",
"Response Url": "responseUrl",
response_url: "responseUrl",
    errorLog: "errorLog",
ErrorLog: "errorLog",
error_log: "errorLog",
p_error_log: "errorLog",
"error-log": "errorLog",
"Error Log": "errorLog",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    subcategory: {
    p_id: "id",
Id: "id",
id: "id",
    "Category Id": "categoryId",
CategoryId: "categoryId",
p_category_id: "categoryId",
category_id: "categoryId",
"category-id": "categoryId",
categoryId: "categoryId",
    name: "name",
Name: "name",
p_name: "name",
    p_description: "description",
description: "description",
Description: "description",
    Slug: "slug",
p_slug: "slug",
slug: "slug",
    Icon: "icon",
p_icon: "icon",
icon: "icon",
    p_features: "features",
features: "features",
Features: "features",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt"
},
    systemFunction: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_description: "description",
description: "description",
Description: "description",
    sample: "sample",
Sample: "sample",
p_sample: "sample",
    p_input_params: "inputParams",
"Input Params": "inputParams",
"input-params": "inputParams",
input_params: "inputParams",
InputParams: "inputParams",
inputParams: "inputParams",
    p_output_options: "outputOptions",
output_options: "outputOptions",
outputOptions: "outputOptions",
"output-options": "outputOptions",
"Output Options": "outputOptions",
OutputOptions: "outputOptions",
    "rf-id": "rfId",
"Rf Id": "rfId",
RfId: "rfId",
rfId: "rfId",
p_rf_id: "rfId",
rf_id: "rfId"
},
    tableData: {
    p_id: "id",
Id: "id",
id: "id",
    table_id: "tableId",
TableId: "tableId",
"Table Id": "tableId",
"table-id": "tableId",
p_table_id: "tableId",
tableId: "tableId",
    Data: "data",
p_data: "data",
data: "data",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt"
},
    tableFields: {
    p_id: "id",
Id: "id",
id: "id",
    table_id: "tableId",
TableId: "tableId",
"Table Id": "tableId",
"table-id": "tableId",
p_table_id: "tableId",
tableId: "tableId",
    "field-name": "fieldName",
p_field_name: "fieldName",
FieldName: "fieldName",
"Field Name": "fieldName",
field_name: "fieldName",
fieldName: "fieldName",
    DisplayName: "displayName",
"display-name": "displayName",
display_name: "displayName",
displayName: "displayName",
p_display_name: "displayName",
"Display Name": "displayName",
    data_type: "dataType",
"Data Type": "dataType",
DataType: "dataType",
"data-type": "dataType",
p_data_type: "dataType",
dataType: "dataType",
    FieldOrder: "fieldOrder",
fieldOrder: "fieldOrder",
"Field Order": "fieldOrder",
field_order: "fieldOrder",
p_field_order: "fieldOrder",
"field-order": "fieldOrder",
    "is-required": "isRequired",
IsRequired: "isRequired",
"Is Required": "isRequired",
is_required: "isRequired",
isRequired: "isRequired",
p_is_required: "isRequired",
    "default-value": "defaultValue",
default_value: "defaultValue",
p_default_value: "defaultValue",
DefaultValue: "defaultValue",
defaultValue: "defaultValue",
"Default Value": "defaultValue",
    p_validation_rules: "validationRules",
validationRules: "validationRules",
"validation-rules": "validationRules",
"Validation Rules": "validationRules",
ValidationRules: "validationRules",
validation_rules: "validationRules",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt"
},
    taskAssignments: {
    p_id: "id",
Id: "id",
id: "id",
    taskId: "taskId",
p_task_id: "taskId",
TaskId: "taskId",
"Task Id": "taskId",
task_id: "taskId",
"task-id": "taskId",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    "Assigned By": "assignedBy",
AssignedBy: "assignedBy",
p_assigned_by: "assignedBy",
"assigned-by": "assignedBy",
assigned_by: "assignedBy",
assignedBy: "assignedBy",
    assignedAt: "assignedAt",
"assigned-at": "assignedAt",
assigned_at: "assignedAt",
p_assigned_at: "assignedAt",
"Assigned At": "assignedAt",
AssignedAt: "assignedAt"
},
    taskAttachments: {
    p_id: "id",
Id: "id",
id: "id",
    taskId: "taskId",
p_task_id: "taskId",
TaskId: "taskId",
"Task Id": "taskId",
task_id: "taskId",
"task-id": "taskId",
    FileName: "fileName",
"file-name": "fileName",
fileName: "fileName",
file_name: "fileName",
p_file_name: "fileName",
"File Name": "fileName",
    p_file_type: "fileType",
file_type: "fileType",
"File Type": "fileType",
"file-type": "fileType",
FileType: "fileType",
fileType: "fileType",
    p_file_size: "fileSize",
file_size: "fileSize",
FileSize: "fileSize",
fileSize: "fileSize",
"file-size": "fileSize",
"File Size": "fileSize",
    "file-path": "filePath",
FilePath: "filePath",
p_file_path: "filePath",
file_path: "filePath",
"File Path": "filePath",
filePath: "filePath",
    UploadedBy: "uploadedBy",
"uploaded-by": "uploadedBy",
p_uploaded_by: "uploadedBy",
"Uploaded By": "uploadedBy",
uploaded_by: "uploadedBy",
uploadedBy: "uploadedBy",
    UploadedAt: "uploadedAt",
"Uploaded At": "uploadedAt",
"uploaded-at": "uploadedAt",
uploaded_at: "uploadedAt",
uploadedAt: "uploadedAt",
p_uploaded_at: "uploadedAt"
},
    taskComments: {
    p_id: "id",
Id: "id",
id: "id",
    taskId: "taskId",
p_task_id: "taskId",
TaskId: "taskId",
"Task Id": "taskId",
task_id: "taskId",
"task-id": "taskId",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_content: "content",
Content: "content",
content: "content",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt"
},
    tasks: {
    p_id: "id",
Id: "id",
id: "id",
    Title: "title",
title: "title",
p_title: "title",
    p_description: "description",
description: "description",
Description: "description",
    projectId: "projectId",
"project-id": "projectId",
"Project Id": "projectId",
project_id: "projectId",
p_project_id: "projectId",
ProjectId: "projectId",
    p_status: "status",
Status: "status",
status: "status",
    DueDate: "dueDate",
due_date: "dueDate",
dueDate: "dueDate",
"due-date": "dueDate",
p_due_date: "dueDate",
"Due Date": "dueDate",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead"
},
    tool: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    source: "source",
p_source: "source",
Source: "source",
    p_description: "description",
description: "description",
Description: "description",
    parameters: "parameters",
p_parameters: "parameters",
Parameters: "parameters",
    "required-args": "requiredArgs",
requiredArgs: "requiredArgs",
"Required Args": "requiredArgs",
RequiredArgs: "requiredArgs",
required_args: "requiredArgs",
p_required_args: "requiredArgs",
    "System Function": "systemFunction",
p_system_function: "systemFunction",
SystemFunction: "systemFunction",
system_function: "systemFunction",
systemFunction: "systemFunction",
"system-function": "systemFunction",
    p_additional_params: "additionalParams",
additionalParams: "additionalParams",
"Additional Params": "additionalParams",
additional_params: "additionalParams",
AdditionalParams: "additionalParams",
"additional-params": "additionalParams"
},
    transformer: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_input_params: "inputParams",
"Input Params": "inputParams",
"input-params": "inputParams",
input_params: "inputParams",
InputParams: "inputParams",
inputParams: "inputParams",
    OutputParams: "outputParams",
"output-params": "outputParams",
"Output Params": "outputParams",
p_output_params: "outputParams",
output_params: "outputParams",
outputParams: "outputParams"
},
    userListItems: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    label: "label",
Label: "label",
p_label: "label",
    p_description: "description",
description: "description",
Description: "description",
    p_help_text: "helpText",
"help-text": "helpText",
help_text: "helpText",
"Help Text": "helpText",
HelpText: "helpText",
helpText: "helpText",
    GroupName: "groupName",
group_name: "groupName",
p_group_name: "groupName",
"Group Name": "groupName",
groupName: "groupName",
"group-name": "groupName",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    PublicRead: "publicRead",
"Public Read": "publicRead",
public_read: "publicRead",
publicRead: "publicRead",
"public-read": "publicRead",
p_public_read: "publicRead",
    "list-id": "listId",
listId: "listId",
list_id: "listId",
ListId: "listId",
p_list_id: "listId",
"List Id": "listId",
    "Icon Name": "iconName",
"icon-name": "iconName",
p_icon_name: "iconName",
iconName: "iconName",
IconName: "iconName",
icon_name: "iconName"
},
    userLists: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    list_name: "listName",
ListName: "listName",
"List Name": "listName",
"list-name": "listName",
p_list_name: "listName",
listName: "listName",
    p_description: "description",
description: "description",
Description: "description",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    PublicRead: "publicRead",
"Public Read": "publicRead",
public_read: "publicRead",
publicRead: "publicRead",
"public-read": "publicRead",
p_public_read: "publicRead"
},
    userPreferences: {
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    Preferences: "preferences",
p_preferences: "preferences",
preferences: "preferences",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt"
},
    userTables: {
    p_id: "id",
Id: "id",
id: "id",
    TableName: "tableName",
p_table_name: "tableName",
"table-name": "tableName",
"Table Name": "tableName",
table_name: "tableName",
tableName: "tableName",
    p_description: "description",
description: "description",
Description: "description",
    p_version: "version",
Version: "version",
version: "version",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt"
},
    wcClaim: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    ApplicantName: "applicantName",
"applicant-name": "applicantName",
applicantName: "applicantName",
"Applicant Name": "applicantName",
p_applicant_name: "applicantName",
applicant_name: "applicantName",
    PersonId: "personId",
"Person Id": "personId",
p_person_id: "personId",
personId: "personId",
person_id: "personId",
"person-id": "personId",
    date_of_birth: "dateOfBirth",
p_date_of_birth: "dateOfBirth",
"date-of-birth": "dateOfBirth",
DateOfBirth: "dateOfBirth",
dateOfBirth: "dateOfBirth",
"Date Of Birth": "dateOfBirth",
    "date-of-injury": "dateOfInjury",
date_of_injury: "dateOfInjury",
dateOfInjury: "dateOfInjury",
p_date_of_injury: "dateOfInjury",
DateOfInjury: "dateOfInjury",
"Date Of Injury": "dateOfInjury",
    ageAtDoi: "ageAtDoi",
age_at_doi: "ageAtDoi",
p_age_at_doi: "ageAtDoi",
AgeAtDoi: "ageAtDoi",
"age-at-doi": "ageAtDoi",
"Age At Doi": "ageAtDoi",
    OccupationalCode: "occupationalCode",
"occupational-code": "occupationalCode",
p_occupational_code: "occupationalCode",
"Occupational Code": "occupationalCode",
occupational_code: "occupationalCode",
occupationalCode: "occupationalCode",
    p_weekly_earnings: "weeklyEarnings",
"weekly-earnings": "weeklyEarnings",
WeeklyEarnings: "weeklyEarnings",
weeklyEarnings: "weeklyEarnings",
weekly_earnings: "weeklyEarnings",
"Weekly Earnings": "weeklyEarnings"
},
    wcImpairmentDefinition: {
    p_id: "id",
Id: "id",
id: "id",
    impairment_number: "impairmentNumber",
impairmentNumber: "impairmentNumber",
"Impairment Number": "impairmentNumber",
p_impairment_number: "impairmentNumber",
ImpairmentNumber: "impairmentNumber",
"impairment-number": "impairmentNumber",
    fecRank: "fecRank",
"Fec Rank": "fecRank",
"fec-rank": "fecRank",
p_fec_rank: "fecRank",
fec_rank: "fecRank",
FecRank: "fecRank",
    name: "name",
Name: "name",
p_name: "name",
    p_attributes: "attributes",
attributes: "attributes",
Attributes: "attributes",
    "finger-type": "fingerType",
"Finger Type": "fingerType",
finger_type: "fingerType",
p_finger_type: "fingerType",
fingerType: "fingerType",
FingerType: "fingerType"
},
    wcInjury: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    reportId: "reportId",
ReportId: "reportId",
report_id: "reportId",
"report-id": "reportId",
"Report Id": "reportId",
p_report_id: "reportId",
    ImpairmentDefinitionId: "impairmentDefinitionId",
impairmentDefinitionId: "impairmentDefinitionId",
impairment_definition_id: "impairmentDefinitionId",
"impairment-definition-id": "impairmentDefinitionId",
p_impairment_definition_id: "impairmentDefinitionId",
"Impairment Definition Id": "impairmentDefinitionId",
    p_digit: "digit",
digit: "digit",
Digit: "digit",
    p_le: "le",
Le: "le",
le: "le",
    p_side: "side",
side: "side",
Side: "side",
    p_ue: "ue",
Ue: "ue",
ue: "ue",
    Wpi: "wpi",
wpi: "wpi",
p_wpi: "wpi",
    pain: "pain",
Pain: "pain",
p_pain: "pain",
    Industrial: "industrial",
p_industrial: "industrial",
industrial: "industrial",
    Rating: "rating",
p_rating: "rating",
rating: "rating",
    formula: "formula",
Formula: "formula",
p_formula: "formula",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt"
},
    wcReport: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "Claim Id": "claimId",
claimId: "claimId",
claim_id: "claimId",
ClaimId: "claimId",
p_claim_id: "claimId",
"claim-id": "claimId",
    finalRating: "finalRating",
p_final_rating: "finalRating",
final_rating: "finalRating",
FinalRating: "finalRating",
"final-rating": "finalRating",
"Final Rating": "finalRating",
    "Left Side Total": "leftSideTotal",
p_left_side_total: "leftSideTotal",
leftSideTotal: "leftSideTotal",
"left-side-total": "leftSideTotal",
LeftSideTotal: "leftSideTotal",
left_side_total: "leftSideTotal",
    "Right Side Total": "rightSideTotal",
right_side_total: "rightSideTotal",
rightSideTotal: "rightSideTotal",
p_right_side_total: "rightSideTotal",
RightSideTotal: "rightSideTotal",
"right-side-total": "rightSideTotal",
    "Default Side Total": "defaultSideTotal",
default_side_total: "defaultSideTotal",
DefaultSideTotal: "defaultSideTotal",
p_default_side_total: "defaultSideTotal",
defaultSideTotal: "defaultSideTotal",
"default-side-total": "defaultSideTotal",
    "Compensation Amount": "compensationAmount",
compensationAmount: "compensationAmount",
"compensation-amount": "compensationAmount",
p_compensation_amount: "compensationAmount",
CompensationAmount: "compensationAmount",
compensation_amount: "compensationAmount",
    compensationWeeks: "compensationWeeks",
p_compensation_weeks: "compensationWeeks",
"compensation-weeks": "compensationWeeks",
CompensationWeeks: "compensationWeeks",
compensation_weeks: "compensationWeeks",
"Compensation Weeks": "compensationWeeks",
    CompensationDays: "compensationDays",
"Compensation Days": "compensationDays",
compensation_days: "compensationDays",
p_compensation_days: "compensationDays",
compensationDays: "compensationDays",
"compensation-days": "compensationDays"
},
    workflow: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    name: "name",
Name: "name",
p_name: "name",
    p_description: "description",
description: "description",
Description: "description",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_version: "version",
Version: "version",
version: "version",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    PublicRead: "publicRead",
"Public Read": "publicRead",
public_read: "publicRead",
publicRead: "publicRead",
"public-read": "publicRead",
p_public_read: "publicRead",
    isActive: "isActive",
is_active: "isActive",
"is-active": "isActive",
p_is_active: "isActive",
IsActive: "isActive",
"Is Active": "isActive",
    isDeleted: "isDeleted",
p_is_deleted: "isDeleted",
IsDeleted: "isDeleted",
is_deleted: "isDeleted",
"Is Deleted": "isDeleted",
"is-deleted": "isDeleted",
    "auto-execute": "autoExecute",
"Auto Execute": "autoExecute",
p_auto_execute: "autoExecute",
auto_execute: "autoExecute",
autoExecute: "autoExecute",
AutoExecute: "autoExecute",
    Category: "category",
category: "category",
p_category: "category",
    tags: "tags",
p_tags: "tags",
Tags: "tags",
    Metadata: "metadata",
metadata: "metadata",
p_metadata: "metadata",
    Viewport: "viewport",
viewport: "viewport",
p_viewport: "viewport"
},
    workflowData: {
    p_id: "id",
Id: "id",
id: "id",
    name: "name",
Name: "name",
p_name: "name",
    p_description: "description",
description: "description",
Description: "description",
    "Workflow Type": "workflowType",
"workflow-type": "workflowType",
workflow_type: "workflowType",
WorkflowType: "workflowType",
workflowType: "workflowType",
p_workflow_type: "workflowType",
    inputs: "inputs",
p_inputs: "inputs",
Inputs: "inputs",
    Outputs: "outputs",
outputs: "outputs",
p_outputs: "outputs",
    p_dependencies: "dependencies",
Dependencies: "dependencies",
dependencies: "dependencies",
    p_sources: "sources",
Sources: "sources",
sources: "sources",
    Destinations: "destinations",
destinations: "destinations",
p_destinations: "destinations",
    Actions: "actions",
actions: "actions",
p_actions: "actions",
    Category: "category",
category: "category",
p_category: "category",
    tags: "tags",
p_tags: "tags",
Tags: "tags",
    isActive: "isActive",
is_active: "isActive",
"is-active": "isActive",
p_is_active: "isActive",
IsActive: "isActive",
"Is Active": "isActive",
    isDeleted: "isDeleted",
p_is_deleted: "isDeleted",
IsDeleted: "isDeleted",
is_deleted: "isDeleted",
"Is Deleted": "isDeleted",
"is-deleted": "isDeleted",
    "auto-execute": "autoExecute",
"Auto Execute": "autoExecute",
p_auto_execute: "autoExecute",
auto_execute: "autoExecute",
autoExecute: "autoExecute",
AutoExecute: "autoExecute",
    Metadata: "metadata",
metadata: "metadata",
p_metadata: "metadata",
    Viewport: "viewport",
viewport: "viewport",
p_viewport: "viewport",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    p_version: "version",
Version: "version",
version: "version",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    PublicRead: "publicRead",
"Public Read": "publicRead",
public_read: "publicRead",
publicRead: "publicRead",
"public-read": "publicRead",
p_public_read: "publicRead",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt"
},
    workflowEdge: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    WorkflowId: "workflowId",
workflowId: "workflowId",
"workflow-id": "workflowId",
p_workflow_id: "workflowId",
workflow_id: "workflowId",
"Workflow Id": "workflowId",
    source_node_id: "sourceNodeId",
sourceNodeId: "sourceNodeId",
p_source_node_id: "sourceNodeId",
"Source Node Id": "sourceNodeId",
"source-node-id": "sourceNodeId",
SourceNodeId: "sourceNodeId",
    targetNodeId: "targetNodeId",
p_target_node_id: "targetNodeId",
target_node_id: "targetNodeId",
"Target Node Id": "targetNodeId",
"target-node-id": "targetNodeId",
TargetNodeId: "targetNodeId",
    "Source Handle": "sourceHandle",
sourceHandle: "sourceHandle",
source_handle: "sourceHandle",
p_source_handle: "sourceHandle",
SourceHandle: "sourceHandle",
"source-handle": "sourceHandle",
    p_target_handle: "targetHandle",
TargetHandle: "targetHandle",
"target-handle": "targetHandle",
target_handle: "targetHandle",
"Target Handle": "targetHandle",
targetHandle: "targetHandle",
    "edge-type": "edgeType",
edge_type: "edgeType",
EdgeType: "edgeType",
p_edge_type: "edgeType",
"Edge Type": "edgeType",
edgeType: "edgeType",
    p_animated: "animated",
Animated: "animated",
animated: "animated",
    Style: "style",
style: "style",
p_style: "style",
    Metadata: "metadata",
metadata: "metadata",
p_metadata: "metadata"
},
    workflowNode: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    WorkflowId: "workflowId",
workflowId: "workflowId",
"workflow-id": "workflowId",
p_workflow_id: "workflowId",
workflow_id: "workflowId",
"Workflow Id": "workflowId",
    functionId: "functionId",
p_function_id: "functionId",
FunctionId: "functionId",
"function-id": "functionId",
function_id: "functionId",
"Function Id": "functionId",
    FunctionType: "functionType",
p_function_type: "functionType",
function_type: "functionType",
"function-type": "functionType",
functionType: "functionType",
"Function Type": "functionType",
    stepName: "stepName",
p_step_name: "stepName",
step_name: "stepName",
"step-name": "stepName",
"Step Name": "stepName",
StepName: "stepName",
    nodeType: "nodeType",
"node-type": "nodeType",
node_type: "nodeType",
"Node Type": "nodeType",
p_node_type: "nodeType",
NodeType: "nodeType",
    "execution-required": "executionRequired",
"Execution Required": "executionRequired",
execution_required: "executionRequired",
executionRequired: "executionRequired",
ExecutionRequired: "executionRequired",
p_execution_required: "executionRequired",
    additional_dependencies: "additionalDependencies",
"additional-dependencies": "additionalDependencies",
additionalDependencies: "additionalDependencies",
p_additional_dependencies: "additionalDependencies",
AdditionalDependencies: "additionalDependencies",
"Additional Dependencies": "additionalDependencies",
    "Arg Mapping": "argMapping",
"arg-mapping": "argMapping",
p_arg_mapping: "argMapping",
argMapping: "argMapping",
arg_mapping: "argMapping",
ArgMapping: "argMapping",
    p_return_broker_overrides: "returnBrokerOverrides",
return_broker_overrides: "returnBrokerOverrides",
"return-broker-overrides": "returnBrokerOverrides",
ReturnBrokerOverrides: "returnBrokerOverrides",
returnBrokerOverrides: "returnBrokerOverrides",
"Return Broker Overrides": "returnBrokerOverrides",
    arg_overrides: "argOverrides",
"Arg Overrides": "argOverrides",
argOverrides: "argOverrides",
ArgOverrides: "argOverrides",
"arg-overrides": "argOverrides",
p_arg_overrides: "argOverrides",
    p_status: "status",
Status: "status",
status: "status",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    PublicRead: "publicRead",
"Public Read": "publicRead",
public_read: "publicRead",
publicRead: "publicRead",
"public-read": "publicRead",
p_public_read: "publicRead",
    Metadata: "metadata",
metadata: "metadata",
p_metadata: "metadata",
    ui_node_data: "uiNodeData",
UiNodeData: "uiNodeData",
"ui-node-data": "uiNodeData",
uiNodeData: "uiNodeData",
p_ui_node_data: "uiNodeData",
"Ui Node Data": "uiNodeData"
},
    workflowNodeData: {
    p_id: "id",
Id: "id",
id: "id",
    WorkflowId: "workflowId",
workflowId: "workflowId",
"workflow-id": "workflowId",
p_workflow_id: "workflowId",
workflow_id: "workflowId",
"Workflow Id": "workflowId",
    functionId: "functionId",
p_function_id: "functionId",
FunctionId: "functionId",
"function-id": "functionId",
function_id: "functionId",
"Function Id": "functionId",
    type: "type",
Type: "type",
p_type: "type",
    stepName: "stepName",
p_step_name: "stepName",
step_name: "stepName",
"step-name": "stepName",
"Step Name": "stepName",
StepName: "stepName",
    nodeType: "nodeType",
"node-type": "nodeType",
node_type: "nodeType",
"Node Type": "nodeType",
p_node_type: "nodeType",
NodeType: "nodeType",
    "execution-required": "executionRequired",
"Execution Required": "executionRequired",
execution_required: "executionRequired",
executionRequired: "executionRequired",
ExecutionRequired: "executionRequired",
p_execution_required: "executionRequired",
    inputs: "inputs",
p_inputs: "inputs",
Inputs: "inputs",
    Outputs: "outputs",
outputs: "outputs",
p_outputs: "outputs",
    p_dependencies: "dependencies",
Dependencies: "dependencies",
dependencies: "dependencies",
    Metadata: "metadata",
metadata: "metadata",
p_metadata: "metadata",
    uiData: "uiData",
p_ui_data: "uiData",
"Ui Data": "uiData",
"ui-data": "uiData",
UiData: "uiData",
ui_data: "uiData",
    p_is_public: "isPublic",
"Is Public": "isPublic",
IsPublic: "isPublic",
is_public: "isPublic",
isPublic: "isPublic",
"is-public": "isPublic",
    AuthenticatedRead: "authenticatedRead",
p_authenticated_read: "authenticatedRead",
authenticatedRead: "authenticatedRead",
authenticated_read: "authenticatedRead",
"Authenticated Read": "authenticatedRead",
"authenticated-read": "authenticatedRead",
    PublicRead: "publicRead",
"Public Read": "publicRead",
public_read: "publicRead",
publicRead: "publicRead",
"public-read": "publicRead",
p_public_read: "publicRead",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId"
},
    workflowRelay: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    WorkflowId: "workflowId",
workflowId: "workflowId",
"workflow-id": "workflowId",
p_workflow_id: "workflowId",
workflow_id: "workflowId",
"Workflow Id": "workflowId",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    "source-broker-id": "sourceBrokerId",
"Source Broker Id": "sourceBrokerId",
sourceBrokerId: "sourceBrokerId",
p_source_broker_id: "sourceBrokerId",
source_broker_id: "sourceBrokerId",
SourceBrokerId: "sourceBrokerId",
    label: "label",
Label: "label",
p_label: "label",
    TargetBrokerIds: "targetBrokerIds",
target_broker_ids: "targetBrokerIds",
targetBrokerIds: "targetBrokerIds",
p_target_broker_ids: "targetBrokerIds",
"target-broker-ids": "targetBrokerIds",
"Target Broker Ids": "targetBrokerIds",
    Metadata: "metadata",
metadata: "metadata",
p_metadata: "metadata",
    ui_node_data: "uiNodeData",
UiNodeData: "uiNodeData",
"ui-node-data": "uiNodeData",
uiNodeData: "uiNodeData",
p_ui_node_data: "uiNodeData",
"Ui Node Data": "uiNodeData"
},
    workflowUserInput: {
    p_id: "id",
Id: "id",
id: "id",
    createdAt: "createdAt",
p_created_at: "createdAt",
created_at: "createdAt",
"Created At": "createdAt",
CreatedAt: "createdAt",
"created-at": "createdAt",
    "updated-at": "updatedAt",
p_updated_at: "updatedAt",
"Updated At": "updatedAt",
updatedAt: "updatedAt",
UpdatedAt: "updatedAt",
updated_at: "updatedAt",
    WorkflowId: "workflowId",
workflowId: "workflowId",
"workflow-id": "workflowId",
p_workflow_id: "workflowId",
workflow_id: "workflowId",
"Workflow Id": "workflowId",
    UserId: "userId",
userId: "userId",
p_user_id: "userId",
user_id: "userId",
"user-id": "userId",
"User Id": "userId",
    field_component_id: "fieldComponentId",
"field-component-id": "fieldComponentId",
FieldComponentId: "fieldComponentId",
fieldComponentId: "fieldComponentId",
p_field_component_id: "fieldComponentId",
"Field Component Id": "fieldComponentId",
    brokerId: "brokerId",
p_broker_id: "brokerId",
BrokerId: "brokerId",
broker_id: "brokerId",
"Broker Id": "brokerId",
"broker-id": "brokerId",
    label: "label",
Label: "label",
p_label: "label",
    data_type: "dataType",
"Data Type": "dataType",
DataType: "dataType",
"data-type": "dataType",
p_data_type: "dataType",
dataType: "dataType",
    "default-value": "defaultValue",
default_value: "defaultValue",
p_default_value: "defaultValue",
DefaultValue: "defaultValue",
defaultValue: "defaultValue",
"Default Value": "defaultValue",
    "is-required": "isRequired",
IsRequired: "isRequired",
"Is Required": "isRequired",
is_required: "isRequired",
isRequired: "isRequired",
p_is_required: "isRequired",
    Metadata: "metadata",
metadata: "metadata",
p_metadata: "metadata",
    ui_node_data: "uiNodeData",
UiNodeData: "uiNodeData",
"ui-node-data": "uiNodeData",
uiNodeData: "uiNodeData",
p_ui_node_data: "uiNodeData",
"Ui Node Data": "uiNodeData"
},
};

export const entityNameFormats: EntityNameFormatMap = {
    action: {
    frontend: "action",
    backend: "action",
    database: "action",
    pretty: "Action",
    component: "Action",
    kebab: "action",
    sqlFunctionRef: "p_action",
    RestAPI: "action",
    GraphQL: "action",
    custom: "action"
},
    admins: {
    frontend: "admins",
    backend: "admins",
    database: "admins",
    pretty: "Admins",
    component: "Admins",
    kebab: "admins",
    sqlFunctionRef: "p_admins",
    RestAPI: "admins",
    GraphQL: "admins",
    custom: "admins"
},
    aiAgent: {
    frontend: "aiAgent",
    backend: "ai_agent",
    database: "ai_agent",
    pretty: "Ai Agent",
    component: "AiAgent",
    kebab: "ai-agent",
    sqlFunctionRef: "p_ai_agent",
    RestAPI: "aiAgent",
    GraphQL: "aiAgent",
    custom: "aiAgent"
},
    aiEndpoint: {
    frontend: "aiEndpoint",
    backend: "ai_endpoint",
    database: "ai_endpoint",
    pretty: "Ai Endpoint",
    component: "AiEndpoint",
    kebab: "ai-endpoint",
    sqlFunctionRef: "p_ai_endpoint",
    RestAPI: "aiEndpoint",
    GraphQL: "aiEndpoint",
    custom: "aiEndpoint"
},
    aiModel: {
    frontend: "aiModel",
    backend: "ai_model",
    database: "ai_model",
    pretty: "Ai Model",
    component: "AiModel",
    kebab: "ai-model",
    sqlFunctionRef: "p_ai_model",
    RestAPI: "aiModel",
    GraphQL: "aiModel",
    custom: "aiModel"
},
    aiModelEndpoint: {
    frontend: "aiModelEndpoint",
    backend: "ai_model_endpoint",
    database: "ai_model_endpoint",
    pretty: "Ai Model Endpoint",
    component: "AiModelEndpoint",
    kebab: "ai-model-endpoint",
    sqlFunctionRef: "p_ai_model_endpoint",
    RestAPI: "aiModelEndpoint",
    GraphQL: "aiModelEndpoint",
    custom: "aiModelEndpoint"
},
    aiProvider: {
    frontend: "aiProvider",
    backend: "ai_provider",
    database: "ai_provider",
    pretty: "Ai Provider",
    component: "AiProvider",
    kebab: "ai-provider",
    sqlFunctionRef: "p_ai_provider",
    RestAPI: "aiProvider",
    GraphQL: "aiProvider",
    custom: "aiProvider"
},
    aiSettings: {
    frontend: "aiSettings",
    backend: "ai_settings",
    database: "ai_settings",
    pretty: "Ai Settings",
    component: "AiSettings",
    kebab: "ai-settings",
    sqlFunctionRef: "p_ai_settings",
    RestAPI: "aiSettings",
    GraphQL: "aiSettings",
    custom: "aiSettings"
},
    aiTrainingData: {
    frontend: "aiTrainingData",
    backend: "ai_training_data",
    database: "ai_training_data",
    pretty: "Ai Training Data",
    component: "AiTrainingData",
    kebab: "ai-training-data",
    sqlFunctionRef: "p_ai_training_data",
    RestAPI: "aiTrainingData",
    GraphQL: "aiTrainingData",
    custom: "aiTrainingData"
},
    applet: {
    frontend: "applet",
    backend: "applet",
    database: "applet",
    pretty: "Applet",
    component: "Applet",
    kebab: "applet",
    sqlFunctionRef: "p_applet",
    RestAPI: "applet",
    GraphQL: "applet",
    custom: "applet"
},
    appletContainers: {
    frontend: "appletContainers",
    backend: "applet_containers",
    database: "applet_containers",
    pretty: "Applet Containers",
    component: "AppletContainers",
    kebab: "applet-containers",
    sqlFunctionRef: "p_applet_containers",
    RestAPI: "appletContainers",
    GraphQL: "appletContainers",
    custom: "appletContainers"
},
    arg: {
    frontend: "arg",
    backend: "arg",
    database: "arg",
    pretty: "Arg",
    component: "Arg",
    kebab: "arg",
    sqlFunctionRef: "p_arg",
    RestAPI: "arg",
    GraphQL: "arg",
    custom: "arg"
},
    audioLabel: {
    frontend: "audioLabel",
    backend: "audio_label",
    database: "audio_label",
    pretty: "Audio Label",
    component: "AudioLabel",
    kebab: "audio-label",
    sqlFunctionRef: "p_audio_label",
    RestAPI: "audioLabel",
    GraphQL: "audioLabel",
    custom: "audioLabel"
},
    audioRecording: {
    frontend: "audioRecording",
    backend: "audio_recording",
    database: "audio_recording",
    pretty: "Audio Recording",
    component: "AudioRecording",
    kebab: "audio-recording",
    sqlFunctionRef: "p_audio_recording",
    RestAPI: "audioRecording",
    GraphQL: "audioRecording",
    custom: "audioRecording"
},
    audioRecordingUsers: {
    frontend: "audioRecordingUsers",
    backend: "audio_recording_users",
    database: "audio_recording_users",
    pretty: "Audio Recording Users",
    component: "AudioRecordingUsers",
    kebab: "audio-recording-users",
    sqlFunctionRef: "p_audio_recording_users",
    RestAPI: "audioRecordingUsers",
    GraphQL: "audioRecordingUsers",
    custom: "audioRecordingUsers"
},
    automationBoundaryBroker: {
    frontend: "automationBoundaryBroker",
    backend: "automation_boundary_broker",
    database: "automation_boundary_broker",
    pretty: "Automation Boundary Broker",
    component: "AutomationBoundaryBroker",
    kebab: "automation-boundary-broker",
    sqlFunctionRef: "p_automation_boundary_broker",
    RestAPI: "automationBoundaryBroker",
    GraphQL: "automationBoundaryBroker",
    custom: "automationBoundaryBroker"
},
    automationMatrix: {
    frontend: "automationMatrix",
    backend: "automation_matrix",
    database: "automation_matrix",
    pretty: "Automation Matrix",
    component: "AutomationMatrix",
    kebab: "automation-matrix",
    sqlFunctionRef: "p_automation_matrix",
    RestAPI: "automationMatrix",
    GraphQL: "automationMatrix",
    custom: "automationMatrix"
},
    broker: {
    frontend: "broker",
    backend: "broker",
    database: "broker",
    pretty: "Broker",
    component: "Broker",
    kebab: "broker",
    sqlFunctionRef: "p_broker",
    RestAPI: "broker",
    GraphQL: "broker",
    custom: "broker"
},
    brokerValue: {
    frontend: "brokerValue",
    backend: "broker_value",
    database: "broker_value",
    pretty: "Broker Value",
    component: "BrokerValue",
    kebab: "broker-value",
    sqlFunctionRef: "p_broker_value",
    RestAPI: "brokerValue",
    GraphQL: "brokerValue",
    custom: "brokerValue"
},
    bucketStructures: {
    frontend: "bucketStructures",
    backend: "bucket_structures",
    database: "bucket_structures",
    pretty: "Bucket Structures",
    component: "BucketStructures",
    kebab: "bucket-structures",
    sqlFunctionRef: "p_bucket_structures",
    RestAPI: "bucketStructures",
    GraphQL: "bucketStructures",
    custom: "bucketStructures"
},
    bucketTreeStructures: {
    frontend: "bucketTreeStructures",
    backend: "bucket_tree_structures",
    database: "bucket_tree_structures",
    pretty: "Bucket Tree Structures",
    component: "BucketTreeStructures",
    kebab: "bucket-tree-structures",
    sqlFunctionRef: "p_bucket_tree_structures",
    RestAPI: "bucketTreeStructures",
    GraphQL: "bucketTreeStructures",
    custom: "bucketTreeStructures"
},
    category: {
    frontend: "category",
    backend: "category",
    database: "category",
    pretty: "Category",
    component: "Category",
    kebab: "category",
    sqlFunctionRef: "p_category",
    RestAPI: "category",
    GraphQL: "category",
    custom: "category"
},
    compiledRecipe: {
    frontend: "compiledRecipe",
    backend: "compiled_recipe",
    database: "compiled_recipe",
    pretty: "Compiled Recipe",
    component: "CompiledRecipe",
    kebab: "compiled-recipe",
    sqlFunctionRef: "p_compiled_recipe",
    RestAPI: "compiledRecipe",
    GraphQL: "compiledRecipe",
    custom: "compiledRecipe"
},
    componentGroups: {
    frontend: "componentGroups",
    backend: "component_groups",
    database: "component_groups",
    pretty: "Component Groups",
    component: "ComponentGroups",
    kebab: "component-groups",
    sqlFunctionRef: "p_component_groups",
    RestAPI: "componentGroups",
    GraphQL: "componentGroups",
    custom: "componentGroups"
},
    containerFields: {
    frontend: "containerFields",
    backend: "container_fields",
    database: "container_fields",
    pretty: "Container Fields",
    component: "ContainerFields",
    kebab: "container-fields",
    sqlFunctionRef: "p_container_fields",
    RestAPI: "containerFields",
    GraphQL: "containerFields",
    custom: "containerFields"
},
    conversation: {
    frontend: "conversation",
    backend: "conversation",
    database: "conversation",
    pretty: "Conversation",
    component: "Conversation",
    kebab: "conversation",
    sqlFunctionRef: "p_conversation",
    RestAPI: "conversation",
    GraphQL: "conversation",
    custom: "conversation"
},
    customAppConfigs: {
    frontend: "customAppConfigs",
    backend: "custom_app_configs",
    database: "custom_app_configs",
    pretty: "Custom App Configs",
    component: "CustomAppConfigs",
    kebab: "custom-app-configs",
    sqlFunctionRef: "p_custom_app_configs",
    RestAPI: "customAppConfigs",
    GraphQL: "customAppConfigs",
    custom: "customAppConfigs"
},
    customAppletConfigs: {
    frontend: "customAppletConfigs",
    backend: "custom_applet_configs",
    database: "custom_applet_configs",
    pretty: "Custom Applet Configs",
    component: "CustomAppletConfigs",
    kebab: "custom-applet-configs",
    sqlFunctionRef: "p_custom_applet_configs",
    RestAPI: "customAppletConfigs",
    GraphQL: "customAppletConfigs",
    custom: "customAppletConfigs"
},
    dataBroker: {
    frontend: "dataBroker",
    backend: "data_broker",
    database: "data_broker",
    pretty: "Data Broker",
    component: "DataBroker",
    kebab: "data-broker",
    sqlFunctionRef: "p_data_broker",
    RestAPI: "dataBroker",
    GraphQL: "dataBroker",
    custom: "dataBroker"
},
    dataInputComponent: {
    frontend: "dataInputComponent",
    backend: "data_input_component",
    database: "data_input_component",
    pretty: "Data Input Component",
    component: "DataInputComponent",
    kebab: "data-input-component",
    sqlFunctionRef: "p_data_input_component",
    RestAPI: "dataInputComponent",
    GraphQL: "dataInputComponent",
    custom: "dataInputComponent"
},
    dataOutputComponent: {
    frontend: "dataOutputComponent",
    backend: "data_output_component",
    database: "data_output_component",
    pretty: "Data Output Component",
    component: "DataOutputComponent",
    kebab: "data-output-component",
    sqlFunctionRef: "p_data_output_component",
    RestAPI: "dataOutputComponent",
    GraphQL: "dataOutputComponent",
    custom: "dataOutputComponent"
},
    displayOption: {
    frontend: "displayOption",
    backend: "display_option",
    database: "display_option",
    pretty: "Display Option",
    component: "DisplayOption",
    kebab: "display-option",
    sqlFunctionRef: "p_display_option",
    RestAPI: "displayOption",
    GraphQL: "displayOption",
    custom: "displayOption"
},
    emails: {
    frontend: "emails",
    backend: "emails",
    database: "emails",
    pretty: "Emails",
    component: "Emails",
    kebab: "emails",
    sqlFunctionRef: "p_emails",
    RestAPI: "emails",
    GraphQL: "emails",
    custom: "emails"
},
    extractor: {
    frontend: "extractor",
    backend: "extractor",
    database: "extractor",
    pretty: "Extractor",
    component: "Extractor",
    kebab: "extractor",
    sqlFunctionRef: "p_extractor",
    RestAPI: "extractor",
    GraphQL: "extractor",
    custom: "extractor"
},
    fieldComponents: {
    frontend: "fieldComponents",
    backend: "field_components",
    database: "field_components",
    pretty: "Field Components",
    component: "FieldComponents",
    kebab: "field-components",
    sqlFunctionRef: "p_field_components",
    RestAPI: "fieldComponents",
    GraphQL: "fieldComponents",
    custom: "fieldComponents"
},
    fileStructure: {
    frontend: "fileStructure",
    backend: "file_structure",
    database: "file_structure",
    pretty: "File Structure",
    component: "FileStructure",
    kebab: "file-structure",
    sqlFunctionRef: "p_file_structure",
    RestAPI: "fileStructure",
    GraphQL: "fileStructure",
    custom: "fileStructure"
},
    flashcardData: {
    frontend: "flashcardData",
    backend: "flashcard_data",
    database: "flashcard_data",
    pretty: "Flashcard Data",
    component: "FlashcardData",
    kebab: "flashcard-data",
    sqlFunctionRef: "p_flashcard_data",
    RestAPI: "flashcardData",
    GraphQL: "flashcardData",
    custom: "flashcardData"
},
    flashcardHistory: {
    frontend: "flashcardHistory",
    backend: "flashcard_history",
    database: "flashcard_history",
    pretty: "Flashcard History",
    component: "FlashcardHistory",
    kebab: "flashcard-history",
    sqlFunctionRef: "p_flashcard_history",
    RestAPI: "flashcardHistory",
    GraphQL: "flashcardHistory",
    custom: "flashcardHistory"
},
    flashcardImages: {
    frontend: "flashcardImages",
    backend: "flashcard_images",
    database: "flashcard_images",
    pretty: "Flashcard Images",
    component: "FlashcardImages",
    kebab: "flashcard-images",
    sqlFunctionRef: "p_flashcard_images",
    RestAPI: "flashcardImages",
    GraphQL: "flashcardImages",
    custom: "flashcardImages"
},
    flashcardSetRelations: {
    frontend: "flashcardSetRelations",
    backend: "flashcard_set_relations",
    database: "flashcard_set_relations",
    pretty: "Flashcard Set Relations",
    component: "FlashcardSetRelations",
    kebab: "flashcard-set-relations",
    sqlFunctionRef: "p_flashcard_set_relations",
    RestAPI: "flashcardSetRelations",
    GraphQL: "flashcardSetRelations",
    custom: "flashcardSetRelations"
},
    flashcardSets: {
    frontend: "flashcardSets",
    backend: "flashcard_sets",
    database: "flashcard_sets",
    pretty: "Flashcard Sets",
    component: "FlashcardSets",
    kebab: "flashcard-sets",
    sqlFunctionRef: "p_flashcard_sets",
    RestAPI: "flashcardSets",
    GraphQL: "flashcardSets",
    custom: "flashcardSets"
},
    fullSpectrumPositions: {
    frontend: "fullSpectrumPositions",
    backend: "full_spectrum_positions",
    database: "full_spectrum_positions",
    pretty: "Full Spectrum Positions",
    component: "FullSpectrumPositions",
    kebab: "full-spectrum-positions",
    sqlFunctionRef: "p_full_spectrum_positions",
    RestAPI: "fullSpectrumPositions",
    GraphQL: "fullSpectrumPositions",
    custom: "fullSpectrumPositions"
},
    htmlExtractions: {
    frontend: "htmlExtractions",
    backend: "html_extractions",
    database: "html_extractions",
    pretty: "Html Extractions",
    component: "HtmlExtractions",
    kebab: "html-extractions",
    sqlFunctionRef: "p_html_extractions",
    RestAPI: "htmlExtractions",
    GraphQL: "htmlExtractions",
    custom: "htmlExtractions"
},
    message: {
    frontend: "message",
    backend: "message",
    database: "message",
    pretty: "Message",
    component: "Message",
    kebab: "message",
    sqlFunctionRef: "p_message",
    RestAPI: "message",
    GraphQL: "message",
    custom: "message"
},
    messageBroker: {
    frontend: "messageBroker",
    backend: "message_broker",
    database: "message_broker",
    pretty: "Message Broker",
    component: "MessageBroker",
    kebab: "message-broker",
    sqlFunctionRef: "p_message_broker",
    RestAPI: "messageBroker",
    GraphQL: "messageBroker",
    custom: "messageBroker"
},
    messageTemplate: {
    frontend: "messageTemplate",
    backend: "message_template",
    database: "message_template",
    pretty: "Message Template",
    component: "MessageTemplate",
    kebab: "message-template",
    sqlFunctionRef: "p_message_template",
    RestAPI: "messageTemplate",
    GraphQL: "messageTemplate",
    custom: "messageTemplate"
},
    organizationInvitations: {
    frontend: "organizationInvitations",
    backend: "organization_invitations",
    database: "organization_invitations",
    pretty: "Organization Invitations",
    component: "OrganizationInvitations",
    kebab: "organization-invitations",
    sqlFunctionRef: "p_organization_invitations",
    RestAPI: "organizationInvitations",
    GraphQL: "organizationInvitations",
    custom: "organizationInvitations"
},
    organizationMembers: {
    frontend: "organizationMembers",
    backend: "organization_members",
    database: "organization_members",
    pretty: "Organization Members",
    component: "OrganizationMembers",
    kebab: "organization-members",
    sqlFunctionRef: "p_organization_members",
    RestAPI: "organizationMembers",
    GraphQL: "organizationMembers",
    custom: "organizationMembers"
},
    organizations: {
    frontend: "organizations",
    backend: "organizations",
    database: "organizations",
    pretty: "Organizations",
    component: "Organizations",
    kebab: "organizations",
    sqlFunctionRef: "p_organizations",
    RestAPI: "organizations",
    GraphQL: "organizations",
    custom: "organizations"
},
    permissions: {
    frontend: "permissions",
    backend: "permissions",
    database: "permissions",
    pretty: "Permissions",
    component: "Permissions",
    kebab: "permissions",
    sqlFunctionRef: "p_permissions",
    RestAPI: "permissions",
    GraphQL: "permissions",
    custom: "permissions"
},
    processor: {
    frontend: "processor",
    backend: "processor",
    database: "processor",
    pretty: "Processor",
    component: "Processor",
    kebab: "processor",
    sqlFunctionRef: "p_processor",
    RestAPI: "processor",
    GraphQL: "processor",
    custom: "processor"
},
    projectMembers: {
    frontend: "projectMembers",
    backend: "project_members",
    database: "project_members",
    pretty: "Project Members",
    component: "ProjectMembers",
    kebab: "project-members",
    sqlFunctionRef: "p_project_members",
    RestAPI: "projectMembers",
    GraphQL: "projectMembers",
    custom: "projectMembers"
},
    projects: {
    frontend: "projects",
    backend: "projects",
    database: "projects",
    pretty: "Projects",
    component: "Projects",
    kebab: "projects",
    sqlFunctionRef: "p_projects",
    RestAPI: "projects",
    GraphQL: "projects",
    custom: "projects"
},
    prompts: {
    frontend: "prompts",
    backend: "prompts",
    database: "prompts",
    pretty: "Prompts",
    component: "Prompts",
    kebab: "prompts",
    sqlFunctionRef: "p_prompts",
    RestAPI: "prompts",
    GraphQL: "prompts",
    custom: "prompts"
},
    recipe: {
    frontend: "recipe",
    backend: "recipe",
    database: "recipe",
    pretty: "Recipe",
    component: "Recipe",
    kebab: "recipe",
    sqlFunctionRef: "p_recipe",
    RestAPI: "recipe",
    GraphQL: "recipe",
    custom: "recipe"
},
    recipeBroker: {
    frontend: "recipeBroker",
    backend: "recipe_broker",
    database: "recipe_broker",
    pretty: "Recipe Broker",
    component: "RecipeBroker",
    kebab: "recipe-broker",
    sqlFunctionRef: "p_recipe_broker",
    RestAPI: "recipeBroker",
    GraphQL: "recipeBroker",
    custom: "recipeBroker"
},
    recipeDisplay: {
    frontend: "recipeDisplay",
    backend: "recipe_display",
    database: "recipe_display",
    pretty: "Recipe Display",
    component: "RecipeDisplay",
    kebab: "recipe-display",
    sqlFunctionRef: "p_recipe_display",
    RestAPI: "recipeDisplay",
    GraphQL: "recipeDisplay",
    custom: "recipeDisplay"
},
    recipeFunction: {
    frontend: "recipeFunction",
    backend: "recipe_function",
    database: "recipe_function",
    pretty: "Recipe Function",
    component: "RecipeFunction",
    kebab: "recipe-function",
    sqlFunctionRef: "p_recipe_function",
    RestAPI: "recipeFunction",
    GraphQL: "recipeFunction",
    custom: "recipeFunction"
},
    recipeMessage: {
    frontend: "recipeMessage",
    backend: "recipe_message",
    database: "recipe_message",
    pretty: "Recipe Message",
    component: "RecipeMessage",
    kebab: "recipe-message",
    sqlFunctionRef: "p_recipe_message",
    RestAPI: "recipeMessage",
    GraphQL: "recipeMessage",
    custom: "recipeMessage"
},
    recipeMessageReorderQueue: {
    frontend: "recipeMessageReorderQueue",
    backend: "recipe_message_reorder_queue",
    database: "recipe_message_reorder_queue",
    pretty: "Recipe Message Reorder Queue",
    component: "RecipeMessageReorderQueue",
    kebab: "recipe-message-reorder-queue",
    sqlFunctionRef: "p_recipe_message_reorder_queue",
    RestAPI: "recipeMessageReorderQueue",
    GraphQL: "recipeMessageReorderQueue",
    custom: "recipeMessageReorderQueue"
},
    recipeModel: {
    frontend: "recipeModel",
    backend: "recipe_model",
    database: "recipe_model",
    pretty: "Recipe Model",
    component: "RecipeModel",
    kebab: "recipe-model",
    sqlFunctionRef: "p_recipe_model",
    RestAPI: "recipeModel",
    GraphQL: "recipeModel",
    custom: "recipeModel"
},
    recipeProcessor: {
    frontend: "recipeProcessor",
    backend: "recipe_processor",
    database: "recipe_processor",
    pretty: "Recipe Processor",
    component: "RecipeProcessor",
    kebab: "recipe-processor",
    sqlFunctionRef: "p_recipe_processor",
    RestAPI: "recipeProcessor",
    GraphQL: "recipeProcessor",
    custom: "recipeProcessor"
},
    recipeTool: {
    frontend: "recipeTool",
    backend: "recipe_tool",
    database: "recipe_tool",
    pretty: "Recipe Tool",
    component: "RecipeTool",
    kebab: "recipe-tool",
    sqlFunctionRef: "p_recipe_tool",
    RestAPI: "recipeTool",
    GraphQL: "recipeTool",
    custom: "recipeTool"
},
    registeredFunction: {
    frontend: "registeredFunction",
    backend: "registered_function",
    database: "registered_function",
    pretty: "Registered Function",
    component: "RegisteredFunction",
    kebab: "registered-function",
    sqlFunctionRef: "p_registered_function",
    RestAPI: "registeredFunction",
    GraphQL: "registeredFunction",
    custom: "registeredFunction"
},
    schemaTemplates: {
    frontend: "schemaTemplates",
    backend: "schema_templates",
    database: "schema_templates",
    pretty: "Schema Templates",
    component: "SchemaTemplates",
    kebab: "schema-templates",
    sqlFunctionRef: "p_schema_templates",
    RestAPI: "schemaTemplates",
    GraphQL: "schemaTemplates",
    custom: "schemaTemplates"
},
    scrapeBaseConfig: {
    frontend: "scrapeBaseConfig",
    backend: "scrape_base_config",
    database: "scrape_base_config",
    pretty: "Scrape Base Config",
    component: "ScrapeBaseConfig",
    kebab: "scrape-base-config",
    sqlFunctionRef: "p_scrape_base_config",
    RestAPI: "scrapeBaseConfig",
    GraphQL: "scrapeBaseConfig",
    custom: "scrapeBaseConfig"
},
    scrapeCachePolicy: {
    frontend: "scrapeCachePolicy",
    backend: "scrape_cache_policy",
    database: "scrape_cache_policy",
    pretty: "Scrape Cache Policy",
    component: "ScrapeCachePolicy",
    kebab: "scrape-cache-policy",
    sqlFunctionRef: "p_scrape_cache_policy",
    RestAPI: "scrapeCachePolicy",
    GraphQL: "scrapeCachePolicy",
    custom: "scrapeCachePolicy"
},
    scrapeConfiguration: {
    frontend: "scrapeConfiguration",
    backend: "scrape_configuration",
    database: "scrape_configuration",
    pretty: "Scrape Configuration",
    component: "ScrapeConfiguration",
    kebab: "scrape-configuration",
    sqlFunctionRef: "p_scrape_configuration",
    RestAPI: "scrapeConfiguration",
    GraphQL: "scrapeConfiguration",
    custom: "scrapeConfiguration"
},
    scrapeCycleRun: {
    frontend: "scrapeCycleRun",
    backend: "scrape_cycle_run",
    database: "scrape_cycle_run",
    pretty: "Scrape Cycle Run",
    component: "ScrapeCycleRun",
    kebab: "scrape-cycle-run",
    sqlFunctionRef: "p_scrape_cycle_run",
    RestAPI: "scrapeCycleRun",
    GraphQL: "scrapeCycleRun",
    custom: "scrapeCycleRun"
},
    scrapeCycleTracker: {
    frontend: "scrapeCycleTracker",
    backend: "scrape_cycle_tracker",
    database: "scrape_cycle_tracker",
    pretty: "Scrape Cycle Tracker",
    component: "ScrapeCycleTracker",
    kebab: "scrape-cycle-tracker",
    sqlFunctionRef: "p_scrape_cycle_tracker",
    RestAPI: "scrapeCycleTracker",
    GraphQL: "scrapeCycleTracker",
    custom: "scrapeCycleTracker"
},
    scrapeDomain: {
    frontend: "scrapeDomain",
    backend: "scrape_domain",
    database: "scrape_domain",
    pretty: "Scrape Domain",
    component: "ScrapeDomain",
    kebab: "scrape-domain",
    sqlFunctionRef: "p_scrape_domain",
    RestAPI: "scrapeDomain",
    GraphQL: "scrapeDomain",
    custom: "scrapeDomain"
},
    scrapeDomainDisallowedNotes: {
    frontend: "scrapeDomainDisallowedNotes",
    backend: "scrape_domain_disallowed_notes",
    database: "scrape_domain_disallowed_notes",
    pretty: "Scrape Domain Disallowed Notes",
    component: "ScrapeDomainDisallowedNotes",
    kebab: "scrape-domain-disallowed-notes",
    sqlFunctionRef: "p_scrape_domain_disallowed_notes",
    RestAPI: "scrapeDomainDisallowedNotes",
    GraphQL: "scrapeDomainDisallowedNotes",
    custom: "scrapeDomainDisallowedNotes"
},
    scrapeDomainNotes: {
    frontend: "scrapeDomainNotes",
    backend: "scrape_domain_notes",
    database: "scrape_domain_notes",
    pretty: "Scrape Domain Notes",
    component: "ScrapeDomainNotes",
    kebab: "scrape-domain-notes",
    sqlFunctionRef: "p_scrape_domain_notes",
    RestAPI: "scrapeDomainNotes",
    GraphQL: "scrapeDomainNotes",
    custom: "scrapeDomainNotes"
},
    scrapeDomainQuickScrapeSettings: {
    frontend: "scrapeDomainQuickScrapeSettings",
    backend: "scrape_domain_quick_scrape_settings",
    database: "scrape_domain_quick_scrape_settings",
    pretty: "Scrape Domain Quick Scrape Settings",
    component: "ScrapeDomainQuickScrapeSettings",
    kebab: "scrape-domain-quick-scrape-settings",
    sqlFunctionRef: "p_scrape_domain_quick_scrape_settings",
    RestAPI: "scrapeDomainQuickScrapeSettings",
    GraphQL: "scrapeDomainQuickScrapeSettings",
    custom: "scrapeDomainQuickScrapeSettings"
},
    scrapeDomainRobotsTxt: {
    frontend: "scrapeDomainRobotsTxt",
    backend: "scrape_domain_robots_txt",
    database: "scrape_domain_robots_txt",
    pretty: "Scrape Domain Robots Txt",
    component: "ScrapeDomainRobotsTxt",
    kebab: "scrape-domain-robots-txt",
    sqlFunctionRef: "p_scrape_domain_robots_txt",
    RestAPI: "scrapeDomainRobotsTxt",
    GraphQL: "scrapeDomainRobotsTxt",
    custom: "scrapeDomainRobotsTxt"
},
    scrapeDomainSitemap: {
    frontend: "scrapeDomainSitemap",
    backend: "scrape_domain_sitemap",
    database: "scrape_domain_sitemap",
    pretty: "Scrape Domain Sitemap",
    component: "ScrapeDomainSitemap",
    kebab: "scrape-domain-sitemap",
    sqlFunctionRef: "p_scrape_domain_sitemap",
    RestAPI: "scrapeDomainSitemap",
    GraphQL: "scrapeDomainSitemap",
    custom: "scrapeDomainSitemap"
},
    scrapeJob: {
    frontend: "scrapeJob",
    backend: "scrape_job",
    database: "scrape_job",
    pretty: "Scrape Job",
    component: "ScrapeJob",
    kebab: "scrape-job",
    sqlFunctionRef: "p_scrape_job",
    RestAPI: "scrapeJob",
    GraphQL: "scrapeJob",
    custom: "scrapeJob"
},
    scrapeOverride: {
    frontend: "scrapeOverride",
    backend: "scrape_override",
    database: "scrape_override",
    pretty: "Scrape Override",
    component: "ScrapeOverride",
    kebab: "scrape-override",
    sqlFunctionRef: "p_scrape_override",
    RestAPI: "scrapeOverride",
    GraphQL: "scrapeOverride",
    custom: "scrapeOverride"
},
    scrapeOverrideValue: {
    frontend: "scrapeOverrideValue",
    backend: "scrape_override_value",
    database: "scrape_override_value",
    pretty: "Scrape Override Value",
    component: "ScrapeOverrideValue",
    kebab: "scrape-override-value",
    sqlFunctionRef: "p_scrape_override_value",
    RestAPI: "scrapeOverrideValue",
    GraphQL: "scrapeOverrideValue",
    custom: "scrapeOverrideValue"
},
    scrapeParsedPage: {
    frontend: "scrapeParsedPage",
    backend: "scrape_parsed_page",
    database: "scrape_parsed_page",
    pretty: "Scrape Parsed Page",
    component: "ScrapeParsedPage",
    kebab: "scrape-parsed-page",
    sqlFunctionRef: "p_scrape_parsed_page",
    RestAPI: "scrapeParsedPage",
    GraphQL: "scrapeParsedPage",
    custom: "scrapeParsedPage"
},
    scrapePathPattern: {
    frontend: "scrapePathPattern",
    backend: "scrape_path_pattern",
    database: "scrape_path_pattern",
    pretty: "Scrape Path Pattern",
    component: "ScrapePathPattern",
    kebab: "scrape-path-pattern",
    sqlFunctionRef: "p_scrape_path_pattern",
    RestAPI: "scrapePathPattern",
    GraphQL: "scrapePathPattern",
    custom: "scrapePathPattern"
},
    scrapePathPatternCachePolicy: {
    frontend: "scrapePathPatternCachePolicy",
    backend: "scrape_path_pattern_cache_policy",
    database: "scrape_path_pattern_cache_policy",
    pretty: "Scrape Path Pattern Cache Policy",
    component: "ScrapePathPatternCachePolicy",
    kebab: "scrape-path-pattern-cache-policy",
    sqlFunctionRef: "p_scrape_path_pattern_cache_policy",
    RestAPI: "scrapePathPatternCachePolicy",
    GraphQL: "scrapePathPatternCachePolicy",
    custom: "scrapePathPatternCachePolicy"
},
    scrapePathPatternOverride: {
    frontend: "scrapePathPatternOverride",
    backend: "scrape_path_pattern_override",
    database: "scrape_path_pattern_override",
    pretty: "Scrape Path Pattern Override",
    component: "ScrapePathPatternOverride",
    kebab: "scrape-path-pattern-override",
    sqlFunctionRef: "p_scrape_path_pattern_override",
    RestAPI: "scrapePathPatternOverride",
    GraphQL: "scrapePathPatternOverride",
    custom: "scrapePathPatternOverride"
},
    scrapeQuickFailureLog: {
    frontend: "scrapeQuickFailureLog",
    backend: "scrape_quick_failure_log",
    database: "scrape_quick_failure_log",
    pretty: "Scrape Quick Failure Log",
    component: "ScrapeQuickFailureLog",
    kebab: "scrape-quick-failure-log",
    sqlFunctionRef: "p_scrape_quick_failure_log",
    RestAPI: "scrapeQuickFailureLog",
    GraphQL: "scrapeQuickFailureLog",
    custom: "scrapeQuickFailureLog"
},
    scrapeTask: {
    frontend: "scrapeTask",
    backend: "scrape_task",
    database: "scrape_task",
    pretty: "Scrape Task",
    component: "ScrapeTask",
    kebab: "scrape-task",
    sqlFunctionRef: "p_scrape_task",
    RestAPI: "scrapeTask",
    GraphQL: "scrapeTask",
    custom: "scrapeTask"
},
    scrapeTaskResponse: {
    frontend: "scrapeTaskResponse",
    backend: "scrape_task_response",
    database: "scrape_task_response",
    pretty: "Scrape Task Response",
    component: "ScrapeTaskResponse",
    kebab: "scrape-task-response",
    sqlFunctionRef: "p_scrape_task_response",
    RestAPI: "scrapeTaskResponse",
    GraphQL: "scrapeTaskResponse",
    custom: "scrapeTaskResponse"
},
    subcategory: {
    frontend: "subcategory",
    backend: "subcategory",
    database: "subcategory",
    pretty: "Subcategory",
    component: "Subcategory",
    kebab: "subcategory",
    sqlFunctionRef: "p_subcategory",
    RestAPI: "subcategory",
    GraphQL: "subcategory",
    custom: "subcategory"
},
    systemFunction: {
    frontend: "systemFunction",
    backend: "system_function",
    database: "system_function",
    pretty: "System Function",
    component: "SystemFunction",
    kebab: "system-function",
    sqlFunctionRef: "p_system_function",
    RestAPI: "systemFunction",
    GraphQL: "systemFunction",
    custom: "systemFunction"
},
    tableData: {
    frontend: "tableData",
    backend: "table_data",
    database: "table_data",
    pretty: "Table Data",
    component: "TableData",
    kebab: "table-data",
    sqlFunctionRef: "p_table_data",
    RestAPI: "tableData",
    GraphQL: "tableData",
    custom: "tableData"
},
    tableFields: {
    frontend: "tableFields",
    backend: "table_fields",
    database: "table_fields",
    pretty: "Table Fields",
    component: "TableFields",
    kebab: "table-fields",
    sqlFunctionRef: "p_table_fields",
    RestAPI: "tableFields",
    GraphQL: "tableFields",
    custom: "tableFields"
},
    taskAssignments: {
    frontend: "taskAssignments",
    backend: "task_assignments",
    database: "task_assignments",
    pretty: "Task Assignments",
    component: "TaskAssignments",
    kebab: "task-assignments",
    sqlFunctionRef: "p_task_assignments",
    RestAPI: "taskAssignments",
    GraphQL: "taskAssignments",
    custom: "taskAssignments"
},
    taskAttachments: {
    frontend: "taskAttachments",
    backend: "task_attachments",
    database: "task_attachments",
    pretty: "Task Attachments",
    component: "TaskAttachments",
    kebab: "task-attachments",
    sqlFunctionRef: "p_task_attachments",
    RestAPI: "taskAttachments",
    GraphQL: "taskAttachments",
    custom: "taskAttachments"
},
    taskComments: {
    frontend: "taskComments",
    backend: "task_comments",
    database: "task_comments",
    pretty: "Task Comments",
    component: "TaskComments",
    kebab: "task-comments",
    sqlFunctionRef: "p_task_comments",
    RestAPI: "taskComments",
    GraphQL: "taskComments",
    custom: "taskComments"
},
    tasks: {
    frontend: "tasks",
    backend: "tasks",
    database: "tasks",
    pretty: "Tasks",
    component: "Tasks",
    kebab: "tasks",
    sqlFunctionRef: "p_tasks",
    RestAPI: "tasks",
    GraphQL: "tasks",
    custom: "tasks"
},
    tool: {
    frontend: "tool",
    backend: "tool",
    database: "tool",
    pretty: "Tool",
    component: "Tool",
    kebab: "tool",
    sqlFunctionRef: "p_tool",
    RestAPI: "tool",
    GraphQL: "tool",
    custom: "tool"
},
    transformer: {
    frontend: "transformer",
    backend: "transformer",
    database: "transformer",
    pretty: "Transformer",
    component: "Transformer",
    kebab: "transformer",
    sqlFunctionRef: "p_transformer",
    RestAPI: "transformer",
    GraphQL: "transformer",
    custom: "transformer"
},
    userListItems: {
    frontend: "userListItems",
    backend: "user_list_items",
    database: "user_list_items",
    pretty: "User List Items",
    component: "UserListItems",
    kebab: "user-list-items",
    sqlFunctionRef: "p_user_list_items",
    RestAPI: "userListItems",
    GraphQL: "userListItems",
    custom: "userListItems"
},
    userLists: {
    frontend: "userLists",
    backend: "user_lists",
    database: "user_lists",
    pretty: "User Lists",
    component: "UserLists",
    kebab: "user-lists",
    sqlFunctionRef: "p_user_lists",
    RestAPI: "userLists",
    GraphQL: "userLists",
    custom: "userLists"
},
    userPreferences: {
    frontend: "userPreferences",
    backend: "user_preferences",
    database: "user_preferences",
    pretty: "User Preferences",
    component: "UserPreferences",
    kebab: "user-preferences",
    sqlFunctionRef: "p_user_preferences",
    RestAPI: "userPreferences",
    GraphQL: "userPreferences",
    custom: "userPreferences"
},
    userTables: {
    frontend: "userTables",
    backend: "user_tables",
    database: "user_tables",
    pretty: "User Tables",
    component: "UserTables",
    kebab: "user-tables",
    sqlFunctionRef: "p_user_tables",
    RestAPI: "userTables",
    GraphQL: "userTables",
    custom: "userTables"
},
    wcClaim: {
    frontend: "wcClaim",
    backend: "wc_claim",
    database: "wc_claim",
    pretty: "Wc Claim",
    component: "WcClaim",
    kebab: "wc-claim",
    sqlFunctionRef: "p_wc_claim",
    RestAPI: "wcClaim",
    GraphQL: "wcClaim",
    custom: "wcClaim"
},
    wcImpairmentDefinition: {
    frontend: "wcImpairmentDefinition",
    backend: "wc_impairment_definition",
    database: "wc_impairment_definition",
    pretty: "Wc Impairment Definition",
    component: "WcImpairmentDefinition",
    kebab: "wc-impairment-definition",
    sqlFunctionRef: "p_wc_impairment_definition",
    RestAPI: "wcImpairmentDefinition",
    GraphQL: "wcImpairmentDefinition",
    custom: "wcImpairmentDefinition"
},
    wcInjury: {
    frontend: "wcInjury",
    backend: "wc_injury",
    database: "wc_injury",
    pretty: "Wc Injury",
    component: "WcInjury",
    kebab: "wc-injury",
    sqlFunctionRef: "p_wc_injury",
    RestAPI: "wcInjury",
    GraphQL: "wcInjury",
    custom: "wcInjury"
},
    wcReport: {
    frontend: "wcReport",
    backend: "wc_report",
    database: "wc_report",
    pretty: "Wc Report",
    component: "WcReport",
    kebab: "wc-report",
    sqlFunctionRef: "p_wc_report",
    RestAPI: "wcReport",
    GraphQL: "wcReport",
    custom: "wcReport"
},
    workflow: {
    frontend: "workflow",
    backend: "workflow",
    database: "workflow",
    pretty: "Workflow",
    component: "Workflow",
    kebab: "workflow",
    sqlFunctionRef: "p_workflow",
    RestAPI: "workflow",
    GraphQL: "workflow",
    custom: "workflow"
},
    workflowData: {
    frontend: "workflowData",
    backend: "workflow_data",
    database: "workflow_data",
    pretty: "Workflow Data",
    component: "WorkflowData",
    kebab: "workflow-data",
    sqlFunctionRef: "p_workflow_data",
    RestAPI: "workflowData",
    GraphQL: "workflowData",
    custom: "workflowData"
},
    workflowEdge: {
    frontend: "workflowEdge",
    backend: "workflow_edge",
    database: "workflow_edge",
    pretty: "Workflow Edge",
    component: "WorkflowEdge",
    kebab: "workflow-edge",
    sqlFunctionRef: "p_workflow_edge",
    RestAPI: "workflowEdge",
    GraphQL: "workflowEdge",
    custom: "workflowEdge"
},
    workflowNode: {
    frontend: "workflowNode",
    backend: "workflow_node",
    database: "workflow_node",
    pretty: "Workflow Node",
    component: "WorkflowNode",
    kebab: "workflow-node",
    sqlFunctionRef: "p_workflow_node",
    RestAPI: "workflowNode",
    GraphQL: "workflowNode",
    custom: "workflowNode"
},
    workflowNodeData: {
    frontend: "workflowNodeData",
    backend: "workflow_node_data",
    database: "workflow_node_data",
    pretty: "Workflow Node Data",
    component: "WorkflowNodeData",
    kebab: "workflow-node-data",
    sqlFunctionRef: "p_workflow_node_data",
    RestAPI: "workflowNodeData",
    GraphQL: "workflowNodeData",
    custom: "workflowNodeData"
},
    workflowRelay: {
    frontend: "workflowRelay",
    backend: "workflow_relay",
    database: "workflow_relay",
    pretty: "Workflow Relay",
    component: "WorkflowRelay",
    kebab: "workflow-relay",
    sqlFunctionRef: "p_workflow_relay",
    RestAPI: "workflowRelay",
    GraphQL: "workflowRelay",
    custom: "workflowRelay"
},
    workflowUserInput: {
    frontend: "workflowUserInput",
    backend: "workflow_user_input",
    database: "workflow_user_input",
    pretty: "Workflow User Input",
    component: "WorkflowUserInput",
    kebab: "workflow-user-input",
    sqlFunctionRef: "p_workflow_user_input",
    RestAPI: "workflowUserInput",
    GraphQL: "workflowUserInput",
    custom: "workflowUserInput"
},
};

export const fieldNameFormats: FieldNameFormatMap = {
    action: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    matrix: {
        frontend: "matrix",
        backend: "matrix",
        database: "matrix",
        pretty: "Matrix",
        component: "Matrix",
        kebab: "matrix",
        sqlFunctionRef: "p_matrix",
        RestAPI: "matrix",
        GraphQL: "matrix",
        custom: "matrix"
    },
    transformer: {
        frontend: "transformer",
        backend: "transformer",
        database: "transformer",
        pretty: "Transformer",
        component: "Transformer",
        kebab: "transformer",
        sqlFunctionRef: "p_transformer",
        RestAPI: "transformer",
        GraphQL: "transformer",
        custom: "transformer"
    },
    nodeType: {
        frontend: "nodeType",
        backend: "node_type",
        database: "node_type",
        pretty: "Node Type",
        component: "NodeType",
        kebab: "node-type",
        sqlFunctionRef: "p_node_type",
        RestAPI: "nodeType",
        GraphQL: "nodeType",
        custom: "nodeType"
    },
    referenceId: {
        frontend: "referenceId",
        backend: "reference_id",
        database: "reference_id",
        pretty: "Reference Id",
        component: "ReferenceId",
        kebab: "reference-id",
        sqlFunctionRef: "p_reference_id",
        RestAPI: "referenceId",
        GraphQL: "referenceId",
        custom: "referenceId"
    },
    automationMatrixReference: {
        frontend: "automationMatrixReference",
        backend: "automation_matrix_reference",
        database: "ref_automation_matrix",
        pretty: "Automation Matrix Reference",
        component: "AutomationMatrixReference",
        kebab: "automation-matrixReference",
        sqlFunctionRef: "p_ref_automation_matrix",
        RestAPI: "automationMatrixReference",
        GraphQL: "automationMatrixReference",
        custom: "automationMatrixReference"
    },
    transformerReference: {
        frontend: "transformerReference",
        backend: "transformer_reference",
        database: "ref_transformer",
        pretty: "Transformer Reference",
        component: "TransformerReference",
        kebab: "transformerReference",
        sqlFunctionRef: "p_ref_transformer",
        RestAPI: "transformerReference",
        GraphQL: "transformerReference",
        custom: "transformerReference"
    }
},
    admins: {
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    }
},
    aiAgent: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    recipeId: {
        frontend: "recipeId",
        backend: "recipe_id",
        database: "recipe_id",
        pretty: "Recipe Id",
        component: "RecipeId",
        kebab: "recipe-id",
        sqlFunctionRef: "p_recipe_id",
        RestAPI: "recipeId",
        GraphQL: "recipeId",
        custom: "recipeId"
    },
    aiSettingsId: {
        frontend: "aiSettingsId",
        backend: "ai_settings_id",
        database: "ai_settings_id",
        pretty: "Ai Settings Id",
        component: "AiSettingsId",
        kebab: "ai-settings-id",
        sqlFunctionRef: "p_ai_settings_id",
        RestAPI: "aiSettingsId",
        GraphQL: "aiSettingsId",
        custom: "aiSettingsId"
    },
    systemMessageOverride: {
        frontend: "systemMessageOverride",
        backend: "system_message_override",
        database: "system_message_override",
        pretty: "System Message Override",
        component: "SystemMessageOverride",
        kebab: "system-message-override",
        sqlFunctionRef: "p_system_message_override",
        RestAPI: "systemMessageOverride",
        GraphQL: "systemMessageOverride",
        custom: "systemMessageOverride"
    },
    aiSettingsReference: {
        frontend: "aiSettingsReference",
        backend: "ai_settings_reference",
        database: "ref_ai_settings",
        pretty: "Ai Settings Reference",
        component: "AiSettingsReference",
        kebab: "ai-settingsReference",
        sqlFunctionRef: "p_ref_ai_settings",
        RestAPI: "aiSettingsReference",
        GraphQL: "aiSettingsReference",
        custom: "aiSettingsReference"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    }
},
    aiEndpoint: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    provider: {
        frontend: "provider",
        backend: "provider",
        database: "provider",
        pretty: "Provider",
        component: "Provider",
        kebab: "provider",
        sqlFunctionRef: "p_provider",
        RestAPI: "provider",
        GraphQL: "provider",
        custom: "provider"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    additionalCost: {
        frontend: "additionalCost",
        backend: "additional_cost",
        database: "additional_cost",
        pretty: "Additional Cost",
        component: "AdditionalCost",
        kebab: "additional-cost",
        sqlFunctionRef: "p_additional_cost",
        RestAPI: "additionalCost",
        GraphQL: "additionalCost",
        custom: "additionalCost"
    },
    costDetails: {
        frontend: "costDetails",
        backend: "cost_details",
        database: "cost_details",
        pretty: "Cost Details",
        component: "CostDetails",
        kebab: "cost-details",
        sqlFunctionRef: "p_cost_details",
        RestAPI: "costDetails",
        GraphQL: "costDetails",
        custom: "costDetails"
    },
    params: {
        frontend: "params",
        backend: "params",
        database: "params",
        pretty: "Params",
        component: "Params",
        kebab: "params",
        sqlFunctionRef: "p_params",
        RestAPI: "params",
        GraphQL: "params",
        custom: "params"
    },
    aiModelEndpointInverse: {
        frontend: "aiModelEndpointInverse",
        backend: "ai_model_endpoint_Inverse",
        database: "ifk_ai_model_endpoint",
        pretty: "Ai Model Endpoint Inverse",
        component: "AiModelEndpointInverse",
        kebab: "ai-model-endpointInverse",
        sqlFunctionRef: "p_ifk_ai_model_endpoint",
        RestAPI: "aiModelEndpointInverse",
        GraphQL: "aiModelEndpointInverse",
        custom: "aiModelEndpointInverse"
    },
    aiSettingsInverse: {
        frontend: "aiSettingsInverse",
        backend: "ai_settings_Inverse",
        database: "ifk_ai_settings",
        pretty: "Ai Settings Inverse",
        component: "AiSettingsInverse",
        kebab: "ai-settingsInverse",
        sqlFunctionRef: "p_ifk_ai_settings",
        RestAPI: "aiSettingsInverse",
        GraphQL: "aiSettingsInverse",
        custom: "aiSettingsInverse"
    }
},
    aiModel: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    commonName: {
        frontend: "commonName",
        backend: "common_name",
        database: "common_name",
        pretty: "Common Name",
        component: "CommonName",
        kebab: "common-name",
        sqlFunctionRef: "p_common_name",
        RestAPI: "commonName",
        GraphQL: "commonName",
        custom: "commonName"
    },
    modelClass: {
        frontend: "modelClass",
        backend: "model_class",
        database: "model_class",
        pretty: "Model Class",
        component: "ModelClass",
        kebab: "model-class",
        sqlFunctionRef: "p_model_class",
        RestAPI: "modelClass",
        GraphQL: "modelClass",
        custom: "modelClass"
    },
    provider: {
        frontend: "provider",
        backend: "provider",
        database: "provider",
        pretty: "Provider",
        component: "Provider",
        kebab: "provider",
        sqlFunctionRef: "p_provider",
        RestAPI: "provider",
        GraphQL: "provider",
        custom: "provider"
    },
    endpoints: {
        frontend: "endpoints",
        backend: "endpoints",
        database: "endpoints",
        pretty: "Endpoints",
        component: "Endpoints",
        kebab: "endpoints",
        sqlFunctionRef: "p_endpoints",
        RestAPI: "endpoints",
        GraphQL: "endpoints",
        custom: "endpoints"
    },
    contextWindow: {
        frontend: "contextWindow",
        backend: "context_window",
        database: "context_window",
        pretty: "Context Window",
        component: "ContextWindow",
        kebab: "context-window",
        sqlFunctionRef: "p_context_window",
        RestAPI: "contextWindow",
        GraphQL: "contextWindow",
        custom: "contextWindow"
    },
    maxTokens: {
        frontend: "maxTokens",
        backend: "max_tokens",
        database: "max_tokens",
        pretty: "Max Tokens",
        component: "MaxTokens",
        kebab: "max-tokens",
        sqlFunctionRef: "p_max_tokens",
        RestAPI: "maxTokens",
        GraphQL: "maxTokens",
        custom: "maxTokens"
    },
    capabilities: {
        frontend: "capabilities",
        backend: "capabilities",
        database: "capabilities",
        pretty: "Capabilities",
        component: "Capabilities",
        kebab: "capabilities",
        sqlFunctionRef: "p_capabilities",
        RestAPI: "capabilities",
        GraphQL: "capabilities",
        custom: "capabilities"
    },
    controls: {
        frontend: "controls",
        backend: "controls",
        database: "controls",
        pretty: "Controls",
        component: "Controls",
        kebab: "controls",
        sqlFunctionRef: "p_controls",
        RestAPI: "controls",
        GraphQL: "controls",
        custom: "controls"
    },
    modelProvider: {
        frontend: "modelProvider",
        backend: "model_provider",
        database: "model_provider",
        pretty: "Model Provider",
        component: "ModelProvider",
        kebab: "model-provider",
        sqlFunctionRef: "p_model_provider",
        RestAPI: "modelProvider",
        GraphQL: "modelProvider",
        custom: "modelProvider"
    },
    aiProviderReference: {
        frontend: "aiProviderReference",
        backend: "ai_provider_reference",
        database: "ref_ai_provider",
        pretty: "Ai Provider Reference",
        component: "AiProviderReference",
        kebab: "ai-providerReference",
        sqlFunctionRef: "p_ref_ai_provider",
        RestAPI: "aiProviderReference",
        GraphQL: "aiProviderReference",
        custom: "aiProviderReference"
    },
    aiModelEndpointInverse: {
        frontend: "aiModelEndpointInverse",
        backend: "ai_model_endpoint_Inverse",
        database: "ifk_ai_model_endpoint",
        pretty: "Ai Model Endpoint Inverse",
        component: "AiModelEndpointInverse",
        kebab: "ai-model-endpointInverse",
        sqlFunctionRef: "p_ifk_ai_model_endpoint",
        RestAPI: "aiModelEndpointInverse",
        GraphQL: "aiModelEndpointInverse",
        custom: "aiModelEndpointInverse"
    },
    aiSettingsInverse: {
        frontend: "aiSettingsInverse",
        backend: "ai_settings_Inverse",
        database: "ifk_ai_settings",
        pretty: "Ai Settings Inverse",
        component: "AiSettingsInverse",
        kebab: "ai-settingsInverse",
        sqlFunctionRef: "p_ifk_ai_settings",
        RestAPI: "aiSettingsInverse",
        GraphQL: "aiSettingsInverse",
        custom: "aiSettingsInverse"
    },
    recipeModelInverse: {
        frontend: "recipeModelInverse",
        backend: "recipe_model_Inverse",
        database: "ifk_recipe_model",
        pretty: "Recipe Model Inverse",
        component: "RecipeModelInverse",
        kebab: "recipe-modelInverse",
        sqlFunctionRef: "p_ifk_recipe_model",
        RestAPI: "recipeModelInverse",
        GraphQL: "recipeModelInverse",
        custom: "recipeModelInverse"
    }
},
    aiModelEndpoint: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    aiModelId: {
        frontend: "aiModelId",
        backend: "ai_model_id",
        database: "ai_model_id",
        pretty: "Ai Model Id",
        component: "AiModelId",
        kebab: "ai-model-id",
        sqlFunctionRef: "p_ai_model_id",
        RestAPI: "aiModelId",
        GraphQL: "aiModelId",
        custom: "aiModelId"
    },
    aiEndpointId: {
        frontend: "aiEndpointId",
        backend: "ai_endpoint_id",
        database: "ai_endpoint_id",
        pretty: "Ai Endpoint Id",
        component: "AiEndpointId",
        kebab: "ai-endpoint-id",
        sqlFunctionRef: "p_ai_endpoint_id",
        RestAPI: "aiEndpointId",
        GraphQL: "aiEndpointId",
        custom: "aiEndpointId"
    },
    available: {
        frontend: "available",
        backend: "available",
        database: "available",
        pretty: "Available",
        component: "Available",
        kebab: "available",
        sqlFunctionRef: "p_available",
        RestAPI: "available",
        GraphQL: "available",
        custom: "available"
    },
    endpointPriority: {
        frontend: "endpointPriority",
        backend: "endpoint_priority",
        database: "endpoint_priority",
        pretty: "Endpoint Priority",
        component: "EndpointPriority",
        kebab: "endpoint-priority",
        sqlFunctionRef: "p_endpoint_priority",
        RestAPI: "endpointPriority",
        GraphQL: "endpointPriority",
        custom: "endpointPriority"
    },
    configuration: {
        frontend: "configuration",
        backend: "configuration",
        database: "configuration",
        pretty: "Configuration",
        component: "Configuration",
        kebab: "configuration",
        sqlFunctionRef: "p_configuration",
        RestAPI: "configuration",
        GraphQL: "configuration",
        custom: "configuration"
    },
    notes: {
        frontend: "notes",
        backend: "notes",
        database: "notes",
        pretty: "Notes",
        component: "Notes",
        kebab: "notes",
        sqlFunctionRef: "p_notes",
        RestAPI: "notes",
        GraphQL: "notes",
        custom: "notes"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    aiEndpointReference: {
        frontend: "aiEndpointReference",
        backend: "ai_endpoint_reference",
        database: "ref_ai_endpoint",
        pretty: "Ai Endpoint Reference",
        component: "AiEndpointReference",
        kebab: "ai-endpointReference",
        sqlFunctionRef: "p_ref_ai_endpoint",
        RestAPI: "aiEndpointReference",
        GraphQL: "aiEndpointReference",
        custom: "aiEndpointReference"
    },
    aiModelReference: {
        frontend: "aiModelReference",
        backend: "ai_model_reference",
        database: "ref_ai_model",
        pretty: "Ai Model Reference",
        component: "AiModelReference",
        kebab: "ai-modelReference",
        sqlFunctionRef: "p_ref_ai_model",
        RestAPI: "aiModelReference",
        GraphQL: "aiModelReference",
        custom: "aiModelReference"
    }
},
    aiProvider: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    companyDescription: {
        frontend: "companyDescription",
        backend: "company_description",
        database: "company_description",
        pretty: "Company Description",
        component: "CompanyDescription",
        kebab: "company-description",
        sqlFunctionRef: "p_company_description",
        RestAPI: "companyDescription",
        GraphQL: "companyDescription",
        custom: "companyDescription"
    },
    documentationLink: {
        frontend: "documentationLink",
        backend: "documentation_link",
        database: "documentation_link",
        pretty: "Documentation Link",
        component: "DocumentationLink",
        kebab: "documentation-link",
        sqlFunctionRef: "p_documentation_link",
        RestAPI: "documentationLink",
        GraphQL: "documentationLink",
        custom: "documentationLink"
    },
    modelsLink: {
        frontend: "modelsLink",
        backend: "models_link",
        database: "models_link",
        pretty: "Models Link",
        component: "ModelsLink",
        kebab: "models-link",
        sqlFunctionRef: "p_models_link",
        RestAPI: "modelsLink",
        GraphQL: "modelsLink",
        custom: "modelsLink"
    },
    aiSettingsInverse: {
        frontend: "aiSettingsInverse",
        backend: "ai_settings_Inverse",
        database: "ifk_ai_settings",
        pretty: "Ai Settings Inverse",
        component: "AiSettingsInverse",
        kebab: "ai-settingsInverse",
        sqlFunctionRef: "p_ifk_ai_settings",
        RestAPI: "aiSettingsInverse",
        GraphQL: "aiSettingsInverse",
        custom: "aiSettingsInverse"
    },
    aiModelInverse: {
        frontend: "aiModelInverse",
        backend: "ai_model_Inverse",
        database: "ifk_ai_model",
        pretty: "Ai Model Inverse",
        component: "AiModelInverse",
        kebab: "ai-modelInverse",
        sqlFunctionRef: "p_ifk_ai_model",
        RestAPI: "aiModelInverse",
        GraphQL: "aiModelInverse",
        custom: "aiModelInverse"
    }
},
    aiSettings: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    aiEndpoint: {
        frontend: "aiEndpoint",
        backend: "ai_endpoint",
        database: "ai_endpoint",
        pretty: "Ai Endpoint",
        component: "AiEndpoint",
        kebab: "ai-endpoint",
        sqlFunctionRef: "p_ai_endpoint",
        RestAPI: "aiEndpoint",
        GraphQL: "aiEndpoint",
        custom: "aiEndpoint"
    },
    aiProvider: {
        frontend: "aiProvider",
        backend: "ai_provider",
        database: "ai_provider",
        pretty: "Ai Provider",
        component: "AiProvider",
        kebab: "ai-provider",
        sqlFunctionRef: "p_ai_provider",
        RestAPI: "aiProvider",
        GraphQL: "aiProvider",
        custom: "aiProvider"
    },
    aiModel: {
        frontend: "aiModel",
        backend: "ai_model",
        database: "ai_model",
        pretty: "Ai Model",
        component: "AiModel",
        kebab: "ai-model",
        sqlFunctionRef: "p_ai_model",
        RestAPI: "aiModel",
        GraphQL: "aiModel",
        custom: "aiModel"
    },
    temperature: {
        frontend: "temperature",
        backend: "temperature",
        database: "temperature",
        pretty: "Temperature",
        component: "Temperature",
        kebab: "temperature",
        sqlFunctionRef: "p_temperature",
        RestAPI: "temperature",
        GraphQL: "temperature",
        custom: "temperature"
    },
    maxTokens: {
        frontend: "maxTokens",
        backend: "max_tokens",
        database: "max_tokens",
        pretty: "Max Tokens",
        component: "MaxTokens",
        kebab: "max-tokens",
        sqlFunctionRef: "p_max_tokens",
        RestAPI: "maxTokens",
        GraphQL: "maxTokens",
        custom: "maxTokens"
    },
    topP: {
        frontend: "topP",
        backend: "top_p",
        database: "top_p",
        pretty: "Top P",
        component: "TopP",
        kebab: "top-p",
        sqlFunctionRef: "p_top_p",
        RestAPI: "topP",
        GraphQL: "topP",
        custom: "topP"
    },
    frequencyPenalty: {
        frontend: "frequencyPenalty",
        backend: "frequency_penalty",
        database: "frequency_penalty",
        pretty: "Frequency Penalty",
        component: "FrequencyPenalty",
        kebab: "frequency-penalty",
        sqlFunctionRef: "p_frequency_penalty",
        RestAPI: "frequencyPenalty",
        GraphQL: "frequencyPenalty",
        custom: "frequencyPenalty"
    },
    presencePenalty: {
        frontend: "presencePenalty",
        backend: "presence_penalty",
        database: "presence_penalty",
        pretty: "Presence Penalty",
        component: "PresencePenalty",
        kebab: "presence-penalty",
        sqlFunctionRef: "p_presence_penalty",
        RestAPI: "presencePenalty",
        GraphQL: "presencePenalty",
        custom: "presencePenalty"
    },
    stream: {
        frontend: "stream",
        backend: "stream",
        database: "stream",
        pretty: "Stream",
        component: "Stream",
        kebab: "stream",
        sqlFunctionRef: "p_stream",
        RestAPI: "stream",
        GraphQL: "stream",
        custom: "stream"
    },
    responseFormat: {
        frontend: "responseFormat",
        backend: "response_format",
        database: "response_format",
        pretty: "Response Format",
        component: "ResponseFormat",
        kebab: "response-format",
        sqlFunctionRef: "p_response_format",
        RestAPI: "responseFormat",
        GraphQL: "responseFormat",
        custom: "responseFormat"
    },
    size: {
        frontend: "size",
        backend: "size",
        database: "size",
        pretty: "Size",
        component: "Size",
        kebab: "size",
        sqlFunctionRef: "p_size",
        RestAPI: "size",
        GraphQL: "size",
        custom: "size"
    },
    quality: {
        frontend: "quality",
        backend: "quality",
        database: "quality",
        pretty: "Quality",
        component: "Quality",
        kebab: "quality",
        sqlFunctionRef: "p_quality",
        RestAPI: "quality",
        GraphQL: "quality",
        custom: "quality"
    },
    count: {
        frontend: "count",
        backend: "count",
        database: "count",
        pretty: "Count",
        component: "Count",
        kebab: "count",
        sqlFunctionRef: "p_count",
        RestAPI: "count",
        GraphQL: "count",
        custom: "count"
    },
    audioVoice: {
        frontend: "audioVoice",
        backend: "audio_voice",
        database: "audio_voice",
        pretty: "Audio Voice",
        component: "AudioVoice",
        kebab: "audio-voice",
        sqlFunctionRef: "p_audio_voice",
        RestAPI: "audioVoice",
        GraphQL: "audioVoice",
        custom: "audioVoice"
    },
    audioFormat: {
        frontend: "audioFormat",
        backend: "audio_format",
        database: "audio_format",
        pretty: "Audio Format",
        component: "AudioFormat",
        kebab: "audio-format",
        sqlFunctionRef: "p_audio_format",
        RestAPI: "audioFormat",
        GraphQL: "audioFormat",
        custom: "audioFormat"
    },
    modalities: {
        frontend: "modalities",
        backend: "modalities",
        database: "modalities",
        pretty: "Modalities",
        component: "Modalities",
        kebab: "modalities",
        sqlFunctionRef: "p_modalities",
        RestAPI: "modalities",
        GraphQL: "modalities",
        custom: "modalities"
    },
    tools: {
        frontend: "tools",
        backend: "tools",
        database: "tools",
        pretty: "Tools",
        component: "Tools",
        kebab: "tools",
        sqlFunctionRef: "p_tools",
        RestAPI: "tools",
        GraphQL: "tools",
        custom: "tools"
    },
    presetName: {
        frontend: "presetName",
        backend: "preset_name",
        database: "preset_name",
        pretty: "Preset Name",
        component: "PresetName",
        kebab: "preset-name",
        sqlFunctionRef: "p_preset_name",
        RestAPI: "presetName",
        GraphQL: "presetName",
        custom: "presetName"
    },
    aiEndpointReference: {
        frontend: "aiEndpointReference",
        backend: "ai_endpoint_reference",
        database: "ref_ai_endpoint",
        pretty: "Ai Endpoint Reference",
        component: "AiEndpointReference",
        kebab: "ai-endpointReference",
        sqlFunctionRef: "p_ref_ai_endpoint",
        RestAPI: "aiEndpointReference",
        GraphQL: "aiEndpointReference",
        custom: "aiEndpointReference"
    },
    aiModelReference: {
        frontend: "aiModelReference",
        backend: "ai_model_reference",
        database: "ref_ai_model",
        pretty: "Ai Model Reference",
        component: "AiModelReference",
        kebab: "ai-modelReference",
        sqlFunctionRef: "p_ref_ai_model",
        RestAPI: "aiModelReference",
        GraphQL: "aiModelReference",
        custom: "aiModelReference"
    },
    aiProviderReference: {
        frontend: "aiProviderReference",
        backend: "ai_provider_reference",
        database: "ref_ai_provider",
        pretty: "Ai Provider Reference",
        component: "AiProviderReference",
        kebab: "ai-providerReference",
        sqlFunctionRef: "p_ref_ai_provider",
        RestAPI: "aiProviderReference",
        GraphQL: "aiProviderReference",
        custom: "aiProviderReference"
    },
    aiAgentInverse: {
        frontend: "aiAgentInverse",
        backend: "ai_agent_Inverse",
        database: "ifk_ai_agent",
        pretty: "Ai Agent Inverse",
        component: "AiAgentInverse",
        kebab: "ai-agentInverse",
        sqlFunctionRef: "p_ifk_ai_agent",
        RestAPI: "aiAgentInverse",
        GraphQL: "aiAgentInverse",
        custom: "aiAgentInverse"
    }
},
    aiTrainingData: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    systemPrompt: {
        frontend: "systemPrompt",
        backend: "system_prompt",
        database: "system_prompt",
        pretty: "System Prompt",
        component: "SystemPrompt",
        kebab: "system-prompt",
        sqlFunctionRef: "p_system_prompt",
        RestAPI: "systemPrompt",
        GraphQL: "systemPrompt",
        custom: "systemPrompt"
    },
    userQuery: {
        frontend: "userQuery",
        backend: "user_query",
        database: "user_query",
        pretty: "User Query",
        component: "UserQuery",
        kebab: "user-query",
        sqlFunctionRef: "p_user_query",
        RestAPI: "userQuery",
        GraphQL: "userQuery",
        custom: "userQuery"
    },
    thinkingContent: {
        frontend: "thinkingContent",
        backend: "thinking_content",
        database: "thinking_content",
        pretty: "Thinking Content",
        component: "ThinkingContent",
        kebab: "thinking-content",
        sqlFunctionRef: "p_thinking_content",
        RestAPI: "thinkingContent",
        GraphQL: "thinkingContent",
        custom: "thinkingContent"
    },
    responseContent: {
        frontend: "responseContent",
        backend: "response_content",
        database: "response_content",
        pretty: "Response Content",
        component: "ResponseContent",
        kebab: "response-content",
        sqlFunctionRef: "p_response_content",
        RestAPI: "responseContent",
        GraphQL: "responseContent",
        custom: "responseContent"
    },
    reflectionContent: {
        frontend: "reflectionContent",
        backend: "reflection_content",
        database: "reflection_content",
        pretty: "Reflection Content",
        component: "ReflectionContent",
        kebab: "reflection-content",
        sqlFunctionRef: "p_reflection_content",
        RestAPI: "reflectionContent",
        GraphQL: "reflectionContent",
        custom: "reflectionContent"
    },
    qualityScore: {
        frontend: "qualityScore",
        backend: "quality_score",
        database: "quality_score",
        pretty: "Quality Score",
        component: "QualityScore",
        kebab: "quality-score",
        sqlFunctionRef: "p_quality_score",
        RestAPI: "qualityScore",
        GraphQL: "qualityScore",
        custom: "qualityScore"
    },
    source: {
        frontend: "source",
        backend: "source",
        database: "source",
        pretty: "Source",
        component: "Source",
        kebab: "source",
        sqlFunctionRef: "p_source",
        RestAPI: "source",
        GraphQL: "source",
        custom: "source"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    questionsThinking: {
        frontend: "questionsThinking",
        backend: "questions_thinking",
        database: "questions_thinking",
        pretty: "Questions Thinking",
        component: "QuestionsThinking",
        kebab: "questions-thinking",
        sqlFunctionRef: "p_questions_thinking",
        RestAPI: "questionsThinking",
        GraphQL: "questionsThinking",
        custom: "questionsThinking"
    },
    questionsContent: {
        frontend: "questionsContent",
        backend: "questions_content",
        database: "questions_content",
        pretty: "Questions Content",
        component: "QuestionsContent",
        kebab: "questions-content",
        sqlFunctionRef: "p_questions_content",
        RestAPI: "questionsContent",
        GraphQL: "questionsContent",
        custom: "questionsContent"
    },
    structuredQuestions: {
        frontend: "structuredQuestions",
        backend: "structured_questions",
        database: "structured_questions",
        pretty: "Structured Questions",
        component: "StructuredQuestions",
        kebab: "structured-questions",
        sqlFunctionRef: "p_structured_questions",
        RestAPI: "structuredQuestions",
        GraphQL: "structuredQuestions",
        custom: "structuredQuestions"
    },
    reflectionThinking: {
        frontend: "reflectionThinking",
        backend: "reflection_thinking",
        database: "reflection_thinking",
        pretty: "Reflection Thinking",
        component: "ReflectionThinking",
        kebab: "reflection-thinking",
        sqlFunctionRef: "p_reflection_thinking",
        RestAPI: "reflectionThinking",
        GraphQL: "reflectionThinking",
        custom: "reflectionThinking"
    }
},
    applet: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    creator: {
        frontend: "creator",
        backend: "creator",
        database: "creator",
        pretty: "Creator",
        component: "Creator",
        kebab: "creator",
        sqlFunctionRef: "p_creator",
        RestAPI: "creator",
        GraphQL: "creator",
        custom: "creator"
    },
    type: {
        frontend: "type",
        backend: "type",
        database: "type",
        pretty: "Type",
        component: "Type",
        kebab: "type",
        sqlFunctionRef: "p_type",
        RestAPI: "type",
        GraphQL: "type",
        custom: "type"
    },
    compiledRecipeId: {
        frontend: "compiledRecipeId",
        backend: "compiled_recipe_id",
        database: "compiled_recipe_id",
        pretty: "Compiled Recipe Id",
        component: "CompiledRecipeId",
        kebab: "compiled-recipe-id",
        sqlFunctionRef: "p_compiled_recipe_id",
        RestAPI: "compiledRecipeId",
        GraphQL: "compiledRecipeId",
        custom: "compiledRecipeId"
    },
    slug: {
        frontend: "slug",
        backend: "slug",
        database: "slug",
        pretty: "Slug",
        component: "Slug",
        kebab: "slug",
        sqlFunctionRef: "p_slug",
        RestAPI: "slug",
        GraphQL: "slug",
        custom: "slug"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    dataSourceConfig: {
        frontend: "dataSourceConfig",
        backend: "data_source_config",
        database: "data_source_config",
        pretty: "Data Source Config",
        component: "DataSourceConfig",
        kebab: "data-source-config",
        sqlFunctionRef: "p_data_source_config",
        RestAPI: "dataSourceConfig",
        GraphQL: "dataSourceConfig",
        custom: "dataSourceConfig"
    },
    resultComponentConfig: {
        frontend: "resultComponentConfig",
        backend: "result_component_config",
        database: "result_component_config",
        pretty: "Result Component Config",
        component: "ResultComponentConfig",
        kebab: "result-component-config",
        sqlFunctionRef: "p_result_component_config",
        RestAPI: "resultComponentConfig",
        GraphQL: "resultComponentConfig",
        custom: "resultComponentConfig"
    },
    nextStepConfig: {
        frontend: "nextStepConfig",
        backend: "next_step_config",
        database: "next_step_config",
        pretty: "Next Step Config",
        component: "NextStepConfig",
        kebab: "next-step-config",
        sqlFunctionRef: "p_next_step_config",
        RestAPI: "nextStepConfig",
        GraphQL: "nextStepConfig",
        custom: "nextStepConfig"
    },
    subcategoryId: {
        frontend: "subcategoryId",
        backend: "subcategory_id",
        database: "subcategory_id",
        pretty: "Subcategory Id",
        component: "SubcategoryId",
        kebab: "subcategory-id",
        sqlFunctionRef: "p_subcategory_id",
        RestAPI: "subcategoryId",
        GraphQL: "subcategoryId",
        custom: "subcategoryId"
    },
    ctaText: {
        frontend: "ctaText",
        backend: "cta_text",
        database: "cta_text",
        pretty: "Cta Text",
        component: "CtaText",
        kebab: "cta-text",
        sqlFunctionRef: "p_cta_text",
        RestAPI: "ctaText",
        GraphQL: "ctaText",
        custom: "ctaText"
    },
    theme: {
        frontend: "theme",
        backend: "theme",
        database: "theme",
        pretty: "Theme",
        component: "Theme",
        kebab: "theme",
        sqlFunctionRef: "p_theme",
        RestAPI: "theme",
        GraphQL: "theme",
        custom: "theme"
    },
    compiledRecipeReference: {
        frontend: "compiledRecipeReference",
        backend: "compiled_recipe_reference",
        database: "ref_compiled_recipe",
        pretty: "Compiled Recipe Reference",
        component: "CompiledRecipeReference",
        kebab: "compiled-recipeReference",
        sqlFunctionRef: "p_ref_compiled_recipe",
        RestAPI: "compiledRecipeReference",
        GraphQL: "compiledRecipeReference",
        custom: "compiledRecipeReference"
    },
    subcategoryReference: {
        frontend: "subcategoryReference",
        backend: "subcategory_reference",
        database: "ref_subcategory",
        pretty: "Subcategory Reference",
        component: "SubcategoryReference",
        kebab: "subcategoryReference",
        sqlFunctionRef: "p_ref_subcategory",
        RestAPI: "subcategoryReference",
        GraphQL: "subcategoryReference",
        custom: "subcategoryReference"
    }
},
    appletContainers: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    appletId: {
        frontend: "appletId",
        backend: "applet_id",
        database: "applet_id",
        pretty: "Applet Id",
        component: "AppletId",
        kebab: "applet-id",
        sqlFunctionRef: "p_applet_id",
        RestAPI: "appletId",
        GraphQL: "appletId",
        custom: "appletId"
    },
    containerId: {
        frontend: "containerId",
        backend: "container_id",
        database: "container_id",
        pretty: "Container Id",
        component: "ContainerId",
        kebab: "container-id",
        sqlFunctionRef: "p_container_id",
        RestAPI: "containerId",
        GraphQL: "containerId",
        custom: "containerId"
    },
    order: {
        frontend: "order",
        backend: "order",
        database: "order",
        pretty: "Order",
        component: "Order",
        kebab: "order",
        sqlFunctionRef: "p_order",
        RestAPI: "order",
        GraphQL: "order",
        custom: "order"
    },
    customAppletConfigsReference: {
        frontend: "customAppletConfigsReference",
        backend: "custom_applet_configs_reference",
        database: "ref_custom_applet_configs",
        pretty: "Custom Applet Configs Reference",
        component: "CustomAppletConfigsReference",
        kebab: "custom-applet-configsReference",
        sqlFunctionRef: "p_ref_custom_applet_configs",
        RestAPI: "customAppletConfigsReference",
        GraphQL: "customAppletConfigsReference",
        custom: "customAppletConfigsReference"
    },
    componentGroupsReference: {
        frontend: "componentGroupsReference",
        backend: "component_groups_reference",
        database: "ref_component_groups",
        pretty: "Component Groups Reference",
        component: "ComponentGroupsReference",
        kebab: "component-groupsReference",
        sqlFunctionRef: "p_ref_component_groups",
        RestAPI: "componentGroupsReference",
        GraphQL: "componentGroupsReference",
        custom: "componentGroupsReference"
    }
},
    arg: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    required: {
        frontend: "required",
        backend: "required",
        database: "required",
        pretty: "Required",
        component: "Required",
        kebab: "required",
        sqlFunctionRef: "p_required",
        RestAPI: "required",
        GraphQL: "required",
        custom: "required"
    },
    defaultJunk: {
        frontend: "defaultJunk",
        backend: "default_junk",
        database: "default_junk",
        pretty: "Default Junk",
        component: "DefaultJunk",
        kebab: "default-junk",
        sqlFunctionRef: "p_default_junk",
        RestAPI: "defaultJunk",
        GraphQL: "defaultJunk",
        custom: "defaultJunk"
    },
    dataType: {
        frontend: "dataType",
        backend: "data_type",
        database: "data_type",
        pretty: "Data Type",
        component: "DataType",
        kebab: "data-type",
        sqlFunctionRef: "p_data_type",
        RestAPI: "dataType",
        GraphQL: "dataType",
        custom: "dataType"
    },
    ready: {
        frontend: "ready",
        backend: "ready",
        database: "ready",
        pretty: "Ready",
        component: "Ready",
        kebab: "ready",
        sqlFunctionRef: "p_ready",
        RestAPI: "ready",
        GraphQL: "ready",
        custom: "ready"
    },
    registeredFunction: {
        frontend: "registeredFunction",
        backend: "registered_function",
        database: "registered_function",
        pretty: "Registered Function",
        component: "RegisteredFunction",
        kebab: "registered-function",
        sqlFunctionRef: "p_registered_function",
        RestAPI: "registeredFunction",
        GraphQL: "registeredFunction",
        custom: "registeredFunction"
    },
    defaultValue: {
        frontend: "defaultValue",
        backend: "default_value",
        database: "default_value",
        pretty: "Default Value",
        component: "DefaultValue",
        kebab: "default-value",
        sqlFunctionRef: "p_default_value",
        RestAPI: "defaultValue",
        GraphQL: "defaultValue",
        custom: "defaultValue"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    examples: {
        frontend: "examples",
        backend: "examples",
        database: "examples",
        pretty: "Examples",
        component: "Examples",
        kebab: "examples",
        sqlFunctionRef: "p_examples",
        RestAPI: "examples",
        GraphQL: "examples",
        custom: "examples"
    },
    registeredFunctionReference: {
        frontend: "registeredFunctionReference",
        backend: "registered_function_reference",
        database: "ref_registered_function",
        pretty: "Registered Function Reference",
        component: "RegisteredFunctionReference",
        kebab: "registered-functionReference",
        sqlFunctionRef: "p_ref_registered_function",
        RestAPI: "registeredFunctionReference",
        GraphQL: "registeredFunctionReference",
        custom: "registeredFunctionReference"
    }
},
    audioLabel: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    audioRecordingInverse: {
        frontend: "audioRecordingInverse",
        backend: "audio_recording_Inverse",
        database: "ifk_audio_recording",
        pretty: "Audio Recording Inverse",
        component: "AudioRecordingInverse",
        kebab: "audio-recordingInverse",
        sqlFunctionRef: "p_ifk_audio_recording",
        RestAPI: "audioRecordingInverse",
        GraphQL: "audioRecordingInverse",
        custom: "audioRecordingInverse"
    }
},
    audioRecording: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    label: {
        frontend: "label",
        backend: "label",
        database: "label",
        pretty: "Label",
        component: "Label",
        kebab: "label",
        sqlFunctionRef: "p_label",
        RestAPI: "label",
        GraphQL: "label",
        custom: "label"
    },
    fileUrl: {
        frontend: "fileUrl",
        backend: "file_url",
        database: "file_url",
        pretty: "File Url",
        component: "FileUrl",
        kebab: "file-url",
        sqlFunctionRef: "p_file_url",
        RestAPI: "fileUrl",
        GraphQL: "fileUrl",
        custom: "fileUrl"
    },
    duration: {
        frontend: "duration",
        backend: "duration",
        database: "duration",
        pretty: "Duration",
        component: "Duration",
        kebab: "duration",
        sqlFunctionRef: "p_duration",
        RestAPI: "duration",
        GraphQL: "duration",
        custom: "duration"
    },
    localPath: {
        frontend: "localPath",
        backend: "local_path",
        database: "local_path",
        pretty: "Local Path",
        component: "LocalPath",
        kebab: "local-path",
        sqlFunctionRef: "p_local_path",
        RestAPI: "localPath",
        GraphQL: "localPath",
        custom: "localPath"
    },
    size: {
        frontend: "size",
        backend: "size",
        database: "size",
        pretty: "Size",
        component: "Size",
        kebab: "size",
        sqlFunctionRef: "p_size",
        RestAPI: "size",
        GraphQL: "size",
        custom: "size"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    audioLabelReference: {
        frontend: "audioLabelReference",
        backend: "audio_label_reference",
        database: "ref_audio_label",
        pretty: "Audio Label Reference",
        component: "AudioLabelReference",
        kebab: "audio-labelReference",
        sqlFunctionRef: "p_ref_audio_label",
        RestAPI: "audioLabelReference",
        GraphQL: "audioLabelReference",
        custom: "audioLabelReference"
    }
},
    audioRecordingUsers: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    firstName: {
        frontend: "firstName",
        backend: "first_name",
        database: "first_name",
        pretty: "First Name",
        component: "FirstName",
        kebab: "first-name",
        sqlFunctionRef: "p_first_name",
        RestAPI: "firstName",
        GraphQL: "firstName",
        custom: "firstName"
    },
    lastName: {
        frontend: "lastName",
        backend: "last_name",
        database: "last_name",
        pretty: "Last Name",
        component: "LastName",
        kebab: "last-name",
        sqlFunctionRef: "p_last_name",
        RestAPI: "lastName",
        GraphQL: "lastName",
        custom: "lastName"
    },
    email: {
        frontend: "email",
        backend: "email",
        database: "email",
        pretty: "Email",
        component: "Email",
        kebab: "email",
        sqlFunctionRef: "p_email",
        RestAPI: "email",
        GraphQL: "email",
        custom: "email"
    }
},
    automationBoundaryBroker: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    matrix: {
        frontend: "matrix",
        backend: "matrix",
        database: "matrix",
        pretty: "Matrix",
        component: "Matrix",
        kebab: "matrix",
        sqlFunctionRef: "p_matrix",
        RestAPI: "matrix",
        GraphQL: "matrix",
        custom: "matrix"
    },
    broker: {
        frontend: "broker",
        backend: "broker",
        database: "broker",
        pretty: "Broker",
        component: "Broker",
        kebab: "broker",
        sqlFunctionRef: "p_broker",
        RestAPI: "broker",
        GraphQL: "broker",
        custom: "broker"
    },
    sparkSource: {
        frontend: "sparkSource",
        backend: "spark_source",
        database: "spark_source",
        pretty: "Spark Source",
        component: "SparkSource",
        kebab: "spark-source",
        sqlFunctionRef: "p_spark_source",
        RestAPI: "sparkSource",
        GraphQL: "sparkSource",
        custom: "sparkSource"
    },
    beaconDestination: {
        frontend: "beaconDestination",
        backend: "beacon_destination",
        database: "beacon_destination",
        pretty: "Beacon Destination",
        component: "BeaconDestination",
        kebab: "beacon-destination",
        sqlFunctionRef: "p_beacon_destination",
        RestAPI: "beaconDestination",
        GraphQL: "beaconDestination",
        custom: "beaconDestination"
    },
    brokerReference: {
        frontend: "brokerReference",
        backend: "broker_reference",
        database: "ref_broker",
        pretty: "Broker Reference",
        component: "BrokerReference",
        kebab: "brokerReference",
        sqlFunctionRef: "p_ref_broker",
        RestAPI: "brokerReference",
        GraphQL: "brokerReference",
        custom: "brokerReference"
    },
    automationMatrixReference: {
        frontend: "automationMatrixReference",
        backend: "automation_matrix_reference",
        database: "ref_automation_matrix",
        pretty: "Automation Matrix Reference",
        component: "AutomationMatrixReference",
        kebab: "automation-matrixReference",
        sqlFunctionRef: "p_ref_automation_matrix",
        RestAPI: "automationMatrixReference",
        GraphQL: "automationMatrixReference",
        custom: "automationMatrixReference"
    }
},
    automationMatrix: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    averageSeconds: {
        frontend: "averageSeconds",
        backend: "average_seconds",
        database: "average_seconds",
        pretty: "Average Seconds",
        component: "AverageSeconds",
        kebab: "average-seconds",
        sqlFunctionRef: "p_average_seconds",
        RestAPI: "averageSeconds",
        GraphQL: "averageSeconds",
        custom: "averageSeconds"
    },
    isAutomated: {
        frontend: "isAutomated",
        backend: "is_automated",
        database: "is_automated",
        pretty: "Is Automated",
        component: "IsAutomated",
        kebab: "is-automated",
        sqlFunctionRef: "p_is_automated",
        RestAPI: "isAutomated",
        GraphQL: "isAutomated",
        custom: "isAutomated"
    },
    cognitionMatrices: {
        frontend: "cognitionMatrices",
        backend: "cognition_matrices",
        database: "cognition_matrices",
        pretty: "Cognition Matrices",
        component: "CognitionMatrices",
        kebab: "cognition-matrices",
        sqlFunctionRef: "p_cognition_matrices",
        RestAPI: "cognitionMatrices",
        GraphQL: "cognitionMatrices",
        custom: "cognitionMatrices"
    },
    actionInverse: {
        frontend: "actionInverse",
        backend: "action_Inverse",
        database: "ifk_action",
        pretty: "Action Inverse",
        component: "ActionInverse",
        kebab: "actionInverse",
        sqlFunctionRef: "p_ifk_action",
        RestAPI: "actionInverse",
        GraphQL: "actionInverse",
        custom: "actionInverse"
    },
    automationBoundaryBrokerInverse: {
        frontend: "automationBoundaryBrokerInverse",
        backend: "automation_boundary_broker_Inverse",
        database: "ifk_automation_boundary_broker",
        pretty: "Automation Boundary Broker Inverse",
        component: "AutomationBoundaryBrokerInverse",
        kebab: "automation-boundary-brokerInverse",
        sqlFunctionRef: "p_ifk_automation_boundary_broker",
        RestAPI: "automationBoundaryBrokerInverse",
        GraphQL: "automationBoundaryBrokerInverse",
        custom: "automationBoundaryBrokerInverse"
    }
},
    broker: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    value: {
        frontend: "value",
        backend: "value",
        database: "value",
        pretty: "Value",
        component: "Value",
        kebab: "value",
        sqlFunctionRef: "p_value",
        RestAPI: "value",
        GraphQL: "value",
        custom: "value"
    },
    dataType: {
        frontend: "dataType",
        backend: "data_type",
        database: "data_type",
        pretty: "Data Type",
        component: "DataType",
        kebab: "data-type",
        sqlFunctionRef: "p_data_type",
        RestAPI: "dataType",
        GraphQL: "dataType",
        custom: "dataType"
    },
    ready: {
        frontend: "ready",
        backend: "ready",
        database: "ready",
        pretty: "Ready",
        component: "Ready",
        kebab: "ready",
        sqlFunctionRef: "p_ready",
        RestAPI: "ready",
        GraphQL: "ready",
        custom: "ready"
    },
    defaultSource: {
        frontend: "defaultSource",
        backend: "default_source",
        database: "default_source",
        pretty: "Default Source",
        component: "DefaultSource",
        kebab: "default-source",
        sqlFunctionRef: "p_default_source",
        RestAPI: "defaultSource",
        GraphQL: "defaultSource",
        custom: "defaultSource"
    },
    displayName: {
        frontend: "displayName",
        backend: "display_name",
        database: "display_name",
        pretty: "Display Name",
        component: "DisplayName",
        kebab: "display-name",
        sqlFunctionRef: "p_display_name",
        RestAPI: "displayName",
        GraphQL: "displayName",
        custom: "displayName"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    tooltip: {
        frontend: "tooltip",
        backend: "tooltip",
        database: "tooltip",
        pretty: "Tooltip",
        component: "Tooltip",
        kebab: "tooltip",
        sqlFunctionRef: "p_tooltip",
        RestAPI: "tooltip",
        GraphQL: "tooltip",
        custom: "tooltip"
    },
    validationRules: {
        frontend: "validationRules",
        backend: "validation_rules",
        database: "validation_rules",
        pretty: "Validation Rules",
        component: "ValidationRules",
        kebab: "validation-rules",
        sqlFunctionRef: "p_validation_rules",
        RestAPI: "validationRules",
        GraphQL: "validationRules",
        custom: "validationRules"
    },
    sampleEntries: {
        frontend: "sampleEntries",
        backend: "sample_entries",
        database: "sample_entries",
        pretty: "Sample Entries",
        component: "SampleEntries",
        kebab: "sample-entries",
        sqlFunctionRef: "p_sample_entries",
        RestAPI: "sampleEntries",
        GraphQL: "sampleEntries",
        custom: "sampleEntries"
    },
    customSourceComponent: {
        frontend: "customSourceComponent",
        backend: "custom_source_component",
        database: "custom_source_component",
        pretty: "Custom Source Component",
        component: "CustomSourceComponent",
        kebab: "custom-source-component",
        sqlFunctionRef: "p_custom_source_component",
        RestAPI: "customSourceComponent",
        GraphQL: "customSourceComponent",
        custom: "customSourceComponent"
    },
    additionalParams: {
        frontend: "additionalParams",
        backend: "additional_params",
        database: "additional_params",
        pretty: "Additional Params",
        component: "AdditionalParams",
        kebab: "additional-params",
        sqlFunctionRef: "p_additional_params",
        RestAPI: "additionalParams",
        GraphQL: "additionalParams",
        custom: "additionalParams"
    },
    otherSourceParams: {
        frontend: "otherSourceParams",
        backend: "other_source_params",
        database: "other_source_params",
        pretty: "Other Source Params",
        component: "OtherSourceParams",
        kebab: "other-source-params",
        sqlFunctionRef: "p_other_source_params",
        RestAPI: "otherSourceParams",
        GraphQL: "otherSourceParams",
        custom: "otherSourceParams"
    },
    defaultDestination: {
        frontend: "defaultDestination",
        backend: "default_destination",
        database: "default_destination",
        pretty: "Default Destination",
        component: "DefaultDestination",
        kebab: "default-destination",
        sqlFunctionRef: "p_default_destination",
        RestAPI: "defaultDestination",
        GraphQL: "defaultDestination",
        custom: "defaultDestination"
    },
    outputComponent: {
        frontend: "outputComponent",
        backend: "output_component",
        database: "output_component",
        pretty: "Output Component",
        component: "OutputComponent",
        kebab: "output-component",
        sqlFunctionRef: "p_output_component",
        RestAPI: "outputComponent",
        GraphQL: "outputComponent",
        custom: "outputComponent"
    },
    tags: {
        frontend: "tags",
        backend: "tags",
        database: "tags",
        pretty: "Tags",
        component: "Tags",
        kebab: "tags",
        sqlFunctionRef: "p_tags",
        RestAPI: "tags",
        GraphQL: "tags",
        custom: "tags"
    },
    stringValue: {
        frontend: "stringValue",
        backend: "string_value",
        database: "string_value",
        pretty: "String Value",
        component: "StringValue",
        kebab: "string-value",
        sqlFunctionRef: "p_string_value",
        RestAPI: "stringValue",
        GraphQL: "stringValue",
        custom: "stringValue"
    },
    dataInputComponentReference: {
        frontend: "dataInputComponentReference",
        backend: "data_input_component_reference",
        database: "ref_data_input_component",
        pretty: "Data Input Component Reference",
        component: "DataInputComponentReference",
        kebab: "data-input-componentReference",
        sqlFunctionRef: "p_ref_data_input_component",
        RestAPI: "dataInputComponentReference",
        GraphQL: "dataInputComponentReference",
        custom: "dataInputComponentReference"
    },
    recipeBrokerInverse: {
        frontend: "recipeBrokerInverse",
        backend: "recipe_broker_Inverse",
        database: "ifk_recipe_broker",
        pretty: "Recipe Broker Inverse",
        component: "RecipeBrokerInverse",
        kebab: "recipe-brokerInverse",
        sqlFunctionRef: "p_ifk_recipe_broker",
        RestAPI: "recipeBrokerInverse",
        GraphQL: "recipeBrokerInverse",
        custom: "recipeBrokerInverse"
    },
    automationBoundaryBrokerInverse: {
        frontend: "automationBoundaryBrokerInverse",
        backend: "automation_boundary_broker_Inverse",
        database: "ifk_automation_boundary_broker",
        pretty: "Automation Boundary Broker Inverse",
        component: "AutomationBoundaryBrokerInverse",
        kebab: "automation-boundary-brokerInverse",
        sqlFunctionRef: "p_ifk_automation_boundary_broker",
        RestAPI: "automationBoundaryBrokerInverse",
        GraphQL: "automationBoundaryBrokerInverse",
        custom: "automationBoundaryBrokerInverse"
    }
},
    brokerValue: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    dataBroker: {
        frontend: "dataBroker",
        backend: "data_broker",
        database: "data_broker",
        pretty: "Data Broker",
        component: "DataBroker",
        kebab: "data-broker",
        sqlFunctionRef: "p_data_broker",
        RestAPI: "dataBroker",
        GraphQL: "dataBroker",
        custom: "dataBroker"
    },
    data: {
        frontend: "data",
        backend: "data",
        database: "data",
        pretty: "Data",
        component: "Data",
        kebab: "data",
        sqlFunctionRef: "p_data",
        RestAPI: "data",
        GraphQL: "data",
        custom: "data"
    },
    category: {
        frontend: "category",
        backend: "category",
        database: "category",
        pretty: "Category",
        component: "Category",
        kebab: "category",
        sqlFunctionRef: "p_category",
        RestAPI: "category",
        GraphQL: "category",
        custom: "category"
    },
    subCategory: {
        frontend: "subCategory",
        backend: "sub_category",
        database: "sub_category",
        pretty: "Sub Category",
        component: "SubCategory",
        kebab: "sub-category",
        sqlFunctionRef: "p_sub_category",
        RestAPI: "subCategory",
        GraphQL: "subCategory",
        custom: "subCategory"
    },
    tags: {
        frontend: "tags",
        backend: "tags",
        database: "tags",
        pretty: "Tags",
        component: "Tags",
        kebab: "tags",
        sqlFunctionRef: "p_tags",
        RestAPI: "tags",
        GraphQL: "tags",
        custom: "tags"
    },
    comments: {
        frontend: "comments",
        backend: "comments",
        database: "comments",
        pretty: "Comments",
        component: "Comments",
        kebab: "comments",
        sqlFunctionRef: "p_comments",
        RestAPI: "comments",
        GraphQL: "comments",
        custom: "comments"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    dataBrokerReference: {
        frontend: "dataBrokerReference",
        backend: "data_broker_reference",
        database: "ref_data_broker",
        pretty: "Data Broker Reference",
        component: "DataBrokerReference",
        kebab: "data-brokerReference",
        sqlFunctionRef: "p_ref_data_broker",
        RestAPI: "dataBrokerReference",
        GraphQL: "dataBrokerReference",
        custom: "dataBrokerReference"
    }
},
    bucketStructures: {
    bucketId: {
        frontend: "bucketId",
        backend: "bucket_id",
        database: "bucket_id",
        pretty: "Bucket Id",
        component: "BucketId",
        kebab: "bucket-id",
        sqlFunctionRef: "p_bucket_id",
        RestAPI: "bucketId",
        GraphQL: "bucketId",
        custom: "bucketId"
    },
    structure: {
        frontend: "structure",
        backend: "structure",
        database: "structure",
        pretty: "Structure",
        component: "Structure",
        kebab: "structure",
        sqlFunctionRef: "p_structure",
        RestAPI: "structure",
        GraphQL: "structure",
        custom: "structure"
    },
    lastUpdated: {
        frontend: "lastUpdated",
        backend: "last_updated",
        database: "last_updated",
        pretty: "Last Updated",
        component: "LastUpdated",
        kebab: "last-updated",
        sqlFunctionRef: "p_last_updated",
        RestAPI: "lastUpdated",
        GraphQL: "lastUpdated",
        custom: "lastUpdated"
    }
},
    bucketTreeStructures: {
    bucketId: {
        frontend: "bucketId",
        backend: "bucket_id",
        database: "bucket_id",
        pretty: "Bucket Id",
        component: "BucketId",
        kebab: "bucket-id",
        sqlFunctionRef: "p_bucket_id",
        RestAPI: "bucketId",
        GraphQL: "bucketId",
        custom: "bucketId"
    },
    treeStructure: {
        frontend: "treeStructure",
        backend: "tree_structure",
        database: "tree_structure",
        pretty: "Tree Structure",
        component: "TreeStructure",
        kebab: "tree-structure",
        sqlFunctionRef: "p_tree_structure",
        RestAPI: "treeStructure",
        GraphQL: "treeStructure",
        custom: "treeStructure"
    },
    lastUpdated: {
        frontend: "lastUpdated",
        backend: "last_updated",
        database: "last_updated",
        pretty: "Last Updated",
        component: "LastUpdated",
        kebab: "last-updated",
        sqlFunctionRef: "p_last_updated",
        RestAPI: "lastUpdated",
        GraphQL: "lastUpdated",
        custom: "lastUpdated"
    }
},
    category: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    slug: {
        frontend: "slug",
        backend: "slug",
        database: "slug",
        pretty: "Slug",
        component: "Slug",
        kebab: "slug",
        sqlFunctionRef: "p_slug",
        RestAPI: "slug",
        GraphQL: "slug",
        custom: "slug"
    },
    icon: {
        frontend: "icon",
        backend: "icon",
        database: "icon",
        pretty: "Icon",
        component: "Icon",
        kebab: "icon",
        sqlFunctionRef: "p_icon",
        RestAPI: "icon",
        GraphQL: "icon",
        custom: "icon"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    subcategoryInverse: {
        frontend: "subcategoryInverse",
        backend: "subcategory_Inverse",
        database: "ifk_subcategory",
        pretty: "Subcategory Inverse",
        component: "SubcategoryInverse",
        kebab: "subcategoryInverse",
        sqlFunctionRef: "p_ifk_subcategory",
        RestAPI: "subcategoryInverse",
        GraphQL: "subcategoryInverse",
        custom: "subcategoryInverse"
    }
},
    compiledRecipe: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    recipeId: {
        frontend: "recipeId",
        backend: "recipe_id",
        database: "recipe_id",
        pretty: "Recipe Id",
        component: "RecipeId",
        kebab: "recipe-id",
        sqlFunctionRef: "p_recipe_id",
        RestAPI: "recipeId",
        GraphQL: "recipeId",
        custom: "recipeId"
    },
    version: {
        frontend: "version",
        backend: "version",
        database: "version",
        pretty: "Version",
        component: "Version",
        kebab: "version",
        sqlFunctionRef: "p_version",
        RestAPI: "version",
        GraphQL: "version",
        custom: "version"
    },
    compiledRecipe: {
        frontend: "compiledRecipe",
        backend: "compiled_recipe",
        database: "compiled_recipe",
        pretty: "Compiled Recipe",
        component: "CompiledRecipe",
        kebab: "compiled-recipe",
        sqlFunctionRef: "p_compiled_recipe",
        RestAPI: "compiledRecipe",
        GraphQL: "compiledRecipe",
        custom: "compiledRecipe"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    },
    appletInverse: {
        frontend: "appletInverse",
        backend: "applet_Inverse",
        database: "ifk_applet",
        pretty: "Applet Inverse",
        component: "AppletInverse",
        kebab: "appletInverse",
        sqlFunctionRef: "p_ifk_applet",
        RestAPI: "appletInverse",
        GraphQL: "appletInverse",
        custom: "appletInverse"
    },
    customAppletConfigsInverse: {
        frontend: "customAppletConfigsInverse",
        backend: "custom_applet_configs_Inverse",
        database: "ifk_custom_applet_configs",
        pretty: "Custom Applet Configs Inverse",
        component: "CustomAppletConfigsInverse",
        kebab: "custom-applet-configsInverse",
        sqlFunctionRef: "p_ifk_custom_applet_configs",
        RestAPI: "customAppletConfigsInverse",
        GraphQL: "customAppletConfigsInverse",
        custom: "customAppletConfigsInverse"
    }
},
    componentGroups: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    label: {
        frontend: "label",
        backend: "label",
        database: "label",
        pretty: "Label",
        component: "Label",
        kebab: "label",
        sqlFunctionRef: "p_label",
        RestAPI: "label",
        GraphQL: "label",
        custom: "label"
    },
    shortLabel: {
        frontend: "shortLabel",
        backend: "short_label",
        database: "short_label",
        pretty: "Short Label",
        component: "ShortLabel",
        kebab: "short-label",
        sqlFunctionRef: "p_short_label",
        RestAPI: "shortLabel",
        GraphQL: "shortLabel",
        custom: "shortLabel"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    hideDescription: {
        frontend: "hideDescription",
        backend: "hide_description",
        database: "hide_description",
        pretty: "Hide Description",
        component: "HideDescription",
        kebab: "hide-description",
        sqlFunctionRef: "p_hide_description",
        RestAPI: "hideDescription",
        GraphQL: "hideDescription",
        custom: "hideDescription"
    },
    helpText: {
        frontend: "helpText",
        backend: "help_text",
        database: "help_text",
        pretty: "Help Text",
        component: "HelpText",
        kebab: "help-text",
        sqlFunctionRef: "p_help_text",
        RestAPI: "helpText",
        GraphQL: "helpText",
        custom: "helpText"
    },
    fields: {
        frontend: "fields",
        backend: "fields",
        database: "fields",
        pretty: "Fields",
        component: "Fields",
        kebab: "fields",
        sqlFunctionRef: "p_fields",
        RestAPI: "fields",
        GraphQL: "fields",
        custom: "fields"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    publicRead: {
        frontend: "publicRead",
        backend: "public_read",
        database: "public_read",
        pretty: "Public Read",
        component: "PublicRead",
        kebab: "public-read",
        sqlFunctionRef: "p_public_read",
        RestAPI: "publicRead",
        GraphQL: "publicRead",
        custom: "publicRead"
    },
    appletContainersInverse: {
        frontend: "appletContainersInverse",
        backend: "applet_containers_Inverse",
        database: "ifk_applet_containers",
        pretty: "Applet Containers Inverse",
        component: "AppletContainersInverse",
        kebab: "applet-containersInverse",
        sqlFunctionRef: "p_ifk_applet_containers",
        RestAPI: "appletContainersInverse",
        GraphQL: "appletContainersInverse",
        custom: "appletContainersInverse"
    },
    containerFieldsInverse: {
        frontend: "containerFieldsInverse",
        backend: "container_fields_Inverse",
        database: "ifk_container_fields",
        pretty: "Container Fields Inverse",
        component: "ContainerFieldsInverse",
        kebab: "container-fieldsInverse",
        sqlFunctionRef: "p_ifk_container_fields",
        RestAPI: "containerFieldsInverse",
        GraphQL: "containerFieldsInverse",
        custom: "containerFieldsInverse"
    }
},
    containerFields: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    fieldId: {
        frontend: "fieldId",
        backend: "field_id",
        database: "field_id",
        pretty: "Field Id",
        component: "FieldId",
        kebab: "field-id",
        sqlFunctionRef: "p_field_id",
        RestAPI: "fieldId",
        GraphQL: "fieldId",
        custom: "fieldId"
    },
    containerId: {
        frontend: "containerId",
        backend: "container_id",
        database: "container_id",
        pretty: "Container Id",
        component: "ContainerId",
        kebab: "container-id",
        sqlFunctionRef: "p_container_id",
        RestAPI: "containerId",
        GraphQL: "containerId",
        custom: "containerId"
    },
    order: {
        frontend: "order",
        backend: "order",
        database: "order",
        pretty: "Order",
        component: "Order",
        kebab: "order",
        sqlFunctionRef: "p_order",
        RestAPI: "order",
        GraphQL: "order",
        custom: "order"
    },
    componentGroupsReference: {
        frontend: "componentGroupsReference",
        backend: "component_groups_reference",
        database: "ref_component_groups",
        pretty: "Component Groups Reference",
        component: "ComponentGroupsReference",
        kebab: "component-groupsReference",
        sqlFunctionRef: "p_ref_component_groups",
        RestAPI: "componentGroupsReference",
        GraphQL: "componentGroupsReference",
        custom: "componentGroupsReference"
    },
    fieldComponentsReference: {
        frontend: "fieldComponentsReference",
        backend: "field_components_reference",
        database: "ref_field_components",
        pretty: "Field Components Reference",
        component: "FieldComponentsReference",
        kebab: "field-componentsReference",
        sqlFunctionRef: "p_ref_field_components",
        RestAPI: "fieldComponentsReference",
        GraphQL: "fieldComponentsReference",
        custom: "fieldComponentsReference"
    }
},
    conversation: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    label: {
        frontend: "label",
        backend: "label",
        database: "label",
        pretty: "Label",
        component: "Label",
        kebab: "label",
        sqlFunctionRef: "p_label",
        RestAPI: "label",
        GraphQL: "label",
        custom: "label"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    keywords: {
        frontend: "keywords",
        backend: "keywords",
        database: "keywords",
        pretty: "Keywords",
        component: "Keywords",
        kebab: "keywords",
        sqlFunctionRef: "p_keywords",
        RestAPI: "keywords",
        GraphQL: "keywords",
        custom: "keywords"
    },
    group: {
        frontend: "group",
        backend: "group",
        database: "group",
        pretty: "Group",
        component: "Group",
        kebab: "group",
        sqlFunctionRef: "p_group",
        RestAPI: "group",
        GraphQL: "group",
        custom: "group"
    },
    messageInverse: {
        frontend: "messageInverse",
        backend: "message_Inverse",
        database: "ifk_message",
        pretty: "Message Inverse",
        component: "MessageInverse",
        kebab: "messageInverse",
        sqlFunctionRef: "p_ifk_message",
        RestAPI: "messageInverse",
        GraphQL: "messageInverse",
        custom: "messageInverse"
    }
},
    customAppConfigs: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    publicRead: {
        frontend: "publicRead",
        backend: "public_read",
        database: "public_read",
        pretty: "Public Read",
        component: "PublicRead",
        kebab: "public-read",
        sqlFunctionRef: "p_public_read",
        RestAPI: "publicRead",
        GraphQL: "publicRead",
        custom: "publicRead"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    slug: {
        frontend: "slug",
        backend: "slug",
        database: "slug",
        pretty: "Slug",
        component: "Slug",
        kebab: "slug",
        sqlFunctionRef: "p_slug",
        RestAPI: "slug",
        GraphQL: "slug",
        custom: "slug"
    },
    mainAppIcon: {
        frontend: "mainAppIcon",
        backend: "main_app_icon",
        database: "main_app_icon",
        pretty: "Main App Icon",
        component: "MainAppIcon",
        kebab: "main-app-icon",
        sqlFunctionRef: "p_main_app_icon",
        RestAPI: "mainAppIcon",
        GraphQL: "mainAppIcon",
        custom: "mainAppIcon"
    },
    mainAppSubmitIcon: {
        frontend: "mainAppSubmitIcon",
        backend: "main_app_submit_icon",
        database: "main_app_submit_icon",
        pretty: "Main App Submit Icon",
        component: "MainAppSubmitIcon",
        kebab: "main-app-submit-icon",
        sqlFunctionRef: "p_main_app_submit_icon",
        RestAPI: "mainAppSubmitIcon",
        GraphQL: "mainAppSubmitIcon",
        custom: "mainAppSubmitIcon"
    },
    creator: {
        frontend: "creator",
        backend: "creator",
        database: "creator",
        pretty: "Creator",
        component: "Creator",
        kebab: "creator",
        sqlFunctionRef: "p_creator",
        RestAPI: "creator",
        GraphQL: "creator",
        custom: "creator"
    },
    primaryColor: {
        frontend: "primaryColor",
        backend: "primary_color",
        database: "primary_color",
        pretty: "Primary Color",
        component: "PrimaryColor",
        kebab: "primary-color",
        sqlFunctionRef: "p_primary_color",
        RestAPI: "primaryColor",
        GraphQL: "primaryColor",
        custom: "primaryColor"
    },
    accentColor: {
        frontend: "accentColor",
        backend: "accent_color",
        database: "accent_color",
        pretty: "Accent Color",
        component: "AccentColor",
        kebab: "accent-color",
        sqlFunctionRef: "p_accent_color",
        RestAPI: "accentColor",
        GraphQL: "accentColor",
        custom: "accentColor"
    },
    appletList: {
        frontend: "appletList",
        backend: "applet_list",
        database: "applet_list",
        pretty: "Applet List",
        component: "AppletList",
        kebab: "applet-list",
        sqlFunctionRef: "p_applet_list",
        RestAPI: "appletList",
        GraphQL: "appletList",
        custom: "appletList"
    },
    extraButtons: {
        frontend: "extraButtons",
        backend: "extra_buttons",
        database: "extra_buttons",
        pretty: "Extra Buttons",
        component: "ExtraButtons",
        kebab: "extra-buttons",
        sqlFunctionRef: "p_extra_buttons",
        RestAPI: "extraButtons",
        GraphQL: "extraButtons",
        custom: "extraButtons"
    },
    layoutType: {
        frontend: "layoutType",
        backend: "layout_type",
        database: "layout_type",
        pretty: "Layout Type",
        component: "LayoutType",
        kebab: "layout-type",
        sqlFunctionRef: "p_layout_type",
        RestAPI: "layoutType",
        GraphQL: "layoutType",
        custom: "layoutType"
    },
    imageUrl: {
        frontend: "imageUrl",
        backend: "image_url",
        database: "image_url",
        pretty: "Image Url",
        component: "ImageUrl",
        kebab: "image-url",
        sqlFunctionRef: "p_image_url",
        RestAPI: "imageUrl",
        GraphQL: "imageUrl",
        custom: "imageUrl"
    },
    appDataContext: {
        frontend: "appDataContext",
        backend: "app_data_context",
        database: "app_data_context",
        pretty: "App Data Context",
        component: "AppDataContext",
        kebab: "app-data-context",
        sqlFunctionRef: "p_app_data_context",
        RestAPI: "appDataContext",
        GraphQL: "appDataContext",
        custom: "appDataContext"
    },
    customAppletConfigsInverse: {
        frontend: "customAppletConfigsInverse",
        backend: "custom_applet_configs_Inverse",
        database: "ifk_custom_applet_configs",
        pretty: "Custom Applet Configs Inverse",
        component: "CustomAppletConfigsInverse",
        kebab: "custom-applet-configsInverse",
        sqlFunctionRef: "p_ifk_custom_applet_configs",
        RestAPI: "customAppletConfigsInverse",
        GraphQL: "customAppletConfigsInverse",
        custom: "customAppletConfigsInverse"
    }
},
    customAppletConfigs: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    publicRead: {
        frontend: "publicRead",
        backend: "public_read",
        database: "public_read",
        pretty: "Public Read",
        component: "PublicRead",
        kebab: "public-read",
        sqlFunctionRef: "p_public_read",
        RestAPI: "publicRead",
        GraphQL: "publicRead",
        custom: "publicRead"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    slug: {
        frontend: "slug",
        backend: "slug",
        database: "slug",
        pretty: "Slug",
        component: "Slug",
        kebab: "slug",
        sqlFunctionRef: "p_slug",
        RestAPI: "slug",
        GraphQL: "slug",
        custom: "slug"
    },
    appletIcon: {
        frontend: "appletIcon",
        backend: "applet_icon",
        database: "applet_icon",
        pretty: "Applet Icon",
        component: "AppletIcon",
        kebab: "applet-icon",
        sqlFunctionRef: "p_applet_icon",
        RestAPI: "appletIcon",
        GraphQL: "appletIcon",
        custom: "appletIcon"
    },
    appletSubmitText: {
        frontend: "appletSubmitText",
        backend: "applet_submit_text",
        database: "applet_submit_text",
        pretty: "Applet Submit Text",
        component: "AppletSubmitText",
        kebab: "applet-submit-text",
        sqlFunctionRef: "p_applet_submit_text",
        RestAPI: "appletSubmitText",
        GraphQL: "appletSubmitText",
        custom: "appletSubmitText"
    },
    creator: {
        frontend: "creator",
        backend: "creator",
        database: "creator",
        pretty: "Creator",
        component: "Creator",
        kebab: "creator",
        sqlFunctionRef: "p_creator",
        RestAPI: "creator",
        GraphQL: "creator",
        custom: "creator"
    },
    primaryColor: {
        frontend: "primaryColor",
        backend: "primary_color",
        database: "primary_color",
        pretty: "Primary Color",
        component: "PrimaryColor",
        kebab: "primary-color",
        sqlFunctionRef: "p_primary_color",
        RestAPI: "primaryColor",
        GraphQL: "primaryColor",
        custom: "primaryColor"
    },
    accentColor: {
        frontend: "accentColor",
        backend: "accent_color",
        database: "accent_color",
        pretty: "Accent Color",
        component: "AccentColor",
        kebab: "accent-color",
        sqlFunctionRef: "p_accent_color",
        RestAPI: "accentColor",
        GraphQL: "accentColor",
        custom: "accentColor"
    },
    layoutType: {
        frontend: "layoutType",
        backend: "layout_type",
        database: "layout_type",
        pretty: "Layout Type",
        component: "LayoutType",
        kebab: "layout-type",
        sqlFunctionRef: "p_layout_type",
        RestAPI: "layoutType",
        GraphQL: "layoutType",
        custom: "layoutType"
    },
    containers: {
        frontend: "containers",
        backend: "containers",
        database: "containers",
        pretty: "Containers",
        component: "Containers",
        kebab: "containers",
        sqlFunctionRef: "p_containers",
        RestAPI: "containers",
        GraphQL: "containers",
        custom: "containers"
    },
    dataSourceConfig: {
        frontend: "dataSourceConfig",
        backend: "data_source_config",
        database: "data_source_config",
        pretty: "Data Source Config",
        component: "DataSourceConfig",
        kebab: "data-source-config",
        sqlFunctionRef: "p_data_source_config",
        RestAPI: "dataSourceConfig",
        GraphQL: "dataSourceConfig",
        custom: "dataSourceConfig"
    },
    resultComponentConfig: {
        frontend: "resultComponentConfig",
        backend: "result_component_config",
        database: "result_component_config",
        pretty: "Result Component Config",
        component: "ResultComponentConfig",
        kebab: "result-component-config",
        sqlFunctionRef: "p_result_component_config",
        RestAPI: "resultComponentConfig",
        GraphQL: "resultComponentConfig",
        custom: "resultComponentConfig"
    },
    nextStepConfig: {
        frontend: "nextStepConfig",
        backend: "next_step_config",
        database: "next_step_config",
        pretty: "Next Step Config",
        component: "NextStepConfig",
        kebab: "next-step-config",
        sqlFunctionRef: "p_next_step_config",
        RestAPI: "nextStepConfig",
        GraphQL: "nextStepConfig",
        custom: "nextStepConfig"
    },
    compiledRecipeId: {
        frontend: "compiledRecipeId",
        backend: "compiled_recipe_id",
        database: "compiled_recipe_id",
        pretty: "Compiled Recipe Id",
        component: "CompiledRecipeId",
        kebab: "compiled-recipe-id",
        sqlFunctionRef: "p_compiled_recipe_id",
        RestAPI: "compiledRecipeId",
        GraphQL: "compiledRecipeId",
        custom: "compiledRecipeId"
    },
    subcategoryId: {
        frontend: "subcategoryId",
        backend: "subcategory_id",
        database: "subcategory_id",
        pretty: "Subcategory Id",
        component: "SubcategoryId",
        kebab: "subcategory-id",
        sqlFunctionRef: "p_subcategory_id",
        RestAPI: "subcategoryId",
        GraphQL: "subcategoryId",
        custom: "subcategoryId"
    },
    imageUrl: {
        frontend: "imageUrl",
        backend: "image_url",
        database: "image_url",
        pretty: "Image Url",
        component: "ImageUrl",
        kebab: "image-url",
        sqlFunctionRef: "p_image_url",
        RestAPI: "imageUrl",
        GraphQL: "imageUrl",
        custom: "imageUrl"
    },
    appId: {
        frontend: "appId",
        backend: "app_id",
        database: "app_id",
        pretty: "App Id",
        component: "AppId",
        kebab: "app-id",
        sqlFunctionRef: "p_app_id",
        RestAPI: "appId",
        GraphQL: "appId",
        custom: "appId"
    },
    brokerMap: {
        frontend: "brokerMap",
        backend: "broker_map",
        database: "broker_map",
        pretty: "Broker Map",
        component: "BrokerMap",
        kebab: "broker-map",
        sqlFunctionRef: "p_broker_map",
        RestAPI: "brokerMap",
        GraphQL: "brokerMap",
        custom: "brokerMap"
    },
    overviewLabel: {
        frontend: "overviewLabel",
        backend: "overview_label",
        database: "overview_label",
        pretty: "Overview Label",
        component: "OverviewLabel",
        kebab: "overview-label",
        sqlFunctionRef: "p_overview_label",
        RestAPI: "overviewLabel",
        GraphQL: "overviewLabel",
        custom: "overviewLabel"
    },
    dataDestinationConfig: {
        frontend: "dataDestinationConfig",
        backend: "data_destination_config",
        database: "data_destination_config",
        pretty: "Data Destination Config",
        component: "DataDestinationConfig",
        kebab: "data-destination-config",
        sqlFunctionRef: "p_data_destination_config",
        RestAPI: "dataDestinationConfig",
        GraphQL: "dataDestinationConfig",
        custom: "dataDestinationConfig"
    },
    customAppConfigsReference: {
        frontend: "customAppConfigsReference",
        backend: "custom_app_configs_reference",
        database: "ref_custom_app_configs",
        pretty: "Custom App Configs Reference",
        component: "CustomAppConfigsReference",
        kebab: "custom-app-configsReference",
        sqlFunctionRef: "p_ref_custom_app_configs",
        RestAPI: "customAppConfigsReference",
        GraphQL: "customAppConfigsReference",
        custom: "customAppConfigsReference"
    },
    compiledRecipeReference: {
        frontend: "compiledRecipeReference",
        backend: "compiled_recipe_reference",
        database: "ref_compiled_recipe",
        pretty: "Compiled Recipe Reference",
        component: "CompiledRecipeReference",
        kebab: "compiled-recipeReference",
        sqlFunctionRef: "p_ref_compiled_recipe",
        RestAPI: "compiledRecipeReference",
        GraphQL: "compiledRecipeReference",
        custom: "compiledRecipeReference"
    },
    subcategoryReference: {
        frontend: "subcategoryReference",
        backend: "subcategory_reference",
        database: "ref_subcategory",
        pretty: "Subcategory Reference",
        component: "SubcategoryReference",
        kebab: "subcategoryReference",
        sqlFunctionRef: "p_ref_subcategory",
        RestAPI: "subcategoryReference",
        GraphQL: "subcategoryReference",
        custom: "subcategoryReference"
    },
    appletContainersInverse: {
        frontend: "appletContainersInverse",
        backend: "applet_containers_Inverse",
        database: "ifk_applet_containers",
        pretty: "Applet Containers Inverse",
        component: "AppletContainersInverse",
        kebab: "applet-containersInverse",
        sqlFunctionRef: "p_ifk_applet_containers",
        RestAPI: "appletContainersInverse",
        GraphQL: "appletContainersInverse",
        custom: "appletContainersInverse"
    }
},
    dataBroker: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    dataType: {
        frontend: "dataType",
        backend: "data_type",
        database: "data_type",
        pretty: "Data Type",
        component: "DataType",
        kebab: "data-type",
        sqlFunctionRef: "p_data_type",
        RestAPI: "dataType",
        GraphQL: "dataType",
        custom: "dataType"
    },
    defaultValue: {
        frontend: "defaultValue",
        backend: "default_value",
        database: "default_value",
        pretty: "Default Value",
        component: "DefaultValue",
        kebab: "default-value",
        sqlFunctionRef: "p_default_value",
        RestAPI: "defaultValue",
        GraphQL: "defaultValue",
        custom: "defaultValue"
    },
    inputComponent: {
        frontend: "inputComponent",
        backend: "input_component",
        database: "input_component",
        pretty: "Input Component",
        component: "InputComponent",
        kebab: "input-component",
        sqlFunctionRef: "p_input_component",
        RestAPI: "inputComponent",
        GraphQL: "inputComponent",
        custom: "inputComponent"
    },
    color: {
        frontend: "color",
        backend: "color",
        database: "color",
        pretty: "Color",
        component: "Color",
        kebab: "color",
        sqlFunctionRef: "p_color",
        RestAPI: "color",
        GraphQL: "color",
        custom: "color"
    },
    outputComponent: {
        frontend: "outputComponent",
        backend: "output_component",
        database: "output_component",
        pretty: "Output Component",
        component: "OutputComponent",
        kebab: "output-component",
        sqlFunctionRef: "p_output_component",
        RestAPI: "outputComponent",
        GraphQL: "outputComponent",
        custom: "outputComponent"
    },
    fieldComponentId: {
        frontend: "fieldComponentId",
        backend: "field_component_id",
        database: "field_component_id",
        pretty: "Field Component Id",
        component: "FieldComponentId",
        kebab: "field-component-id",
        sqlFunctionRef: "p_field_component_id",
        RestAPI: "fieldComponentId",
        GraphQL: "fieldComponentId",
        custom: "fieldComponentId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    publicRead: {
        frontend: "publicRead",
        backend: "public_read",
        database: "public_read",
        pretty: "Public Read",
        component: "PublicRead",
        kebab: "public-read",
        sqlFunctionRef: "p_public_read",
        RestAPI: "publicRead",
        GraphQL: "publicRead",
        custom: "publicRead"
    },
    defaultScope: {
        frontend: "defaultScope",
        backend: "default_scope",
        database: "default_scope",
        pretty: "Default Scope",
        component: "DefaultScope",
        kebab: "default-scope",
        sqlFunctionRef: "p_default_scope",
        RestAPI: "defaultScope",
        GraphQL: "defaultScope",
        custom: "defaultScope"
    },
    dataInputComponentReference: {
        frontend: "dataInputComponentReference",
        backend: "data_input_component_reference",
        database: "ref_data_input_component",
        pretty: "Data Input Component Reference",
        component: "DataInputComponentReference",
        kebab: "data-input-componentReference",
        sqlFunctionRef: "p_ref_data_input_component",
        RestAPI: "dataInputComponentReference",
        GraphQL: "dataInputComponentReference",
        custom: "dataInputComponentReference"
    },
    fieldComponentsReference: {
        frontend: "fieldComponentsReference",
        backend: "field_components_reference",
        database: "ref_field_components",
        pretty: "Field Components Reference",
        component: "FieldComponentsReference",
        kebab: "field-componentsReference",
        sqlFunctionRef: "p_ref_field_components",
        RestAPI: "fieldComponentsReference",
        GraphQL: "fieldComponentsReference",
        custom: "fieldComponentsReference"
    },
    dataOutputComponentReference: {
        frontend: "dataOutputComponentReference",
        backend: "data_output_component_reference",
        database: "ref_data_output_component",
        pretty: "Data Output Component Reference",
        component: "DataOutputComponentReference",
        kebab: "data-output-componentReference",
        sqlFunctionRef: "p_ref_data_output_component",
        RestAPI: "dataOutputComponentReference",
        GraphQL: "dataOutputComponentReference",
        custom: "dataOutputComponentReference"
    },
    brokerValueInverse: {
        frontend: "brokerValueInverse",
        backend: "broker_value_Inverse",
        database: "ifk_broker_value",
        pretty: "Broker Value Inverse",
        component: "BrokerValueInverse",
        kebab: "broker-valueInverse",
        sqlFunctionRef: "p_ifk_broker_value",
        RestAPI: "brokerValueInverse",
        GraphQL: "brokerValueInverse",
        custom: "brokerValueInverse"
    },
    messageBrokerInverse: {
        frontend: "messageBrokerInverse",
        backend: "message_broker_Inverse",
        database: "ifk_message_broker",
        pretty: "Message Broker Inverse",
        component: "MessageBrokerInverse",
        kebab: "message-brokerInverse",
        sqlFunctionRef: "p_ifk_message_broker",
        RestAPI: "messageBrokerInverse",
        GraphQL: "messageBrokerInverse",
        custom: "messageBrokerInverse"
    },
    registeredFunctionInverse: {
        frontend: "registeredFunctionInverse",
        backend: "registered_function_Inverse",
        database: "ifk_registered_function",
        pretty: "Registered Function Inverse",
        component: "RegisteredFunctionInverse",
        kebab: "registered-functionInverse",
        sqlFunctionRef: "p_ifk_registered_function",
        RestAPI: "registeredFunctionInverse",
        GraphQL: "registeredFunctionInverse",
        custom: "registeredFunctionInverse"
    }
},
    dataInputComponent: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    options: {
        frontend: "options",
        backend: "options",
        database: "options",
        pretty: "Options",
        component: "Options",
        kebab: "options",
        sqlFunctionRef: "p_options",
        RestAPI: "options",
        GraphQL: "options",
        custom: "options"
    },
    includeOther: {
        frontend: "includeOther",
        backend: "include_other",
        database: "include_other",
        pretty: "Include Other",
        component: "IncludeOther",
        kebab: "include-other",
        sqlFunctionRef: "p_include_other",
        RestAPI: "includeOther",
        GraphQL: "includeOther",
        custom: "includeOther"
    },
    min: {
        frontend: "min",
        backend: "min",
        database: "min",
        pretty: "Min",
        component: "Min",
        kebab: "min",
        sqlFunctionRef: "p_min",
        RestAPI: "min",
        GraphQL: "min",
        custom: "min"
    },
    max: {
        frontend: "max",
        backend: "max",
        database: "max",
        pretty: "Max",
        component: "Max",
        kebab: "max",
        sqlFunctionRef: "p_max",
        RestAPI: "max",
        GraphQL: "max",
        custom: "max"
    },
    step: {
        frontend: "step",
        backend: "step",
        database: "step",
        pretty: "Step",
        component: "Step",
        kebab: "step",
        sqlFunctionRef: "p_step",
        RestAPI: "step",
        GraphQL: "step",
        custom: "step"
    },
    acceptableFiletypes: {
        frontend: "acceptableFiletypes",
        backend: "acceptable_filetypes",
        database: "acceptable_filetypes",
        pretty: "Acceptable Filetypes",
        component: "AcceptableFiletypes",
        kebab: "acceptable-filetypes",
        sqlFunctionRef: "p_acceptable_filetypes",
        RestAPI: "acceptableFiletypes",
        GraphQL: "acceptableFiletypes",
        custom: "acceptableFiletypes"
    },
    src: {
        frontend: "src",
        backend: "src",
        database: "src",
        pretty: "Src",
        component: "Src",
        kebab: "src",
        sqlFunctionRef: "p_src",
        RestAPI: "src",
        GraphQL: "src",
        custom: "src"
    },
    colorOverrides: {
        frontend: "colorOverrides",
        backend: "color_overrides",
        database: "color_overrides",
        pretty: "Color Overrides",
        component: "ColorOverrides",
        kebab: "color-overrides",
        sqlFunctionRef: "p_color_overrides",
        RestAPI: "colorOverrides",
        GraphQL: "colorOverrides",
        custom: "colorOverrides"
    },
    additionalParams: {
        frontend: "additionalParams",
        backend: "additional_params",
        database: "additional_params",
        pretty: "Additional Params",
        component: "AdditionalParams",
        kebab: "additional-params",
        sqlFunctionRef: "p_additional_params",
        RestAPI: "additionalParams",
        GraphQL: "additionalParams",
        custom: "additionalParams"
    },
    subComponent: {
        frontend: "subComponent",
        backend: "sub_component",
        database: "sub_component",
        pretty: "Sub Component",
        component: "SubComponent",
        kebab: "sub-component",
        sqlFunctionRef: "p_sub_component",
        RestAPI: "subComponent",
        GraphQL: "subComponent",
        custom: "subComponent"
    },
    component: {
        frontend: "component",
        backend: "component",
        database: "component",
        pretty: "Component",
        component: "Component",
        kebab: "component",
        sqlFunctionRef: "p_component",
        RestAPI: "component",
        GraphQL: "component",
        custom: "component"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    placeholder: {
        frontend: "placeholder",
        backend: "placeholder",
        database: "placeholder",
        pretty: "Placeholder",
        component: "Placeholder",
        kebab: "placeholder",
        sqlFunctionRef: "p_placeholder",
        RestAPI: "placeholder",
        GraphQL: "placeholder",
        custom: "placeholder"
    },
    containerClassName: {
        frontend: "containerClassName",
        backend: "container_class_name",
        database: "container_class_name",
        pretty: "Container Class Name",
        component: "ContainerClassName",
        kebab: "container-class-name",
        sqlFunctionRef: "p_container_class_name",
        RestAPI: "containerClassName",
        GraphQL: "containerClassName",
        custom: "containerClassName"
    },
    collapsibleClassName: {
        frontend: "collapsibleClassName",
        backend: "collapsible_class_name",
        database: "collapsible_class_name",
        pretty: "Collapsible Class Name",
        component: "CollapsibleClassName",
        kebab: "collapsible-class-name",
        sqlFunctionRef: "p_collapsible_class_name",
        RestAPI: "collapsibleClassName",
        GraphQL: "collapsibleClassName",
        custom: "collapsibleClassName"
    },
    labelClassName: {
        frontend: "labelClassName",
        backend: "label_class_name",
        database: "label_class_name",
        pretty: "Label Class Name",
        component: "LabelClassName",
        kebab: "label-class-name",
        sqlFunctionRef: "p_label_class_name",
        RestAPI: "labelClassName",
        GraphQL: "labelClassName",
        custom: "labelClassName"
    },
    descriptionClassName: {
        frontend: "descriptionClassName",
        backend: "description_class_name",
        database: "description_class_name",
        pretty: "Description Class Name",
        component: "DescriptionClassName",
        kebab: "description-class-name",
        sqlFunctionRef: "p_description_class_name",
        RestAPI: "descriptionClassName",
        GraphQL: "descriptionClassName",
        custom: "descriptionClassName"
    },
    componentClassName: {
        frontend: "componentClassName",
        backend: "component_class_name",
        database: "component_class_name",
        pretty: "Component Class Name",
        component: "ComponentClassName",
        kebab: "component-class-name",
        sqlFunctionRef: "p_component_class_name",
        RestAPI: "componentClassName",
        GraphQL: "componentClassName",
        custom: "componentClassName"
    },
    size: {
        frontend: "size",
        backend: "size",
        database: "size",
        pretty: "Size",
        component: "Size",
        kebab: "size",
        sqlFunctionRef: "p_size",
        RestAPI: "size",
        GraphQL: "size",
        custom: "size"
    },
    height: {
        frontend: "height",
        backend: "height",
        database: "height",
        pretty: "Height",
        component: "Height",
        kebab: "height",
        sqlFunctionRef: "p_height",
        RestAPI: "height",
        GraphQL: "height",
        custom: "height"
    },
    width: {
        frontend: "width",
        backend: "width",
        database: "width",
        pretty: "Width",
        component: "Width",
        kebab: "width",
        sqlFunctionRef: "p_width",
        RestAPI: "width",
        GraphQL: "width",
        custom: "width"
    },
    minHeight: {
        frontend: "minHeight",
        backend: "min_height",
        database: "min_height",
        pretty: "Min Height",
        component: "MinHeight",
        kebab: "min-height",
        sqlFunctionRef: "p_min_height",
        RestAPI: "minHeight",
        GraphQL: "minHeight",
        custom: "minHeight"
    },
    maxHeight: {
        frontend: "maxHeight",
        backend: "max_height",
        database: "max_height",
        pretty: "Max Height",
        component: "MaxHeight",
        kebab: "max-height",
        sqlFunctionRef: "p_max_height",
        RestAPI: "maxHeight",
        GraphQL: "maxHeight",
        custom: "maxHeight"
    },
    minWidth: {
        frontend: "minWidth",
        backend: "min_width",
        database: "min_width",
        pretty: "Min Width",
        component: "MinWidth",
        kebab: "min-width",
        sqlFunctionRef: "p_min_width",
        RestAPI: "minWidth",
        GraphQL: "minWidth",
        custom: "minWidth"
    },
    maxWidth: {
        frontend: "maxWidth",
        backend: "max_width",
        database: "max_width",
        pretty: "Max Width",
        component: "MaxWidth",
        kebab: "max-width",
        sqlFunctionRef: "p_max_width",
        RestAPI: "maxWidth",
        GraphQL: "maxWidth",
        custom: "maxWidth"
    },
    orientation: {
        frontend: "orientation",
        backend: "orientation",
        database: "orientation",
        pretty: "Orientation",
        component: "Orientation",
        kebab: "orientation",
        sqlFunctionRef: "p_orientation",
        RestAPI: "orientation",
        GraphQL: "orientation",
        custom: "orientation"
    },
    messageBrokerInverse: {
        frontend: "messageBrokerInverse",
        backend: "message_broker_Inverse",
        database: "ifk_message_broker",
        pretty: "Message Broker Inverse",
        component: "MessageBrokerInverse",
        kebab: "message-brokerInverse",
        sqlFunctionRef: "p_ifk_message_broker",
        RestAPI: "messageBrokerInverse",
        GraphQL: "messageBrokerInverse",
        custom: "messageBrokerInverse"
    },
    brokerInverse: {
        frontend: "brokerInverse",
        backend: "broker_Inverse",
        database: "ifk_broker",
        pretty: "Broker Inverse",
        component: "BrokerInverse",
        kebab: "brokerInverse",
        sqlFunctionRef: "p_ifk_broker",
        RestAPI: "brokerInverse",
        GraphQL: "brokerInverse",
        custom: "brokerInverse"
    },
    dataBrokerInverse: {
        frontend: "dataBrokerInverse",
        backend: "data_broker_Inverse",
        database: "ifk_data_broker",
        pretty: "Data Broker Inverse",
        component: "DataBrokerInverse",
        kebab: "data-brokerInverse",
        sqlFunctionRef: "p_ifk_data_broker",
        RestAPI: "dataBrokerInverse",
        GraphQL: "dataBrokerInverse",
        custom: "dataBrokerInverse"
    }
},
    dataOutputComponent: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    componentType: {
        frontend: "componentType",
        backend: "component_type",
        database: "component_type",
        pretty: "Component Type",
        component: "ComponentType",
        kebab: "component-type",
        sqlFunctionRef: "p_component_type",
        RestAPI: "componentType",
        GraphQL: "componentType",
        custom: "componentType"
    },
    uiComponent: {
        frontend: "uiComponent",
        backend: "ui_component",
        database: "ui_component",
        pretty: "Ui Component",
        component: "UiComponent",
        kebab: "ui-component",
        sqlFunctionRef: "p_ui_component",
        RestAPI: "uiComponent",
        GraphQL: "uiComponent",
        custom: "uiComponent"
    },
    props: {
        frontend: "props",
        backend: "props",
        database: "props",
        pretty: "Props",
        component: "Props",
        kebab: "props",
        sqlFunctionRef: "p_props",
        RestAPI: "props",
        GraphQL: "props",
        custom: "props"
    },
    additionalParams: {
        frontend: "additionalParams",
        backend: "additional_params",
        database: "additional_params",
        pretty: "Additional Params",
        component: "AdditionalParams",
        kebab: "additional-params",
        sqlFunctionRef: "p_additional_params",
        RestAPI: "additionalParams",
        GraphQL: "additionalParams",
        custom: "additionalParams"
    },
    dataBrokerInverse: {
        frontend: "dataBrokerInverse",
        backend: "data_broker_Inverse",
        database: "ifk_data_broker",
        pretty: "Data Broker Inverse",
        component: "DataBrokerInverse",
        kebab: "data-brokerInverse",
        sqlFunctionRef: "p_ifk_data_broker",
        RestAPI: "dataBrokerInverse",
        GraphQL: "dataBrokerInverse",
        custom: "dataBrokerInverse"
    }
},
    displayOption: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    defaultParams: {
        frontend: "defaultParams",
        backend: "default_params",
        database: "default_params",
        pretty: "Default Params",
        component: "DefaultParams",
        kebab: "default-params",
        sqlFunctionRef: "p_default_params",
        RestAPI: "defaultParams",
        GraphQL: "defaultParams",
        custom: "defaultParams"
    },
    customizableParams: {
        frontend: "customizableParams",
        backend: "customizable_params",
        database: "customizable_params",
        pretty: "Customizable Params",
        component: "CustomizableParams",
        kebab: "customizable-params",
        sqlFunctionRef: "p_customizable_params",
        RestAPI: "customizableParams",
        GraphQL: "customizableParams",
        custom: "customizableParams"
    },
    additionalParams: {
        frontend: "additionalParams",
        backend: "additional_params",
        database: "additional_params",
        pretty: "Additional Params",
        component: "AdditionalParams",
        kebab: "additional-params",
        sqlFunctionRef: "p_additional_params",
        RestAPI: "additionalParams",
        GraphQL: "additionalParams",
        custom: "additionalParams"
    },
    recipeDisplayInverse: {
        frontend: "recipeDisplayInverse",
        backend: "recipe_display_Inverse",
        database: "ifk_recipe_display",
        pretty: "Recipe Display Inverse",
        component: "RecipeDisplayInverse",
        kebab: "recipe-displayInverse",
        sqlFunctionRef: "p_ifk_recipe_display",
        RestAPI: "recipeDisplayInverse",
        GraphQL: "recipeDisplayInverse",
        custom: "recipeDisplayInverse"
    }
},
    emails: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    sender: {
        frontend: "sender",
        backend: "sender",
        database: "sender",
        pretty: "Sender",
        component: "Sender",
        kebab: "sender",
        sqlFunctionRef: "p_sender",
        RestAPI: "sender",
        GraphQL: "sender",
        custom: "sender"
    },
    recipient: {
        frontend: "recipient",
        backend: "recipient",
        database: "recipient",
        pretty: "Recipient",
        component: "Recipient",
        kebab: "recipient",
        sqlFunctionRef: "p_recipient",
        RestAPI: "recipient",
        GraphQL: "recipient",
        custom: "recipient"
    },
    subject: {
        frontend: "subject",
        backend: "subject",
        database: "subject",
        pretty: "Subject",
        component: "Subject",
        kebab: "subject",
        sqlFunctionRef: "p_subject",
        RestAPI: "subject",
        GraphQL: "subject",
        custom: "subject"
    },
    body: {
        frontend: "body",
        backend: "body",
        database: "body",
        pretty: "Body",
        component: "Body",
        kebab: "body",
        sqlFunctionRef: "p_body",
        RestAPI: "body",
        GraphQL: "body",
        custom: "body"
    },
    timestamp: {
        frontend: "timestamp",
        backend: "timestamp",
        database: "timestamp",
        pretty: "Timestamp",
        component: "Timestamp",
        kebab: "timestamp",
        sqlFunctionRef: "p_timestamp",
        RestAPI: "timestamp",
        GraphQL: "timestamp",
        custom: "timestamp"
    },
    isRead: {
        frontend: "isRead",
        backend: "is_read",
        database: "is_read",
        pretty: "Is Read",
        component: "IsRead",
        kebab: "is-read",
        sqlFunctionRef: "p_is_read",
        RestAPI: "isRead",
        GraphQL: "isRead",
        custom: "isRead"
    }
},
    extractor: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    outputType: {
        frontend: "outputType",
        backend: "output_type",
        database: "output_type",
        pretty: "Output Type",
        component: "OutputType",
        kebab: "output-type",
        sqlFunctionRef: "p_output_type",
        RestAPI: "outputType",
        GraphQL: "outputType",
        custom: "outputType"
    },
    defaultIdentifier: {
        frontend: "defaultIdentifier",
        backend: "default_identifier",
        database: "default_identifier",
        pretty: "Default Identifier",
        component: "DefaultIdentifier",
        kebab: "default-identifier",
        sqlFunctionRef: "p_default_identifier",
        RestAPI: "defaultIdentifier",
        GraphQL: "defaultIdentifier",
        custom: "defaultIdentifier"
    },
    defaultIndex: {
        frontend: "defaultIndex",
        backend: "default_index",
        database: "default_index",
        pretty: "Default Index",
        component: "DefaultIndex",
        kebab: "default-index",
        sqlFunctionRef: "p_default_index",
        RestAPI: "defaultIndex",
        GraphQL: "defaultIndex",
        custom: "defaultIndex"
    }
},
    fieldComponents: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    label: {
        frontend: "label",
        backend: "label",
        database: "label",
        pretty: "Label",
        component: "Label",
        kebab: "label",
        sqlFunctionRef: "p_label",
        RestAPI: "label",
        GraphQL: "label",
        custom: "label"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    helpText: {
        frontend: "helpText",
        backend: "help_text",
        database: "help_text",
        pretty: "Help Text",
        component: "HelpText",
        kebab: "help-text",
        sqlFunctionRef: "p_help_text",
        RestAPI: "helpText",
        GraphQL: "helpText",
        custom: "helpText"
    },
    componentGroup: {
        frontend: "componentGroup",
        backend: "component_group",
        database: "component_group",
        pretty: "Component Group",
        component: "ComponentGroup",
        kebab: "component-group",
        sqlFunctionRef: "p_component_group",
        RestAPI: "componentGroup",
        GraphQL: "componentGroup",
        custom: "componentGroup"
    },
    iconName: {
        frontend: "iconName",
        backend: "icon_name",
        database: "icon_name",
        pretty: "Icon Name",
        component: "IconName",
        kebab: "icon-name",
        sqlFunctionRef: "p_icon_name",
        RestAPI: "iconName",
        GraphQL: "iconName",
        custom: "iconName"
    },
    component: {
        frontend: "component",
        backend: "component",
        database: "component",
        pretty: "Component",
        component: "Component",
        kebab: "component",
        sqlFunctionRef: "p_component",
        RestAPI: "component",
        GraphQL: "component",
        custom: "component"
    },
    required: {
        frontend: "required",
        backend: "required",
        database: "required",
        pretty: "Required",
        component: "Required",
        kebab: "required",
        sqlFunctionRef: "p_required",
        RestAPI: "required",
        GraphQL: "required",
        custom: "required"
    },
    placeholder: {
        frontend: "placeholder",
        backend: "placeholder",
        database: "placeholder",
        pretty: "Placeholder",
        component: "Placeholder",
        kebab: "placeholder",
        sqlFunctionRef: "p_placeholder",
        RestAPI: "placeholder",
        GraphQL: "placeholder",
        custom: "placeholder"
    },
    defaultValue: {
        frontend: "defaultValue",
        backend: "default_value",
        database: "default_value",
        pretty: "Default Value",
        component: "DefaultValue",
        kebab: "default-value",
        sqlFunctionRef: "p_default_value",
        RestAPI: "defaultValue",
        GraphQL: "defaultValue",
        custom: "defaultValue"
    },
    includeOther: {
        frontend: "includeOther",
        backend: "include_other",
        database: "include_other",
        pretty: "Include Other",
        component: "IncludeOther",
        kebab: "include-other",
        sqlFunctionRef: "p_include_other",
        RestAPI: "includeOther",
        GraphQL: "includeOther",
        custom: "includeOther"
    },
    options: {
        frontend: "options",
        backend: "options",
        database: "options",
        pretty: "Options",
        component: "Options",
        kebab: "options",
        sqlFunctionRef: "p_options",
        RestAPI: "options",
        GraphQL: "options",
        custom: "options"
    },
    componentProps: {
        frontend: "componentProps",
        backend: "component_props",
        database: "component_props",
        pretty: "Component Props",
        component: "ComponentProps",
        kebab: "component-props",
        sqlFunctionRef: "p_component_props",
        RestAPI: "componentProps",
        GraphQL: "componentProps",
        custom: "componentProps"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    publicRead: {
        frontend: "publicRead",
        backend: "public_read",
        database: "public_read",
        pretty: "Public Read",
        component: "PublicRead",
        kebab: "public-read",
        sqlFunctionRef: "p_public_read",
        RestAPI: "publicRead",
        GraphQL: "publicRead",
        custom: "publicRead"
    },
    dataBrokerInverse: {
        frontend: "dataBrokerInverse",
        backend: "data_broker_Inverse",
        database: "ifk_data_broker",
        pretty: "Data Broker Inverse",
        component: "DataBrokerInverse",
        kebab: "data-brokerInverse",
        sqlFunctionRef: "p_ifk_data_broker",
        RestAPI: "dataBrokerInverse",
        GraphQL: "dataBrokerInverse",
        custom: "dataBrokerInverse"
    },
    containerFieldsInverse: {
        frontend: "containerFieldsInverse",
        backend: "container_fields_Inverse",
        database: "ifk_container_fields",
        pretty: "Container Fields Inverse",
        component: "ContainerFieldsInverse",
        kebab: "container-fieldsInverse",
        sqlFunctionRef: "p_ifk_container_fields",
        RestAPI: "containerFieldsInverse",
        GraphQL: "containerFieldsInverse",
        custom: "containerFieldsInverse"
    },
    workflowUserInputInverse: {
        frontend: "workflowUserInputInverse",
        backend: "workflow_user_input_Inverse",
        database: "ifk_workflow_user_input",
        pretty: "Workflow User Input Inverse",
        component: "WorkflowUserInputInverse",
        kebab: "workflow-user-inputInverse",
        sqlFunctionRef: "p_ifk_workflow_user_input",
        RestAPI: "workflowUserInputInverse",
        GraphQL: "workflowUserInputInverse",
        custom: "workflowUserInputInverse"
    }
},
    fileStructure: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    bucketId: {
        frontend: "bucketId",
        backend: "bucket_id",
        database: "bucket_id",
        pretty: "Bucket Id",
        component: "BucketId",
        kebab: "bucket-id",
        sqlFunctionRef: "p_bucket_id",
        RestAPI: "bucketId",
        GraphQL: "bucketId",
        custom: "bucketId"
    },
    path: {
        frontend: "path",
        backend: "path",
        database: "path",
        pretty: "Path",
        component: "Path",
        kebab: "path",
        sqlFunctionRef: "p_path",
        RestAPI: "path",
        GraphQL: "path",
        custom: "path"
    },
    isFolder: {
        frontend: "isFolder",
        backend: "is_folder",
        database: "is_folder",
        pretty: "Is Folder",
        component: "IsFolder",
        kebab: "is-folder",
        sqlFunctionRef: "p_is_folder",
        RestAPI: "isFolder",
        GraphQL: "isFolder",
        custom: "isFolder"
    },
    fileId: {
        frontend: "fileId",
        backend: "file_id",
        database: "file_id",
        pretty: "File Id",
        component: "FileId",
        kebab: "file-id",
        sqlFunctionRef: "p_file_id",
        RestAPI: "fileId",
        GraphQL: "fileId",
        custom: "fileId"
    },
    parentPath: {
        frontend: "parentPath",
        backend: "parent_path",
        database: "parent_path",
        pretty: "Parent Path",
        component: "ParentPath",
        kebab: "parent-path",
        sqlFunctionRef: "p_parent_path",
        RestAPI: "parentPath",
        GraphQL: "parentPath",
        custom: "parentPath"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    }
},
    flashcardData: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    topic: {
        frontend: "topic",
        backend: "topic",
        database: "topic",
        pretty: "Topic",
        component: "Topic",
        kebab: "topic",
        sqlFunctionRef: "p_topic",
        RestAPI: "topic",
        GraphQL: "topic",
        custom: "topic"
    },
    lesson: {
        frontend: "lesson",
        backend: "lesson",
        database: "lesson",
        pretty: "Lesson",
        component: "Lesson",
        kebab: "lesson",
        sqlFunctionRef: "p_lesson",
        RestAPI: "lesson",
        GraphQL: "lesson",
        custom: "lesson"
    },
    difficulty: {
        frontend: "difficulty",
        backend: "difficulty",
        database: "difficulty",
        pretty: "Difficulty",
        component: "Difficulty",
        kebab: "difficulty",
        sqlFunctionRef: "p_difficulty",
        RestAPI: "difficulty",
        GraphQL: "difficulty",
        custom: "difficulty"
    },
    front: {
        frontend: "front",
        backend: "front",
        database: "front",
        pretty: "Front",
        component: "Front",
        kebab: "front",
        sqlFunctionRef: "p_front",
        RestAPI: "front",
        GraphQL: "front",
        custom: "front"
    },
    back: {
        frontend: "back",
        backend: "back",
        database: "back",
        pretty: "Back",
        component: "Back",
        kebab: "back",
        sqlFunctionRef: "p_back",
        RestAPI: "back",
        GraphQL: "back",
        custom: "back"
    },
    example: {
        frontend: "example",
        backend: "example",
        database: "example",
        pretty: "Example",
        component: "Example",
        kebab: "example",
        sqlFunctionRef: "p_example",
        RestAPI: "example",
        GraphQL: "example",
        custom: "example"
    },
    detailedExplanation: {
        frontend: "detailedExplanation",
        backend: "detailed_explanation",
        database: "detailed_explanation",
        pretty: "Detailed Explanation",
        component: "DetailedExplanation",
        kebab: "detailed-explanation",
        sqlFunctionRef: "p_detailed_explanation",
        RestAPI: "detailedExplanation",
        GraphQL: "detailedExplanation",
        custom: "detailedExplanation"
    },
    audioExplanation: {
        frontend: "audioExplanation",
        backend: "audio_explanation",
        database: "audio_explanation",
        pretty: "Audio Explanation",
        component: "AudioExplanation",
        kebab: "audio-explanation",
        sqlFunctionRef: "p_audio_explanation",
        RestAPI: "audioExplanation",
        GraphQL: "audioExplanation",
        custom: "audioExplanation"
    },
    personalNotes: {
        frontend: "personalNotes",
        backend: "personal_notes",
        database: "personal_notes",
        pretty: "Personal Notes",
        component: "PersonalNotes",
        kebab: "personal-notes",
        sqlFunctionRef: "p_personal_notes",
        RestAPI: "personalNotes",
        GraphQL: "personalNotes",
        custom: "personalNotes"
    },
    isDeleted: {
        frontend: "isDeleted",
        backend: "is_deleted",
        database: "is_deleted",
        pretty: "Is Deleted",
        component: "IsDeleted",
        kebab: "is-deleted",
        sqlFunctionRef: "p_is_deleted",
        RestAPI: "isDeleted",
        GraphQL: "isDeleted",
        custom: "isDeleted"
    },
    public: {
        frontend: "public",
        backend: "public",
        database: "public",
        pretty: "Public",
        component: "Public",
        kebab: "public",
        sqlFunctionRef: "p_public",
        RestAPI: "public",
        GraphQL: "public",
        custom: "public"
    },
    sharedWith: {
        frontend: "sharedWith",
        backend: "shared_with",
        database: "shared_with",
        pretty: "Shared With",
        component: "SharedWith",
        kebab: "shared-with",
        sqlFunctionRef: "p_shared_with",
        RestAPI: "sharedWith",
        GraphQL: "sharedWith",
        custom: "sharedWith"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    flashcardHistoryInverse: {
        frontend: "flashcardHistoryInverse",
        backend: "flashcard_history_Inverse",
        database: "ifk_flashcard_history",
        pretty: "Flashcard History Inverse",
        component: "FlashcardHistoryInverse",
        kebab: "flashcard-historyInverse",
        sqlFunctionRef: "p_ifk_flashcard_history",
        RestAPI: "flashcardHistoryInverse",
        GraphQL: "flashcardHistoryInverse",
        custom: "flashcardHistoryInverse"
    },
    flashcardSetRelationsInverse: {
        frontend: "flashcardSetRelationsInverse",
        backend: "flashcard_set_relations_Inverse",
        database: "ifk_flashcard_set_relations",
        pretty: "Flashcard Set Relations Inverse",
        component: "FlashcardSetRelationsInverse",
        kebab: "flashcard-set-relationsInverse",
        sqlFunctionRef: "p_ifk_flashcard_set_relations",
        RestAPI: "flashcardSetRelationsInverse",
        GraphQL: "flashcardSetRelationsInverse",
        custom: "flashcardSetRelationsInverse"
    },
    flashcardImagesInverse: {
        frontend: "flashcardImagesInverse",
        backend: "flashcard_images_Inverse",
        database: "ifk_flashcard_images",
        pretty: "Flashcard Images Inverse",
        component: "FlashcardImagesInverse",
        kebab: "flashcard-imagesInverse",
        sqlFunctionRef: "p_ifk_flashcard_images",
        RestAPI: "flashcardImagesInverse",
        GraphQL: "flashcardImagesInverse",
        custom: "flashcardImagesInverse"
    }
},
    flashcardHistory: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    flashcardId: {
        frontend: "flashcardId",
        backend: "flashcard_id",
        database: "flashcard_id",
        pretty: "Flashcard Id",
        component: "FlashcardId",
        kebab: "flashcard-id",
        sqlFunctionRef: "p_flashcard_id",
        RestAPI: "flashcardId",
        GraphQL: "flashcardId",
        custom: "flashcardId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    reviewCount: {
        frontend: "reviewCount",
        backend: "review_count",
        database: "review_count",
        pretty: "Review Count",
        component: "ReviewCount",
        kebab: "review-count",
        sqlFunctionRef: "p_review_count",
        RestAPI: "reviewCount",
        GraphQL: "reviewCount",
        custom: "reviewCount"
    },
    correctCount: {
        frontend: "correctCount",
        backend: "correct_count",
        database: "correct_count",
        pretty: "Correct Count",
        component: "CorrectCount",
        kebab: "correct-count",
        sqlFunctionRef: "p_correct_count",
        RestAPI: "correctCount",
        GraphQL: "correctCount",
        custom: "correctCount"
    },
    incorrectCount: {
        frontend: "incorrectCount",
        backend: "incorrect_count",
        database: "incorrect_count",
        pretty: "Incorrect Count",
        component: "IncorrectCount",
        kebab: "incorrect-count",
        sqlFunctionRef: "p_incorrect_count",
        RestAPI: "incorrectCount",
        GraphQL: "incorrectCount",
        custom: "incorrectCount"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    flashcardDataReference: {
        frontend: "flashcardDataReference",
        backend: "flashcard_data_reference",
        database: "ref_flashcard_data",
        pretty: "Flashcard Data Reference",
        component: "FlashcardDataReference",
        kebab: "flashcard-dataReference",
        sqlFunctionRef: "p_ref_flashcard_data",
        RestAPI: "flashcardDataReference",
        GraphQL: "flashcardDataReference",
        custom: "flashcardDataReference"
    }
},
    flashcardImages: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    flashcardId: {
        frontend: "flashcardId",
        backend: "flashcard_id",
        database: "flashcard_id",
        pretty: "Flashcard Id",
        component: "FlashcardId",
        kebab: "flashcard-id",
        sqlFunctionRef: "p_flashcard_id",
        RestAPI: "flashcardId",
        GraphQL: "flashcardId",
        custom: "flashcardId"
    },
    filePath: {
        frontend: "filePath",
        backend: "file_path",
        database: "file_path",
        pretty: "File Path",
        component: "FilePath",
        kebab: "file-path",
        sqlFunctionRef: "p_file_path",
        RestAPI: "filePath",
        GraphQL: "filePath",
        custom: "filePath"
    },
    fileName: {
        frontend: "fileName",
        backend: "file_name",
        database: "file_name",
        pretty: "File Name",
        component: "FileName",
        kebab: "file-name",
        sqlFunctionRef: "p_file_name",
        RestAPI: "fileName",
        GraphQL: "fileName",
        custom: "fileName"
    },
    mimeType: {
        frontend: "mimeType",
        backend: "mime_type",
        database: "mime_type",
        pretty: "Mime Type",
        component: "MimeType",
        kebab: "mime-type",
        sqlFunctionRef: "p_mime_type",
        RestAPI: "mimeType",
        GraphQL: "mimeType",
        custom: "mimeType"
    },
    size: {
        frontend: "size",
        backend: "size",
        database: "size",
        pretty: "Size",
        component: "Size",
        kebab: "size",
        sqlFunctionRef: "p_size",
        RestAPI: "size",
        GraphQL: "size",
        custom: "size"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    flashcardDataReference: {
        frontend: "flashcardDataReference",
        backend: "flashcard_data_reference",
        database: "ref_flashcard_data",
        pretty: "Flashcard Data Reference",
        component: "FlashcardDataReference",
        kebab: "flashcard-dataReference",
        sqlFunctionRef: "p_ref_flashcard_data",
        RestAPI: "flashcardDataReference",
        GraphQL: "flashcardDataReference",
        custom: "flashcardDataReference"
    }
},
    flashcardSetRelations: {
    flashcardId: {
        frontend: "flashcardId",
        backend: "flashcard_id",
        database: "flashcard_id",
        pretty: "Flashcard Id",
        component: "FlashcardId",
        kebab: "flashcard-id",
        sqlFunctionRef: "p_flashcard_id",
        RestAPI: "flashcardId",
        GraphQL: "flashcardId",
        custom: "flashcardId"
    },
    setId: {
        frontend: "setId",
        backend: "set_id",
        database: "set_id",
        pretty: "Set Id",
        component: "SetId",
        kebab: "set-id",
        sqlFunctionRef: "p_set_id",
        RestAPI: "setId",
        GraphQL: "setId",
        custom: "setId"
    },
    order: {
        frontend: "order",
        backend: "order",
        database: "order",
        pretty: "Order",
        component: "Order",
        kebab: "order",
        sqlFunctionRef: "p_order",
        RestAPI: "order",
        GraphQL: "order",
        custom: "order"
    },
    flashcardDataReference: {
        frontend: "flashcardDataReference",
        backend: "flashcard_data_reference",
        database: "ref_flashcard_data",
        pretty: "Flashcard Data Reference",
        component: "FlashcardDataReference",
        kebab: "flashcard-dataReference",
        sqlFunctionRef: "p_ref_flashcard_data",
        RestAPI: "flashcardDataReference",
        GraphQL: "flashcardDataReference",
        custom: "flashcardDataReference"
    },
    flashcardSetsReference: {
        frontend: "flashcardSetsReference",
        backend: "flashcard_sets_reference",
        database: "ref_flashcard_sets",
        pretty: "Flashcard Sets Reference",
        component: "FlashcardSetsReference",
        kebab: "flashcard-setsReference",
        sqlFunctionRef: "p_ref_flashcard_sets",
        RestAPI: "flashcardSetsReference",
        GraphQL: "flashcardSetsReference",
        custom: "flashcardSetsReference"
    }
},
    flashcardSets: {
    setId: {
        frontend: "setId",
        backend: "set_id",
        database: "set_id",
        pretty: "Set Id",
        component: "SetId",
        kebab: "set-id",
        sqlFunctionRef: "p_set_id",
        RestAPI: "setId",
        GraphQL: "setId",
        custom: "setId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    sharedWith: {
        frontend: "sharedWith",
        backend: "shared_with",
        database: "shared_with",
        pretty: "Shared With",
        component: "SharedWith",
        kebab: "shared-with",
        sqlFunctionRef: "p_shared_with",
        RestAPI: "sharedWith",
        GraphQL: "sharedWith",
        custom: "sharedWith"
    },
    public: {
        frontend: "public",
        backend: "public",
        database: "public",
        pretty: "Public",
        component: "Public",
        kebab: "public",
        sqlFunctionRef: "p_public",
        RestAPI: "public",
        GraphQL: "public",
        custom: "public"
    },
    topic: {
        frontend: "topic",
        backend: "topic",
        database: "topic",
        pretty: "Topic",
        component: "Topic",
        kebab: "topic",
        sqlFunctionRef: "p_topic",
        RestAPI: "topic",
        GraphQL: "topic",
        custom: "topic"
    },
    lesson: {
        frontend: "lesson",
        backend: "lesson",
        database: "lesson",
        pretty: "Lesson",
        component: "Lesson",
        kebab: "lesson",
        sqlFunctionRef: "p_lesson",
        RestAPI: "lesson",
        GraphQL: "lesson",
        custom: "lesson"
    },
    difficulty: {
        frontend: "difficulty",
        backend: "difficulty",
        database: "difficulty",
        pretty: "Difficulty",
        component: "Difficulty",
        kebab: "difficulty",
        sqlFunctionRef: "p_difficulty",
        RestAPI: "difficulty",
        GraphQL: "difficulty",
        custom: "difficulty"
    },
    audioOverview: {
        frontend: "audioOverview",
        backend: "audio_overview",
        database: "audio_overview",
        pretty: "Audio Overview",
        component: "AudioOverview",
        kebab: "audio-overview",
        sqlFunctionRef: "p_audio_overview",
        RestAPI: "audioOverview",
        GraphQL: "audioOverview",
        custom: "audioOverview"
    },
    flashcardSetRelationsInverse: {
        frontend: "flashcardSetRelationsInverse",
        backend: "flashcard_set_relations_Inverse",
        database: "ifk_flashcard_set_relations",
        pretty: "Flashcard Set Relations Inverse",
        component: "FlashcardSetRelationsInverse",
        kebab: "flashcard-set-relationsInverse",
        sqlFunctionRef: "p_ifk_flashcard_set_relations",
        RestAPI: "flashcardSetRelationsInverse",
        GraphQL: "flashcardSetRelationsInverse",
        custom: "flashcardSetRelationsInverse"
    }
},
    fullSpectrumPositions: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    title: {
        frontend: "title",
        backend: "title",
        database: "title",
        pretty: "Title",
        component: "Title",
        kebab: "title",
        sqlFunctionRef: "p_title",
        RestAPI: "title",
        GraphQL: "title",
        custom: "title"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    alternateTitles: {
        frontend: "alternateTitles",
        backend: "alternate_titles",
        database: "alternate_titles",
        pretty: "Alternate Titles",
        component: "AlternateTitles",
        kebab: "alternate-titles",
        sqlFunctionRef: "p_alternate_titles",
        RestAPI: "alternateTitles",
        GraphQL: "alternateTitles",
        custom: "alternateTitles"
    },
    qualifications: {
        frontend: "qualifications",
        backend: "qualifications",
        database: "qualifications",
        pretty: "Qualifications",
        component: "Qualifications",
        kebab: "qualifications",
        sqlFunctionRef: "p_qualifications",
        RestAPI: "qualifications",
        GraphQL: "qualifications",
        custom: "qualifications"
    },
    sizzleQuestions: {
        frontend: "sizzleQuestions",
        backend: "sizzle_questions",
        database: "sizzle_questions",
        pretty: "Sizzle Questions",
        component: "SizzleQuestions",
        kebab: "sizzle-questions",
        sqlFunctionRef: "p_sizzle_questions",
        RestAPI: "sizzleQuestions",
        GraphQL: "sizzleQuestions",
        custom: "sizzleQuestions"
    },
    redFlags: {
        frontend: "redFlags",
        backend: "red_flags",
        database: "red_flags",
        pretty: "Red Flags",
        component: "RedFlags",
        kebab: "red-flags",
        sqlFunctionRef: "p_red_flags",
        RestAPI: "redFlags",
        GraphQL: "redFlags",
        custom: "redFlags"
    },
    additionalDetails: {
        frontend: "additionalDetails",
        backend: "additional_details",
        database: "additional_details",
        pretty: "Additional Details",
        component: "AdditionalDetails",
        kebab: "additional-details",
        sqlFunctionRef: "p_additional_details",
        RestAPI: "additionalDetails",
        GraphQL: "additionalDetails",
        custom: "additionalDetails"
    }
},
    htmlExtractions: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    url: {
        frontend: "url",
        backend: "url",
        database: "url",
        pretty: "Url",
        component: "Url",
        kebab: "url",
        sqlFunctionRef: "p_url",
        RestAPI: "url",
        GraphQL: "url",
        custom: "url"
    },
    title: {
        frontend: "title",
        backend: "title",
        database: "title",
        pretty: "Title",
        component: "Title",
        kebab: "title",
        sqlFunctionRef: "p_title",
        RestAPI: "title",
        GraphQL: "title",
        custom: "title"
    },
    htmlContent: {
        frontend: "htmlContent",
        backend: "html_content",
        database: "html_content",
        pretty: "Html Content",
        component: "HtmlContent",
        kebab: "html-content",
        sqlFunctionRef: "p_html_content",
        RestAPI: "htmlContent",
        GraphQL: "htmlContent",
        custom: "htmlContent"
    },
    metaDescription: {
        frontend: "metaDescription",
        backend: "meta_description",
        database: "meta_description",
        pretty: "Meta Description",
        component: "MetaDescription",
        kebab: "meta-description",
        sqlFunctionRef: "p_meta_description",
        RestAPI: "metaDescription",
        GraphQL: "metaDescription",
        custom: "metaDescription"
    },
    metaKeywords: {
        frontend: "metaKeywords",
        backend: "meta_keywords",
        database: "meta_keywords",
        pretty: "Meta Keywords",
        component: "MetaKeywords",
        kebab: "meta-keywords",
        sqlFunctionRef: "p_meta_keywords",
        RestAPI: "metaKeywords",
        GraphQL: "metaKeywords",
        custom: "metaKeywords"
    },
    contentLength: {
        frontend: "contentLength",
        backend: "content_length",
        database: "content_length",
        pretty: "Content Length",
        component: "ContentLength",
        kebab: "content-length",
        sqlFunctionRef: "p_content_length",
        RestAPI: "contentLength",
        GraphQL: "contentLength",
        custom: "contentLength"
    },
    extractedAt: {
        frontend: "extractedAt",
        backend: "extracted_at",
        database: "extracted_at",
        pretty: "Extracted At",
        component: "ExtractedAt",
        kebab: "extracted-at",
        sqlFunctionRef: "p_extracted_at",
        RestAPI: "extractedAt",
        GraphQL: "extractedAt",
        custom: "extractedAt"
    },
    userAgent: {
        frontend: "userAgent",
        backend: "user_agent",
        database: "user_agent",
        pretty: "User Agent",
        component: "UserAgent",
        kebab: "user-agent",
        sqlFunctionRef: "p_user_agent",
        RestAPI: "userAgent",
        GraphQL: "userAgent",
        custom: "userAgent"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    }
},
    message: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    conversationId: {
        frontend: "conversationId",
        backend: "conversation_id",
        database: "conversation_id",
        pretty: "Conversation Id",
        component: "ConversationId",
        kebab: "conversation-id",
        sqlFunctionRef: "p_conversation_id",
        RestAPI: "conversationId",
        GraphQL: "conversationId",
        custom: "conversationId"
    },
    role: {
        frontend: "role",
        backend: "role",
        database: "role",
        pretty: "Role",
        component: "Role",
        kebab: "role",
        sqlFunctionRef: "p_role",
        RestAPI: "role",
        GraphQL: "role",
        custom: "role"
    },
    content: {
        frontend: "content",
        backend: "content",
        database: "content",
        pretty: "Content",
        component: "Content",
        kebab: "content",
        sqlFunctionRef: "p_content",
        RestAPI: "content",
        GraphQL: "content",
        custom: "content"
    },
    type: {
        frontend: "type",
        backend: "type",
        database: "type",
        pretty: "Type",
        component: "Type",
        kebab: "type",
        sqlFunctionRef: "p_type",
        RestAPI: "type",
        GraphQL: "type",
        custom: "type"
    },
    displayOrder: {
        frontend: "displayOrder",
        backend: "display_order",
        database: "display_order",
        pretty: "Display Order",
        component: "DisplayOrder",
        kebab: "display-order",
        sqlFunctionRef: "p_display_order",
        RestAPI: "displayOrder",
        GraphQL: "displayOrder",
        custom: "displayOrder"
    },
    systemOrder: {
        frontend: "systemOrder",
        backend: "system_order",
        database: "system_order",
        pretty: "System Order",
        component: "SystemOrder",
        kebab: "system-order",
        sqlFunctionRef: "p_system_order",
        RestAPI: "systemOrder",
        GraphQL: "systemOrder",
        custom: "systemOrder"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    conversationReference: {
        frontend: "conversationReference",
        backend: "conversation_reference",
        database: "ref_conversation",
        pretty: "Conversation Reference",
        component: "ConversationReference",
        kebab: "conversationReference",
        sqlFunctionRef: "p_ref_conversation",
        RestAPI: "conversationReference",
        GraphQL: "conversationReference",
        custom: "conversationReference"
    }
},
    messageBroker: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    messageId: {
        frontend: "messageId",
        backend: "message_id",
        database: "message_id",
        pretty: "Message Id",
        component: "MessageId",
        kebab: "message-id",
        sqlFunctionRef: "p_message_id",
        RestAPI: "messageId",
        GraphQL: "messageId",
        custom: "messageId"
    },
    brokerId: {
        frontend: "brokerId",
        backend: "broker_id",
        database: "broker_id",
        pretty: "Broker Id",
        component: "BrokerId",
        kebab: "broker-id",
        sqlFunctionRef: "p_broker_id",
        RestAPI: "brokerId",
        GraphQL: "brokerId",
        custom: "brokerId"
    },
    defaultValue: {
        frontend: "defaultValue",
        backend: "default_value",
        database: "default_value",
        pretty: "Default Value",
        component: "DefaultValue",
        kebab: "default-value",
        sqlFunctionRef: "p_default_value",
        RestAPI: "defaultValue",
        GraphQL: "defaultValue",
        custom: "defaultValue"
    },
    defaultComponent: {
        frontend: "defaultComponent",
        backend: "default_component",
        database: "default_component",
        pretty: "Default Component",
        component: "DefaultComponent",
        kebab: "default-component",
        sqlFunctionRef: "p_default_component",
        RestAPI: "defaultComponent",
        GraphQL: "defaultComponent",
        custom: "defaultComponent"
    },
    dataBrokerReference: {
        frontend: "dataBrokerReference",
        backend: "data_broker_reference",
        database: "ref_data_broker",
        pretty: "Data Broker Reference",
        component: "DataBrokerReference",
        kebab: "data-brokerReference",
        sqlFunctionRef: "p_ref_data_broker",
        RestAPI: "dataBrokerReference",
        GraphQL: "dataBrokerReference",
        custom: "dataBrokerReference"
    },
    dataInputComponentReference: {
        frontend: "dataInputComponentReference",
        backend: "data_input_component_reference",
        database: "ref_data_input_component",
        pretty: "Data Input Component Reference",
        component: "DataInputComponentReference",
        kebab: "data-input-componentReference",
        sqlFunctionRef: "p_ref_data_input_component",
        RestAPI: "dataInputComponentReference",
        GraphQL: "dataInputComponentReference",
        custom: "dataInputComponentReference"
    },
    messageTemplateReference: {
        frontend: "messageTemplateReference",
        backend: "message_template_reference",
        database: "ref_message_template",
        pretty: "Message Template Reference",
        component: "MessageTemplateReference",
        kebab: "message-templateReference",
        sqlFunctionRef: "p_ref_message_template",
        RestAPI: "messageTemplateReference",
        GraphQL: "messageTemplateReference",
        custom: "messageTemplateReference"
    }
},
    messageTemplate: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    role: {
        frontend: "role",
        backend: "role",
        database: "role",
        pretty: "Role",
        component: "Role",
        kebab: "role",
        sqlFunctionRef: "p_role",
        RestAPI: "role",
        GraphQL: "role",
        custom: "role"
    },
    type: {
        frontend: "type",
        backend: "type",
        database: "type",
        pretty: "Type",
        component: "Type",
        kebab: "type",
        sqlFunctionRef: "p_type",
        RestAPI: "type",
        GraphQL: "type",
        custom: "type"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    content: {
        frontend: "content",
        backend: "content",
        database: "content",
        pretty: "Content",
        component: "Content",
        kebab: "content",
        sqlFunctionRef: "p_content",
        RestAPI: "content",
        GraphQL: "content",
        custom: "content"
    },
    messageBrokerInverse: {
        frontend: "messageBrokerInverse",
        backend: "message_broker_Inverse",
        database: "ifk_message_broker",
        pretty: "Message Broker Inverse",
        component: "MessageBrokerInverse",
        kebab: "message-brokerInverse",
        sqlFunctionRef: "p_ifk_message_broker",
        RestAPI: "messageBrokerInverse",
        GraphQL: "messageBrokerInverse",
        custom: "messageBrokerInverse"
    },
    recipeMessageInverse: {
        frontend: "recipeMessageInverse",
        backend: "recipe_message_Inverse",
        database: "ifk_recipe_message",
        pretty: "Recipe Message Inverse",
        component: "RecipeMessageInverse",
        kebab: "recipe-messageInverse",
        sqlFunctionRef: "p_ifk_recipe_message",
        RestAPI: "recipeMessageInverse",
        GraphQL: "recipeMessageInverse",
        custom: "recipeMessageInverse"
    }
},
    organizationInvitations: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    organizationId: {
        frontend: "organizationId",
        backend: "organization_id",
        database: "organization_id",
        pretty: "Organization Id",
        component: "OrganizationId",
        kebab: "organization-id",
        sqlFunctionRef: "p_organization_id",
        RestAPI: "organizationId",
        GraphQL: "organizationId",
        custom: "organizationId"
    },
    email: {
        frontend: "email",
        backend: "email",
        database: "email",
        pretty: "Email",
        component: "Email",
        kebab: "email",
        sqlFunctionRef: "p_email",
        RestAPI: "email",
        GraphQL: "email",
        custom: "email"
    },
    token: {
        frontend: "token",
        backend: "token",
        database: "token",
        pretty: "Token",
        component: "Token",
        kebab: "token",
        sqlFunctionRef: "p_token",
        RestAPI: "token",
        GraphQL: "token",
        custom: "token"
    },
    role: {
        frontend: "role",
        backend: "role",
        database: "role",
        pretty: "Role",
        component: "Role",
        kebab: "role",
        sqlFunctionRef: "p_role",
        RestAPI: "role",
        GraphQL: "role",
        custom: "role"
    },
    invitedAt: {
        frontend: "invitedAt",
        backend: "invited_at",
        database: "invited_at",
        pretty: "Invited At",
        component: "InvitedAt",
        kebab: "invited-at",
        sqlFunctionRef: "p_invited_at",
        RestAPI: "invitedAt",
        GraphQL: "invitedAt",
        custom: "invitedAt"
    },
    invitedBy: {
        frontend: "invitedBy",
        backend: "invited_by",
        database: "invited_by",
        pretty: "Invited By",
        component: "InvitedBy",
        kebab: "invited-by",
        sqlFunctionRef: "p_invited_by",
        RestAPI: "invitedBy",
        GraphQL: "invitedBy",
        custom: "invitedBy"
    },
    expiresAt: {
        frontend: "expiresAt",
        backend: "expires_at",
        database: "expires_at",
        pretty: "Expires At",
        component: "ExpiresAt",
        kebab: "expires-at",
        sqlFunctionRef: "p_expires_at",
        RestAPI: "expiresAt",
        GraphQL: "expiresAt",
        custom: "expiresAt"
    },
    organizationsReference: {
        frontend: "organizationsReference",
        backend: "organizations_reference",
        database: "ref_organizations",
        pretty: "Organizations Reference",
        component: "OrganizationsReference",
        kebab: "organizationsReference",
        sqlFunctionRef: "p_ref_organizations",
        RestAPI: "organizationsReference",
        GraphQL: "organizationsReference",
        custom: "organizationsReference"
    }
},
    organizationMembers: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    organizationId: {
        frontend: "organizationId",
        backend: "organization_id",
        database: "organization_id",
        pretty: "Organization Id",
        component: "OrganizationId",
        kebab: "organization-id",
        sqlFunctionRef: "p_organization_id",
        RestAPI: "organizationId",
        GraphQL: "organizationId",
        custom: "organizationId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    role: {
        frontend: "role",
        backend: "role",
        database: "role",
        pretty: "Role",
        component: "Role",
        kebab: "role",
        sqlFunctionRef: "p_role",
        RestAPI: "role",
        GraphQL: "role",
        custom: "role"
    },
    joinedAt: {
        frontend: "joinedAt",
        backend: "joined_at",
        database: "joined_at",
        pretty: "Joined At",
        component: "JoinedAt",
        kebab: "joined-at",
        sqlFunctionRef: "p_joined_at",
        RestAPI: "joinedAt",
        GraphQL: "joinedAt",
        custom: "joinedAt"
    },
    invitedBy: {
        frontend: "invitedBy",
        backend: "invited_by",
        database: "invited_by",
        pretty: "Invited By",
        component: "InvitedBy",
        kebab: "invited-by",
        sqlFunctionRef: "p_invited_by",
        RestAPI: "invitedBy",
        GraphQL: "invitedBy",
        custom: "invitedBy"
    },
    organizationsReference: {
        frontend: "organizationsReference",
        backend: "organizations_reference",
        database: "ref_organizations",
        pretty: "Organizations Reference",
        component: "OrganizationsReference",
        kebab: "organizationsReference",
        sqlFunctionRef: "p_ref_organizations",
        RestAPI: "organizationsReference",
        GraphQL: "organizationsReference",
        custom: "organizationsReference"
    }
},
    organizations: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    slug: {
        frontend: "slug",
        backend: "slug",
        database: "slug",
        pretty: "Slug",
        component: "Slug",
        kebab: "slug",
        sqlFunctionRef: "p_slug",
        RestAPI: "slug",
        GraphQL: "slug",
        custom: "slug"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    logoUrl: {
        frontend: "logoUrl",
        backend: "logo_url",
        database: "logo_url",
        pretty: "Logo Url",
        component: "LogoUrl",
        kebab: "logo-url",
        sqlFunctionRef: "p_logo_url",
        RestAPI: "logoUrl",
        GraphQL: "logoUrl",
        custom: "logoUrl"
    },
    website: {
        frontend: "website",
        backend: "website",
        database: "website",
        pretty: "Website",
        component: "Website",
        kebab: "website",
        sqlFunctionRef: "p_website",
        RestAPI: "website",
        GraphQL: "website",
        custom: "website"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    createdBy: {
        frontend: "createdBy",
        backend: "created_by",
        database: "created_by",
        pretty: "Created By",
        component: "CreatedBy",
        kebab: "created-by",
        sqlFunctionRef: "p_created_by",
        RestAPI: "createdBy",
        GraphQL: "createdBy",
        custom: "createdBy"
    },
    isPersonal: {
        frontend: "isPersonal",
        backend: "is_personal",
        database: "is_personal",
        pretty: "Is Personal",
        component: "IsPersonal",
        kebab: "is-personal",
        sqlFunctionRef: "p_is_personal",
        RestAPI: "isPersonal",
        GraphQL: "isPersonal",
        custom: "isPersonal"
    },
    settings: {
        frontend: "settings",
        backend: "settings",
        database: "settings",
        pretty: "Settings",
        component: "Settings",
        kebab: "settings",
        sqlFunctionRef: "p_settings",
        RestAPI: "settings",
        GraphQL: "settings",
        custom: "settings"
    },
    permissionsInverse: {
        frontend: "permissionsInverse",
        backend: "permissions_Inverse",
        database: "ifk_permissions",
        pretty: "Permissions Inverse",
        component: "PermissionsInverse",
        kebab: "permissionsInverse",
        sqlFunctionRef: "p_ifk_permissions",
        RestAPI: "permissionsInverse",
        GraphQL: "permissionsInverse",
        custom: "permissionsInverse"
    },
    organizationMembersInverse: {
        frontend: "organizationMembersInverse",
        backend: "organization_members_Inverse",
        database: "ifk_organization_members",
        pretty: "Organization Members Inverse",
        component: "OrganizationMembersInverse",
        kebab: "organization-membersInverse",
        sqlFunctionRef: "p_ifk_organization_members",
        RestAPI: "organizationMembersInverse",
        GraphQL: "organizationMembersInverse",
        custom: "organizationMembersInverse"
    },
    organizationInvitationsInverse: {
        frontend: "organizationInvitationsInverse",
        backend: "organization_invitations_Inverse",
        database: "ifk_organization_invitations",
        pretty: "Organization Invitations Inverse",
        component: "OrganizationInvitationsInverse",
        kebab: "organization-invitationsInverse",
        sqlFunctionRef: "p_ifk_organization_invitations",
        RestAPI: "organizationInvitationsInverse",
        GraphQL: "organizationInvitationsInverse",
        custom: "organizationInvitationsInverse"
    }
},
    permissions: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    resourceType: {
        frontend: "resourceType",
        backend: "resource_type",
        database: "resource_type",
        pretty: "Resource Type",
        component: "ResourceType",
        kebab: "resource-type",
        sqlFunctionRef: "p_resource_type",
        RestAPI: "resourceType",
        GraphQL: "resourceType",
        custom: "resourceType"
    },
    resourceId: {
        frontend: "resourceId",
        backend: "resource_id",
        database: "resource_id",
        pretty: "Resource Id",
        component: "ResourceId",
        kebab: "resource-id",
        sqlFunctionRef: "p_resource_id",
        RestAPI: "resourceId",
        GraphQL: "resourceId",
        custom: "resourceId"
    },
    grantedToUserId: {
        frontend: "grantedToUserId",
        backend: "granted_to_user_id",
        database: "granted_to_user_id",
        pretty: "Granted To User Id",
        component: "GrantedToUserId",
        kebab: "granted-to-user-id",
        sqlFunctionRef: "p_granted_to_user_id",
        RestAPI: "grantedToUserId",
        GraphQL: "grantedToUserId",
        custom: "grantedToUserId"
    },
    grantedToOrganizationId: {
        frontend: "grantedToOrganizationId",
        backend: "granted_to_organization_id",
        database: "granted_to_organization_id",
        pretty: "Granted To Organization Id",
        component: "GrantedToOrganizationId",
        kebab: "granted-to-organization-id",
        sqlFunctionRef: "p_granted_to_organization_id",
        RestAPI: "grantedToOrganizationId",
        GraphQL: "grantedToOrganizationId",
        custom: "grantedToOrganizationId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    permissionLevel: {
        frontend: "permissionLevel",
        backend: "permission_level",
        database: "permission_level",
        pretty: "Permission Level",
        component: "PermissionLevel",
        kebab: "permission-level",
        sqlFunctionRef: "p_permission_level",
        RestAPI: "permissionLevel",
        GraphQL: "permissionLevel",
        custom: "permissionLevel"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    createdBy: {
        frontend: "createdBy",
        backend: "created_by",
        database: "created_by",
        pretty: "Created By",
        component: "CreatedBy",
        kebab: "created-by",
        sqlFunctionRef: "p_created_by",
        RestAPI: "createdBy",
        GraphQL: "createdBy",
        custom: "createdBy"
    },
    organizationsReference: {
        frontend: "organizationsReference",
        backend: "organizations_reference",
        database: "ref_organizations",
        pretty: "Organizations Reference",
        component: "OrganizationsReference",
        kebab: "organizationsReference",
        sqlFunctionRef: "p_ref_organizations",
        RestAPI: "organizationsReference",
        GraphQL: "organizationsReference",
        custom: "organizationsReference"
    }
},
    processor: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    dependsDefault: {
        frontend: "dependsDefault",
        backend: "depends_default",
        database: "depends_default",
        pretty: "Depends Default",
        component: "DependsDefault",
        kebab: "depends-default",
        sqlFunctionRef: "p_depends_default",
        RestAPI: "dependsDefault",
        GraphQL: "dependsDefault",
        custom: "dependsDefault"
    },
    defaultExtractors: {
        frontend: "defaultExtractors",
        backend: "default_extractors",
        database: "default_extractors",
        pretty: "Default Extractors",
        component: "DefaultExtractors",
        kebab: "default-extractors",
        sqlFunctionRef: "p_default_extractors",
        RestAPI: "defaultExtractors",
        GraphQL: "defaultExtractors",
        custom: "defaultExtractors"
    },
    params: {
        frontend: "params",
        backend: "params",
        database: "params",
        pretty: "Params",
        component: "Params",
        kebab: "params",
        sqlFunctionRef: "p_params",
        RestAPI: "params",
        GraphQL: "params",
        custom: "params"
    },
    processorReference: {
        frontend: "processorReference",
        backend: "processor_reference",
        database: "ref_processor",
        pretty: "Processor Reference",
        component: "ProcessorReference",
        kebab: "processorReference",
        sqlFunctionRef: "p_ref_processor",
        RestAPI: "processorReference",
        GraphQL: "processorReference",
        custom: "processorReference"
    },
    recipeProcessorInverse: {
        frontend: "recipeProcessorInverse",
        backend: "recipe_processor_Inverse",
        database: "ifk_recipe_processor",
        pretty: "Recipe Processor Inverse",
        component: "RecipeProcessorInverse",
        kebab: "recipe-processorInverse",
        sqlFunctionRef: "p_ifk_recipe_processor",
        RestAPI: "recipeProcessorInverse",
        GraphQL: "recipeProcessorInverse",
        custom: "recipeProcessorInverse"
    }
},
    projectMembers: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    projectId: {
        frontend: "projectId",
        backend: "project_id",
        database: "project_id",
        pretty: "Project Id",
        component: "ProjectId",
        kebab: "project-id",
        sqlFunctionRef: "p_project_id",
        RestAPI: "projectId",
        GraphQL: "projectId",
        custom: "projectId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    role: {
        frontend: "role",
        backend: "role",
        database: "role",
        pretty: "Role",
        component: "Role",
        kebab: "role",
        sqlFunctionRef: "p_role",
        RestAPI: "role",
        GraphQL: "role",
        custom: "role"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    projectsReference: {
        frontend: "projectsReference",
        backend: "projects_reference",
        database: "ref_projects",
        pretty: "Projects Reference",
        component: "ProjectsReference",
        kebab: "projectsReference",
        sqlFunctionRef: "p_ref_projects",
        RestAPI: "projectsReference",
        GraphQL: "projectsReference",
        custom: "projectsReference"
    }
},
    projects: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    createdBy: {
        frontend: "createdBy",
        backend: "created_by",
        database: "created_by",
        pretty: "Created By",
        component: "CreatedBy",
        kebab: "created-by",
        sqlFunctionRef: "p_created_by",
        RestAPI: "createdBy",
        GraphQL: "createdBy",
        custom: "createdBy"
    },
    projectMembersInverse: {
        frontend: "projectMembersInverse",
        backend: "project_members_Inverse",
        database: "ifk_project_members",
        pretty: "Project Members Inverse",
        component: "ProjectMembersInverse",
        kebab: "project-membersInverse",
        sqlFunctionRef: "p_ifk_project_members",
        RestAPI: "projectMembersInverse",
        GraphQL: "projectMembersInverse",
        custom: "projectMembersInverse"
    },
    tasksInverse: {
        frontend: "tasksInverse",
        backend: "tasks_Inverse",
        database: "ifk_tasks",
        pretty: "Tasks Inverse",
        component: "TasksInverse",
        kebab: "tasksInverse",
        sqlFunctionRef: "p_ifk_tasks",
        RestAPI: "tasksInverse",
        GraphQL: "tasksInverse",
        custom: "tasksInverse"
    }
},
    prompts: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    messages: {
        frontend: "messages",
        backend: "messages",
        database: "messages",
        pretty: "Messages",
        component: "Messages",
        kebab: "messages",
        sqlFunctionRef: "p_messages",
        RestAPI: "messages",
        GraphQL: "messages",
        custom: "messages"
    },
    variableDefaults: {
        frontend: "variableDefaults",
        backend: "variable_defaults",
        database: "variable_defaults",
        pretty: "Variable Defaults",
        component: "VariableDefaults",
        kebab: "variable-defaults",
        sqlFunctionRef: "p_variable_defaults",
        RestAPI: "variableDefaults",
        GraphQL: "variableDefaults",
        custom: "variableDefaults"
    },
    tools: {
        frontend: "tools",
        backend: "tools",
        database: "tools",
        pretty: "Tools",
        component: "Tools",
        kebab: "tools",
        sqlFunctionRef: "p_tools",
        RestAPI: "tools",
        GraphQL: "tools",
        custom: "tools"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    publicRead: {
        frontend: "publicRead",
        backend: "public_read",
        database: "public_read",
        pretty: "Public Read",
        component: "PublicRead",
        kebab: "public-read",
        sqlFunctionRef: "p_public_read",
        RestAPI: "publicRead",
        GraphQL: "publicRead",
        custom: "publicRead"
    }
},
    recipe: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    tags: {
        frontend: "tags",
        backend: "tags",
        database: "tags",
        pretty: "Tags",
        component: "Tags",
        kebab: "tags",
        sqlFunctionRef: "p_tags",
        RestAPI: "tags",
        GraphQL: "tags",
        custom: "tags"
    },
    sampleOutput: {
        frontend: "sampleOutput",
        backend: "sample_output",
        database: "sample_output",
        pretty: "Sample Output",
        component: "SampleOutput",
        kebab: "sample-output",
        sqlFunctionRef: "p_sample_output",
        RestAPI: "sampleOutput",
        GraphQL: "sampleOutput",
        custom: "sampleOutput"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    status: {
        frontend: "status",
        backend: "status",
        database: "status",
        pretty: "Status",
        component: "Status",
        kebab: "status",
        sqlFunctionRef: "p_status",
        RestAPI: "status",
        GraphQL: "status",
        custom: "status"
    },
    version: {
        frontend: "version",
        backend: "version",
        database: "version",
        pretty: "Version",
        component: "Version",
        kebab: "version",
        sqlFunctionRef: "p_version",
        RestAPI: "version",
        GraphQL: "version",
        custom: "version"
    },
    postResultOptions: {
        frontend: "postResultOptions",
        backend: "post_result_options",
        database: "post_result_options",
        pretty: "Post Result Options",
        component: "PostResultOptions",
        kebab: "post-result-options",
        sqlFunctionRef: "p_post_result_options",
        RestAPI: "postResultOptions",
        GraphQL: "postResultOptions",
        custom: "postResultOptions"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    compiledRecipeInverse: {
        frontend: "compiledRecipeInverse",
        backend: "compiled_recipe_Inverse",
        database: "ifk_compiled_recipe",
        pretty: "Compiled Recipe Inverse",
        component: "CompiledRecipeInverse",
        kebab: "compiled-recipeInverse",
        sqlFunctionRef: "p_ifk_compiled_recipe",
        RestAPI: "compiledRecipeInverse",
        GraphQL: "compiledRecipeInverse",
        custom: "compiledRecipeInverse"
    },
    aiAgentInverse: {
        frontend: "aiAgentInverse",
        backend: "ai_agent_Inverse",
        database: "ifk_ai_agent",
        pretty: "Ai Agent Inverse",
        component: "AiAgentInverse",
        kebab: "ai-agentInverse",
        sqlFunctionRef: "p_ifk_ai_agent",
        RestAPI: "aiAgentInverse",
        GraphQL: "aiAgentInverse",
        custom: "aiAgentInverse"
    },
    recipeDisplayInverse: {
        frontend: "recipeDisplayInverse",
        backend: "recipe_display_Inverse",
        database: "ifk_recipe_display",
        pretty: "Recipe Display Inverse",
        component: "RecipeDisplayInverse",
        kebab: "recipe-displayInverse",
        sqlFunctionRef: "p_ifk_recipe_display",
        RestAPI: "recipeDisplayInverse",
        GraphQL: "recipeDisplayInverse",
        custom: "recipeDisplayInverse"
    },
    recipeProcessorInverse: {
        frontend: "recipeProcessorInverse",
        backend: "recipe_processor_Inverse",
        database: "ifk_recipe_processor",
        pretty: "Recipe Processor Inverse",
        component: "RecipeProcessorInverse",
        kebab: "recipe-processorInverse",
        sqlFunctionRef: "p_ifk_recipe_processor",
        RestAPI: "recipeProcessorInverse",
        GraphQL: "recipeProcessorInverse",
        custom: "recipeProcessorInverse"
    },
    recipeModelInverse: {
        frontend: "recipeModelInverse",
        backend: "recipe_model_Inverse",
        database: "ifk_recipe_model",
        pretty: "Recipe Model Inverse",
        component: "RecipeModelInverse",
        kebab: "recipe-modelInverse",
        sqlFunctionRef: "p_ifk_recipe_model",
        RestAPI: "recipeModelInverse",
        GraphQL: "recipeModelInverse",
        custom: "recipeModelInverse"
    },
    recipeBrokerInverse: {
        frontend: "recipeBrokerInverse",
        backend: "recipe_broker_Inverse",
        database: "ifk_recipe_broker",
        pretty: "Recipe Broker Inverse",
        component: "RecipeBrokerInverse",
        kebab: "recipe-brokerInverse",
        sqlFunctionRef: "p_ifk_recipe_broker",
        RestAPI: "recipeBrokerInverse",
        GraphQL: "recipeBrokerInverse",
        custom: "recipeBrokerInverse"
    },
    recipeMessageInverse: {
        frontend: "recipeMessageInverse",
        backend: "recipe_message_Inverse",
        database: "ifk_recipe_message",
        pretty: "Recipe Message Inverse",
        component: "RecipeMessageInverse",
        kebab: "recipe-messageInverse",
        sqlFunctionRef: "p_ifk_recipe_message",
        RestAPI: "recipeMessageInverse",
        GraphQL: "recipeMessageInverse",
        custom: "recipeMessageInverse"
    },
    recipeToolInverse: {
        frontend: "recipeToolInverse",
        backend: "recipe_tool_Inverse",
        database: "ifk_recipe_tool",
        pretty: "Recipe Tool Inverse",
        component: "RecipeToolInverse",
        kebab: "recipe-toolInverse",
        sqlFunctionRef: "p_ifk_recipe_tool",
        RestAPI: "recipeToolInverse",
        GraphQL: "recipeToolInverse",
        custom: "recipeToolInverse"
    },
    recipeFunctionInverse: {
        frontend: "recipeFunctionInverse",
        backend: "recipe_function_Inverse",
        database: "ifk_recipe_function",
        pretty: "Recipe Function Inverse",
        component: "RecipeFunctionInverse",
        kebab: "recipe-functionInverse",
        sqlFunctionRef: "p_ifk_recipe_function",
        RestAPI: "recipeFunctionInverse",
        GraphQL: "recipeFunctionInverse",
        custom: "recipeFunctionInverse"
    }
},
    recipeBroker: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    recipe: {
        frontend: "recipe",
        backend: "recipe",
        database: "recipe",
        pretty: "Recipe",
        component: "Recipe",
        kebab: "recipe",
        sqlFunctionRef: "p_recipe",
        RestAPI: "recipe",
        GraphQL: "recipe",
        custom: "recipe"
    },
    broker: {
        frontend: "broker",
        backend: "broker",
        database: "broker",
        pretty: "Broker",
        component: "Broker",
        kebab: "broker",
        sqlFunctionRef: "p_broker",
        RestAPI: "broker",
        GraphQL: "broker",
        custom: "broker"
    },
    brokerRole: {
        frontend: "brokerRole",
        backend: "broker_role",
        database: "broker_role",
        pretty: "Broker Role",
        component: "BrokerRole",
        kebab: "broker-role",
        sqlFunctionRef: "p_broker_role",
        RestAPI: "brokerRole",
        GraphQL: "brokerRole",
        custom: "brokerRole"
    },
    required: {
        frontend: "required",
        backend: "required",
        database: "required",
        pretty: "Required",
        component: "Required",
        kebab: "required",
        sqlFunctionRef: "p_required",
        RestAPI: "required",
        GraphQL: "required",
        custom: "required"
    },
    brokerReference: {
        frontend: "brokerReference",
        backend: "broker_reference",
        database: "ref_broker",
        pretty: "Broker Reference",
        component: "BrokerReference",
        kebab: "brokerReference",
        sqlFunctionRef: "p_ref_broker",
        RestAPI: "brokerReference",
        GraphQL: "brokerReference",
        custom: "brokerReference"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    }
},
    recipeDisplay: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    recipe: {
        frontend: "recipe",
        backend: "recipe",
        database: "recipe",
        pretty: "Recipe",
        component: "Recipe",
        kebab: "recipe",
        sqlFunctionRef: "p_recipe",
        RestAPI: "recipe",
        GraphQL: "recipe",
        custom: "recipe"
    },
    display: {
        frontend: "display",
        backend: "display",
        database: "display",
        pretty: "Display",
        component: "Display",
        kebab: "display",
        sqlFunctionRef: "p_display",
        RestAPI: "display",
        GraphQL: "display",
        custom: "display"
    },
    priority: {
        frontend: "priority",
        backend: "priority",
        database: "priority",
        pretty: "Priority",
        component: "Priority",
        kebab: "priority",
        sqlFunctionRef: "p_priority",
        RestAPI: "priority",
        GraphQL: "priority",
        custom: "priority"
    },
    displaySettings: {
        frontend: "displaySettings",
        backend: "display_settings",
        database: "display_settings",
        pretty: "Display Settings",
        component: "DisplaySettings",
        kebab: "display-settings",
        sqlFunctionRef: "p_display_settings",
        RestAPI: "displaySettings",
        GraphQL: "displaySettings",
        custom: "displaySettings"
    },
    displayOptionReference: {
        frontend: "displayOptionReference",
        backend: "display_option_reference",
        database: "ref_display_option",
        pretty: "Display Option Reference",
        component: "DisplayOptionReference",
        kebab: "display-optionReference",
        sqlFunctionRef: "p_ref_display_option",
        RestAPI: "displayOptionReference",
        GraphQL: "displayOptionReference",
        custom: "displayOptionReference"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    }
},
    recipeFunction: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    recipe: {
        frontend: "recipe",
        backend: "recipe",
        database: "recipe",
        pretty: "Recipe",
        component: "Recipe",
        kebab: "recipe",
        sqlFunctionRef: "p_recipe",
        RestAPI: "recipe",
        GraphQL: "recipe",
        custom: "recipe"
    },
    function: {
        frontend: "function",
        backend: "function",
        database: "function",
        pretty: "Function",
        component: "Function",
        kebab: "function",
        sqlFunctionRef: "p_function",
        RestAPI: "function",
        GraphQL: "function",
        custom: "function"
    },
    role: {
        frontend: "role",
        backend: "role",
        database: "role",
        pretty: "Role",
        component: "Role",
        kebab: "role",
        sqlFunctionRef: "p_role",
        RestAPI: "role",
        GraphQL: "role",
        custom: "role"
    },
    params: {
        frontend: "params",
        backend: "params",
        database: "params",
        pretty: "Params",
        component: "Params",
        kebab: "params",
        sqlFunctionRef: "p_params",
        RestAPI: "params",
        GraphQL: "params",
        custom: "params"
    },
    systemFunctionReference: {
        frontend: "systemFunctionReference",
        backend: "system_function_reference",
        database: "ref_system_function",
        pretty: "System Function Reference",
        component: "SystemFunctionReference",
        kebab: "system-functionReference",
        sqlFunctionRef: "p_ref_system_function",
        RestAPI: "systemFunctionReference",
        GraphQL: "systemFunctionReference",
        custom: "systemFunctionReference"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    }
},
    recipeMessage: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    messageId: {
        frontend: "messageId",
        backend: "message_id",
        database: "message_id",
        pretty: "Message Id",
        component: "MessageId",
        kebab: "message-id",
        sqlFunctionRef: "p_message_id",
        RestAPI: "messageId",
        GraphQL: "messageId",
        custom: "messageId"
    },
    recipeId: {
        frontend: "recipeId",
        backend: "recipe_id",
        database: "recipe_id",
        pretty: "Recipe Id",
        component: "RecipeId",
        kebab: "recipe-id",
        sqlFunctionRef: "p_recipe_id",
        RestAPI: "recipeId",
        GraphQL: "recipeId",
        custom: "recipeId"
    },
    order: {
        frontend: "order",
        backend: "order",
        database: "order",
        pretty: "Order",
        component: "Order",
        kebab: "order",
        sqlFunctionRef: "p_order",
        RestAPI: "order",
        GraphQL: "order",
        custom: "order"
    },
    messageTemplateReference: {
        frontend: "messageTemplateReference",
        backend: "message_template_reference",
        database: "ref_message_template",
        pretty: "Message Template Reference",
        component: "MessageTemplateReference",
        kebab: "message-templateReference",
        sqlFunctionRef: "p_ref_message_template",
        RestAPI: "messageTemplateReference",
        GraphQL: "messageTemplateReference",
        custom: "messageTemplateReference"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    }
},
    recipeMessageReorderQueue: {
    recipeId: {
        frontend: "recipeId",
        backend: "recipe_id",
        database: "recipe_id",
        pretty: "Recipe Id",
        component: "RecipeId",
        kebab: "recipe-id",
        sqlFunctionRef: "p_recipe_id",
        RestAPI: "recipeId",
        GraphQL: "recipeId",
        custom: "recipeId"
    },
    lastModified: {
        frontend: "lastModified",
        backend: "last_modified",
        database: "last_modified",
        pretty: "Last Modified",
        component: "LastModified",
        kebab: "last-modified",
        sqlFunctionRef: "p_last_modified",
        RestAPI: "lastModified",
        GraphQL: "lastModified",
        custom: "lastModified"
    }
},
    recipeModel: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    recipe: {
        frontend: "recipe",
        backend: "recipe",
        database: "recipe",
        pretty: "Recipe",
        component: "Recipe",
        kebab: "recipe",
        sqlFunctionRef: "p_recipe",
        RestAPI: "recipe",
        GraphQL: "recipe",
        custom: "recipe"
    },
    aiModel: {
        frontend: "aiModel",
        backend: "ai_model",
        database: "ai_model",
        pretty: "Ai Model",
        component: "AiModel",
        kebab: "ai-model",
        sqlFunctionRef: "p_ai_model",
        RestAPI: "aiModel",
        GraphQL: "aiModel",
        custom: "aiModel"
    },
    role: {
        frontend: "role",
        backend: "role",
        database: "role",
        pretty: "Role",
        component: "Role",
        kebab: "role",
        sqlFunctionRef: "p_role",
        RestAPI: "role",
        GraphQL: "role",
        custom: "role"
    },
    priority: {
        frontend: "priority",
        backend: "priority",
        database: "priority",
        pretty: "Priority",
        component: "Priority",
        kebab: "priority",
        sqlFunctionRef: "p_priority",
        RestAPI: "priority",
        GraphQL: "priority",
        custom: "priority"
    },
    aiModelReference: {
        frontend: "aiModelReference",
        backend: "ai_model_reference",
        database: "ref_ai_model",
        pretty: "Ai Model Reference",
        component: "AiModelReference",
        kebab: "ai-modelReference",
        sqlFunctionRef: "p_ref_ai_model",
        RestAPI: "aiModelReference",
        GraphQL: "aiModelReference",
        custom: "aiModelReference"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    }
},
    recipeProcessor: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    recipe: {
        frontend: "recipe",
        backend: "recipe",
        database: "recipe",
        pretty: "Recipe",
        component: "Recipe",
        kebab: "recipe",
        sqlFunctionRef: "p_recipe",
        RestAPI: "recipe",
        GraphQL: "recipe",
        custom: "recipe"
    },
    processor: {
        frontend: "processor",
        backend: "processor",
        database: "processor",
        pretty: "Processor",
        component: "Processor",
        kebab: "processor",
        sqlFunctionRef: "p_processor",
        RestAPI: "processor",
        GraphQL: "processor",
        custom: "processor"
    },
    params: {
        frontend: "params",
        backend: "params",
        database: "params",
        pretty: "Params",
        component: "Params",
        kebab: "params",
        sqlFunctionRef: "p_params",
        RestAPI: "params",
        GraphQL: "params",
        custom: "params"
    },
    processorReference: {
        frontend: "processorReference",
        backend: "processor_reference",
        database: "ref_processor",
        pretty: "Processor Reference",
        component: "ProcessorReference",
        kebab: "processorReference",
        sqlFunctionRef: "p_ref_processor",
        RestAPI: "processorReference",
        GraphQL: "processorReference",
        custom: "processorReference"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    }
},
    recipeTool: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    recipe: {
        frontend: "recipe",
        backend: "recipe",
        database: "recipe",
        pretty: "Recipe",
        component: "Recipe",
        kebab: "recipe",
        sqlFunctionRef: "p_recipe",
        RestAPI: "recipe",
        GraphQL: "recipe",
        custom: "recipe"
    },
    tool: {
        frontend: "tool",
        backend: "tool",
        database: "tool",
        pretty: "Tool",
        component: "Tool",
        kebab: "tool",
        sqlFunctionRef: "p_tool",
        RestAPI: "tool",
        GraphQL: "tool",
        custom: "tool"
    },
    params: {
        frontend: "params",
        backend: "params",
        database: "params",
        pretty: "Params",
        component: "Params",
        kebab: "params",
        sqlFunctionRef: "p_params",
        RestAPI: "params",
        GraphQL: "params",
        custom: "params"
    },
    recipeReference: {
        frontend: "recipeReference",
        backend: "recipe_reference",
        database: "ref_recipe",
        pretty: "Recipe Reference",
        component: "RecipeReference",
        kebab: "recipeReference",
        sqlFunctionRef: "p_ref_recipe",
        RestAPI: "recipeReference",
        GraphQL: "recipeReference",
        custom: "recipeReference"
    },
    toolReference: {
        frontend: "toolReference",
        backend: "tool_reference",
        database: "ref_tool",
        pretty: "Tool Reference",
        component: "ToolReference",
        kebab: "toolReference",
        sqlFunctionRef: "p_ref_tool",
        RestAPI: "toolReference",
        GraphQL: "toolReference",
        custom: "toolReference"
    }
},
    registeredFunction: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    funcName: {
        frontend: "funcName",
        backend: "func_name",
        database: "func_name",
        pretty: "Func Name",
        component: "FuncName",
        kebab: "func-name",
        sqlFunctionRef: "p_func_name",
        RestAPI: "funcName",
        GraphQL: "funcName",
        custom: "funcName"
    },
    modulePath: {
        frontend: "modulePath",
        backend: "module_path",
        database: "module_path",
        pretty: "Module Path",
        component: "ModulePath",
        kebab: "module-path",
        sqlFunctionRef: "p_module_path",
        RestAPI: "modulePath",
        GraphQL: "modulePath",
        custom: "modulePath"
    },
    className: {
        frontend: "className",
        backend: "class_name",
        database: "class_name",
        pretty: "Class Name",
        component: "ClassName",
        kebab: "class-name",
        sqlFunctionRef: "p_class_name",
        RestAPI: "className",
        GraphQL: "className",
        custom: "className"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    returnBroker: {
        frontend: "returnBroker",
        backend: "return_broker",
        database: "return_broker",
        pretty: "Return Broker",
        component: "ReturnBroker",
        kebab: "return-broker",
        sqlFunctionRef: "p_return_broker",
        RestAPI: "returnBroker",
        GraphQL: "returnBroker",
        custom: "returnBroker"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    tags: {
        frontend: "tags",
        backend: "tags",
        database: "tags",
        pretty: "Tags",
        component: "Tags",
        kebab: "tags",
        sqlFunctionRef: "p_tags",
        RestAPI: "tags",
        GraphQL: "tags",
        custom: "tags"
    },
    category: {
        frontend: "category",
        backend: "category",
        database: "category",
        pretty: "Category",
        component: "Category",
        kebab: "category",
        sqlFunctionRef: "p_category",
        RestAPI: "category",
        GraphQL: "category",
        custom: "category"
    },
    icon: {
        frontend: "icon",
        backend: "icon",
        database: "icon",
        pretty: "Icon",
        component: "Icon",
        kebab: "icon",
        sqlFunctionRef: "p_icon",
        RestAPI: "icon",
        GraphQL: "icon",
        custom: "icon"
    },
    nodeDescription: {
        frontend: "nodeDescription",
        backend: "node_description",
        database: "node_description",
        pretty: "Node Description",
        component: "NodeDescription",
        kebab: "node-description",
        sqlFunctionRef: "p_node_description",
        RestAPI: "nodeDescription",
        GraphQL: "nodeDescription",
        custom: "nodeDescription"
    },
    dataBrokerReference: {
        frontend: "dataBrokerReference",
        backend: "data_broker_reference",
        database: "ref_data_broker",
        pretty: "Data Broker Reference",
        component: "DataBrokerReference",
        kebab: "data-brokerReference",
        sqlFunctionRef: "p_ref_data_broker",
        RestAPI: "dataBrokerReference",
        GraphQL: "dataBrokerReference",
        custom: "dataBrokerReference"
    },
    systemFunctionInverse: {
        frontend: "systemFunctionInverse",
        backend: "system_function_Inverse",
        database: "ifk_system_function",
        pretty: "System Function Inverse",
        component: "SystemFunctionInverse",
        kebab: "system-functionInverse",
        sqlFunctionRef: "p_ifk_system_function",
        RestAPI: "systemFunctionInverse",
        GraphQL: "systemFunctionInverse",
        custom: "systemFunctionInverse"
    },
    argInverse: {
        frontend: "argInverse",
        backend: "arg_Inverse",
        database: "ifk_arg",
        pretty: "Arg Inverse",
        component: "ArgInverse",
        kebab: "argInverse",
        sqlFunctionRef: "p_ifk_arg",
        RestAPI: "argInverse",
        GraphQL: "argInverse",
        custom: "argInverse"
    },
    workflowNodeInverse: {
        frontend: "workflowNodeInverse",
        backend: "workflow_node_Inverse",
        database: "ifk_workflow_node",
        pretty: "Workflow Node Inverse",
        component: "WorkflowNodeInverse",
        kebab: "workflow-nodeInverse",
        sqlFunctionRef: "p_ifk_workflow_node",
        RestAPI: "workflowNodeInverse",
        GraphQL: "workflowNodeInverse",
        custom: "workflowNodeInverse"
    },
    workflowNodeDataInverse: {
        frontend: "workflowNodeDataInverse",
        backend: "workflow_node_data_Inverse",
        database: "ifk_workflow_node_data",
        pretty: "Workflow Node Data Inverse",
        component: "WorkflowNodeDataInverse",
        kebab: "workflow-node-dataInverse",
        sqlFunctionRef: "p_ifk_workflow_node_data",
        RestAPI: "workflowNodeDataInverse",
        GraphQL: "workflowNodeDataInverse",
        custom: "workflowNodeDataInverse"
    }
},
    schemaTemplates: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    templateName: {
        frontend: "templateName",
        backend: "template_name",
        database: "template_name",
        pretty: "Template Name",
        component: "TemplateName",
        kebab: "template-name",
        sqlFunctionRef: "p_template_name",
        RestAPI: "templateName",
        GraphQL: "templateName",
        custom: "templateName"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    fields: {
        frontend: "fields",
        backend: "fields",
        database: "fields",
        pretty: "Fields",
        component: "Fields",
        kebab: "fields",
        sqlFunctionRef: "p_fields",
        RestAPI: "fields",
        GraphQL: "fields",
        custom: "fields"
    },
    version: {
        frontend: "version",
        backend: "version",
        database: "version",
        pretty: "Version",
        component: "Version",
        kebab: "version",
        sqlFunctionRef: "p_version",
        RestAPI: "version",
        GraphQL: "version",
        custom: "version"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    }
},
    scrapeBaseConfig: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    selectorType: {
        frontend: "selectorType",
        backend: "selector_type",
        database: "selector_type",
        pretty: "Selector Type",
        component: "SelectorType",
        kebab: "selector-type",
        sqlFunctionRef: "p_selector_type",
        RestAPI: "selectorType",
        GraphQL: "selectorType",
        custom: "selectorType"
    },
    exact: {
        frontend: "exact",
        backend: "exact",
        database: "exact",
        pretty: "Exact",
        component: "Exact",
        kebab: "exact",
        sqlFunctionRef: "p_exact",
        RestAPI: "exact",
        GraphQL: "exact",
        custom: "exact"
    },
    partial: {
        frontend: "partial",
        backend: "partial",
        database: "partial",
        pretty: "Partial",
        component: "Partial",
        kebab: "partial",
        sqlFunctionRef: "p_partial",
        RestAPI: "partial",
        GraphQL: "partial",
        custom: "partial"
    },
    regex: {
        frontend: "regex",
        backend: "regex",
        database: "regex",
        pretty: "Regex",
        component: "Regex",
        kebab: "regex",
        sqlFunctionRef: "p_regex",
        RestAPI: "regex",
        GraphQL: "regex",
        custom: "regex"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    }
},
    scrapeCachePolicy: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    rescrapeAfter: {
        frontend: "rescrapeAfter",
        backend: "rescrape_after",
        database: "rescrape_after",
        pretty: "Rescrape After",
        component: "RescrapeAfter",
        kebab: "rescrape-after",
        sqlFunctionRef: "p_rescrape_after",
        RestAPI: "rescrapeAfter",
        GraphQL: "rescrapeAfter",
        custom: "rescrapeAfter"
    },
    staleAfter: {
        frontend: "staleAfter",
        backend: "stale_after",
        database: "stale_after",
        pretty: "Stale After",
        component: "StaleAfter",
        kebab: "stale-after",
        sqlFunctionRef: "p_stale_after",
        RestAPI: "staleAfter",
        GraphQL: "staleAfter",
        custom: "staleAfter"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapePathPatternCachePolicyInverse: {
        frontend: "scrapePathPatternCachePolicyInverse",
        backend: "scrape_path_pattern_cache_policy_Inverse",
        database: "ifk_scrape_path_pattern_cache_policy",
        pretty: "Scrape Path Pattern Cache Policy Inverse",
        component: "ScrapePathPatternCachePolicyInverse",
        kebab: "scrape-path-pattern-cache-policyInverse",
        sqlFunctionRef: "p_ifk_scrape_path_pattern_cache_policy",
        RestAPI: "scrapePathPatternCachePolicyInverse",
        GraphQL: "scrapePathPatternCachePolicyInverse",
        custom: "scrapePathPatternCachePolicyInverse"
    }
},
    scrapeConfiguration: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeMode: {
        frontend: "scrapeMode",
        backend: "scrape_mode",
        database: "scrape_mode",
        pretty: "Scrape Mode",
        component: "ScrapeMode",
        kebab: "scrape-mode",
        sqlFunctionRef: "p_scrape_mode",
        RestAPI: "scrapeMode",
        GraphQL: "scrapeMode",
        custom: "scrapeMode"
    },
    interactionSettingsId: {
        frontend: "interactionSettingsId",
        backend: "interaction_settings_id",
        database: "interaction_settings_id",
        pretty: "Interaction Settings Id",
        component: "InteractionSettingsId",
        kebab: "interaction-settings-id",
        sqlFunctionRef: "p_interaction_settings_id",
        RestAPI: "interactionSettingsId",
        GraphQL: "interactionSettingsId",
        custom: "interactionSettingsId"
    },
    scrapePathPatternId: {
        frontend: "scrapePathPatternId",
        backend: "scrape_path_pattern_id",
        database: "scrape_path_pattern_id",
        pretty: "Scrape Path Pattern Id",
        component: "ScrapePathPatternId",
        kebab: "scrape-path-pattern-id",
        sqlFunctionRef: "p_scrape_path_pattern_id",
        RestAPI: "scrapePathPatternId",
        GraphQL: "scrapePathPatternId",
        custom: "scrapePathPatternId"
    },
    isActive: {
        frontend: "isActive",
        backend: "is_active",
        database: "is_active",
        pretty: "Is Active",
        component: "IsActive",
        kebab: "is-active",
        sqlFunctionRef: "p_is_active",
        RestAPI: "isActive",
        GraphQL: "isActive",
        custom: "isActive"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapePathPatternReference: {
        frontend: "scrapePathPatternReference",
        backend: "scrape_path_pattern_reference",
        database: "ref_scrape_path_pattern",
        pretty: "Scrape Path Pattern Reference",
        component: "ScrapePathPatternReference",
        kebab: "scrape-path-patternReference",
        sqlFunctionRef: "p_ref_scrape_path_pattern",
        RestAPI: "scrapePathPatternReference",
        GraphQL: "scrapePathPatternReference",
        custom: "scrapePathPatternReference"
    },
    scrapeParsedPageInverse: {
        frontend: "scrapeParsedPageInverse",
        backend: "scrape_parsed_page_Inverse",
        database: "ifk_scrape_parsed_page",
        pretty: "Scrape Parsed Page Inverse",
        component: "ScrapeParsedPageInverse",
        kebab: "scrape-parsed-pageInverse",
        sqlFunctionRef: "p_ifk_scrape_parsed_page",
        RestAPI: "scrapeParsedPageInverse",
        GraphQL: "scrapeParsedPageInverse",
        custom: "scrapeParsedPageInverse"
    }
},
    scrapeCycleRun: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeCycleTrackerId: {
        frontend: "scrapeCycleTrackerId",
        backend: "scrape_cycle_tracker_id",
        database: "scrape_cycle_tracker_id",
        pretty: "Scrape Cycle Tracker Id",
        component: "ScrapeCycleTrackerId",
        kebab: "scrape-cycle-tracker-id",
        sqlFunctionRef: "p_scrape_cycle_tracker_id",
        RestAPI: "scrapeCycleTrackerId",
        GraphQL: "scrapeCycleTrackerId",
        custom: "scrapeCycleTrackerId"
    },
    runNumber: {
        frontend: "runNumber",
        backend: "run_number",
        database: "run_number",
        pretty: "Run Number",
        component: "RunNumber",
        kebab: "run-number",
        sqlFunctionRef: "p_run_number",
        RestAPI: "runNumber",
        GraphQL: "runNumber",
        custom: "runNumber"
    },
    completedAt: {
        frontend: "completedAt",
        backend: "completed_at",
        database: "completed_at",
        pretty: "Completed At",
        component: "CompletedAt",
        kebab: "completed-at",
        sqlFunctionRef: "p_completed_at",
        RestAPI: "completedAt",
        GraphQL: "completedAt",
        custom: "completedAt"
    },
    allowPattern: {
        frontend: "allowPattern",
        backend: "allow_pattern",
        database: "allow_pattern",
        pretty: "Allow Pattern",
        component: "AllowPattern",
        kebab: "allow-pattern",
        sqlFunctionRef: "p_allow_pattern",
        RestAPI: "allowPattern",
        GraphQL: "allowPattern",
        custom: "allowPattern"
    },
    disallowPatterns: {
        frontend: "disallowPatterns",
        backend: "disallow_patterns",
        database: "disallow_patterns",
        pretty: "Disallow Patterns",
        component: "DisallowPatterns",
        kebab: "disallow-patterns",
        sqlFunctionRef: "p_disallow_patterns",
        RestAPI: "disallowPatterns",
        GraphQL: "disallowPatterns",
        custom: "disallowPatterns"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeCycleTrackerReference: {
        frontend: "scrapeCycleTrackerReference",
        backend: "scrape_cycle_tracker_reference",
        database: "ref_scrape_cycle_tracker",
        pretty: "Scrape Cycle Tracker Reference",
        component: "ScrapeCycleTrackerReference",
        kebab: "scrape-cycle-trackerReference",
        sqlFunctionRef: "p_ref_scrape_cycle_tracker",
        RestAPI: "scrapeCycleTrackerReference",
        GraphQL: "scrapeCycleTrackerReference",
        custom: "scrapeCycleTrackerReference"
    },
    scrapeTaskInverse: {
        frontend: "scrapeTaskInverse",
        backend: "scrape_task_Inverse",
        database: "ifk_scrape_task",
        pretty: "Scrape Task Inverse",
        component: "ScrapeTaskInverse",
        kebab: "scrape-taskInverse",
        sqlFunctionRef: "p_ifk_scrape_task",
        RestAPI: "scrapeTaskInverse",
        GraphQL: "scrapeTaskInverse",
        custom: "scrapeTaskInverse"
    },
    scrapeParsedPageInverse: {
        frontend: "scrapeParsedPageInverse",
        backend: "scrape_parsed_page_Inverse",
        database: "ifk_scrape_parsed_page",
        pretty: "Scrape Parsed Page Inverse",
        component: "ScrapeParsedPageInverse",
        kebab: "scrape-parsed-pageInverse",
        sqlFunctionRef: "p_ifk_scrape_parsed_page",
        RestAPI: "scrapeParsedPageInverse",
        GraphQL: "scrapeParsedPageInverse",
        custom: "scrapeParsedPageInverse"
    }
},
    scrapeCycleTracker: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    targetUrl: {
        frontend: "targetUrl",
        backend: "target_url",
        database: "target_url",
        pretty: "Target Url",
        component: "TargetUrl",
        kebab: "target-url",
        sqlFunctionRef: "p_target_url",
        RestAPI: "targetUrl",
        GraphQL: "targetUrl",
        custom: "targetUrl"
    },
    pageName: {
        frontend: "pageName",
        backend: "page_name",
        database: "page_name",
        pretty: "Page Name",
        component: "PageName",
        kebab: "page-name",
        sqlFunctionRef: "p_page_name",
        RestAPI: "pageName",
        GraphQL: "pageName",
        custom: "pageName"
    },
    scrapePathPatternCachePolicyId: {
        frontend: "scrapePathPatternCachePolicyId",
        backend: "scrape_path_pattern_cache_policy_id",
        database: "scrape_path_pattern_cache_policy_id",
        pretty: "Scrape Path Pattern Cache Policy Id",
        component: "ScrapePathPatternCachePolicyId",
        kebab: "scrape-path-pattern-cache-policy-id",
        sqlFunctionRef: "p_scrape_path_pattern_cache_policy_id",
        RestAPI: "scrapePathPatternCachePolicyId",
        GraphQL: "scrapePathPatternCachePolicyId",
        custom: "scrapePathPatternCachePolicyId"
    },
    scrapeJobId: {
        frontend: "scrapeJobId",
        backend: "scrape_job_id",
        database: "scrape_job_id",
        pretty: "Scrape Job Id",
        component: "ScrapeJobId",
        kebab: "scrape-job-id",
        sqlFunctionRef: "p_scrape_job_id",
        RestAPI: "scrapeJobId",
        GraphQL: "scrapeJobId",
        custom: "scrapeJobId"
    },
    lastRunAt: {
        frontend: "lastRunAt",
        backend: "last_run_at",
        database: "last_run_at",
        pretty: "Last Run At",
        component: "LastRunAt",
        kebab: "last-run-at",
        sqlFunctionRef: "p_last_run_at",
        RestAPI: "lastRunAt",
        GraphQL: "lastRunAt",
        custom: "lastRunAt"
    },
    nextRunAt: {
        frontend: "nextRunAt",
        backend: "next_run_at",
        database: "next_run_at",
        pretty: "Next Run At",
        component: "NextRunAt",
        kebab: "next-run-at",
        sqlFunctionRef: "p_next_run_at",
        RestAPI: "nextRunAt",
        GraphQL: "nextRunAt",
        custom: "nextRunAt"
    },
    isActive: {
        frontend: "isActive",
        backend: "is_active",
        database: "is_active",
        pretty: "Is Active",
        component: "IsActive",
        kebab: "is-active",
        sqlFunctionRef: "p_is_active",
        RestAPI: "isActive",
        GraphQL: "isActive",
        custom: "isActive"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeJobReference: {
        frontend: "scrapeJobReference",
        backend: "scrape_job_reference",
        database: "ref_scrape_job",
        pretty: "Scrape Job Reference",
        component: "ScrapeJobReference",
        kebab: "scrape-jobReference",
        sqlFunctionRef: "p_ref_scrape_job",
        RestAPI: "scrapeJobReference",
        GraphQL: "scrapeJobReference",
        custom: "scrapeJobReference"
    },
    scrapePathPatternCachePolicyReference: {
        frontend: "scrapePathPatternCachePolicyReference",
        backend: "scrape_path_pattern_cache_policy_reference",
        database: "ref_scrape_path_pattern_cache_policy",
        pretty: "Scrape Path Pattern Cache Policy Reference",
        component: "ScrapePathPatternCachePolicyReference",
        kebab: "scrape-path-pattern-cache-policyReference",
        sqlFunctionRef: "p_ref_scrape_path_pattern_cache_policy",
        RestAPI: "scrapePathPatternCachePolicyReference",
        GraphQL: "scrapePathPatternCachePolicyReference",
        custom: "scrapePathPatternCachePolicyReference"
    },
    scrapeCycleRunInverse: {
        frontend: "scrapeCycleRunInverse",
        backend: "scrape_cycle_run_Inverse",
        database: "ifk_scrape_cycle_run",
        pretty: "Scrape Cycle Run Inverse",
        component: "ScrapeCycleRunInverse",
        kebab: "scrape-cycle-runInverse",
        sqlFunctionRef: "p_ifk_scrape_cycle_run",
        RestAPI: "scrapeCycleRunInverse",
        GraphQL: "scrapeCycleRunInverse",
        custom: "scrapeCycleRunInverse"
    },
    scrapeParsedPageInverse: {
        frontend: "scrapeParsedPageInverse",
        backend: "scrape_parsed_page_Inverse",
        database: "ifk_scrape_parsed_page",
        pretty: "Scrape Parsed Page Inverse",
        component: "ScrapeParsedPageInverse",
        kebab: "scrape-parsed-pageInverse",
        sqlFunctionRef: "p_ifk_scrape_parsed_page",
        RestAPI: "scrapeParsedPageInverse",
        GraphQL: "scrapeParsedPageInverse",
        custom: "scrapeParsedPageInverse"
    }
},
    scrapeDomain: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    url: {
        frontend: "url",
        backend: "url",
        database: "url",
        pretty: "Url",
        component: "Url",
        kebab: "url",
        sqlFunctionRef: "p_url",
        RestAPI: "url",
        GraphQL: "url",
        custom: "url"
    },
    commonName: {
        frontend: "commonName",
        backend: "common_name",
        database: "common_name",
        pretty: "Common Name",
        component: "CommonName",
        kebab: "common-name",
        sqlFunctionRef: "p_common_name",
        RestAPI: "commonName",
        GraphQL: "commonName",
        custom: "commonName"
    },
    scrapeAllowed: {
        frontend: "scrapeAllowed",
        backend: "scrape_allowed",
        database: "scrape_allowed",
        pretty: "Scrape Allowed",
        component: "ScrapeAllowed",
        kebab: "scrape-allowed",
        sqlFunctionRef: "p_scrape_allowed",
        RestAPI: "scrapeAllowed",
        GraphQL: "scrapeAllowed",
        custom: "scrapeAllowed"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapePathPatternInverse: {
        frontend: "scrapePathPatternInverse",
        backend: "scrape_path_pattern_Inverse",
        database: "ifk_scrape_path_pattern",
        pretty: "Scrape Path Pattern Inverse",
        component: "ScrapePathPatternInverse",
        kebab: "scrape-path-patternInverse",
        sqlFunctionRef: "p_ifk_scrape_path_pattern",
        RestAPI: "scrapePathPatternInverse",
        GraphQL: "scrapePathPatternInverse",
        custom: "scrapePathPatternInverse"
    },
    scrapeJobInverse: {
        frontend: "scrapeJobInverse",
        backend: "scrape_job_Inverse",
        database: "ifk_scrape_job",
        pretty: "Scrape Job Inverse",
        component: "ScrapeJobInverse",
        kebab: "scrape-jobInverse",
        sqlFunctionRef: "p_ifk_scrape_job",
        RestAPI: "scrapeJobInverse",
        GraphQL: "scrapeJobInverse",
        custom: "scrapeJobInverse"
    },
    scrapeDomainQuickScrapeSettingsInverse: {
        frontend: "scrapeDomainQuickScrapeSettingsInverse",
        backend: "scrape_domain_quick_scrape_settings_Inverse",
        database: "ifk_scrape_domain_quick_scrape_settings",
        pretty: "Scrape Domain Quick Scrape Settings Inverse",
        component: "ScrapeDomainQuickScrapeSettingsInverse",
        kebab: "scrape-domain-quick-scrape-settingsInverse",
        sqlFunctionRef: "p_ifk_scrape_domain_quick_scrape_settings",
        RestAPI: "scrapeDomainQuickScrapeSettingsInverse",
        GraphQL: "scrapeDomainQuickScrapeSettingsInverse",
        custom: "scrapeDomainQuickScrapeSettingsInverse"
    },
    scrapeDomainDisallowedNotesInverse: {
        frontend: "scrapeDomainDisallowedNotesInverse",
        backend: "scrape_domain_disallowed_notes_Inverse",
        database: "ifk_scrape_domain_disallowed_notes",
        pretty: "Scrape Domain Disallowed Notes Inverse",
        component: "ScrapeDomainDisallowedNotesInverse",
        kebab: "scrape-domain-disallowed-notesInverse",
        sqlFunctionRef: "p_ifk_scrape_domain_disallowed_notes",
        RestAPI: "scrapeDomainDisallowedNotesInverse",
        GraphQL: "scrapeDomainDisallowedNotesInverse",
        custom: "scrapeDomainDisallowedNotesInverse"
    },
    scrapeDomainRobotsTxtInverse: {
        frontend: "scrapeDomainRobotsTxtInverse",
        backend: "scrape_domain_robots_txt_Inverse",
        database: "ifk_scrape_domain_robots_txt",
        pretty: "Scrape Domain Robots Txt Inverse",
        component: "ScrapeDomainRobotsTxtInverse",
        kebab: "scrape-domain-robots-txtInverse",
        sqlFunctionRef: "p_ifk_scrape_domain_robots_txt",
        RestAPI: "scrapeDomainRobotsTxtInverse",
        GraphQL: "scrapeDomainRobotsTxtInverse",
        custom: "scrapeDomainRobotsTxtInverse"
    },
    scrapeDomainNotesInverse: {
        frontend: "scrapeDomainNotesInverse",
        backend: "scrape_domain_notes_Inverse",
        database: "ifk_scrape_domain_notes",
        pretty: "Scrape Domain Notes Inverse",
        component: "ScrapeDomainNotesInverse",
        kebab: "scrape-domain-notesInverse",
        sqlFunctionRef: "p_ifk_scrape_domain_notes",
        RestAPI: "scrapeDomainNotesInverse",
        GraphQL: "scrapeDomainNotesInverse",
        custom: "scrapeDomainNotesInverse"
    },
    scrapeDomainSitemapInverse: {
        frontend: "scrapeDomainSitemapInverse",
        backend: "scrape_domain_sitemap_Inverse",
        database: "ifk_scrape_domain_sitemap",
        pretty: "Scrape Domain Sitemap Inverse",
        component: "ScrapeDomainSitemapInverse",
        kebab: "scrape-domain-sitemapInverse",
        sqlFunctionRef: "p_ifk_scrape_domain_sitemap",
        RestAPI: "scrapeDomainSitemapInverse",
        GraphQL: "scrapeDomainSitemapInverse",
        custom: "scrapeDomainSitemapInverse"
    },
    scrapeTaskInverse: {
        frontend: "scrapeTaskInverse",
        backend: "scrape_task_Inverse",
        database: "ifk_scrape_task",
        pretty: "Scrape Task Inverse",
        component: "ScrapeTaskInverse",
        kebab: "scrape-taskInverse",
        sqlFunctionRef: "p_ifk_scrape_task",
        RestAPI: "scrapeTaskInverse",
        GraphQL: "scrapeTaskInverse",
        custom: "scrapeTaskInverse"
    },
    scrapeQuickFailureLogInverse: {
        frontend: "scrapeQuickFailureLogInverse",
        backend: "scrape_quick_failure_log_Inverse",
        database: "ifk_scrape_quick_failure_log",
        pretty: "Scrape Quick Failure Log Inverse",
        component: "ScrapeQuickFailureLogInverse",
        kebab: "scrape-quick-failure-logInverse",
        sqlFunctionRef: "p_ifk_scrape_quick_failure_log",
        RestAPI: "scrapeQuickFailureLogInverse",
        GraphQL: "scrapeQuickFailureLogInverse",
        custom: "scrapeQuickFailureLogInverse"
    }
},
    scrapeDomainDisallowedNotes: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    notes: {
        frontend: "notes",
        backend: "notes",
        database: "notes",
        pretty: "Notes",
        component: "Notes",
        kebab: "notes",
        sqlFunctionRef: "p_notes",
        RestAPI: "notes",
        GraphQL: "notes",
        custom: "notes"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    }
},
    scrapeDomainNotes: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    notes: {
        frontend: "notes",
        backend: "notes",
        database: "notes",
        pretty: "Notes",
        component: "Notes",
        kebab: "notes",
        sqlFunctionRef: "p_notes",
        RestAPI: "notes",
        GraphQL: "notes",
        custom: "notes"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    }
},
    scrapeDomainQuickScrapeSettings: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    enabled: {
        frontend: "enabled",
        backend: "enabled",
        database: "enabled",
        pretty: "Enabled",
        component: "Enabled",
        kebab: "enabled",
        sqlFunctionRef: "p_enabled",
        RestAPI: "enabled",
        GraphQL: "enabled",
        custom: "enabled"
    },
    proxyType: {
        frontend: "proxyType",
        backend: "proxy_type",
        database: "proxy_type",
        pretty: "Proxy Type",
        component: "ProxyType",
        kebab: "proxy-type",
        sqlFunctionRef: "p_proxy_type",
        RestAPI: "proxyType",
        GraphQL: "proxyType",
        custom: "proxyType"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    }
},
    scrapeDomainRobotsTxt: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    robotsTxt: {
        frontend: "robotsTxt",
        backend: "robots_txt",
        database: "robots_txt",
        pretty: "Robots Txt",
        component: "RobotsTxt",
        kebab: "robots-txt",
        sqlFunctionRef: "p_robots_txt",
        RestAPI: "robotsTxt",
        GraphQL: "robotsTxt",
        custom: "robotsTxt"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    }
},
    scrapeDomainSitemap: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    sitemap: {
        frontend: "sitemap",
        backend: "sitemap",
        database: "sitemap",
        pretty: "Sitemap",
        component: "Sitemap",
        kebab: "sitemap",
        sqlFunctionRef: "p_sitemap",
        RestAPI: "sitemap",
        GraphQL: "sitemap",
        custom: "sitemap"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    }
},
    scrapeJob: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    startUrls: {
        frontend: "startUrls",
        backend: "start_urls",
        database: "start_urls",
        pretty: "Start Urls",
        component: "StartUrls",
        kebab: "start-urls",
        sqlFunctionRef: "p_start_urls",
        RestAPI: "startUrls",
        GraphQL: "startUrls",
        custom: "startUrls"
    },
    scrapeStatus: {
        frontend: "scrapeStatus",
        backend: "scrape_status",
        database: "scrape_status",
        pretty: "Scrape Status",
        component: "ScrapeStatus",
        kebab: "scrape-status",
        sqlFunctionRef: "p_scrape_status",
        RestAPI: "scrapeStatus",
        GraphQL: "scrapeStatus",
        custom: "scrapeStatus"
    },
    parseStatus: {
        frontend: "parseStatus",
        backend: "parse_status",
        database: "parse_status",
        pretty: "Parse Status",
        component: "ParseStatus",
        kebab: "parse-status",
        sqlFunctionRef: "p_parse_status",
        RestAPI: "parseStatus",
        GraphQL: "parseStatus",
        custom: "parseStatus"
    },
    attemptLimit: {
        frontend: "attemptLimit",
        backend: "attempt_limit",
        database: "attempt_limit",
        pretty: "Attempt Limit",
        component: "AttemptLimit",
        kebab: "attempt-limit",
        sqlFunctionRef: "p_attempt_limit",
        RestAPI: "attemptLimit",
        GraphQL: "attemptLimit",
        custom: "attemptLimit"
    },
    startedAt: {
        frontend: "startedAt",
        backend: "started_at",
        database: "started_at",
        pretty: "Started At",
        component: "StartedAt",
        kebab: "started-at",
        sqlFunctionRef: "p_started_at",
        RestAPI: "startedAt",
        GraphQL: "startedAt",
        custom: "startedAt"
    },
    finishedAt: {
        frontend: "finishedAt",
        backend: "finished_at",
        database: "finished_at",
        pretty: "Finished At",
        component: "FinishedAt",
        kebab: "finished-at",
        sqlFunctionRef: "p_finished_at",
        RestAPI: "finishedAt",
        GraphQL: "finishedAt",
        custom: "finishedAt"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    },
    scrapeCycleTrackerInverse: {
        frontend: "scrapeCycleTrackerInverse",
        backend: "scrape_cycle_tracker_Inverse",
        database: "ifk_scrape_cycle_tracker",
        pretty: "Scrape Cycle Tracker Inverse",
        component: "ScrapeCycleTrackerInverse",
        kebab: "scrape-cycle-trackerInverse",
        sqlFunctionRef: "p_ifk_scrape_cycle_tracker",
        RestAPI: "scrapeCycleTrackerInverse",
        GraphQL: "scrapeCycleTrackerInverse",
        custom: "scrapeCycleTrackerInverse"
    },
    scrapeTaskInverse: {
        frontend: "scrapeTaskInverse",
        backend: "scrape_task_Inverse",
        database: "ifk_scrape_task",
        pretty: "Scrape Task Inverse",
        component: "ScrapeTaskInverse",
        kebab: "scrape-taskInverse",
        sqlFunctionRef: "p_ifk_scrape_task",
        RestAPI: "scrapeTaskInverse",
        GraphQL: "scrapeTaskInverse",
        custom: "scrapeTaskInverse"
    }
},
    scrapeOverride: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    configType: {
        frontend: "configType",
        backend: "config_type",
        database: "config_type",
        pretty: "Config Type",
        component: "ConfigType",
        kebab: "config-type",
        sqlFunctionRef: "p_config_type",
        RestAPI: "configType",
        GraphQL: "configType",
        custom: "configType"
    },
    selectorType: {
        frontend: "selectorType",
        backend: "selector_type",
        database: "selector_type",
        pretty: "Selector Type",
        component: "SelectorType",
        kebab: "selector-type",
        sqlFunctionRef: "p_selector_type",
        RestAPI: "selectorType",
        GraphQL: "selectorType",
        custom: "selectorType"
    },
    matchType: {
        frontend: "matchType",
        backend: "match_type",
        database: "match_type",
        pretty: "Match Type",
        component: "MatchType",
        kebab: "match-type",
        sqlFunctionRef: "p_match_type",
        RestAPI: "matchType",
        GraphQL: "matchType",
        custom: "matchType"
    },
    action: {
        frontend: "action",
        backend: "action",
        database: "action",
        pretty: "Action",
        component: "Action",
        kebab: "action",
        sqlFunctionRef: "p_action",
        RestAPI: "action",
        GraphQL: "action",
        custom: "action"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeOverrideValueInverse: {
        frontend: "scrapeOverrideValueInverse",
        backend: "scrape_override_value_Inverse",
        database: "ifk_scrape_override_value",
        pretty: "Scrape Override Value Inverse",
        component: "ScrapeOverrideValueInverse",
        kebab: "scrape-override-valueInverse",
        sqlFunctionRef: "p_ifk_scrape_override_value",
        RestAPI: "scrapeOverrideValueInverse",
        GraphQL: "scrapeOverrideValueInverse",
        custom: "scrapeOverrideValueInverse"
    },
    scrapePathPatternOverrideInverse: {
        frontend: "scrapePathPatternOverrideInverse",
        backend: "scrape_path_pattern_override_Inverse",
        database: "ifk_scrape_path_pattern_override",
        pretty: "Scrape Path Pattern Override Inverse",
        component: "ScrapePathPatternOverrideInverse",
        kebab: "scrape-path-pattern-overrideInverse",
        sqlFunctionRef: "p_ifk_scrape_path_pattern_override",
        RestAPI: "scrapePathPatternOverrideInverse",
        GraphQL: "scrapePathPatternOverrideInverse",
        custom: "scrapePathPatternOverrideInverse"
    }
},
    scrapeOverrideValue: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    value: {
        frontend: "value",
        backend: "value",
        database: "value",
        pretty: "Value",
        component: "Value",
        kebab: "value",
        sqlFunctionRef: "p_value",
        RestAPI: "value",
        GraphQL: "value",
        custom: "value"
    },
    scrapeOverrideId: {
        frontend: "scrapeOverrideId",
        backend: "scrape_override_id",
        database: "scrape_override_id",
        pretty: "Scrape Override Id",
        component: "ScrapeOverrideId",
        kebab: "scrape-override-id",
        sqlFunctionRef: "p_scrape_override_id",
        RestAPI: "scrapeOverrideId",
        GraphQL: "scrapeOverrideId",
        custom: "scrapeOverrideId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeOverrideReference: {
        frontend: "scrapeOverrideReference",
        backend: "scrape_override_reference",
        database: "ref_scrape_override",
        pretty: "Scrape Override Reference",
        component: "ScrapeOverrideReference",
        kebab: "scrape-overrideReference",
        sqlFunctionRef: "p_ref_scrape_override",
        RestAPI: "scrapeOverrideReference",
        GraphQL: "scrapeOverrideReference",
        custom: "scrapeOverrideReference"
    }
},
    scrapeParsedPage: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    pageName: {
        frontend: "pageName",
        backend: "page_name",
        database: "page_name",
        pretty: "Page Name",
        component: "PageName",
        kebab: "page-name",
        sqlFunctionRef: "p_page_name",
        RestAPI: "pageName",
        GraphQL: "pageName",
        custom: "pageName"
    },
    validity: {
        frontend: "validity",
        backend: "validity",
        database: "validity",
        pretty: "Validity",
        component: "Validity",
        kebab: "validity",
        sqlFunctionRef: "p_validity",
        RestAPI: "validity",
        GraphQL: "validity",
        custom: "validity"
    },
    remotePath: {
        frontend: "remotePath",
        backend: "remote_path",
        database: "remote_path",
        pretty: "Remote Path",
        component: "RemotePath",
        kebab: "remote-path",
        sqlFunctionRef: "p_remote_path",
        RestAPI: "remotePath",
        GraphQL: "remotePath",
        custom: "remotePath"
    },
    localPath: {
        frontend: "localPath",
        backend: "local_path",
        database: "local_path",
        pretty: "Local Path",
        component: "LocalPath",
        kebab: "local-path",
        sqlFunctionRef: "p_local_path",
        RestAPI: "localPath",
        GraphQL: "localPath",
        custom: "localPath"
    },
    scrapePathPatternCachePolicyId: {
        frontend: "scrapePathPatternCachePolicyId",
        backend: "scrape_path_pattern_cache_policy_id",
        database: "scrape_path_pattern_cache_policy_id",
        pretty: "Scrape Path Pattern Cache Policy Id",
        component: "ScrapePathPatternCachePolicyId",
        kebab: "scrape-path-pattern-cache-policy-id",
        sqlFunctionRef: "p_scrape_path_pattern_cache_policy_id",
        RestAPI: "scrapePathPatternCachePolicyId",
        GraphQL: "scrapePathPatternCachePolicyId",
        custom: "scrapePathPatternCachePolicyId"
    },
    scrapeTaskId: {
        frontend: "scrapeTaskId",
        backend: "scrape_task_id",
        database: "scrape_task_id",
        pretty: "Scrape Task Id",
        component: "ScrapeTaskId",
        kebab: "scrape-task-id",
        sqlFunctionRef: "p_scrape_task_id",
        RestAPI: "scrapeTaskId",
        GraphQL: "scrapeTaskId",
        custom: "scrapeTaskId"
    },
    scrapeTaskResponseId: {
        frontend: "scrapeTaskResponseId",
        backend: "scrape_task_response_id",
        database: "scrape_task_response_id",
        pretty: "Scrape Task Response Id",
        component: "ScrapeTaskResponseId",
        kebab: "scrape-task-response-id",
        sqlFunctionRef: "p_scrape_task_response_id",
        RestAPI: "scrapeTaskResponseId",
        GraphQL: "scrapeTaskResponseId",
        custom: "scrapeTaskResponseId"
    },
    scrapeCycleRunId: {
        frontend: "scrapeCycleRunId",
        backend: "scrape_cycle_run_id",
        database: "scrape_cycle_run_id",
        pretty: "Scrape Cycle Run Id",
        component: "ScrapeCycleRunId",
        kebab: "scrape-cycle-run-id",
        sqlFunctionRef: "p_scrape_cycle_run_id",
        RestAPI: "scrapeCycleRunId",
        GraphQL: "scrapeCycleRunId",
        custom: "scrapeCycleRunId"
    },
    scrapeCycleTrackerId: {
        frontend: "scrapeCycleTrackerId",
        backend: "scrape_cycle_tracker_id",
        database: "scrape_cycle_tracker_id",
        pretty: "Scrape Cycle Tracker Id",
        component: "ScrapeCycleTrackerId",
        kebab: "scrape-cycle-tracker-id",
        sqlFunctionRef: "p_scrape_cycle_tracker_id",
        RestAPI: "scrapeCycleTrackerId",
        GraphQL: "scrapeCycleTrackerId",
        custom: "scrapeCycleTrackerId"
    },
    scrapeConfigurationId: {
        frontend: "scrapeConfigurationId",
        backend: "scrape_configuration_id",
        database: "scrape_configuration_id",
        pretty: "Scrape Configuration Id",
        component: "ScrapeConfigurationId",
        kebab: "scrape-configuration-id",
        sqlFunctionRef: "p_scrape_configuration_id",
        RestAPI: "scrapeConfigurationId",
        GraphQL: "scrapeConfigurationId",
        custom: "scrapeConfigurationId"
    },
    scrapePathPatternOverrideId: {
        frontend: "scrapePathPatternOverrideId",
        backend: "scrape_path_pattern_override_id",
        database: "scrape_path_pattern_override_id",
        pretty: "Scrape Path Pattern Override Id",
        component: "ScrapePathPatternOverrideId",
        kebab: "scrape-path-pattern-override-id",
        sqlFunctionRef: "p_scrape_path_pattern_override_id",
        RestAPI: "scrapePathPatternOverrideId",
        GraphQL: "scrapePathPatternOverrideId",
        custom: "scrapePathPatternOverrideId"
    },
    scrapedAt: {
        frontend: "scrapedAt",
        backend: "scraped_at",
        database: "scraped_at",
        pretty: "Scraped At",
        component: "ScrapedAt",
        kebab: "scraped-at",
        sqlFunctionRef: "p_scraped_at",
        RestAPI: "scrapedAt",
        GraphQL: "scrapedAt",
        custom: "scrapedAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    expiresAt: {
        frontend: "expiresAt",
        backend: "expires_at",
        database: "expires_at",
        pretty: "Expires At",
        component: "ExpiresAt",
        kebab: "expires-at",
        sqlFunctionRef: "p_expires_at",
        RestAPI: "expiresAt",
        GraphQL: "expiresAt",
        custom: "expiresAt"
    },
    scrapeConfigurationReference: {
        frontend: "scrapeConfigurationReference",
        backend: "scrape_configuration_reference",
        database: "ref_scrape_configuration",
        pretty: "Scrape Configuration Reference",
        component: "ScrapeConfigurationReference",
        kebab: "scrape-configurationReference",
        sqlFunctionRef: "p_ref_scrape_configuration",
        RestAPI: "scrapeConfigurationReference",
        GraphQL: "scrapeConfigurationReference",
        custom: "scrapeConfigurationReference"
    },
    scrapeCycleRunReference: {
        frontend: "scrapeCycleRunReference",
        backend: "scrape_cycle_run_reference",
        database: "ref_scrape_cycle_run",
        pretty: "Scrape Cycle Run Reference",
        component: "ScrapeCycleRunReference",
        kebab: "scrape-cycle-runReference",
        sqlFunctionRef: "p_ref_scrape_cycle_run",
        RestAPI: "scrapeCycleRunReference",
        GraphQL: "scrapeCycleRunReference",
        custom: "scrapeCycleRunReference"
    },
    scrapeCycleTrackerReference: {
        frontend: "scrapeCycleTrackerReference",
        backend: "scrape_cycle_tracker_reference",
        database: "ref_scrape_cycle_tracker",
        pretty: "Scrape Cycle Tracker Reference",
        component: "ScrapeCycleTrackerReference",
        kebab: "scrape-cycle-trackerReference",
        sqlFunctionRef: "p_ref_scrape_cycle_tracker",
        RestAPI: "scrapeCycleTrackerReference",
        GraphQL: "scrapeCycleTrackerReference",
        custom: "scrapeCycleTrackerReference"
    },
    scrapePathPatternCachePolicyReference: {
        frontend: "scrapePathPatternCachePolicyReference",
        backend: "scrape_path_pattern_cache_policy_reference",
        database: "ref_scrape_path_pattern_cache_policy",
        pretty: "Scrape Path Pattern Cache Policy Reference",
        component: "ScrapePathPatternCachePolicyReference",
        kebab: "scrape-path-pattern-cache-policyReference",
        sqlFunctionRef: "p_ref_scrape_path_pattern_cache_policy",
        RestAPI: "scrapePathPatternCachePolicyReference",
        GraphQL: "scrapePathPatternCachePolicyReference",
        custom: "scrapePathPatternCachePolicyReference"
    },
    scrapePathPatternOverrideReference: {
        frontend: "scrapePathPatternOverrideReference",
        backend: "scrape_path_pattern_override_reference",
        database: "ref_scrape_path_pattern_override",
        pretty: "Scrape Path Pattern Override Reference",
        component: "ScrapePathPatternOverrideReference",
        kebab: "scrape-path-pattern-overrideReference",
        sqlFunctionRef: "p_ref_scrape_path_pattern_override",
        RestAPI: "scrapePathPatternOverrideReference",
        GraphQL: "scrapePathPatternOverrideReference",
        custom: "scrapePathPatternOverrideReference"
    },
    scrapeTaskReference: {
        frontend: "scrapeTaskReference",
        backend: "scrape_task_reference",
        database: "ref_scrape_task",
        pretty: "Scrape Task Reference",
        component: "ScrapeTaskReference",
        kebab: "scrape-taskReference",
        sqlFunctionRef: "p_ref_scrape_task",
        RestAPI: "scrapeTaskReference",
        GraphQL: "scrapeTaskReference",
        custom: "scrapeTaskReference"
    },
    scrapeTaskResponseReference: {
        frontend: "scrapeTaskResponseReference",
        backend: "scrape_task_response_reference",
        database: "ref_scrape_task_response",
        pretty: "Scrape Task Response Reference",
        component: "ScrapeTaskResponseReference",
        kebab: "scrape-task-responseReference",
        sqlFunctionRef: "p_ref_scrape_task_response",
        RestAPI: "scrapeTaskResponseReference",
        GraphQL: "scrapeTaskResponseReference",
        custom: "scrapeTaskResponseReference"
    }
},
    scrapePathPattern: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    pathPattern: {
        frontend: "pathPattern",
        backend: "path_pattern",
        database: "path_pattern",
        pretty: "Path Pattern",
        component: "PathPattern",
        kebab: "path-pattern",
        sqlFunctionRef: "p_path_pattern",
        RestAPI: "pathPattern",
        GraphQL: "pathPattern",
        custom: "pathPattern"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    },
    scrapeConfigurationInverse: {
        frontend: "scrapeConfigurationInverse",
        backend: "scrape_configuration_Inverse",
        database: "ifk_scrape_configuration",
        pretty: "Scrape Configuration Inverse",
        component: "ScrapeConfigurationInverse",
        kebab: "scrape-configurationInverse",
        sqlFunctionRef: "p_ifk_scrape_configuration",
        RestAPI: "scrapeConfigurationInverse",
        GraphQL: "scrapeConfigurationInverse",
        custom: "scrapeConfigurationInverse"
    },
    scrapePathPatternOverrideInverse: {
        frontend: "scrapePathPatternOverrideInverse",
        backend: "scrape_path_pattern_override_Inverse",
        database: "ifk_scrape_path_pattern_override",
        pretty: "Scrape Path Pattern Override Inverse",
        component: "ScrapePathPatternOverrideInverse",
        kebab: "scrape-path-pattern-overrideInverse",
        sqlFunctionRef: "p_ifk_scrape_path_pattern_override",
        RestAPI: "scrapePathPatternOverrideInverse",
        GraphQL: "scrapePathPatternOverrideInverse",
        custom: "scrapePathPatternOverrideInverse"
    },
    scrapePathPatternCachePolicyInverse: {
        frontend: "scrapePathPatternCachePolicyInverse",
        backend: "scrape_path_pattern_cache_policy_Inverse",
        database: "ifk_scrape_path_pattern_cache_policy",
        pretty: "Scrape Path Pattern Cache Policy Inverse",
        component: "ScrapePathPatternCachePolicyInverse",
        kebab: "scrape-path-pattern-cache-policyInverse",
        sqlFunctionRef: "p_ifk_scrape_path_pattern_cache_policy",
        RestAPI: "scrapePathPatternCachePolicyInverse",
        GraphQL: "scrapePathPatternCachePolicyInverse",
        custom: "scrapePathPatternCachePolicyInverse"
    }
},
    scrapePathPatternCachePolicy: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeCachePolicyId: {
        frontend: "scrapeCachePolicyId",
        backend: "scrape_cache_policy_id",
        database: "scrape_cache_policy_id",
        pretty: "Scrape Cache Policy Id",
        component: "ScrapeCachePolicyId",
        kebab: "scrape-cache-policy-id",
        sqlFunctionRef: "p_scrape_cache_policy_id",
        RestAPI: "scrapeCachePolicyId",
        GraphQL: "scrapeCachePolicyId",
        custom: "scrapeCachePolicyId"
    },
    scrapePathPatternId: {
        frontend: "scrapePathPatternId",
        backend: "scrape_path_pattern_id",
        database: "scrape_path_pattern_id",
        pretty: "Scrape Path Pattern Id",
        component: "ScrapePathPatternId",
        kebab: "scrape-path-pattern-id",
        sqlFunctionRef: "p_scrape_path_pattern_id",
        RestAPI: "scrapePathPatternId",
        GraphQL: "scrapePathPatternId",
        custom: "scrapePathPatternId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeCachePolicyReference: {
        frontend: "scrapeCachePolicyReference",
        backend: "scrape_cache_policy_reference",
        database: "ref_scrape_cache_policy",
        pretty: "Scrape Cache Policy Reference",
        component: "ScrapeCachePolicyReference",
        kebab: "scrape-cache-policyReference",
        sqlFunctionRef: "p_ref_scrape_cache_policy",
        RestAPI: "scrapeCachePolicyReference",
        GraphQL: "scrapeCachePolicyReference",
        custom: "scrapeCachePolicyReference"
    },
    scrapePathPatternReference: {
        frontend: "scrapePathPatternReference",
        backend: "scrape_path_pattern_reference",
        database: "ref_scrape_path_pattern",
        pretty: "Scrape Path Pattern Reference",
        component: "ScrapePathPatternReference",
        kebab: "scrape-path-patternReference",
        sqlFunctionRef: "p_ref_scrape_path_pattern",
        RestAPI: "scrapePathPatternReference",
        GraphQL: "scrapePathPatternReference",
        custom: "scrapePathPatternReference"
    },
    scrapeCycleTrackerInverse: {
        frontend: "scrapeCycleTrackerInverse",
        backend: "scrape_cycle_tracker_Inverse",
        database: "ifk_scrape_cycle_tracker",
        pretty: "Scrape Cycle Tracker Inverse",
        component: "ScrapeCycleTrackerInverse",
        kebab: "scrape-cycle-trackerInverse",
        sqlFunctionRef: "p_ifk_scrape_cycle_tracker",
        RestAPI: "scrapeCycleTrackerInverse",
        GraphQL: "scrapeCycleTrackerInverse",
        custom: "scrapeCycleTrackerInverse"
    },
    scrapeParsedPageInverse: {
        frontend: "scrapeParsedPageInverse",
        backend: "scrape_parsed_page_Inverse",
        database: "ifk_scrape_parsed_page",
        pretty: "Scrape Parsed Page Inverse",
        component: "ScrapeParsedPageInverse",
        kebab: "scrape-parsed-pageInverse",
        sqlFunctionRef: "p_ifk_scrape_parsed_page",
        RestAPI: "scrapeParsedPageInverse",
        GraphQL: "scrapeParsedPageInverse",
        custom: "scrapeParsedPageInverse"
    }
},
    scrapePathPatternOverride: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    scrapePathPatternId: {
        frontend: "scrapePathPatternId",
        backend: "scrape_path_pattern_id",
        database: "scrape_path_pattern_id",
        pretty: "Scrape Path Pattern Id",
        component: "ScrapePathPatternId",
        kebab: "scrape-path-pattern-id",
        sqlFunctionRef: "p_scrape_path_pattern_id",
        RestAPI: "scrapePathPatternId",
        GraphQL: "scrapePathPatternId",
        custom: "scrapePathPatternId"
    },
    scrapeOverrideId: {
        frontend: "scrapeOverrideId",
        backend: "scrape_override_id",
        database: "scrape_override_id",
        pretty: "Scrape Override Id",
        component: "ScrapeOverrideId",
        kebab: "scrape-override-id",
        sqlFunctionRef: "p_scrape_override_id",
        RestAPI: "scrapeOverrideId",
        GraphQL: "scrapeOverrideId",
        custom: "scrapeOverrideId"
    },
    isActive: {
        frontend: "isActive",
        backend: "is_active",
        database: "is_active",
        pretty: "Is Active",
        component: "IsActive",
        kebab: "is-active",
        sqlFunctionRef: "p_is_active",
        RestAPI: "isActive",
        GraphQL: "isActive",
        custom: "isActive"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeOverrideReference: {
        frontend: "scrapeOverrideReference",
        backend: "scrape_override_reference",
        database: "ref_scrape_override",
        pretty: "Scrape Override Reference",
        component: "ScrapeOverrideReference",
        kebab: "scrape-overrideReference",
        sqlFunctionRef: "p_ref_scrape_override",
        RestAPI: "scrapeOverrideReference",
        GraphQL: "scrapeOverrideReference",
        custom: "scrapeOverrideReference"
    },
    scrapePathPatternReference: {
        frontend: "scrapePathPatternReference",
        backend: "scrape_path_pattern_reference",
        database: "ref_scrape_path_pattern",
        pretty: "Scrape Path Pattern Reference",
        component: "ScrapePathPatternReference",
        kebab: "scrape-path-patternReference",
        sqlFunctionRef: "p_ref_scrape_path_pattern",
        RestAPI: "scrapePathPatternReference",
        GraphQL: "scrapePathPatternReference",
        custom: "scrapePathPatternReference"
    },
    scrapeParsedPageInverse: {
        frontend: "scrapeParsedPageInverse",
        backend: "scrape_parsed_page_Inverse",
        database: "ifk_scrape_parsed_page",
        pretty: "Scrape Parsed Page Inverse",
        component: "ScrapeParsedPageInverse",
        kebab: "scrape-parsed-pageInverse",
        sqlFunctionRef: "p_ifk_scrape_parsed_page",
        RestAPI: "scrapeParsedPageInverse",
        GraphQL: "scrapeParsedPageInverse",
        custom: "scrapeParsedPageInverse"
    }
},
    scrapeQuickFailureLog: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    domainName: {
        frontend: "domainName",
        backend: "domain_name",
        database: "domain_name",
        pretty: "Domain Name",
        component: "DomainName",
        kebab: "domain-name",
        sqlFunctionRef: "p_domain_name",
        RestAPI: "domainName",
        GraphQL: "domainName",
        custom: "domainName"
    },
    targetUrl: {
        frontend: "targetUrl",
        backend: "target_url",
        database: "target_url",
        pretty: "Target Url",
        component: "TargetUrl",
        kebab: "target-url",
        sqlFunctionRef: "p_target_url",
        RestAPI: "targetUrl",
        GraphQL: "targetUrl",
        custom: "targetUrl"
    },
    failureReason: {
        frontend: "failureReason",
        backend: "failure_reason",
        database: "failure_reason",
        pretty: "Failure Reason",
        component: "FailureReason",
        kebab: "failure-reason",
        sqlFunctionRef: "p_failure_reason",
        RestAPI: "failureReason",
        GraphQL: "failureReason",
        custom: "failureReason"
    },
    errorLog: {
        frontend: "errorLog",
        backend: "error_log",
        database: "error_log",
        pretty: "Error Log",
        component: "ErrorLog",
        kebab: "error-log",
        sqlFunctionRef: "p_error_log",
        RestAPI: "errorLog",
        GraphQL: "errorLog",
        custom: "errorLog"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    }
},
    scrapeTask: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    targetUrl: {
        frontend: "targetUrl",
        backend: "target_url",
        database: "target_url",
        pretty: "Target Url",
        component: "TargetUrl",
        kebab: "target-url",
        sqlFunctionRef: "p_target_url",
        RestAPI: "targetUrl",
        GraphQL: "targetUrl",
        custom: "targetUrl"
    },
    pageName: {
        frontend: "pageName",
        backend: "page_name",
        database: "page_name",
        pretty: "Page Name",
        component: "PageName",
        kebab: "page-name",
        sqlFunctionRef: "p_page_name",
        RestAPI: "pageName",
        GraphQL: "pageName",
        custom: "pageName"
    },
    scrapeDomainId: {
        frontend: "scrapeDomainId",
        backend: "scrape_domain_id",
        database: "scrape_domain_id",
        pretty: "Scrape Domain Id",
        component: "ScrapeDomainId",
        kebab: "scrape-domain-id",
        sqlFunctionRef: "p_scrape_domain_id",
        RestAPI: "scrapeDomainId",
        GraphQL: "scrapeDomainId",
        custom: "scrapeDomainId"
    },
    parentTask: {
        frontend: "parentTask",
        backend: "parent_task",
        database: "parent_task",
        pretty: "Parent Task",
        component: "ParentTask",
        kebab: "parent-task",
        sqlFunctionRef: "p_parent_task",
        RestAPI: "parentTask",
        GraphQL: "parentTask",
        custom: "parentTask"
    },
    attemptsLeft: {
        frontend: "attemptsLeft",
        backend: "attempts_left",
        database: "attempts_left",
        pretty: "Attempts Left",
        component: "AttemptsLeft",
        kebab: "attempts-left",
        sqlFunctionRef: "p_attempts_left",
        RestAPI: "attemptsLeft",
        GraphQL: "attemptsLeft",
        custom: "attemptsLeft"
    },
    scrapeMode: {
        frontend: "scrapeMode",
        backend: "scrape_mode",
        database: "scrape_mode",
        pretty: "Scrape Mode",
        component: "ScrapeMode",
        kebab: "scrape-mode",
        sqlFunctionRef: "p_scrape_mode",
        RestAPI: "scrapeMode",
        GraphQL: "scrapeMode",
        custom: "scrapeMode"
    },
    interactionConfig: {
        frontend: "interactionConfig",
        backend: "interaction_config",
        database: "interaction_config",
        pretty: "Interaction Config",
        component: "InteractionConfig",
        kebab: "interaction-config",
        sqlFunctionRef: "p_interaction_config",
        RestAPI: "interactionConfig",
        GraphQL: "interactionConfig",
        custom: "interactionConfig"
    },
    scrapeJobId: {
        frontend: "scrapeJobId",
        backend: "scrape_job_id",
        database: "scrape_job_id",
        pretty: "Scrape Job Id",
        component: "ScrapeJobId",
        kebab: "scrape-job-id",
        sqlFunctionRef: "p_scrape_job_id",
        RestAPI: "scrapeJobId",
        GraphQL: "scrapeJobId",
        custom: "scrapeJobId"
    },
    priority: {
        frontend: "priority",
        backend: "priority",
        database: "priority",
        pretty: "Priority",
        component: "Priority",
        kebab: "priority",
        sqlFunctionRef: "p_priority",
        RestAPI: "priority",
        GraphQL: "priority",
        custom: "priority"
    },
    discoveredLinks: {
        frontend: "discoveredLinks",
        backend: "discovered_links",
        database: "discovered_links",
        pretty: "Discovered Links",
        component: "DiscoveredLinks",
        kebab: "discovered-links",
        sqlFunctionRef: "p_discovered_links",
        RestAPI: "discoveredLinks",
        GraphQL: "discoveredLinks",
        custom: "discoveredLinks"
    },
    spawnedConcurrentTasks: {
        frontend: "spawnedConcurrentTasks",
        backend: "spawned_concurrent_tasks",
        database: "spawned_concurrent_tasks",
        pretty: "Spawned Concurrent Tasks",
        component: "SpawnedConcurrentTasks",
        kebab: "spawned-concurrent-tasks",
        sqlFunctionRef: "p_spawned_concurrent_tasks",
        RestAPI: "spawnedConcurrentTasks",
        GraphQL: "spawnedConcurrentTasks",
        custom: "spawnedConcurrentTasks"
    },
    scrapeCycleRunId: {
        frontend: "scrapeCycleRunId",
        backend: "scrape_cycle_run_id",
        database: "scrape_cycle_run_id",
        pretty: "Scrape Cycle Run Id",
        component: "ScrapeCycleRunId",
        kebab: "scrape-cycle-run-id",
        sqlFunctionRef: "p_scrape_cycle_run_id",
        RestAPI: "scrapeCycleRunId",
        GraphQL: "scrapeCycleRunId",
        custom: "scrapeCycleRunId"
    },
    failureReason: {
        frontend: "failureReason",
        backend: "failure_reason",
        database: "failure_reason",
        pretty: "Failure Reason",
        component: "FailureReason",
        kebab: "failure-reason",
        sqlFunctionRef: "p_failure_reason",
        RestAPI: "failureReason",
        GraphQL: "failureReason",
        custom: "failureReason"
    },
    scrapeStatus: {
        frontend: "scrapeStatus",
        backend: "scrape_status",
        database: "scrape_status",
        pretty: "Scrape Status",
        component: "ScrapeStatus",
        kebab: "scrape-status",
        sqlFunctionRef: "p_scrape_status",
        RestAPI: "scrapeStatus",
        GraphQL: "scrapeStatus",
        custom: "scrapeStatus"
    },
    parseStatus: {
        frontend: "parseStatus",
        backend: "parse_status",
        database: "parse_status",
        pretty: "Parse Status",
        component: "ParseStatus",
        kebab: "parse-status",
        sqlFunctionRef: "p_parse_status",
        RestAPI: "parseStatus",
        GraphQL: "parseStatus",
        custom: "parseStatus"
    },
    cancelMessage: {
        frontend: "cancelMessage",
        backend: "cancel_message",
        database: "cancel_message",
        pretty: "Cancel Message",
        component: "CancelMessage",
        kebab: "cancel-message",
        sqlFunctionRef: "p_cancel_message",
        RestAPI: "cancelMessage",
        GraphQL: "cancelMessage",
        custom: "cancelMessage"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeCycleRunReference: {
        frontend: "scrapeCycleRunReference",
        backend: "scrape_cycle_run_reference",
        database: "ref_scrape_cycle_run",
        pretty: "Scrape Cycle Run Reference",
        component: "ScrapeCycleRunReference",
        kebab: "scrape-cycle-runReference",
        sqlFunctionRef: "p_ref_scrape_cycle_run",
        RestAPI: "scrapeCycleRunReference",
        GraphQL: "scrapeCycleRunReference",
        custom: "scrapeCycleRunReference"
    },
    scrapeDomainReference: {
        frontend: "scrapeDomainReference",
        backend: "scrape_domain_reference",
        database: "ref_scrape_domain",
        pretty: "Scrape Domain Reference",
        component: "ScrapeDomainReference",
        kebab: "scrape-domainReference",
        sqlFunctionRef: "p_ref_scrape_domain",
        RestAPI: "scrapeDomainReference",
        GraphQL: "scrapeDomainReference",
        custom: "scrapeDomainReference"
    },
    scrapeJobReference: {
        frontend: "scrapeJobReference",
        backend: "scrape_job_reference",
        database: "ref_scrape_job",
        pretty: "Scrape Job Reference",
        component: "ScrapeJobReference",
        kebab: "scrape-jobReference",
        sqlFunctionRef: "p_ref_scrape_job",
        RestAPI: "scrapeJobReference",
        GraphQL: "scrapeJobReference",
        custom: "scrapeJobReference"
    },
    scrapeTaskResponseInverse: {
        frontend: "scrapeTaskResponseInverse",
        backend: "scrape_task_response_Inverse",
        database: "ifk_scrape_task_response",
        pretty: "Scrape Task Response Inverse",
        component: "ScrapeTaskResponseInverse",
        kebab: "scrape-task-responseInverse",
        sqlFunctionRef: "p_ifk_scrape_task_response",
        RestAPI: "scrapeTaskResponseInverse",
        GraphQL: "scrapeTaskResponseInverse",
        custom: "scrapeTaskResponseInverse"
    },
    scrapeParsedPageInverse: {
        frontend: "scrapeParsedPageInverse",
        backend: "scrape_parsed_page_Inverse",
        database: "ifk_scrape_parsed_page",
        pretty: "Scrape Parsed Page Inverse",
        component: "ScrapeParsedPageInverse",
        kebab: "scrape-parsed-pageInverse",
        sqlFunctionRef: "p_ifk_scrape_parsed_page",
        RestAPI: "scrapeParsedPageInverse",
        GraphQL: "scrapeParsedPageInverse",
        custom: "scrapeParsedPageInverse"
    }
},
    scrapeTaskResponse: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    scrapeTaskId: {
        frontend: "scrapeTaskId",
        backend: "scrape_task_id",
        database: "scrape_task_id",
        pretty: "Scrape Task Id",
        component: "ScrapeTaskId",
        kebab: "scrape-task-id",
        sqlFunctionRef: "p_scrape_task_id",
        RestAPI: "scrapeTaskId",
        GraphQL: "scrapeTaskId",
        custom: "scrapeTaskId"
    },
    failureReason: {
        frontend: "failureReason",
        backend: "failure_reason",
        database: "failure_reason",
        pretty: "Failure Reason",
        component: "FailureReason",
        kebab: "failure-reason",
        sqlFunctionRef: "p_failure_reason",
        RestAPI: "failureReason",
        GraphQL: "failureReason",
        custom: "failureReason"
    },
    statusCode: {
        frontend: "statusCode",
        backend: "status_code",
        database: "status_code",
        pretty: "Status Code",
        component: "StatusCode",
        kebab: "status-code",
        sqlFunctionRef: "p_status_code",
        RestAPI: "statusCode",
        GraphQL: "statusCode",
        custom: "statusCode"
    },
    contentPath: {
        frontend: "contentPath",
        backend: "content_path",
        database: "content_path",
        pretty: "Content Path",
        component: "ContentPath",
        kebab: "content-path",
        sqlFunctionRef: "p_content_path",
        RestAPI: "contentPath",
        GraphQL: "contentPath",
        custom: "contentPath"
    },
    contentSize: {
        frontend: "contentSize",
        backend: "content_size",
        database: "content_size",
        pretty: "Content Size",
        component: "ContentSize",
        kebab: "content-size",
        sqlFunctionRef: "p_content_size",
        RestAPI: "contentSize",
        GraphQL: "contentSize",
        custom: "contentSize"
    },
    contentType: {
        frontend: "contentType",
        backend: "content_type",
        database: "content_type",
        pretty: "Content Type",
        component: "ContentType",
        kebab: "content-type",
        sqlFunctionRef: "p_content_type",
        RestAPI: "contentType",
        GraphQL: "contentType",
        custom: "contentType"
    },
    responseHeaders: {
        frontend: "responseHeaders",
        backend: "response_headers",
        database: "response_headers",
        pretty: "Response Headers",
        component: "ResponseHeaders",
        kebab: "response-headers",
        sqlFunctionRef: "p_response_headers",
        RestAPI: "responseHeaders",
        GraphQL: "responseHeaders",
        custom: "responseHeaders"
    },
    responseUrl: {
        frontend: "responseUrl",
        backend: "response_url",
        database: "response_url",
        pretty: "Response Url",
        component: "ResponseUrl",
        kebab: "response-url",
        sqlFunctionRef: "p_response_url",
        RestAPI: "responseUrl",
        GraphQL: "responseUrl",
        custom: "responseUrl"
    },
    errorLog: {
        frontend: "errorLog",
        backend: "error_log",
        database: "error_log",
        pretty: "Error Log",
        component: "ErrorLog",
        kebab: "error-log",
        sqlFunctionRef: "p_error_log",
        RestAPI: "errorLog",
        GraphQL: "errorLog",
        custom: "errorLog"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    scrapeTaskReference: {
        frontend: "scrapeTaskReference",
        backend: "scrape_task_reference",
        database: "ref_scrape_task",
        pretty: "Scrape Task Reference",
        component: "ScrapeTaskReference",
        kebab: "scrape-taskReference",
        sqlFunctionRef: "p_ref_scrape_task",
        RestAPI: "scrapeTaskReference",
        GraphQL: "scrapeTaskReference",
        custom: "scrapeTaskReference"
    },
    scrapeParsedPageInverse: {
        frontend: "scrapeParsedPageInverse",
        backend: "scrape_parsed_page_Inverse",
        database: "ifk_scrape_parsed_page",
        pretty: "Scrape Parsed Page Inverse",
        component: "ScrapeParsedPageInverse",
        kebab: "scrape-parsed-pageInverse",
        sqlFunctionRef: "p_ifk_scrape_parsed_page",
        RestAPI: "scrapeParsedPageInverse",
        GraphQL: "scrapeParsedPageInverse",
        custom: "scrapeParsedPageInverse"
    }
},
    subcategory: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    categoryId: {
        frontend: "categoryId",
        backend: "category_id",
        database: "category_id",
        pretty: "Category Id",
        component: "CategoryId",
        kebab: "category-id",
        sqlFunctionRef: "p_category_id",
        RestAPI: "categoryId",
        GraphQL: "categoryId",
        custom: "categoryId"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    slug: {
        frontend: "slug",
        backend: "slug",
        database: "slug",
        pretty: "Slug",
        component: "Slug",
        kebab: "slug",
        sqlFunctionRef: "p_slug",
        RestAPI: "slug",
        GraphQL: "slug",
        custom: "slug"
    },
    icon: {
        frontend: "icon",
        backend: "icon",
        database: "icon",
        pretty: "Icon",
        component: "Icon",
        kebab: "icon",
        sqlFunctionRef: "p_icon",
        RestAPI: "icon",
        GraphQL: "icon",
        custom: "icon"
    },
    features: {
        frontend: "features",
        backend: "features",
        database: "features",
        pretty: "Features",
        component: "Features",
        kebab: "features",
        sqlFunctionRef: "p_features",
        RestAPI: "features",
        GraphQL: "features",
        custom: "features"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    categoryReference: {
        frontend: "categoryReference",
        backend: "category_reference",
        database: "ref_category",
        pretty: "Category Reference",
        component: "CategoryReference",
        kebab: "categoryReference",
        sqlFunctionRef: "p_ref_category",
        RestAPI: "categoryReference",
        GraphQL: "categoryReference",
        custom: "categoryReference"
    },
    appletInverse: {
        frontend: "appletInverse",
        backend: "applet_Inverse",
        database: "ifk_applet",
        pretty: "Applet Inverse",
        component: "AppletInverse",
        kebab: "appletInverse",
        sqlFunctionRef: "p_ifk_applet",
        RestAPI: "appletInverse",
        GraphQL: "appletInverse",
        custom: "appletInverse"
    },
    customAppletConfigsInverse: {
        frontend: "customAppletConfigsInverse",
        backend: "custom_applet_configs_Inverse",
        database: "ifk_custom_applet_configs",
        pretty: "Custom Applet Configs Inverse",
        component: "CustomAppletConfigsInverse",
        kebab: "custom-applet-configsInverse",
        sqlFunctionRef: "p_ifk_custom_applet_configs",
        RestAPI: "customAppletConfigsInverse",
        GraphQL: "customAppletConfigsInverse",
        custom: "customAppletConfigsInverse"
    }
},
    systemFunction: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    sample: {
        frontend: "sample",
        backend: "sample",
        database: "sample",
        pretty: "Sample",
        component: "Sample",
        kebab: "sample",
        sqlFunctionRef: "p_sample",
        RestAPI: "sample",
        GraphQL: "sample",
        custom: "sample"
    },
    inputParams: {
        frontend: "inputParams",
        backend: "input_params",
        database: "input_params",
        pretty: "Input Params",
        component: "InputParams",
        kebab: "input-params",
        sqlFunctionRef: "p_input_params",
        RestAPI: "inputParams",
        GraphQL: "inputParams",
        custom: "inputParams"
    },
    outputOptions: {
        frontend: "outputOptions",
        backend: "output_options",
        database: "output_options",
        pretty: "Output Options",
        component: "OutputOptions",
        kebab: "output-options",
        sqlFunctionRef: "p_output_options",
        RestAPI: "outputOptions",
        GraphQL: "outputOptions",
        custom: "outputOptions"
    },
    rfId: {
        frontend: "rfId",
        backend: "rf_id",
        database: "rf_id",
        pretty: "Rf Id",
        component: "RfId",
        kebab: "rf-id",
        sqlFunctionRef: "p_rf_id",
        RestAPI: "rfId",
        GraphQL: "rfId",
        custom: "rfId"
    },
    registeredFunctionReference: {
        frontend: "registeredFunctionReference",
        backend: "registered_function_reference",
        database: "ref_registered_function",
        pretty: "Registered Function Reference",
        component: "RegisteredFunctionReference",
        kebab: "registered-functionReference",
        sqlFunctionRef: "p_ref_registered_function",
        RestAPI: "registeredFunctionReference",
        GraphQL: "registeredFunctionReference",
        custom: "registeredFunctionReference"
    },
    toolInverse: {
        frontend: "toolInverse",
        backend: "tool_Inverse",
        database: "ifk_tool",
        pretty: "Tool Inverse",
        component: "ToolInverse",
        kebab: "toolInverse",
        sqlFunctionRef: "p_ifk_tool",
        RestAPI: "toolInverse",
        GraphQL: "toolInverse",
        custom: "toolInverse"
    },
    recipeFunctionInverse: {
        frontend: "recipeFunctionInverse",
        backend: "recipe_function_Inverse",
        database: "ifk_recipe_function",
        pretty: "Recipe Function Inverse",
        component: "RecipeFunctionInverse",
        kebab: "recipe-functionInverse",
        sqlFunctionRef: "p_ifk_recipe_function",
        RestAPI: "recipeFunctionInverse",
        GraphQL: "recipeFunctionInverse",
        custom: "recipeFunctionInverse"
    }
},
    tableData: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    tableId: {
        frontend: "tableId",
        backend: "table_id",
        database: "table_id",
        pretty: "Table Id",
        component: "TableId",
        kebab: "table-id",
        sqlFunctionRef: "p_table_id",
        RestAPI: "tableId",
        GraphQL: "tableId",
        custom: "tableId"
    },
    data: {
        frontend: "data",
        backend: "data",
        database: "data",
        pretty: "Data",
        component: "Data",
        kebab: "data",
        sqlFunctionRef: "p_data",
        RestAPI: "data",
        GraphQL: "data",
        custom: "data"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    userTablesReference: {
        frontend: "userTablesReference",
        backend: "user_tables_reference",
        database: "ref_user_tables",
        pretty: "User Tables Reference",
        component: "UserTablesReference",
        kebab: "user-tablesReference",
        sqlFunctionRef: "p_ref_user_tables",
        RestAPI: "userTablesReference",
        GraphQL: "userTablesReference",
        custom: "userTablesReference"
    }
},
    tableFields: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    tableId: {
        frontend: "tableId",
        backend: "table_id",
        database: "table_id",
        pretty: "Table Id",
        component: "TableId",
        kebab: "table-id",
        sqlFunctionRef: "p_table_id",
        RestAPI: "tableId",
        GraphQL: "tableId",
        custom: "tableId"
    },
    fieldName: {
        frontend: "fieldName",
        backend: "field_name",
        database: "field_name",
        pretty: "Field Name",
        component: "FieldName",
        kebab: "field-name",
        sqlFunctionRef: "p_field_name",
        RestAPI: "fieldName",
        GraphQL: "fieldName",
        custom: "fieldName"
    },
    displayName: {
        frontend: "displayName",
        backend: "display_name",
        database: "display_name",
        pretty: "Display Name",
        component: "DisplayName",
        kebab: "display-name",
        sqlFunctionRef: "p_display_name",
        RestAPI: "displayName",
        GraphQL: "displayName",
        custom: "displayName"
    },
    dataType: {
        frontend: "dataType",
        backend: "data_type",
        database: "data_type",
        pretty: "Data Type",
        component: "DataType",
        kebab: "data-type",
        sqlFunctionRef: "p_data_type",
        RestAPI: "dataType",
        GraphQL: "dataType",
        custom: "dataType"
    },
    fieldOrder: {
        frontend: "fieldOrder",
        backend: "field_order",
        database: "field_order",
        pretty: "Field Order",
        component: "FieldOrder",
        kebab: "field-order",
        sqlFunctionRef: "p_field_order",
        RestAPI: "fieldOrder",
        GraphQL: "fieldOrder",
        custom: "fieldOrder"
    },
    isRequired: {
        frontend: "isRequired",
        backend: "is_required",
        database: "is_required",
        pretty: "Is Required",
        component: "IsRequired",
        kebab: "is-required",
        sqlFunctionRef: "p_is_required",
        RestAPI: "isRequired",
        GraphQL: "isRequired",
        custom: "isRequired"
    },
    defaultValue: {
        frontend: "defaultValue",
        backend: "default_value",
        database: "default_value",
        pretty: "Default Value",
        component: "DefaultValue",
        kebab: "default-value",
        sqlFunctionRef: "p_default_value",
        RestAPI: "defaultValue",
        GraphQL: "defaultValue",
        custom: "defaultValue"
    },
    validationRules: {
        frontend: "validationRules",
        backend: "validation_rules",
        database: "validation_rules",
        pretty: "Validation Rules",
        component: "ValidationRules",
        kebab: "validation-rules",
        sqlFunctionRef: "p_validation_rules",
        RestAPI: "validationRules",
        GraphQL: "validationRules",
        custom: "validationRules"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    userTablesReference: {
        frontend: "userTablesReference",
        backend: "user_tables_reference",
        database: "ref_user_tables",
        pretty: "User Tables Reference",
        component: "UserTablesReference",
        kebab: "user-tablesReference",
        sqlFunctionRef: "p_ref_user_tables",
        RestAPI: "userTablesReference",
        GraphQL: "userTablesReference",
        custom: "userTablesReference"
    }
},
    taskAssignments: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    taskId: {
        frontend: "taskId",
        backend: "task_id",
        database: "task_id",
        pretty: "Task Id",
        component: "TaskId",
        kebab: "task-id",
        sqlFunctionRef: "p_task_id",
        RestAPI: "taskId",
        GraphQL: "taskId",
        custom: "taskId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    assignedBy: {
        frontend: "assignedBy",
        backend: "assigned_by",
        database: "assigned_by",
        pretty: "Assigned By",
        component: "AssignedBy",
        kebab: "assigned-by",
        sqlFunctionRef: "p_assigned_by",
        RestAPI: "assignedBy",
        GraphQL: "assignedBy",
        custom: "assignedBy"
    },
    assignedAt: {
        frontend: "assignedAt",
        backend: "assigned_at",
        database: "assigned_at",
        pretty: "Assigned At",
        component: "AssignedAt",
        kebab: "assigned-at",
        sqlFunctionRef: "p_assigned_at",
        RestAPI: "assignedAt",
        GraphQL: "assignedAt",
        custom: "assignedAt"
    },
    tasksReference: {
        frontend: "tasksReference",
        backend: "tasks_reference",
        database: "ref_tasks",
        pretty: "Tasks Reference",
        component: "TasksReference",
        kebab: "tasksReference",
        sqlFunctionRef: "p_ref_tasks",
        RestAPI: "tasksReference",
        GraphQL: "tasksReference",
        custom: "tasksReference"
    }
},
    taskAttachments: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    taskId: {
        frontend: "taskId",
        backend: "task_id",
        database: "task_id",
        pretty: "Task Id",
        component: "TaskId",
        kebab: "task-id",
        sqlFunctionRef: "p_task_id",
        RestAPI: "taskId",
        GraphQL: "taskId",
        custom: "taskId"
    },
    fileName: {
        frontend: "fileName",
        backend: "file_name",
        database: "file_name",
        pretty: "File Name",
        component: "FileName",
        kebab: "file-name",
        sqlFunctionRef: "p_file_name",
        RestAPI: "fileName",
        GraphQL: "fileName",
        custom: "fileName"
    },
    fileType: {
        frontend: "fileType",
        backend: "file_type",
        database: "file_type",
        pretty: "File Type",
        component: "FileType",
        kebab: "file-type",
        sqlFunctionRef: "p_file_type",
        RestAPI: "fileType",
        GraphQL: "fileType",
        custom: "fileType"
    },
    fileSize: {
        frontend: "fileSize",
        backend: "file_size",
        database: "file_size",
        pretty: "File Size",
        component: "FileSize",
        kebab: "file-size",
        sqlFunctionRef: "p_file_size",
        RestAPI: "fileSize",
        GraphQL: "fileSize",
        custom: "fileSize"
    },
    filePath: {
        frontend: "filePath",
        backend: "file_path",
        database: "file_path",
        pretty: "File Path",
        component: "FilePath",
        kebab: "file-path",
        sqlFunctionRef: "p_file_path",
        RestAPI: "filePath",
        GraphQL: "filePath",
        custom: "filePath"
    },
    uploadedBy: {
        frontend: "uploadedBy",
        backend: "uploaded_by",
        database: "uploaded_by",
        pretty: "Uploaded By",
        component: "UploadedBy",
        kebab: "uploaded-by",
        sqlFunctionRef: "p_uploaded_by",
        RestAPI: "uploadedBy",
        GraphQL: "uploadedBy",
        custom: "uploadedBy"
    },
    uploadedAt: {
        frontend: "uploadedAt",
        backend: "uploaded_at",
        database: "uploaded_at",
        pretty: "Uploaded At",
        component: "UploadedAt",
        kebab: "uploaded-at",
        sqlFunctionRef: "p_uploaded_at",
        RestAPI: "uploadedAt",
        GraphQL: "uploadedAt",
        custom: "uploadedAt"
    },
    tasksReference: {
        frontend: "tasksReference",
        backend: "tasks_reference",
        database: "ref_tasks",
        pretty: "Tasks Reference",
        component: "TasksReference",
        kebab: "tasksReference",
        sqlFunctionRef: "p_ref_tasks",
        RestAPI: "tasksReference",
        GraphQL: "tasksReference",
        custom: "tasksReference"
    }
},
    taskComments: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    taskId: {
        frontend: "taskId",
        backend: "task_id",
        database: "task_id",
        pretty: "Task Id",
        component: "TaskId",
        kebab: "task-id",
        sqlFunctionRef: "p_task_id",
        RestAPI: "taskId",
        GraphQL: "taskId",
        custom: "taskId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    content: {
        frontend: "content",
        backend: "content",
        database: "content",
        pretty: "Content",
        component: "Content",
        kebab: "content",
        sqlFunctionRef: "p_content",
        RestAPI: "content",
        GraphQL: "content",
        custom: "content"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    tasksReference: {
        frontend: "tasksReference",
        backend: "tasks_reference",
        database: "ref_tasks",
        pretty: "Tasks Reference",
        component: "TasksReference",
        kebab: "tasksReference",
        sqlFunctionRef: "p_ref_tasks",
        RestAPI: "tasksReference",
        GraphQL: "tasksReference",
        custom: "tasksReference"
    }
},
    tasks: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    title: {
        frontend: "title",
        backend: "title",
        database: "title",
        pretty: "Title",
        component: "Title",
        kebab: "title",
        sqlFunctionRef: "p_title",
        RestAPI: "title",
        GraphQL: "title",
        custom: "title"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    projectId: {
        frontend: "projectId",
        backend: "project_id",
        database: "project_id",
        pretty: "Project Id",
        component: "ProjectId",
        kebab: "project-id",
        sqlFunctionRef: "p_project_id",
        RestAPI: "projectId",
        GraphQL: "projectId",
        custom: "projectId"
    },
    status: {
        frontend: "status",
        backend: "status",
        database: "status",
        pretty: "Status",
        component: "Status",
        kebab: "status",
        sqlFunctionRef: "p_status",
        RestAPI: "status",
        GraphQL: "status",
        custom: "status"
    },
    dueDate: {
        frontend: "dueDate",
        backend: "due_date",
        database: "due_date",
        pretty: "Due Date",
        component: "DueDate",
        kebab: "due-date",
        sqlFunctionRef: "p_due_date",
        RestAPI: "dueDate",
        GraphQL: "dueDate",
        custom: "dueDate"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    projectsReference: {
        frontend: "projectsReference",
        backend: "projects_reference",
        database: "ref_projects",
        pretty: "Projects Reference",
        component: "ProjectsReference",
        kebab: "projectsReference",
        sqlFunctionRef: "p_ref_projects",
        RestAPI: "projectsReference",
        GraphQL: "projectsReference",
        custom: "projectsReference"
    },
    taskAssignmentsInverse: {
        frontend: "taskAssignmentsInverse",
        backend: "task_assignments_Inverse",
        database: "ifk_task_assignments",
        pretty: "Task Assignments Inverse",
        component: "TaskAssignmentsInverse",
        kebab: "task-assignmentsInverse",
        sqlFunctionRef: "p_ifk_task_assignments",
        RestAPI: "taskAssignmentsInverse",
        GraphQL: "taskAssignmentsInverse",
        custom: "taskAssignmentsInverse"
    },
    taskAttachmentsInverse: {
        frontend: "taskAttachmentsInverse",
        backend: "task_attachments_Inverse",
        database: "ifk_task_attachments",
        pretty: "Task Attachments Inverse",
        component: "TaskAttachmentsInverse",
        kebab: "task-attachmentsInverse",
        sqlFunctionRef: "p_ifk_task_attachments",
        RestAPI: "taskAttachmentsInverse",
        GraphQL: "taskAttachmentsInverse",
        custom: "taskAttachmentsInverse"
    },
    taskCommentsInverse: {
        frontend: "taskCommentsInverse",
        backend: "task_comments_Inverse",
        database: "ifk_task_comments",
        pretty: "Task Comments Inverse",
        component: "TaskCommentsInverse",
        kebab: "task-commentsInverse",
        sqlFunctionRef: "p_ifk_task_comments",
        RestAPI: "taskCommentsInverse",
        GraphQL: "taskCommentsInverse",
        custom: "taskCommentsInverse"
    }
},
    tool: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    source: {
        frontend: "source",
        backend: "source",
        database: "source",
        pretty: "Source",
        component: "Source",
        kebab: "source",
        sqlFunctionRef: "p_source",
        RestAPI: "source",
        GraphQL: "source",
        custom: "source"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    parameters: {
        frontend: "parameters",
        backend: "parameters",
        database: "parameters",
        pretty: "Parameters",
        component: "Parameters",
        kebab: "parameters",
        sqlFunctionRef: "p_parameters",
        RestAPI: "parameters",
        GraphQL: "parameters",
        custom: "parameters"
    },
    requiredArgs: {
        frontend: "requiredArgs",
        backend: "required_args",
        database: "required_args",
        pretty: "Required Args",
        component: "RequiredArgs",
        kebab: "required-args",
        sqlFunctionRef: "p_required_args",
        RestAPI: "requiredArgs",
        GraphQL: "requiredArgs",
        custom: "requiredArgs"
    },
    systemFunction: {
        frontend: "systemFunction",
        backend: "system_function",
        database: "system_function",
        pretty: "System Function",
        component: "SystemFunction",
        kebab: "system-function",
        sqlFunctionRef: "p_system_function",
        RestAPI: "systemFunction",
        GraphQL: "systemFunction",
        custom: "systemFunction"
    },
    additionalParams: {
        frontend: "additionalParams",
        backend: "additional_params",
        database: "additional_params",
        pretty: "Additional Params",
        component: "AdditionalParams",
        kebab: "additional-params",
        sqlFunctionRef: "p_additional_params",
        RestAPI: "additionalParams",
        GraphQL: "additionalParams",
        custom: "additionalParams"
    },
    systemFunctionReference: {
        frontend: "systemFunctionReference",
        backend: "system_function_reference",
        database: "ref_system_function",
        pretty: "System Function Reference",
        component: "SystemFunctionReference",
        kebab: "system-functionReference",
        sqlFunctionRef: "p_ref_system_function",
        RestAPI: "systemFunctionReference",
        GraphQL: "systemFunctionReference",
        custom: "systemFunctionReference"
    },
    recipeToolInverse: {
        frontend: "recipeToolInverse",
        backend: "recipe_tool_Inverse",
        database: "ifk_recipe_tool",
        pretty: "Recipe Tool Inverse",
        component: "RecipeToolInverse",
        kebab: "recipe-toolInverse",
        sqlFunctionRef: "p_ifk_recipe_tool",
        RestAPI: "recipeToolInverse",
        GraphQL: "recipeToolInverse",
        custom: "recipeToolInverse"
    }
},
    transformer: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    inputParams: {
        frontend: "inputParams",
        backend: "input_params",
        database: "input_params",
        pretty: "Input Params",
        component: "InputParams",
        kebab: "input-params",
        sqlFunctionRef: "p_input_params",
        RestAPI: "inputParams",
        GraphQL: "inputParams",
        custom: "inputParams"
    },
    outputParams: {
        frontend: "outputParams",
        backend: "output_params",
        database: "output_params",
        pretty: "Output Params",
        component: "OutputParams",
        kebab: "output-params",
        sqlFunctionRef: "p_output_params",
        RestAPI: "outputParams",
        GraphQL: "outputParams",
        custom: "outputParams"
    },
    actionInverse: {
        frontend: "actionInverse",
        backend: "action_Inverse",
        database: "ifk_action",
        pretty: "Action Inverse",
        component: "ActionInverse",
        kebab: "actionInverse",
        sqlFunctionRef: "p_ifk_action",
        RestAPI: "actionInverse",
        GraphQL: "actionInverse",
        custom: "actionInverse"
    }
},
    userListItems: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    label: {
        frontend: "label",
        backend: "label",
        database: "label",
        pretty: "Label",
        component: "Label",
        kebab: "label",
        sqlFunctionRef: "p_label",
        RestAPI: "label",
        GraphQL: "label",
        custom: "label"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    helpText: {
        frontend: "helpText",
        backend: "help_text",
        database: "help_text",
        pretty: "Help Text",
        component: "HelpText",
        kebab: "help-text",
        sqlFunctionRef: "p_help_text",
        RestAPI: "helpText",
        GraphQL: "helpText",
        custom: "helpText"
    },
    groupName: {
        frontend: "groupName",
        backend: "group_name",
        database: "group_name",
        pretty: "Group Name",
        component: "GroupName",
        kebab: "group-name",
        sqlFunctionRef: "p_group_name",
        RestAPI: "groupName",
        GraphQL: "groupName",
        custom: "groupName"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    publicRead: {
        frontend: "publicRead",
        backend: "public_read",
        database: "public_read",
        pretty: "Public Read",
        component: "PublicRead",
        kebab: "public-read",
        sqlFunctionRef: "p_public_read",
        RestAPI: "publicRead",
        GraphQL: "publicRead",
        custom: "publicRead"
    },
    listId: {
        frontend: "listId",
        backend: "list_id",
        database: "list_id",
        pretty: "List Id",
        component: "ListId",
        kebab: "list-id",
        sqlFunctionRef: "p_list_id",
        RestAPI: "listId",
        GraphQL: "listId",
        custom: "listId"
    },
    iconName: {
        frontend: "iconName",
        backend: "icon_name",
        database: "icon_name",
        pretty: "Icon Name",
        component: "IconName",
        kebab: "icon-name",
        sqlFunctionRef: "p_icon_name",
        RestAPI: "iconName",
        GraphQL: "iconName",
        custom: "iconName"
    },
    userListsReference: {
        frontend: "userListsReference",
        backend: "user_lists_reference",
        database: "ref_user_lists",
        pretty: "User Lists Reference",
        component: "UserListsReference",
        kebab: "user-listsReference",
        sqlFunctionRef: "p_ref_user_lists",
        RestAPI: "userListsReference",
        GraphQL: "userListsReference",
        custom: "userListsReference"
    }
},
    userLists: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    listName: {
        frontend: "listName",
        backend: "list_name",
        database: "list_name",
        pretty: "List Name",
        component: "ListName",
        kebab: "list-name",
        sqlFunctionRef: "p_list_name",
        RestAPI: "listName",
        GraphQL: "listName",
        custom: "listName"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    publicRead: {
        frontend: "publicRead",
        backend: "public_read",
        database: "public_read",
        pretty: "Public Read",
        component: "PublicRead",
        kebab: "public-read",
        sqlFunctionRef: "p_public_read",
        RestAPI: "publicRead",
        GraphQL: "publicRead",
        custom: "publicRead"
    },
    userListItemsInverse: {
        frontend: "userListItemsInverse",
        backend: "user_list_items_Inverse",
        database: "ifk_user_list_items",
        pretty: "User List Items Inverse",
        component: "UserListItemsInverse",
        kebab: "user-list-itemsInverse",
        sqlFunctionRef: "p_ifk_user_list_items",
        RestAPI: "userListItemsInverse",
        GraphQL: "userListItemsInverse",
        custom: "userListItemsInverse"
    }
},
    userPreferences: {
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    preferences: {
        frontend: "preferences",
        backend: "preferences",
        database: "preferences",
        pretty: "Preferences",
        component: "Preferences",
        kebab: "preferences",
        sqlFunctionRef: "p_preferences",
        RestAPI: "preferences",
        GraphQL: "preferences",
        custom: "preferences"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    }
},
    userTables: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    tableName: {
        frontend: "tableName",
        backend: "table_name",
        database: "table_name",
        pretty: "Table Name",
        component: "TableName",
        kebab: "table-name",
        sqlFunctionRef: "p_table_name",
        RestAPI: "tableName",
        GraphQL: "tableName",
        custom: "tableName"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    version: {
        frontend: "version",
        backend: "version",
        database: "version",
        pretty: "Version",
        component: "Version",
        kebab: "version",
        sqlFunctionRef: "p_version",
        RestAPI: "version",
        GraphQL: "version",
        custom: "version"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    tableFieldsInverse: {
        frontend: "tableFieldsInverse",
        backend: "table_fields_Inverse",
        database: "ifk_table_fields",
        pretty: "Table Fields Inverse",
        component: "TableFieldsInverse",
        kebab: "table-fieldsInverse",
        sqlFunctionRef: "p_ifk_table_fields",
        RestAPI: "tableFieldsInverse",
        GraphQL: "tableFieldsInverse",
        custom: "tableFieldsInverse"
    },
    tableDataInverse: {
        frontend: "tableDataInverse",
        backend: "table_data_Inverse",
        database: "ifk_table_data",
        pretty: "Table Data Inverse",
        component: "TableDataInverse",
        kebab: "table-dataInverse",
        sqlFunctionRef: "p_ifk_table_data",
        RestAPI: "tableDataInverse",
        GraphQL: "tableDataInverse",
        custom: "tableDataInverse"
    }
},
    wcClaim: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    applicantName: {
        frontend: "applicantName",
        backend: "applicant_name",
        database: "applicant_name",
        pretty: "Applicant Name",
        component: "ApplicantName",
        kebab: "applicant-name",
        sqlFunctionRef: "p_applicant_name",
        RestAPI: "applicantName",
        GraphQL: "applicantName",
        custom: "applicantName"
    },
    personId: {
        frontend: "personId",
        backend: "person_id",
        database: "person_id",
        pretty: "Person Id",
        component: "PersonId",
        kebab: "person-id",
        sqlFunctionRef: "p_person_id",
        RestAPI: "personId",
        GraphQL: "personId",
        custom: "personId"
    },
    dateOfBirth: {
        frontend: "dateOfBirth",
        backend: "date_of_birth",
        database: "date_of_birth",
        pretty: "Date Of Birth",
        component: "DateOfBirth",
        kebab: "date-of-birth",
        sqlFunctionRef: "p_date_of_birth",
        RestAPI: "dateOfBirth",
        GraphQL: "dateOfBirth",
        custom: "dateOfBirth"
    },
    dateOfInjury: {
        frontend: "dateOfInjury",
        backend: "date_of_injury",
        database: "date_of_injury",
        pretty: "Date Of Injury",
        component: "DateOfInjury",
        kebab: "date-of-injury",
        sqlFunctionRef: "p_date_of_injury",
        RestAPI: "dateOfInjury",
        GraphQL: "dateOfInjury",
        custom: "dateOfInjury"
    },
    ageAtDoi: {
        frontend: "ageAtDoi",
        backend: "age_at_doi",
        database: "age_at_doi",
        pretty: "Age At Doi",
        component: "AgeAtDoi",
        kebab: "age-at-doi",
        sqlFunctionRef: "p_age_at_doi",
        RestAPI: "ageAtDoi",
        GraphQL: "ageAtDoi",
        custom: "ageAtDoi"
    },
    occupationalCode: {
        frontend: "occupationalCode",
        backend: "occupational_code",
        database: "occupational_code",
        pretty: "Occupational Code",
        component: "OccupationalCode",
        kebab: "occupational-code",
        sqlFunctionRef: "p_occupational_code",
        RestAPI: "occupationalCode",
        GraphQL: "occupationalCode",
        custom: "occupationalCode"
    },
    weeklyEarnings: {
        frontend: "weeklyEarnings",
        backend: "weekly_earnings",
        database: "weekly_earnings",
        pretty: "Weekly Earnings",
        component: "WeeklyEarnings",
        kebab: "weekly-earnings",
        sqlFunctionRef: "p_weekly_earnings",
        RestAPI: "weeklyEarnings",
        GraphQL: "weeklyEarnings",
        custom: "weeklyEarnings"
    },
    wcReportInverse: {
        frontend: "wcReportInverse",
        backend: "wc_report_Inverse",
        database: "ifk_wc_report",
        pretty: "Wc Report Inverse",
        component: "WcReportInverse",
        kebab: "wc-reportInverse",
        sqlFunctionRef: "p_ifk_wc_report",
        RestAPI: "wcReportInverse",
        GraphQL: "wcReportInverse",
        custom: "wcReportInverse"
    }
},
    wcImpairmentDefinition: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    impairmentNumber: {
        frontend: "impairmentNumber",
        backend: "impairment_number",
        database: "impairment_number",
        pretty: "Impairment Number",
        component: "ImpairmentNumber",
        kebab: "impairment-number",
        sqlFunctionRef: "p_impairment_number",
        RestAPI: "impairmentNumber",
        GraphQL: "impairmentNumber",
        custom: "impairmentNumber"
    },
    fecRank: {
        frontend: "fecRank",
        backend: "fec_rank",
        database: "fec_rank",
        pretty: "Fec Rank",
        component: "FecRank",
        kebab: "fec-rank",
        sqlFunctionRef: "p_fec_rank",
        RestAPI: "fecRank",
        GraphQL: "fecRank",
        custom: "fecRank"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    attributes: {
        frontend: "attributes",
        backend: "attributes",
        database: "attributes",
        pretty: "Attributes",
        component: "Attributes",
        kebab: "attributes",
        sqlFunctionRef: "p_attributes",
        RestAPI: "attributes",
        GraphQL: "attributes",
        custom: "attributes"
    },
    fingerType: {
        frontend: "fingerType",
        backend: "finger_type",
        database: "finger_type",
        pretty: "Finger Type",
        component: "FingerType",
        kebab: "finger-type",
        sqlFunctionRef: "p_finger_type",
        RestAPI: "fingerType",
        GraphQL: "fingerType",
        custom: "fingerType"
    },
    wcInjuryInverse: {
        frontend: "wcInjuryInverse",
        backend: "wc_injury_Inverse",
        database: "ifk_wc_injury",
        pretty: "Wc Injury Inverse",
        component: "WcInjuryInverse",
        kebab: "wc-injuryInverse",
        sqlFunctionRef: "p_ifk_wc_injury",
        RestAPI: "wcInjuryInverse",
        GraphQL: "wcInjuryInverse",
        custom: "wcInjuryInverse"
    }
},
    wcInjury: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    reportId: {
        frontend: "reportId",
        backend: "report_id",
        database: "report_id",
        pretty: "Report Id",
        component: "ReportId",
        kebab: "report-id",
        sqlFunctionRef: "p_report_id",
        RestAPI: "reportId",
        GraphQL: "reportId",
        custom: "reportId"
    },
    impairmentDefinitionId: {
        frontend: "impairmentDefinitionId",
        backend: "impairment_definition_id",
        database: "impairment_definition_id",
        pretty: "Impairment Definition Id",
        component: "ImpairmentDefinitionId",
        kebab: "impairment-definition-id",
        sqlFunctionRef: "p_impairment_definition_id",
        RestAPI: "impairmentDefinitionId",
        GraphQL: "impairmentDefinitionId",
        custom: "impairmentDefinitionId"
    },
    digit: {
        frontend: "digit",
        backend: "digit",
        database: "digit",
        pretty: "Digit",
        component: "Digit",
        kebab: "digit",
        sqlFunctionRef: "p_digit",
        RestAPI: "digit",
        GraphQL: "digit",
        custom: "digit"
    },
    le: {
        frontend: "le",
        backend: "le",
        database: "le",
        pretty: "Le",
        component: "Le",
        kebab: "le",
        sqlFunctionRef: "p_le",
        RestAPI: "le",
        GraphQL: "le",
        custom: "le"
    },
    side: {
        frontend: "side",
        backend: "side",
        database: "side",
        pretty: "Side",
        component: "Side",
        kebab: "side",
        sqlFunctionRef: "p_side",
        RestAPI: "side",
        GraphQL: "side",
        custom: "side"
    },
    ue: {
        frontend: "ue",
        backend: "ue",
        database: "ue",
        pretty: "Ue",
        component: "Ue",
        kebab: "ue",
        sqlFunctionRef: "p_ue",
        RestAPI: "ue",
        GraphQL: "ue",
        custom: "ue"
    },
    wpi: {
        frontend: "wpi",
        backend: "wpi",
        database: "wpi",
        pretty: "Wpi",
        component: "Wpi",
        kebab: "wpi",
        sqlFunctionRef: "p_wpi",
        RestAPI: "wpi",
        GraphQL: "wpi",
        custom: "wpi"
    },
    pain: {
        frontend: "pain",
        backend: "pain",
        database: "pain",
        pretty: "Pain",
        component: "Pain",
        kebab: "pain",
        sqlFunctionRef: "p_pain",
        RestAPI: "pain",
        GraphQL: "pain",
        custom: "pain"
    },
    industrial: {
        frontend: "industrial",
        backend: "industrial",
        database: "industrial",
        pretty: "Industrial",
        component: "Industrial",
        kebab: "industrial",
        sqlFunctionRef: "p_industrial",
        RestAPI: "industrial",
        GraphQL: "industrial",
        custom: "industrial"
    },
    rating: {
        frontend: "rating",
        backend: "rating",
        database: "rating",
        pretty: "Rating",
        component: "Rating",
        kebab: "rating",
        sqlFunctionRef: "p_rating",
        RestAPI: "rating",
        GraphQL: "rating",
        custom: "rating"
    },
    formula: {
        frontend: "formula",
        backend: "formula",
        database: "formula",
        pretty: "Formula",
        component: "Formula",
        kebab: "formula",
        sqlFunctionRef: "p_formula",
        RestAPI: "formula",
        GraphQL: "formula",
        custom: "formula"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    wcImpairmentDefinitionReference: {
        frontend: "wcImpairmentDefinitionReference",
        backend: "wc_impairment_definition_reference",
        database: "ref_wc_impairment_definition",
        pretty: "Wc Impairment Definition Reference",
        component: "WcImpairmentDefinitionReference",
        kebab: "wc-impairment-definitionReference",
        sqlFunctionRef: "p_ref_wc_impairment_definition",
        RestAPI: "wcImpairmentDefinitionReference",
        GraphQL: "wcImpairmentDefinitionReference",
        custom: "wcImpairmentDefinitionReference"
    },
    wcReportReference: {
        frontend: "wcReportReference",
        backend: "wc_report_reference",
        database: "ref_wc_report",
        pretty: "Wc Report Reference",
        component: "WcReportReference",
        kebab: "wc-reportReference",
        sqlFunctionRef: "p_ref_wc_report",
        RestAPI: "wcReportReference",
        GraphQL: "wcReportReference",
        custom: "wcReportReference"
    }
},
    wcReport: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    claimId: {
        frontend: "claimId",
        backend: "claim_id",
        database: "claim_id",
        pretty: "Claim Id",
        component: "ClaimId",
        kebab: "claim-id",
        sqlFunctionRef: "p_claim_id",
        RestAPI: "claimId",
        GraphQL: "claimId",
        custom: "claimId"
    },
    finalRating: {
        frontend: "finalRating",
        backend: "final_rating",
        database: "final_rating",
        pretty: "Final Rating",
        component: "FinalRating",
        kebab: "final-rating",
        sqlFunctionRef: "p_final_rating",
        RestAPI: "finalRating",
        GraphQL: "finalRating",
        custom: "finalRating"
    },
    leftSideTotal: {
        frontend: "leftSideTotal",
        backend: "left_side_total",
        database: "left_side_total",
        pretty: "Left Side Total",
        component: "LeftSideTotal",
        kebab: "left-side-total",
        sqlFunctionRef: "p_left_side_total",
        RestAPI: "leftSideTotal",
        GraphQL: "leftSideTotal",
        custom: "leftSideTotal"
    },
    rightSideTotal: {
        frontend: "rightSideTotal",
        backend: "right_side_total",
        database: "right_side_total",
        pretty: "Right Side Total",
        component: "RightSideTotal",
        kebab: "right-side-total",
        sqlFunctionRef: "p_right_side_total",
        RestAPI: "rightSideTotal",
        GraphQL: "rightSideTotal",
        custom: "rightSideTotal"
    },
    defaultSideTotal: {
        frontend: "defaultSideTotal",
        backend: "default_side_total",
        database: "default_side_total",
        pretty: "Default Side Total",
        component: "DefaultSideTotal",
        kebab: "default-side-total",
        sqlFunctionRef: "p_default_side_total",
        RestAPI: "defaultSideTotal",
        GraphQL: "defaultSideTotal",
        custom: "defaultSideTotal"
    },
    compensationAmount: {
        frontend: "compensationAmount",
        backend: "compensation_amount",
        database: "compensation_amount",
        pretty: "Compensation Amount",
        component: "CompensationAmount",
        kebab: "compensation-amount",
        sqlFunctionRef: "p_compensation_amount",
        RestAPI: "compensationAmount",
        GraphQL: "compensationAmount",
        custom: "compensationAmount"
    },
    compensationWeeks: {
        frontend: "compensationWeeks",
        backend: "compensation_weeks",
        database: "compensation_weeks",
        pretty: "Compensation Weeks",
        component: "CompensationWeeks",
        kebab: "compensation-weeks",
        sqlFunctionRef: "p_compensation_weeks",
        RestAPI: "compensationWeeks",
        GraphQL: "compensationWeeks",
        custom: "compensationWeeks"
    },
    compensationDays: {
        frontend: "compensationDays",
        backend: "compensation_days",
        database: "compensation_days",
        pretty: "Compensation Days",
        component: "CompensationDays",
        kebab: "compensation-days",
        sqlFunctionRef: "p_compensation_days",
        RestAPI: "compensationDays",
        GraphQL: "compensationDays",
        custom: "compensationDays"
    },
    wcClaimReference: {
        frontend: "wcClaimReference",
        backend: "wc_claim_reference",
        database: "ref_wc_claim",
        pretty: "Wc Claim Reference",
        component: "WcClaimReference",
        kebab: "wc-claimReference",
        sqlFunctionRef: "p_ref_wc_claim",
        RestAPI: "wcClaimReference",
        GraphQL: "wcClaimReference",
        custom: "wcClaimReference"
    },
    wcInjuryInverse: {
        frontend: "wcInjuryInverse",
        backend: "wc_injury_Inverse",
        database: "ifk_wc_injury",
        pretty: "Wc Injury Inverse",
        component: "WcInjuryInverse",
        kebab: "wc-injuryInverse",
        sqlFunctionRef: "p_ifk_wc_injury",
        RestAPI: "wcInjuryInverse",
        GraphQL: "wcInjuryInverse",
        custom: "wcInjuryInverse"
    }
},
    workflow: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    version: {
        frontend: "version",
        backend: "version",
        database: "version",
        pretty: "Version",
        component: "Version",
        kebab: "version",
        sqlFunctionRef: "p_version",
        RestAPI: "version",
        GraphQL: "version",
        custom: "version"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    publicRead: {
        frontend: "publicRead",
        backend: "public_read",
        database: "public_read",
        pretty: "Public Read",
        component: "PublicRead",
        kebab: "public-read",
        sqlFunctionRef: "p_public_read",
        RestAPI: "publicRead",
        GraphQL: "publicRead",
        custom: "publicRead"
    },
    isActive: {
        frontend: "isActive",
        backend: "is_active",
        database: "is_active",
        pretty: "Is Active",
        component: "IsActive",
        kebab: "is-active",
        sqlFunctionRef: "p_is_active",
        RestAPI: "isActive",
        GraphQL: "isActive",
        custom: "isActive"
    },
    isDeleted: {
        frontend: "isDeleted",
        backend: "is_deleted",
        database: "is_deleted",
        pretty: "Is Deleted",
        component: "IsDeleted",
        kebab: "is-deleted",
        sqlFunctionRef: "p_is_deleted",
        RestAPI: "isDeleted",
        GraphQL: "isDeleted",
        custom: "isDeleted"
    },
    autoExecute: {
        frontend: "autoExecute",
        backend: "auto_execute",
        database: "auto_execute",
        pretty: "Auto Execute",
        component: "AutoExecute",
        kebab: "auto-execute",
        sqlFunctionRef: "p_auto_execute",
        RestAPI: "autoExecute",
        GraphQL: "autoExecute",
        custom: "autoExecute"
    },
    category: {
        frontend: "category",
        backend: "category",
        database: "category",
        pretty: "Category",
        component: "Category",
        kebab: "category",
        sqlFunctionRef: "p_category",
        RestAPI: "category",
        GraphQL: "category",
        custom: "category"
    },
    tags: {
        frontend: "tags",
        backend: "tags",
        database: "tags",
        pretty: "Tags",
        component: "Tags",
        kebab: "tags",
        sqlFunctionRef: "p_tags",
        RestAPI: "tags",
        GraphQL: "tags",
        custom: "tags"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    viewport: {
        frontend: "viewport",
        backend: "viewport",
        database: "viewport",
        pretty: "Viewport",
        component: "Viewport",
        kebab: "viewport",
        sqlFunctionRef: "p_viewport",
        RestAPI: "viewport",
        GraphQL: "viewport",
        custom: "viewport"
    },
    workflowNodeInverse: {
        frontend: "workflowNodeInverse",
        backend: "workflow_node_Inverse",
        database: "ifk_workflow_node",
        pretty: "Workflow Node Inverse",
        component: "WorkflowNodeInverse",
        kebab: "workflow-nodeInverse",
        sqlFunctionRef: "p_ifk_workflow_node",
        RestAPI: "workflowNodeInverse",
        GraphQL: "workflowNodeInverse",
        custom: "workflowNodeInverse"
    },
    workflowEdgeInverse: {
        frontend: "workflowEdgeInverse",
        backend: "workflow_edge_Inverse",
        database: "ifk_workflow_edge",
        pretty: "Workflow Edge Inverse",
        component: "WorkflowEdgeInverse",
        kebab: "workflow-edgeInverse",
        sqlFunctionRef: "p_ifk_workflow_edge",
        RestAPI: "workflowEdgeInverse",
        GraphQL: "workflowEdgeInverse",
        custom: "workflowEdgeInverse"
    },
    workflowRelayInverse: {
        frontend: "workflowRelayInverse",
        backend: "workflow_relay_Inverse",
        database: "ifk_workflow_relay",
        pretty: "Workflow Relay Inverse",
        component: "WorkflowRelayInverse",
        kebab: "workflow-relayInverse",
        sqlFunctionRef: "p_ifk_workflow_relay",
        RestAPI: "workflowRelayInverse",
        GraphQL: "workflowRelayInverse",
        custom: "workflowRelayInverse"
    },
    workflowUserInputInverse: {
        frontend: "workflowUserInputInverse",
        backend: "workflow_user_input_Inverse",
        database: "ifk_workflow_user_input",
        pretty: "Workflow User Input Inverse",
        component: "WorkflowUserInputInverse",
        kebab: "workflow-user-inputInverse",
        sqlFunctionRef: "p_ifk_workflow_user_input",
        RestAPI: "workflowUserInputInverse",
        GraphQL: "workflowUserInputInverse",
        custom: "workflowUserInputInverse"
    }
},
    workflowData: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    name: {
        frontend: "name",
        backend: "name",
        database: "name",
        pretty: "Name",
        component: "Name",
        kebab: "name",
        sqlFunctionRef: "p_name",
        RestAPI: "name",
        GraphQL: "name",
        custom: "name"
    },
    description: {
        frontend: "description",
        backend: "description",
        database: "description",
        pretty: "Description",
        component: "Description",
        kebab: "description",
        sqlFunctionRef: "p_description",
        RestAPI: "description",
        GraphQL: "description",
        custom: "description"
    },
    workflowType: {
        frontend: "workflowType",
        backend: "workflow_type",
        database: "workflow_type",
        pretty: "Workflow Type",
        component: "WorkflowType",
        kebab: "workflow-type",
        sqlFunctionRef: "p_workflow_type",
        RestAPI: "workflowType",
        GraphQL: "workflowType",
        custom: "workflowType"
    },
    inputs: {
        frontend: "inputs",
        backend: "inputs",
        database: "inputs",
        pretty: "Inputs",
        component: "Inputs",
        kebab: "inputs",
        sqlFunctionRef: "p_inputs",
        RestAPI: "inputs",
        GraphQL: "inputs",
        custom: "inputs"
    },
    outputs: {
        frontend: "outputs",
        backend: "outputs",
        database: "outputs",
        pretty: "Outputs",
        component: "Outputs",
        kebab: "outputs",
        sqlFunctionRef: "p_outputs",
        RestAPI: "outputs",
        GraphQL: "outputs",
        custom: "outputs"
    },
    dependencies: {
        frontend: "dependencies",
        backend: "dependencies",
        database: "dependencies",
        pretty: "Dependencies",
        component: "Dependencies",
        kebab: "dependencies",
        sqlFunctionRef: "p_dependencies",
        RestAPI: "dependencies",
        GraphQL: "dependencies",
        custom: "dependencies"
    },
    sources: {
        frontend: "sources",
        backend: "sources",
        database: "sources",
        pretty: "Sources",
        component: "Sources",
        kebab: "sources",
        sqlFunctionRef: "p_sources",
        RestAPI: "sources",
        GraphQL: "sources",
        custom: "sources"
    },
    destinations: {
        frontend: "destinations",
        backend: "destinations",
        database: "destinations",
        pretty: "Destinations",
        component: "Destinations",
        kebab: "destinations",
        sqlFunctionRef: "p_destinations",
        RestAPI: "destinations",
        GraphQL: "destinations",
        custom: "destinations"
    },
    actions: {
        frontend: "actions",
        backend: "actions",
        database: "actions",
        pretty: "Actions",
        component: "Actions",
        kebab: "actions",
        sqlFunctionRef: "p_actions",
        RestAPI: "actions",
        GraphQL: "actions",
        custom: "actions"
    },
    category: {
        frontend: "category",
        backend: "category",
        database: "category",
        pretty: "Category",
        component: "Category",
        kebab: "category",
        sqlFunctionRef: "p_category",
        RestAPI: "category",
        GraphQL: "category",
        custom: "category"
    },
    tags: {
        frontend: "tags",
        backend: "tags",
        database: "tags",
        pretty: "Tags",
        component: "Tags",
        kebab: "tags",
        sqlFunctionRef: "p_tags",
        RestAPI: "tags",
        GraphQL: "tags",
        custom: "tags"
    },
    isActive: {
        frontend: "isActive",
        backend: "is_active",
        database: "is_active",
        pretty: "Is Active",
        component: "IsActive",
        kebab: "is-active",
        sqlFunctionRef: "p_is_active",
        RestAPI: "isActive",
        GraphQL: "isActive",
        custom: "isActive"
    },
    isDeleted: {
        frontend: "isDeleted",
        backend: "is_deleted",
        database: "is_deleted",
        pretty: "Is Deleted",
        component: "IsDeleted",
        kebab: "is-deleted",
        sqlFunctionRef: "p_is_deleted",
        RestAPI: "isDeleted",
        GraphQL: "isDeleted",
        custom: "isDeleted"
    },
    autoExecute: {
        frontend: "autoExecute",
        backend: "auto_execute",
        database: "auto_execute",
        pretty: "Auto Execute",
        component: "AutoExecute",
        kebab: "auto-execute",
        sqlFunctionRef: "p_auto_execute",
        RestAPI: "autoExecute",
        GraphQL: "autoExecute",
        custom: "autoExecute"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    viewport: {
        frontend: "viewport",
        backend: "viewport",
        database: "viewport",
        pretty: "Viewport",
        component: "Viewport",
        kebab: "viewport",
        sqlFunctionRef: "p_viewport",
        RestAPI: "viewport",
        GraphQL: "viewport",
        custom: "viewport"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    version: {
        frontend: "version",
        backend: "version",
        database: "version",
        pretty: "Version",
        component: "Version",
        kebab: "version",
        sqlFunctionRef: "p_version",
        RestAPI: "version",
        GraphQL: "version",
        custom: "version"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    publicRead: {
        frontend: "publicRead",
        backend: "public_read",
        database: "public_read",
        pretty: "Public Read",
        component: "PublicRead",
        kebab: "public-read",
        sqlFunctionRef: "p_public_read",
        RestAPI: "publicRead",
        GraphQL: "publicRead",
        custom: "publicRead"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    workflowNodeDataInverse: {
        frontend: "workflowNodeDataInverse",
        backend: "workflow_node_data_Inverse",
        database: "ifk_workflow_node_data",
        pretty: "Workflow Node Data Inverse",
        component: "WorkflowNodeDataInverse",
        kebab: "workflow-node-dataInverse",
        sqlFunctionRef: "p_ifk_workflow_node_data",
        RestAPI: "workflowNodeDataInverse",
        GraphQL: "workflowNodeDataInverse",
        custom: "workflowNodeDataInverse"
    }
},
    workflowEdge: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    workflowId: {
        frontend: "workflowId",
        backend: "workflow_id",
        database: "workflow_id",
        pretty: "Workflow Id",
        component: "WorkflowId",
        kebab: "workflow-id",
        sqlFunctionRef: "p_workflow_id",
        RestAPI: "workflowId",
        GraphQL: "workflowId",
        custom: "workflowId"
    },
    sourceNodeId: {
        frontend: "sourceNodeId",
        backend: "source_node_id",
        database: "source_node_id",
        pretty: "Source Node Id",
        component: "SourceNodeId",
        kebab: "source-node-id",
        sqlFunctionRef: "p_source_node_id",
        RestAPI: "sourceNodeId",
        GraphQL: "sourceNodeId",
        custom: "sourceNodeId"
    },
    targetNodeId: {
        frontend: "targetNodeId",
        backend: "target_node_id",
        database: "target_node_id",
        pretty: "Target Node Id",
        component: "TargetNodeId",
        kebab: "target-node-id",
        sqlFunctionRef: "p_target_node_id",
        RestAPI: "targetNodeId",
        GraphQL: "targetNodeId",
        custom: "targetNodeId"
    },
    sourceHandle: {
        frontend: "sourceHandle",
        backend: "source_handle",
        database: "source_handle",
        pretty: "Source Handle",
        component: "SourceHandle",
        kebab: "source-handle",
        sqlFunctionRef: "p_source_handle",
        RestAPI: "sourceHandle",
        GraphQL: "sourceHandle",
        custom: "sourceHandle"
    },
    targetHandle: {
        frontend: "targetHandle",
        backend: "target_handle",
        database: "target_handle",
        pretty: "Target Handle",
        component: "TargetHandle",
        kebab: "target-handle",
        sqlFunctionRef: "p_target_handle",
        RestAPI: "targetHandle",
        GraphQL: "targetHandle",
        custom: "targetHandle"
    },
    edgeType: {
        frontend: "edgeType",
        backend: "edge_type",
        database: "edge_type",
        pretty: "Edge Type",
        component: "EdgeType",
        kebab: "edge-type",
        sqlFunctionRef: "p_edge_type",
        RestAPI: "edgeType",
        GraphQL: "edgeType",
        custom: "edgeType"
    },
    animated: {
        frontend: "animated",
        backend: "animated",
        database: "animated",
        pretty: "Animated",
        component: "Animated",
        kebab: "animated",
        sqlFunctionRef: "p_animated",
        RestAPI: "animated",
        GraphQL: "animated",
        custom: "animated"
    },
    style: {
        frontend: "style",
        backend: "style",
        database: "style",
        pretty: "Style",
        component: "Style",
        kebab: "style",
        sqlFunctionRef: "p_style",
        RestAPI: "style",
        GraphQL: "style",
        custom: "style"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    workflowReference: {
        frontend: "workflowReference",
        backend: "workflow_reference",
        database: "ref_workflow",
        pretty: "Workflow Reference",
        component: "WorkflowReference",
        kebab: "workflowReference",
        sqlFunctionRef: "p_ref_workflow",
        RestAPI: "workflowReference",
        GraphQL: "workflowReference",
        custom: "workflowReference"
    }
},
    workflowNode: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    workflowId: {
        frontend: "workflowId",
        backend: "workflow_id",
        database: "workflow_id",
        pretty: "Workflow Id",
        component: "WorkflowId",
        kebab: "workflow-id",
        sqlFunctionRef: "p_workflow_id",
        RestAPI: "workflowId",
        GraphQL: "workflowId",
        custom: "workflowId"
    },
    functionId: {
        frontend: "functionId",
        backend: "function_id",
        database: "function_id",
        pretty: "Function Id",
        component: "FunctionId",
        kebab: "function-id",
        sqlFunctionRef: "p_function_id",
        RestAPI: "functionId",
        GraphQL: "functionId",
        custom: "functionId"
    },
    functionType: {
        frontend: "functionType",
        backend: "function_type",
        database: "function_type",
        pretty: "Function Type",
        component: "FunctionType",
        kebab: "function-type",
        sqlFunctionRef: "p_function_type",
        RestAPI: "functionType",
        GraphQL: "functionType",
        custom: "functionType"
    },
    stepName: {
        frontend: "stepName",
        backend: "step_name",
        database: "step_name",
        pretty: "Step Name",
        component: "StepName",
        kebab: "step-name",
        sqlFunctionRef: "p_step_name",
        RestAPI: "stepName",
        GraphQL: "stepName",
        custom: "stepName"
    },
    nodeType: {
        frontend: "nodeType",
        backend: "node_type",
        database: "node_type",
        pretty: "Node Type",
        component: "NodeType",
        kebab: "node-type",
        sqlFunctionRef: "p_node_type",
        RestAPI: "nodeType",
        GraphQL: "nodeType",
        custom: "nodeType"
    },
    executionRequired: {
        frontend: "executionRequired",
        backend: "execution_required",
        database: "execution_required",
        pretty: "Execution Required",
        component: "ExecutionRequired",
        kebab: "execution-required",
        sqlFunctionRef: "p_execution_required",
        RestAPI: "executionRequired",
        GraphQL: "executionRequired",
        custom: "executionRequired"
    },
    additionalDependencies: {
        frontend: "additionalDependencies",
        backend: "additional_dependencies",
        database: "additional_dependencies",
        pretty: "Additional Dependencies",
        component: "AdditionalDependencies",
        kebab: "additional-dependencies",
        sqlFunctionRef: "p_additional_dependencies",
        RestAPI: "additionalDependencies",
        GraphQL: "additionalDependencies",
        custom: "additionalDependencies"
    },
    argMapping: {
        frontend: "argMapping",
        backend: "arg_mapping",
        database: "arg_mapping",
        pretty: "Arg Mapping",
        component: "ArgMapping",
        kebab: "arg-mapping",
        sqlFunctionRef: "p_arg_mapping",
        RestAPI: "argMapping",
        GraphQL: "argMapping",
        custom: "argMapping"
    },
    returnBrokerOverrides: {
        frontend: "returnBrokerOverrides",
        backend: "return_broker_overrides",
        database: "return_broker_overrides",
        pretty: "Return Broker Overrides",
        component: "ReturnBrokerOverrides",
        kebab: "return-broker-overrides",
        sqlFunctionRef: "p_return_broker_overrides",
        RestAPI: "returnBrokerOverrides",
        GraphQL: "returnBrokerOverrides",
        custom: "returnBrokerOverrides"
    },
    argOverrides: {
        frontend: "argOverrides",
        backend: "arg_overrides",
        database: "arg_overrides",
        pretty: "Arg Overrides",
        component: "ArgOverrides",
        kebab: "arg-overrides",
        sqlFunctionRef: "p_arg_overrides",
        RestAPI: "argOverrides",
        GraphQL: "argOverrides",
        custom: "argOverrides"
    },
    status: {
        frontend: "status",
        backend: "status",
        database: "status",
        pretty: "Status",
        component: "Status",
        kebab: "status",
        sqlFunctionRef: "p_status",
        RestAPI: "status",
        GraphQL: "status",
        custom: "status"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    publicRead: {
        frontend: "publicRead",
        backend: "public_read",
        database: "public_read",
        pretty: "Public Read",
        component: "PublicRead",
        kebab: "public-read",
        sqlFunctionRef: "p_public_read",
        RestAPI: "publicRead",
        GraphQL: "publicRead",
        custom: "publicRead"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    uiNodeData: {
        frontend: "uiNodeData",
        backend: "ui_node_data",
        database: "ui_node_data",
        pretty: "Ui Node Data",
        component: "UiNodeData",
        kebab: "ui-node-data",
        sqlFunctionRef: "p_ui_node_data",
        RestAPI: "uiNodeData",
        GraphQL: "uiNodeData",
        custom: "uiNodeData"
    },
    registeredFunctionReference: {
        frontend: "registeredFunctionReference",
        backend: "registered_function_reference",
        database: "ref_registered_function",
        pretty: "Registered Function Reference",
        component: "RegisteredFunctionReference",
        kebab: "registered-functionReference",
        sqlFunctionRef: "p_ref_registered_function",
        RestAPI: "registeredFunctionReference",
        GraphQL: "registeredFunctionReference",
        custom: "registeredFunctionReference"
    },
    workflowReference: {
        frontend: "workflowReference",
        backend: "workflow_reference",
        database: "ref_workflow",
        pretty: "Workflow Reference",
        component: "WorkflowReference",
        kebab: "workflowReference",
        sqlFunctionRef: "p_ref_workflow",
        RestAPI: "workflowReference",
        GraphQL: "workflowReference",
        custom: "workflowReference"
    }
},
    workflowNodeData: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    workflowId: {
        frontend: "workflowId",
        backend: "workflow_id",
        database: "workflow_id",
        pretty: "Workflow Id",
        component: "WorkflowId",
        kebab: "workflow-id",
        sqlFunctionRef: "p_workflow_id",
        RestAPI: "workflowId",
        GraphQL: "workflowId",
        custom: "workflowId"
    },
    functionId: {
        frontend: "functionId",
        backend: "function_id",
        database: "function_id",
        pretty: "Function Id",
        component: "FunctionId",
        kebab: "function-id",
        sqlFunctionRef: "p_function_id",
        RestAPI: "functionId",
        GraphQL: "functionId",
        custom: "functionId"
    },
    type: {
        frontend: "type",
        backend: "type",
        database: "type",
        pretty: "Type",
        component: "Type",
        kebab: "type",
        sqlFunctionRef: "p_type",
        RestAPI: "type",
        GraphQL: "type",
        custom: "type"
    },
    stepName: {
        frontend: "stepName",
        backend: "step_name",
        database: "step_name",
        pretty: "Step Name",
        component: "StepName",
        kebab: "step-name",
        sqlFunctionRef: "p_step_name",
        RestAPI: "stepName",
        GraphQL: "stepName",
        custom: "stepName"
    },
    nodeType: {
        frontend: "nodeType",
        backend: "node_type",
        database: "node_type",
        pretty: "Node Type",
        component: "NodeType",
        kebab: "node-type",
        sqlFunctionRef: "p_node_type",
        RestAPI: "nodeType",
        GraphQL: "nodeType",
        custom: "nodeType"
    },
    executionRequired: {
        frontend: "executionRequired",
        backend: "execution_required",
        database: "execution_required",
        pretty: "Execution Required",
        component: "ExecutionRequired",
        kebab: "execution-required",
        sqlFunctionRef: "p_execution_required",
        RestAPI: "executionRequired",
        GraphQL: "executionRequired",
        custom: "executionRequired"
    },
    inputs: {
        frontend: "inputs",
        backend: "inputs",
        database: "inputs",
        pretty: "Inputs",
        component: "Inputs",
        kebab: "inputs",
        sqlFunctionRef: "p_inputs",
        RestAPI: "inputs",
        GraphQL: "inputs",
        custom: "inputs"
    },
    outputs: {
        frontend: "outputs",
        backend: "outputs",
        database: "outputs",
        pretty: "Outputs",
        component: "Outputs",
        kebab: "outputs",
        sqlFunctionRef: "p_outputs",
        RestAPI: "outputs",
        GraphQL: "outputs",
        custom: "outputs"
    },
    dependencies: {
        frontend: "dependencies",
        backend: "dependencies",
        database: "dependencies",
        pretty: "Dependencies",
        component: "Dependencies",
        kebab: "dependencies",
        sqlFunctionRef: "p_dependencies",
        RestAPI: "dependencies",
        GraphQL: "dependencies",
        custom: "dependencies"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    uiData: {
        frontend: "uiData",
        backend: "ui_data",
        database: "ui_data",
        pretty: "Ui Data",
        component: "UiData",
        kebab: "ui-data",
        sqlFunctionRef: "p_ui_data",
        RestAPI: "uiData",
        GraphQL: "uiData",
        custom: "uiData"
    },
    isPublic: {
        frontend: "isPublic",
        backend: "is_public",
        database: "is_public",
        pretty: "Is Public",
        component: "IsPublic",
        kebab: "is-public",
        sqlFunctionRef: "p_is_public",
        RestAPI: "isPublic",
        GraphQL: "isPublic",
        custom: "isPublic"
    },
    authenticatedRead: {
        frontend: "authenticatedRead",
        backend: "authenticated_read",
        database: "authenticated_read",
        pretty: "Authenticated Read",
        component: "AuthenticatedRead",
        kebab: "authenticated-read",
        sqlFunctionRef: "p_authenticated_read",
        RestAPI: "authenticatedRead",
        GraphQL: "authenticatedRead",
        custom: "authenticatedRead"
    },
    publicRead: {
        frontend: "publicRead",
        backend: "public_read",
        database: "public_read",
        pretty: "Public Read",
        component: "PublicRead",
        kebab: "public-read",
        sqlFunctionRef: "p_public_read",
        RestAPI: "publicRead",
        GraphQL: "publicRead",
        custom: "publicRead"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    registeredFunctionReference: {
        frontend: "registeredFunctionReference",
        backend: "registered_function_reference",
        database: "ref_registered_function",
        pretty: "Registered Function Reference",
        component: "RegisteredFunctionReference",
        kebab: "registered-functionReference",
        sqlFunctionRef: "p_ref_registered_function",
        RestAPI: "registeredFunctionReference",
        GraphQL: "registeredFunctionReference",
        custom: "registeredFunctionReference"
    },
    workflowDataReference: {
        frontend: "workflowDataReference",
        backend: "workflow_data_reference",
        database: "ref_workflow_data",
        pretty: "Workflow Data Reference",
        component: "WorkflowDataReference",
        kebab: "workflow-dataReference",
        sqlFunctionRef: "p_ref_workflow_data",
        RestAPI: "workflowDataReference",
        GraphQL: "workflowDataReference",
        custom: "workflowDataReference"
    }
},
    workflowRelay: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    workflowId: {
        frontend: "workflowId",
        backend: "workflow_id",
        database: "workflow_id",
        pretty: "Workflow Id",
        component: "WorkflowId",
        kebab: "workflow-id",
        sqlFunctionRef: "p_workflow_id",
        RestAPI: "workflowId",
        GraphQL: "workflowId",
        custom: "workflowId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    sourceBrokerId: {
        frontend: "sourceBrokerId",
        backend: "source_broker_id",
        database: "source_broker_id",
        pretty: "Source Broker Id",
        component: "SourceBrokerId",
        kebab: "source-broker-id",
        sqlFunctionRef: "p_source_broker_id",
        RestAPI: "sourceBrokerId",
        GraphQL: "sourceBrokerId",
        custom: "sourceBrokerId"
    },
    label: {
        frontend: "label",
        backend: "label",
        database: "label",
        pretty: "Label",
        component: "Label",
        kebab: "label",
        sqlFunctionRef: "p_label",
        RestAPI: "label",
        GraphQL: "label",
        custom: "label"
    },
    targetBrokerIds: {
        frontend: "targetBrokerIds",
        backend: "target_broker_ids",
        database: "target_broker_ids",
        pretty: "Target Broker Ids",
        component: "TargetBrokerIds",
        kebab: "target-broker-ids",
        sqlFunctionRef: "p_target_broker_ids",
        RestAPI: "targetBrokerIds",
        GraphQL: "targetBrokerIds",
        custom: "targetBrokerIds"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    uiNodeData: {
        frontend: "uiNodeData",
        backend: "ui_node_data",
        database: "ui_node_data",
        pretty: "Ui Node Data",
        component: "UiNodeData",
        kebab: "ui-node-data",
        sqlFunctionRef: "p_ui_node_data",
        RestAPI: "uiNodeData",
        GraphQL: "uiNodeData",
        custom: "uiNodeData"
    },
    workflowReference: {
        frontend: "workflowReference",
        backend: "workflow_reference",
        database: "ref_workflow",
        pretty: "Workflow Reference",
        component: "WorkflowReference",
        kebab: "workflowReference",
        sqlFunctionRef: "p_ref_workflow",
        RestAPI: "workflowReference",
        GraphQL: "workflowReference",
        custom: "workflowReference"
    }
},
    workflowUserInput: {
    id: {
        frontend: "id",
        backend: "id",
        database: "id",
        pretty: "Id",
        component: "Id",
        kebab: "id",
        sqlFunctionRef: "p_id",
        RestAPI: "id",
        GraphQL: "id",
        custom: "id"
    },
    createdAt: {
        frontend: "createdAt",
        backend: "created_at",
        database: "created_at",
        pretty: "Created At",
        component: "CreatedAt",
        kebab: "created-at",
        sqlFunctionRef: "p_created_at",
        RestAPI: "createdAt",
        GraphQL: "createdAt",
        custom: "createdAt"
    },
    updatedAt: {
        frontend: "updatedAt",
        backend: "updated_at",
        database: "updated_at",
        pretty: "Updated At",
        component: "UpdatedAt",
        kebab: "updated-at",
        sqlFunctionRef: "p_updated_at",
        RestAPI: "updatedAt",
        GraphQL: "updatedAt",
        custom: "updatedAt"
    },
    workflowId: {
        frontend: "workflowId",
        backend: "workflow_id",
        database: "workflow_id",
        pretty: "Workflow Id",
        component: "WorkflowId",
        kebab: "workflow-id",
        sqlFunctionRef: "p_workflow_id",
        RestAPI: "workflowId",
        GraphQL: "workflowId",
        custom: "workflowId"
    },
    userId: {
        frontend: "userId",
        backend: "user_id",
        database: "user_id",
        pretty: "User Id",
        component: "UserId",
        kebab: "user-id",
        sqlFunctionRef: "p_user_id",
        RestAPI: "userId",
        GraphQL: "userId",
        custom: "userId"
    },
    fieldComponentId: {
        frontend: "fieldComponentId",
        backend: "field_component_id",
        database: "field_component_id",
        pretty: "Field Component Id",
        component: "FieldComponentId",
        kebab: "field-component-id",
        sqlFunctionRef: "p_field_component_id",
        RestAPI: "fieldComponentId",
        GraphQL: "fieldComponentId",
        custom: "fieldComponentId"
    },
    brokerId: {
        frontend: "brokerId",
        backend: "broker_id",
        database: "broker_id",
        pretty: "Broker Id",
        component: "BrokerId",
        kebab: "broker-id",
        sqlFunctionRef: "p_broker_id",
        RestAPI: "brokerId",
        GraphQL: "brokerId",
        custom: "brokerId"
    },
    label: {
        frontend: "label",
        backend: "label",
        database: "label",
        pretty: "Label",
        component: "Label",
        kebab: "label",
        sqlFunctionRef: "p_label",
        RestAPI: "label",
        GraphQL: "label",
        custom: "label"
    },
    dataType: {
        frontend: "dataType",
        backend: "data_type",
        database: "data_type",
        pretty: "Data Type",
        component: "DataType",
        kebab: "data-type",
        sqlFunctionRef: "p_data_type",
        RestAPI: "dataType",
        GraphQL: "dataType",
        custom: "dataType"
    },
    defaultValue: {
        frontend: "defaultValue",
        backend: "default_value",
        database: "default_value",
        pretty: "Default Value",
        component: "DefaultValue",
        kebab: "default-value",
        sqlFunctionRef: "p_default_value",
        RestAPI: "defaultValue",
        GraphQL: "defaultValue",
        custom: "defaultValue"
    },
    isRequired: {
        frontend: "isRequired",
        backend: "is_required",
        database: "is_required",
        pretty: "Is Required",
        component: "IsRequired",
        kebab: "is-required",
        sqlFunctionRef: "p_is_required",
        RestAPI: "isRequired",
        GraphQL: "isRequired",
        custom: "isRequired"
    },
    metadata: {
        frontend: "metadata",
        backend: "metadata",
        database: "metadata",
        pretty: "Metadata",
        component: "Metadata",
        kebab: "metadata",
        sqlFunctionRef: "p_metadata",
        RestAPI: "metadata",
        GraphQL: "metadata",
        custom: "metadata"
    },
    uiNodeData: {
        frontend: "uiNodeData",
        backend: "ui_node_data",
        database: "ui_node_data",
        pretty: "Ui Node Data",
        component: "UiNodeData",
        kebab: "ui-node-data",
        sqlFunctionRef: "p_ui_node_data",
        RestAPI: "uiNodeData",
        GraphQL: "uiNodeData",
        custom: "uiNodeData"
    },
    fieldComponentsReference: {
        frontend: "fieldComponentsReference",
        backend: "field_components_reference",
        database: "ref_field_components",
        pretty: "Field Components Reference",
        component: "FieldComponentsReference",
        kebab: "field-componentsReference",
        sqlFunctionRef: "p_ref_field_components",
        RestAPI: "fieldComponentsReference",
        GraphQL: "fieldComponentsReference",
        custom: "fieldComponentsReference"
    },
    workflowReference: {
        frontend: "workflowReference",
        backend: "workflow_reference",
        database: "ref_workflow",
        pretty: "Workflow Reference",
        component: "WorkflowReference",
        kebab: "workflowReference",
        sqlFunctionRef: "p_ref_workflow",
        RestAPI: "workflowReference",
        GraphQL: "workflowReference",
        custom: "workflowReference"
    }
},
};

export const viewNameLookup: Record<string, string> = {
    p_view_registered_function: "viewRegisteredFunction",
    viewRegisteredFunction: "viewRegisteredFunction",
    "View Registered Function": "viewRegisteredFunction",
    view_registered_function: "viewRegisteredFunction",
    ViewRegisteredFunction: "viewRegisteredFunction",
    "view-registered-function": "viewRegisteredFunction",
    ViewRegisteredFunctionAllRels: "viewRegisteredFunctionAllRels",
    viewRegisteredFunctionAllRels: "viewRegisteredFunctionAllRels",
    "View Registered Function All Rels": "viewRegisteredFunctionAllRels",
    "view-registered-function-all-rels": "viewRegisteredFunctionAllRels",
    p_view_registered_function_all_rels: "viewRegisteredFunctionAllRels",
    view_registered_function_all_rels: "viewRegisteredFunctionAllRels",
};