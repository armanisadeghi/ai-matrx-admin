import { EntityNameToCanonicalMap, FieldNameToCanonicalMap, EntityNameFormatMap, FieldNameFormatMap } from "@/types/entityTypes";

export const entityNameToCanonical: EntityNameToCanonicalMap = {
    p_action: "action",
    action: "action",
    Action: "action",
    AiAgent: "aiAgent",
    "Ai Agent": "aiAgent",
    p_ai_agent: "aiAgent",
    "ai-agent": "aiAgent",
    aiAgent: "aiAgent",
    ai_agent: "aiAgent",
    "Ai Endpoint": "aiEndpoint",
    "ai-endpoint": "aiEndpoint",
    p_ai_endpoint: "aiEndpoint",
    AiEndpoint: "aiEndpoint",
    aiEndpoint: "aiEndpoint",
    ai_endpoint: "aiEndpoint",
    "ai-model": "aiModel",
    AiModel: "aiModel",
    aiModel: "aiModel",
    p_ai_model: "aiModel",
    "Ai Model": "aiModel",
    ai_model: "aiModel",
    AiModelEndpoint: "aiModelEndpoint",
    aiModelEndpoint: "aiModelEndpoint",
    "ai-model-endpoint": "aiModelEndpoint",
    ai_model_endpoint: "aiModelEndpoint",
    p_ai_model_endpoint: "aiModelEndpoint",
    "Ai Model Endpoint": "aiModelEndpoint",
    p_ai_provider: "aiProvider",
    aiProvider: "aiProvider",
    "Ai Provider": "aiProvider",
    ai_provider: "aiProvider",
    "ai-provider": "aiProvider",
    AiProvider: "aiProvider",
    aiSettings: "aiSettings",
    "Ai Settings": "aiSettings",
    AiSettings: "aiSettings",
    p_ai_settings: "aiSettings",
    "ai-settings": "aiSettings",
    ai_settings: "aiSettings",
    applet: "applet",
    Applet: "applet",
    p_applet: "applet",
    arg: "arg",
    Arg: "arg",
    p_arg: "arg",
    audioLabel: "audioLabel",
    "audio-label": "audioLabel",
    "Audio Label": "audioLabel",
    audio_label: "audioLabel",
    p_audio_label: "audioLabel",
    AudioLabel: "audioLabel",
    AudioRecording: "audioRecording",
    p_audio_recording: "audioRecording",
    "Audio Recording": "audioRecording",
    audio_recording: "audioRecording",
    audioRecording: "audioRecording",
    "audio-recording": "audioRecording",
    p_audio_recording_users: "audioRecordingUsers",
    "audio-recording-users": "audioRecordingUsers",
    audio_recording_users: "audioRecordingUsers",
    "Audio Recording Users": "audioRecordingUsers",
    AudioRecordingUsers: "audioRecordingUsers",
    audioRecordingUsers: "audioRecordingUsers",
    automationBoundaryBroker: "automationBoundaryBroker",
    "Automation Boundary Broker": "automationBoundaryBroker",
    automation_boundary_broker: "automationBoundaryBroker",
    "automation-boundary-broker": "automationBoundaryBroker",
    p_automation_boundary_broker: "automationBoundaryBroker",
    AutomationBoundaryBroker: "automationBoundaryBroker",
    "Automation Matrix": "automationMatrix",
    p_automation_matrix: "automationMatrix",
    automation_matrix: "automationMatrix",
    "automation-matrix": "automationMatrix",
    automationMatrix: "automationMatrix",
    AutomationMatrix: "automationMatrix",
    Broker: "broker",
    p_broker: "broker",
    broker: "broker",
    p_broker_value: "brokerValue",
    brokerValue: "brokerValue",
    BrokerValue: "brokerValue",
    "broker-value": "brokerValue",
    broker_value: "brokerValue",
    "Broker Value": "brokerValue",
    "Bucket Structures": "bucketStructures",
    "bucket-structures": "bucketStructures",
    bucketStructures: "bucketStructures",
    BucketStructures: "bucketStructures",
    bucket_structures: "bucketStructures",
    p_bucket_structures: "bucketStructures",
    bucket_tree_structures: "bucketTreeStructures",
    "bucket-tree-structures": "bucketTreeStructures",
    bucketTreeStructures: "bucketTreeStructures",
    "Bucket Tree Structures": "bucketTreeStructures",
    p_bucket_tree_structures: "bucketTreeStructures",
    BucketTreeStructures: "bucketTreeStructures",
    p_category: "category",
    Category: "category",
    category: "category",
    "compiled-recipe": "compiledRecipe",
    p_compiled_recipe: "compiledRecipe",
    "Compiled Recipe": "compiledRecipe",
    compiled_recipe: "compiledRecipe",
    compiledRecipe: "compiledRecipe",
    CompiledRecipe: "compiledRecipe",
    Conversation: "conversation",
    p_conversation: "conversation",
    conversation: "conversation",
    data_broker: "dataBroker",
    DataBroker: "dataBroker",
    "data-broker": "dataBroker",
    dataBroker: "dataBroker",
    "Data Broker": "dataBroker",
    p_data_broker: "dataBroker",
    data_input_component: "dataInputComponent",
    dataInputComponent: "dataInputComponent",
    "data-input-component": "dataInputComponent",
    "Data Input Component": "dataInputComponent",
    p_data_input_component: "dataInputComponent",
    DataInputComponent: "dataInputComponent",
    data_output_component: "dataOutputComponent",
    "data-output-component": "dataOutputComponent",
    dataOutputComponent: "dataOutputComponent",
    "Data Output Component": "dataOutputComponent",
    p_data_output_component: "dataOutputComponent",
    DataOutputComponent: "dataOutputComponent",
    DisplayOption: "displayOption",
    display_option: "displayOption",
    "Display Option": "displayOption",
    p_display_option: "displayOption",
    "display-option": "displayOption",
    displayOption: "displayOption",
    Emails: "emails",
    p_emails: "emails",
    emails: "emails",
    Extractor: "extractor",
    p_extractor: "extractor",
    extractor: "extractor",
    "File Structure": "fileStructure",
    FileStructure: "fileStructure",
    p_file_structure: "fileStructure",
    file_structure: "fileStructure",
    "file-structure": "fileStructure",
    fileStructure: "fileStructure",
    p_flashcard_data: "flashcardData",
    flashcardData: "flashcardData",
    "flashcard-data": "flashcardData",
    "Flashcard Data": "flashcardData",
    FlashcardData: "flashcardData",
    flashcard_data: "flashcardData",
    "Flashcard History": "flashcardHistory",
    flashcard_history: "flashcardHistory",
    flashcardHistory: "flashcardHistory",
    p_flashcard_history: "flashcardHistory",
    FlashcardHistory: "flashcardHistory",
    "flashcard-history": "flashcardHistory",
    FlashcardImages: "flashcardImages",
    p_flashcard_images: "flashcardImages",
    "flashcard-images": "flashcardImages",
    flashcardImages: "flashcardImages",
    flashcard_images: "flashcardImages",
    "Flashcard Images": "flashcardImages",
    p_flashcard_set_relations: "flashcardSetRelations",
    flashcardSetRelations: "flashcardSetRelations",
    FlashcardSetRelations: "flashcardSetRelations",
    flashcard_set_relations: "flashcardSetRelations",
    "flashcard-set-relations": "flashcardSetRelations",
    "Flashcard Set Relations": "flashcardSetRelations",
    flashcardSets: "flashcardSets",
    "flashcard-sets": "flashcardSets",
    FlashcardSets: "flashcardSets",
    flashcard_sets: "flashcardSets",
    p_flashcard_sets: "flashcardSets",
    "Flashcard Sets": "flashcardSets",
    message: "message",
    Message: "message",
    p_message: "message",
    messageBroker: "messageBroker",
    "message-broker": "messageBroker",
    "Message Broker": "messageBroker",
    p_message_broker: "messageBroker",
    MessageBroker: "messageBroker",
    message_broker: "messageBroker",
    messageTemplate: "messageTemplate",
    "message-template": "messageTemplate",
    MessageTemplate: "messageTemplate",
    p_message_template: "messageTemplate",
    "Message Template": "messageTemplate",
    message_template: "messageTemplate",
    Processor: "processor",
    p_processor: "processor",
    processor: "processor",
    "Project Members": "projectMembers",
    p_project_members: "projectMembers",
    "project-members": "projectMembers",
    project_members: "projectMembers",
    projectMembers: "projectMembers",
    ProjectMembers: "projectMembers",
    p_projects: "projects",
    Projects: "projects",
    projects: "projects",
    p_recipe: "recipe",
    Recipe: "recipe",
    recipe: "recipe",
    "Recipe Broker": "recipeBroker",
    "recipe-broker": "recipeBroker",
    p_recipe_broker: "recipeBroker",
    RecipeBroker: "recipeBroker",
    recipe_broker: "recipeBroker",
    recipeBroker: "recipeBroker",
    "recipe-display": "recipeDisplay",
    "Recipe Display": "recipeDisplay",
    recipeDisplay: "recipeDisplay",
    p_recipe_display: "recipeDisplay",
    RecipeDisplay: "recipeDisplay",
    recipe_display: "recipeDisplay",
    p_recipe_function: "recipeFunction",
    "Recipe Function": "recipeFunction",
    RecipeFunction: "recipeFunction",
    "recipe-function": "recipeFunction",
    recipe_function: "recipeFunction",
    recipeFunction: "recipeFunction",
    recipe_message: "recipeMessage",
    RecipeMessage: "recipeMessage",
    "recipe-message": "recipeMessage",
    p_recipe_message: "recipeMessage",
    recipeMessage: "recipeMessage",
    "Recipe Message": "recipeMessage",
    "Recipe Message Reorder Queue": "recipeMessageReorderQueue",
    p_recipe_message_reorder_queue: "recipeMessageReorderQueue",
    "recipe-message-reorder-queue": "recipeMessageReorderQueue",
    recipe_message_reorder_queue: "recipeMessageReorderQueue",
    recipeMessageReorderQueue: "recipeMessageReorderQueue",
    RecipeMessageReorderQueue: "recipeMessageReorderQueue",
    p_recipe_model: "recipeModel",
    RecipeModel: "recipeModel",
    recipeModel: "recipeModel",
    "recipe-model": "recipeModel",
    "Recipe Model": "recipeModel",
    recipe_model: "recipeModel",
    recipeProcessor: "recipeProcessor",
    "Recipe Processor": "recipeProcessor",
    RecipeProcessor: "recipeProcessor",
    p_recipe_processor: "recipeProcessor",
    "recipe-processor": "recipeProcessor",
    recipe_processor: "recipeProcessor",
    "recipe-tool": "recipeTool",
    recipe_tool: "recipeTool",
    RecipeTool: "recipeTool",
    "Recipe Tool": "recipeTool",
    p_recipe_tool: "recipeTool",
    recipeTool: "recipeTool",
    RegisteredFunction: "registeredFunction",
    "Registered Function": "registeredFunction",
    registered_function: "registeredFunction",
    registeredFunction: "registeredFunction",
    "registered-function": "registeredFunction",
    p_registered_function: "registeredFunction",
    p_subcategory: "subcategory",
    subcategory: "subcategory",
    Subcategory: "subcategory",
    p_system_function: "systemFunction",
    SystemFunction: "systemFunction",
    "system-function": "systemFunction",
    system_function: "systemFunction",
    "System Function": "systemFunction",
    systemFunction: "systemFunction",
    p_task_assignments: "taskAssignments",
    "Task Assignments": "taskAssignments",
    TaskAssignments: "taskAssignments",
    task_assignments: "taskAssignments",
    "task-assignments": "taskAssignments",
    taskAssignments: "taskAssignments",
    TaskAttachments: "taskAttachments",
    p_task_attachments: "taskAttachments",
    taskAttachments: "taskAttachments",
    task_attachments: "taskAttachments",
    "Task Attachments": "taskAttachments",
    "task-attachments": "taskAttachments",
    taskComments: "taskComments",
    task_comments: "taskComments",
    "task-comments": "taskComments",
    "Task Comments": "taskComments",
    TaskComments: "taskComments",
    p_task_comments: "taskComments",
    Tasks: "tasks",
    tasks: "tasks",
    p_tasks: "tasks",
    p_tool: "tool",
    tool: "tool",
    Tool: "tool",
    transformer: "transformer",
    Transformer: "transformer",
    p_transformer: "transformer",
    userPreferences: "userPreferences",
    p_user_preferences: "userPreferences",
    UserPreferences: "userPreferences",
    "User Preferences": "userPreferences",
    "user-preferences": "userPreferences",
    user_preferences: "userPreferences",
    p_wc_claim: "wcClaim",
    "Wc Claim": "wcClaim",
    wcClaim: "wcClaim",
    WcClaim: "wcClaim",
    "wc-claim": "wcClaim",
    wc_claim: "wcClaim",
    WcImpairmentDefinition: "wcImpairmentDefinition",
    "wc-impairment-definition": "wcImpairmentDefinition",
    p_wc_impairment_definition: "wcImpairmentDefinition",
    wc_impairment_definition: "wcImpairmentDefinition",
    "Wc Impairment Definition": "wcImpairmentDefinition",
    wcImpairmentDefinition: "wcImpairmentDefinition",
    wcInjury: "wcInjury",
    p_wc_injury: "wcInjury",
    "Wc Injury": "wcInjury",
    WcInjury: "wcInjury",
    wc_injury: "wcInjury",
    "wc-injury": "wcInjury",
    "wc-report": "wcReport",
    p_wc_report: "wcReport",
    WcReport: "wcReport",
    wcReport: "wcReport",
    wc_report: "wcReport",
    "Wc Report": "wcReport",
};

export const fieldNameToCanonical: FieldNameToCanonicalMap = {
    action: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        p_matrix: "matrix",
        matrix: "matrix",
        Matrix: "matrix",
        transformer: "transformer",
        Transformer: "transformer",
        p_transformer: "transformer",
        "Node Type": "nodeType",
        "node-type": "nodeType",
        NodeType: "nodeType",
        p_node_type: "nodeType",
        node_type: "nodeType",
        nodeType: "nodeType",
        referenceId: "referenceId",
        ReferenceId: "referenceId",
        p_reference_id: "referenceId",
        "Reference Id": "referenceId",
        reference_id: "referenceId",
        "reference-id": "referenceId",
    },
    aiAgent: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        recipeId: "recipeId",
        "recipe-id": "recipeId",
        "Recipe Id": "recipeId",
        RecipeId: "recipeId",
        p_recipe_id: "recipeId",
        recipe_id: "recipeId",
        "ai-settings-id": "aiSettingsId",
        p_ai_settings_id: "aiSettingsId",
        aiSettingsId: "aiSettingsId",
        "Ai Settings Id": "aiSettingsId",
        ai_settings_id: "aiSettingsId",
        AiSettingsId: "aiSettingsId",
        p_system_message_override: "systemMessageOverride",
        system_message_override: "systemMessageOverride",
        SystemMessageOverride: "systemMessageOverride",
        "system-message-override": "systemMessageOverride",
        "System Message Override": "systemMessageOverride",
        systemMessageOverride: "systemMessageOverride",
    },
    aiEndpoint: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        p_provider: "provider",
        provider: "provider",
        Provider: "provider",
        description: "description",
        p_description: "description",
        Description: "description",
        additional_cost: "additionalCost",
        p_additional_cost: "additionalCost",
        "additional-cost": "additionalCost",
        additionalCost: "additionalCost",
        "Additional Cost": "additionalCost",
        AdditionalCost: "additionalCost",
        "cost-details": "costDetails",
        p_cost_details: "costDetails",
        CostDetails: "costDetails",
        costDetails: "costDetails",
        cost_details: "costDetails",
        "Cost Details": "costDetails",
        params: "params",
        p_params: "params",
        Params: "params",
    },
    aiModel: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        "Common Name": "commonName",
        "common-name": "commonName",
        CommonName: "commonName",
        common_name: "commonName",
        p_common_name: "commonName",
        commonName: "commonName",
        modelClass: "modelClass",
        ModelClass: "modelClass",
        "model-class": "modelClass",
        p_model_class: "modelClass",
        "Model Class": "modelClass",
        model_class: "modelClass",
        p_provider: "provider",
        provider: "provider",
        Provider: "provider",
        endpoints: "endpoints",
        Endpoints: "endpoints",
        p_endpoints: "endpoints",
        "Context Window": "contextWindow",
        "context-window": "contextWindow",
        ContextWindow: "contextWindow",
        contextWindow: "contextWindow",
        p_context_window: "contextWindow",
        context_window: "contextWindow",
        "max-tokens": "maxTokens",
        max_tokens: "maxTokens",
        MaxTokens: "maxTokens",
        maxTokens: "maxTokens",
        p_max_tokens: "maxTokens",
        "Max Tokens": "maxTokens",
        capabilities: "capabilities",
        Capabilities: "capabilities",
        p_capabilities: "capabilities",
        p_controls: "controls",
        controls: "controls",
        Controls: "controls",
        model_provider: "modelProvider",
        "model-provider": "modelProvider",
        modelProvider: "modelProvider",
        ModelProvider: "modelProvider",
        "Model Provider": "modelProvider",
        p_model_provider: "modelProvider",
    },
    aiModelEndpoint: {
        p_id: "id",
        id: "id",
        Id: "id",
        ai_model_id: "aiModelId",
        "ai-model-id": "aiModelId",
        "Ai Model Id": "aiModelId",
        AiModelId: "aiModelId",
        aiModelId: "aiModelId",
        p_ai_model_id: "aiModelId",
        p_ai_endpoint_id: "aiEndpointId",
        ai_endpoint_id: "aiEndpointId",
        aiEndpointId: "aiEndpointId",
        "ai-endpoint-id": "aiEndpointId",
        "Ai Endpoint Id": "aiEndpointId",
        AiEndpointId: "aiEndpointId",
        p_available: "available",
        available: "available",
        Available: "available",
        "endpoint-priority": "endpointPriority",
        p_endpoint_priority: "endpointPriority",
        EndpointPriority: "endpointPriority",
        "Endpoint Priority": "endpointPriority",
        endpoint_priority: "endpointPriority",
        endpointPriority: "endpointPriority",
        p_configuration: "configuration",
        Configuration: "configuration",
        configuration: "configuration",
        Notes: "notes",
        notes: "notes",
        p_notes: "notes",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
    },
    aiProvider: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        companyDescription: "companyDescription",
        p_company_description: "companyDescription",
        "company-description": "companyDescription",
        company_description: "companyDescription",
        "Company Description": "companyDescription",
        CompanyDescription: "companyDescription",
        DocumentationLink: "documentationLink",
        p_documentation_link: "documentationLink",
        documentation_link: "documentationLink",
        "documentation-link": "documentationLink",
        "Documentation Link": "documentationLink",
        documentationLink: "documentationLink",
        ModelsLink: "modelsLink",
        "models-link": "modelsLink",
        "Models Link": "modelsLink",
        models_link: "modelsLink",
        p_models_link: "modelsLink",
        modelsLink: "modelsLink",
    },
    aiSettings: {
        p_id: "id",
        id: "id",
        Id: "id",
        "ai-endpoint": "aiEndpoint",
        "Ai Endpoint": "aiEndpoint",
        p_ai_endpoint: "aiEndpoint",
        AiEndpoint: "aiEndpoint",
        aiEndpoint: "aiEndpoint",
        ai_endpoint: "aiEndpoint",
        p_ai_provider: "aiProvider",
        "ai-provider": "aiProvider",
        aiProvider: "aiProvider",
        "Ai Provider": "aiProvider",
        ai_provider: "aiProvider",
        AiProvider: "aiProvider",
        "ai-model": "aiModel",
        ai_model: "aiModel",
        AiModel: "aiModel",
        aiModel: "aiModel",
        p_ai_model: "aiModel",
        "Ai Model": "aiModel",
        Temperature: "temperature",
        p_temperature: "temperature",
        temperature: "temperature",
        "max-tokens": "maxTokens",
        max_tokens: "maxTokens",
        MaxTokens: "maxTokens",
        maxTokens: "maxTokens",
        p_max_tokens: "maxTokens",
        "Max Tokens": "maxTokens",
        "top-p": "topP",
        top_p: "topP",
        TopP: "topP",
        topP: "topP",
        p_top_p: "topP",
        "Top P": "topP",
        FrequencyPenalty: "frequencyPenalty",
        "frequency-penalty": "frequencyPenalty",
        "Frequency Penalty": "frequencyPenalty",
        frequencyPenalty: "frequencyPenalty",
        p_frequency_penalty: "frequencyPenalty",
        frequency_penalty: "frequencyPenalty",
        "Presence Penalty": "presencePenalty",
        presence_penalty: "presencePenalty",
        p_presence_penalty: "presencePenalty",
        presencePenalty: "presencePenalty",
        PresencePenalty: "presencePenalty",
        "presence-penalty": "presencePenalty",
        p_stream: "stream",
        Stream: "stream",
        stream: "stream",
        ResponseFormat: "responseFormat",
        response_format: "responseFormat",
        "Response Format": "responseFormat",
        responseFormat: "responseFormat",
        p_response_format: "responseFormat",
        "response-format": "responseFormat",
        p_size: "size",
        Size: "size",
        size: "size",
        p_quality: "quality",
        Quality: "quality",
        quality: "quality",
        p_count: "count",
        count: "count",
        Count: "count",
        AudioVoice: "audioVoice",
        audioVoice: "audioVoice",
        p_audio_voice: "audioVoice",
        "Audio Voice": "audioVoice",
        audio_voice: "audioVoice",
        "audio-voice": "audioVoice",
        p_audio_format: "audioFormat",
        "Audio Format": "audioFormat",
        AudioFormat: "audioFormat",
        audioFormat: "audioFormat",
        audio_format: "audioFormat",
        "audio-format": "audioFormat",
        Modalities: "modalities",
        p_modalities: "modalities",
        modalities: "modalities",
        p_tools: "tools",
        Tools: "tools",
        tools: "tools",
        p_preset_name: "presetName",
        "preset-name": "presetName",
        preset_name: "presetName",
        PresetName: "presetName",
        "Preset Name": "presetName",
        presetName: "presetName",
    },
    applet: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        description: "description",
        p_description: "description",
        Description: "description",
        creator: "creator",
        Creator: "creator",
        p_creator: "creator",
        p_type: "type",
        type: "type",
        Type: "type",
        p_compiled_recipe_id: "compiledRecipeId",
        "Compiled Recipe Id": "compiledRecipeId",
        CompiledRecipeId: "compiledRecipeId",
        compiledRecipeId: "compiledRecipeId",
        compiled_recipe_id: "compiledRecipeId",
        "compiled-recipe-id": "compiledRecipeId",
        slug: "slug",
        p_slug: "slug",
        Slug: "slug",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        UserId: "userId",
        userId: "userId",
        "User Id": "userId",
        p_user_id: "userId",
        "user-id": "userId",
        user_id: "userId",
        is_public: "isPublic",
        isPublic: "isPublic",
        "Is Public": "isPublic",
        "is-public": "isPublic",
        p_is_public: "isPublic",
        IsPublic: "isPublic",
        p_data_source_config: "dataSourceConfig",
        "data-source-config": "dataSourceConfig",
        dataSourceConfig: "dataSourceConfig",
        DataSourceConfig: "dataSourceConfig",
        "Data Source Config": "dataSourceConfig",
        data_source_config: "dataSourceConfig",
        resultComponentConfig: "resultComponentConfig",
        ResultComponentConfig: "resultComponentConfig",
        result_component_config: "resultComponentConfig",
        "Result Component Config": "resultComponentConfig",
        "result-component-config": "resultComponentConfig",
        p_result_component_config: "resultComponentConfig",
        "next-step-config": "nextStepConfig",
        next_step_config: "nextStepConfig",
        p_next_step_config: "nextStepConfig",
        NextStepConfig: "nextStepConfig",
        nextStepConfig: "nextStepConfig",
        "Next Step Config": "nextStepConfig",
        "subcategory-id": "subcategoryId",
        subcategoryId: "subcategoryId",
        p_subcategory_id: "subcategoryId",
        "Subcategory Id": "subcategoryId",
        subcategory_id: "subcategoryId",
        SubcategoryId: "subcategoryId",
        CtaText: "ctaText",
        "Cta Text": "ctaText",
        "cta-text": "ctaText",
        ctaText: "ctaText",
        p_cta_text: "ctaText",
        cta_text: "ctaText",
        theme: "theme",
        p_theme: "theme",
        Theme: "theme",
    },
    arg: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        required: "required",
        Required: "required",
        p_required: "required",
        Default: "default",
        p_default: "default",
        default: "default",
        "data-type": "dataType",
        DataType: "dataType",
        data_type: "dataType",
        "Data Type": "dataType",
        p_data_type: "dataType",
        dataType: "dataType",
        p_ready: "ready",
        ready: "ready",
        Ready: "ready",
        RegisteredFunction: "registeredFunction",
        p_registered_function: "registeredFunction",
        "Registered Function": "registeredFunction",
        registered_function: "registeredFunction",
        registeredFunction: "registeredFunction",
        "registered-function": "registeredFunction",
    },
    audioLabel: {
        p_id: "id",
        id: "id",
        Id: "id",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        Name: "name",
        name: "name",
        p_name: "name",
        description: "description",
        p_description: "description",
        Description: "description",
    },
    audioRecording: {
        p_id: "id",
        id: "id",
        Id: "id",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        UserId: "userId",
        userId: "userId",
        "User Id": "userId",
        p_user_id: "userId",
        "user-id": "userId",
        user_id: "userId",
        Name: "name",
        name: "name",
        p_name: "name",
        Label: "label",
        label: "label",
        p_label: "label",
        fileUrl: "fileUrl",
        "File Url": "fileUrl",
        p_file_url: "fileUrl",
        file_url: "fileUrl",
        FileUrl: "fileUrl",
        "file-url": "fileUrl",
        Duration: "duration",
        p_duration: "duration",
        duration: "duration",
        p_local_path: "localPath",
        "local-path": "localPath",
        local_path: "localPath",
        LocalPath: "localPath",
        localPath: "localPath",
        "Local Path": "localPath",
        p_size: "size",
        Size: "size",
        size: "size",
        is_public: "isPublic",
        isPublic: "isPublic",
        "Is Public": "isPublic",
        "is-public": "isPublic",
        p_is_public: "isPublic",
        IsPublic: "isPublic",
    },
    audioRecordingUsers: {
        p_id: "id",
        id: "id",
        Id: "id",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        firstName: "firstName",
        p_first_name: "firstName",
        "First Name": "firstName",
        first_name: "firstName",
        FirstName: "firstName",
        "first-name": "firstName",
        p_last_name: "lastName",
        lastName: "lastName",
        "Last Name": "lastName",
        "last-name": "lastName",
        last_name: "lastName",
        LastName: "lastName",
        email: "email",
        p_email: "email",
        Email: "email",
    },
    automationBoundaryBroker: {
        p_id: "id",
        id: "id",
        Id: "id",
        p_matrix: "matrix",
        matrix: "matrix",
        Matrix: "matrix",
        Broker: "broker",
        p_broker: "broker",
        broker: "broker",
        spark_source: "sparkSource",
        SparkSource: "sparkSource",
        sparkSource: "sparkSource",
        "spark-source": "sparkSource",
        "Spark Source": "sparkSource",
        p_spark_source: "sparkSource",
        p_beacon_destination: "beaconDestination",
        beaconDestination: "beaconDestination",
        BeaconDestination: "beaconDestination",
        "Beacon Destination": "beaconDestination",
        "beacon-destination": "beaconDestination",
        beacon_destination: "beaconDestination",
    },
    automationMatrix: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        description: "description",
        p_description: "description",
        Description: "description",
        "average-seconds": "averageSeconds",
        average_seconds: "averageSeconds",
        "Average Seconds": "averageSeconds",
        averageSeconds: "averageSeconds",
        p_average_seconds: "averageSeconds",
        AverageSeconds: "averageSeconds",
        is_automated: "isAutomated",
        p_is_automated: "isAutomated",
        IsAutomated: "isAutomated",
        "is-automated": "isAutomated",
        "Is Automated": "isAutomated",
        isAutomated: "isAutomated",
        cognitionMatrices: "cognitionMatrices",
        CognitionMatrices: "cognitionMatrices",
        cognition_matrices: "cognitionMatrices",
        p_cognition_matrices: "cognitionMatrices",
        "Cognition Matrices": "cognitionMatrices",
        "cognition-matrices": "cognitionMatrices",
    },
    broker: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        value: "value",
        p_value: "value",
        Value: "value",
        "data-type": "dataType",
        DataType: "dataType",
        data_type: "dataType",
        "Data Type": "dataType",
        p_data_type: "dataType",
        dataType: "dataType",
        p_ready: "ready",
        ready: "ready",
        Ready: "ready",
        "default-source": "defaultSource",
        "Default Source": "defaultSource",
        DefaultSource: "defaultSource",
        default_source: "defaultSource",
        defaultSource: "defaultSource",
        p_default_source: "defaultSource",
        displayName: "displayName",
        display_name: "displayName",
        "Display Name": "displayName",
        DisplayName: "displayName",
        "display-name": "displayName",
        p_display_name: "displayName",
        description: "description",
        p_description: "description",
        Description: "description",
        tooltip: "tooltip",
        Tooltip: "tooltip",
        p_tooltip: "tooltip",
        ValidationRules: "validationRules",
        validation_rules: "validationRules",
        "Validation Rules": "validationRules",
        validationRules: "validationRules",
        "validation-rules": "validationRules",
        p_validation_rules: "validationRules",
        SampleEntries: "sampleEntries",
        sample_entries: "sampleEntries",
        sampleEntries: "sampleEntries",
        "sample-entries": "sampleEntries",
        "Sample Entries": "sampleEntries",
        p_sample_entries: "sampleEntries",
        CustomSourceComponent: "customSourceComponent",
        p_custom_source_component: "customSourceComponent",
        "Custom Source Component": "customSourceComponent",
        customSourceComponent: "customSourceComponent",
        custom_source_component: "customSourceComponent",
        "custom-source-component": "customSourceComponent",
        additional_params: "additionalParams",
        "Additional Params": "additionalParams",
        "additional-params": "additionalParams",
        p_additional_params: "additionalParams",
        additionalParams: "additionalParams",
        AdditionalParams: "additionalParams",
        p_other_source_params: "otherSourceParams",
        other_source_params: "otherSourceParams",
        "other-source-params": "otherSourceParams",
        otherSourceParams: "otherSourceParams",
        OtherSourceParams: "otherSourceParams",
        "Other Source Params": "otherSourceParams",
        defaultDestination: "defaultDestination",
        DefaultDestination: "defaultDestination",
        default_destination: "defaultDestination",
        p_default_destination: "defaultDestination",
        "default-destination": "defaultDestination",
        "Default Destination": "defaultDestination",
        outputComponent: "outputComponent",
        output_component: "outputComponent",
        p_output_component: "outputComponent",
        "output-component": "outputComponent",
        OutputComponent: "outputComponent",
        "Output Component": "outputComponent",
        tags: "tags",
        p_tags: "tags",
        Tags: "tags",
        "String Value": "stringValue",
        p_string_value: "stringValue",
        string_value: "stringValue",
        stringValue: "stringValue",
        "string-value": "stringValue",
        StringValue: "stringValue",
    },
    brokerValue: {
        p_id: "id",
        id: "id",
        Id: "id",
        UserId: "userId",
        userId: "userId",
        "User Id": "userId",
        p_user_id: "userId",
        "user-id": "userId",
        user_id: "userId",
        data_broker: "dataBroker",
        DataBroker: "dataBroker",
        "data-broker": "dataBroker",
        dataBroker: "dataBroker",
        "Data Broker": "dataBroker",
        p_data_broker: "dataBroker",
        data: "data",
        Data: "data",
        p_data: "data",
        p_category: "category",
        Category: "category",
        category: "category",
        "Sub Category": "subCategory",
        SubCategory: "subCategory",
        p_sub_category: "subCategory",
        subCategory: "subCategory",
        "sub-category": "subCategory",
        sub_category: "subCategory",
        tags: "tags",
        p_tags: "tags",
        Tags: "tags",
        comments: "comments",
        p_comments: "comments",
        Comments: "comments",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
    },
    bucketStructures: {
        "bucket-id": "bucketId",
        "Bucket Id": "bucketId",
        bucketId: "bucketId",
        bucket_id: "bucketId",
        p_bucket_id: "bucketId",
        BucketId: "bucketId",
        Structure: "structure",
        p_structure: "structure",
        structure: "structure",
        "last-updated": "lastUpdated",
        lastUpdated: "lastUpdated",
        LastUpdated: "lastUpdated",
        last_updated: "lastUpdated",
        "Last Updated": "lastUpdated",
        p_last_updated: "lastUpdated",
    },
    bucketTreeStructures: {
        "bucket-id": "bucketId",
        "Bucket Id": "bucketId",
        bucketId: "bucketId",
        bucket_id: "bucketId",
        p_bucket_id: "bucketId",
        BucketId: "bucketId",
        "tree-structure": "treeStructure",
        p_tree_structure: "treeStructure",
        tree_structure: "treeStructure",
        "Tree Structure": "treeStructure",
        treeStructure: "treeStructure",
        TreeStructure: "treeStructure",
        "last-updated": "lastUpdated",
        lastUpdated: "lastUpdated",
        LastUpdated: "lastUpdated",
        last_updated: "lastUpdated",
        "Last Updated": "lastUpdated",
        p_last_updated: "lastUpdated",
    },
    category: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        description: "description",
        p_description: "description",
        Description: "description",
        slug: "slug",
        p_slug: "slug",
        Slug: "slug",
        Icon: "icon",
        icon: "icon",
        p_icon: "icon",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
    },
    compiledRecipe: {
        p_id: "id",
        id: "id",
        Id: "id",
        recipeId: "recipeId",
        "recipe-id": "recipeId",
        "Recipe Id": "recipeId",
        RecipeId: "recipeId",
        p_recipe_id: "recipeId",
        recipe_id: "recipeId",
        Version: "version",
        p_version: "version",
        version: "version",
        compiled_recipe: "compiledRecipe",
        "compiled-recipe": "compiledRecipe",
        compiledRecipe: "compiledRecipe",
        CompiledRecipe: "compiledRecipe",
        p_compiled_recipe: "compiledRecipe",
        "Compiled Recipe": "compiledRecipe",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        "updated-at": "updatedAt",
        UpdatedAt: "updatedAt",
        "Updated At": "updatedAt",
        updatedAt: "updatedAt",
        p_updated_at: "updatedAt",
        updated_at: "updatedAt",
        UserId: "userId",
        userId: "userId",
        "User Id": "userId",
        p_user_id: "userId",
        "user-id": "userId",
        user_id: "userId",
        is_public: "isPublic",
        isPublic: "isPublic",
        "Is Public": "isPublic",
        "is-public": "isPublic",
        p_is_public: "isPublic",
        IsPublic: "isPublic",
        authenticated_read: "authenticatedRead",
        "Authenticated Read": "authenticatedRead",
        p_authenticated_read: "authenticatedRead",
        authenticatedRead: "authenticatedRead",
        "authenticated-read": "authenticatedRead",
        AuthenticatedRead: "authenticatedRead",
    },
    conversation: {
        p_id: "id",
        id: "id",
        Id: "id",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        "updated-at": "updatedAt",
        UpdatedAt: "updatedAt",
        "Updated At": "updatedAt",
        updatedAt: "updatedAt",
        p_updated_at: "updatedAt",
        updated_at: "updatedAt",
        UserId: "userId",
        userId: "userId",
        "User Id": "userId",
        p_user_id: "userId",
        "user-id": "userId",
        user_id: "userId",
        metadata: "metadata",
        Metadata: "metadata",
        p_metadata: "metadata",
        Label: "label",
        label: "label",
        p_label: "label",
    },
    dataBroker: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        "data-type": "dataType",
        DataType: "dataType",
        data_type: "dataType",
        "Data Type": "dataType",
        p_data_type: "dataType",
        dataType: "dataType",
        "default-value": "defaultValue",
        defaultValue: "defaultValue",
        p_default_value: "defaultValue",
        DefaultValue: "defaultValue",
        "Default Value": "defaultValue",
        default_value: "defaultValue",
        input_component: "inputComponent",
        "Input Component": "inputComponent",
        "input-component": "inputComponent",
        p_input_component: "inputComponent",
        InputComponent: "inputComponent",
        inputComponent: "inputComponent",
        Color: "color",
        p_color: "color",
        color: "color",
        outputComponent: "outputComponent",
        output_component: "outputComponent",
        p_output_component: "outputComponent",
        "output-component": "outputComponent",
        OutputComponent: "outputComponent",
        "Output Component": "outputComponent",
    },
    dataInputComponent: {
        p_id: "id",
        id: "id",
        Id: "id",
        p_options: "options",
        options: "options",
        Options: "options",
        "include-other": "includeOther",
        "Include Other": "includeOther",
        IncludeOther: "includeOther",
        include_other: "includeOther",
        includeOther: "includeOther",
        p_include_other: "includeOther",
        min: "min",
        Min: "min",
        p_min: "min",
        max: "max",
        p_max: "max",
        Max: "max",
        step: "step",
        Step: "step",
        p_step: "step",
        acceptableFiletypes: "acceptableFiletypes",
        acceptable_filetypes: "acceptableFiletypes",
        p_acceptable_filetypes: "acceptableFiletypes",
        AcceptableFiletypes: "acceptableFiletypes",
        "Acceptable Filetypes": "acceptableFiletypes",
        "acceptable-filetypes": "acceptableFiletypes",
        src: "src",
        Src: "src",
        p_src: "src",
        "Color Overrides": "colorOverrides",
        p_color_overrides: "colorOverrides",
        ColorOverrides: "colorOverrides",
        colorOverrides: "colorOverrides",
        "color-overrides": "colorOverrides",
        color_overrides: "colorOverrides",
        additional_params: "additionalParams",
        "Additional Params": "additionalParams",
        "additional-params": "additionalParams",
        p_additional_params: "additionalParams",
        additionalParams: "additionalParams",
        AdditionalParams: "additionalParams",
        subComponent: "subComponent",
        SubComponent: "subComponent",
        p_sub_component: "subComponent",
        "Sub Component": "subComponent",
        sub_component: "subComponent",
        "sub-component": "subComponent",
        p_component: "component",
        component: "component",
        Component: "component",
        Name: "name",
        name: "name",
        p_name: "name",
        description: "description",
        p_description: "description",
        Description: "description",
        placeholder: "placeholder",
        Placeholder: "placeholder",
        p_placeholder: "placeholder",
        "Container Class Name": "containerClassName",
        "container-class-name": "containerClassName",
        ContainerClassName: "containerClassName",
        p_container_class_name: "containerClassName",
        containerClassName: "containerClassName",
        container_class_name: "containerClassName",
        "Collapsible Class Name": "collapsibleClassName",
        p_collapsible_class_name: "collapsibleClassName",
        collapsible_class_name: "collapsibleClassName",
        collapsibleClassName: "collapsibleClassName",
        CollapsibleClassName: "collapsibleClassName",
        "collapsible-class-name": "collapsibleClassName",
        label_class_name: "labelClassName",
        LabelClassName: "labelClassName",
        "Label Class Name": "labelClassName",
        labelClassName: "labelClassName",
        "label-class-name": "labelClassName",
        p_label_class_name: "labelClassName",
        "description-class-name": "descriptionClassName",
        DescriptionClassName: "descriptionClassName",
        description_class_name: "descriptionClassName",
        p_description_class_name: "descriptionClassName",
        descriptionClassName: "descriptionClassName",
        "Description Class Name": "descriptionClassName",
        component_class_name: "componentClassName",
        "component-class-name": "componentClassName",
        ComponentClassName: "componentClassName",
        "Component Class Name": "componentClassName",
        componentClassName: "componentClassName",
        p_component_class_name: "componentClassName",
        p_size: "size",
        Size: "size",
        size: "size",
        height: "height",
        Height: "height",
        p_height: "height",
        width: "width",
        p_width: "width",
        Width: "width",
        MinHeight: "minHeight",
        "Min Height": "minHeight",
        p_min_height: "minHeight",
        min_height: "minHeight",
        "min-height": "minHeight",
        minHeight: "minHeight",
        p_max_height: "maxHeight",
        max_height: "maxHeight",
        "max-height": "maxHeight",
        MaxHeight: "maxHeight",
        maxHeight: "maxHeight",
        "Max Height": "maxHeight",
        MinWidth: "minWidth",
        min_width: "minWidth",
        "min-width": "minWidth",
        minWidth: "minWidth",
        p_min_width: "minWidth",
        "Min Width": "minWidth",
        "max-width": "maxWidth",
        maxWidth: "maxWidth",
        MaxWidth: "maxWidth",
        max_width: "maxWidth",
        p_max_width: "maxWidth",
        "Max Width": "maxWidth",
        p_orientation: "orientation",
        Orientation: "orientation",
        orientation: "orientation",
    },
    dataOutputComponent: {
        p_id: "id",
        id: "id",
        Id: "id",
        componentType: "componentType",
        "Component Type": "componentType",
        ComponentType: "componentType",
        "component-type": "componentType",
        p_component_type: "componentType",
        component_type: "componentType",
        "ui-component": "uiComponent",
        ui_component: "uiComponent",
        UiComponent: "uiComponent",
        p_ui_component: "uiComponent",
        uiComponent: "uiComponent",
        "Ui Component": "uiComponent",
        props: "props",
        p_props: "props",
        Props: "props",
        additional_params: "additionalParams",
        "Additional Params": "additionalParams",
        "additional-params": "additionalParams",
        p_additional_params: "additionalParams",
        additionalParams: "additionalParams",
        AdditionalParams: "additionalParams",
    },
    displayOption: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        "Default Params": "defaultParams",
        DefaultParams: "defaultParams",
        "default-params": "defaultParams",
        p_default_params: "defaultParams",
        default_params: "defaultParams",
        defaultParams: "defaultParams",
        "customizable-params": "customizableParams",
        customizable_params: "customizableParams",
        "Customizable Params": "customizableParams",
        customizableParams: "customizableParams",
        CustomizableParams: "customizableParams",
        p_customizable_params: "customizableParams",
        additional_params: "additionalParams",
        "Additional Params": "additionalParams",
        "additional-params": "additionalParams",
        p_additional_params: "additionalParams",
        additionalParams: "additionalParams",
        AdditionalParams: "additionalParams",
    },
    emails: {
        p_id: "id",
        id: "id",
        Id: "id",
        Sender: "sender",
        sender: "sender",
        p_sender: "sender",
        recipient: "recipient",
        Recipient: "recipient",
        p_recipient: "recipient",
        Subject: "subject",
        subject: "subject",
        p_subject: "subject",
        p_body: "body",
        Body: "body",
        body: "body",
        p_timestamp: "timestamp",
        Timestamp: "timestamp",
        timestamp: "timestamp",
        isRead: "isRead",
        "Is Read": "isRead",
        p_is_read: "isRead",
        is_read: "isRead",
        "is-read": "isRead",
        IsRead: "isRead",
    },
    extractor: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        p_output_type: "outputType",
        "Output Type": "outputType",
        "output-type": "outputType",
        output_type: "outputType",
        outputType: "outputType",
        OutputType: "outputType",
        defaultIdentifier: "defaultIdentifier",
        DefaultIdentifier: "defaultIdentifier",
        "default-identifier": "defaultIdentifier",
        default_identifier: "defaultIdentifier",
        p_default_identifier: "defaultIdentifier",
        "Default Identifier": "defaultIdentifier",
        default_index: "defaultIndex",
        "Default Index": "defaultIndex",
        DefaultIndex: "defaultIndex",
        p_default_index: "defaultIndex",
        defaultIndex: "defaultIndex",
        "default-index": "defaultIndex",
    },
    fileStructure: {
        p_id: "id",
        id: "id",
        Id: "id",
        "bucket-id": "bucketId",
        "Bucket Id": "bucketId",
        bucketId: "bucketId",
        bucket_id: "bucketId",
        p_bucket_id: "bucketId",
        BucketId: "bucketId",
        Path: "path",
        path: "path",
        p_path: "path",
        is_folder: "isFolder",
        isFolder: "isFolder",
        "is-folder": "isFolder",
        IsFolder: "isFolder",
        "Is Folder": "isFolder",
        p_is_folder: "isFolder",
        "file-id": "fileId",
        p_file_id: "fileId",
        file_id: "fileId",
        FileId: "fileId",
        "File Id": "fileId",
        fileId: "fileId",
        p_parent_path: "parentPath",
        "parent-path": "parentPath",
        parent_path: "parentPath",
        parentPath: "parentPath",
        ParentPath: "parentPath",
        "Parent Path": "parentPath",
        Name: "name",
        name: "name",
        p_name: "name",
        metadata: "metadata",
        Metadata: "metadata",
        p_metadata: "metadata",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        "updated-at": "updatedAt",
        UpdatedAt: "updatedAt",
        "Updated At": "updatedAt",
        updatedAt: "updatedAt",
        p_updated_at: "updatedAt",
        updated_at: "updatedAt",
    },
    flashcardData: {
        p_id: "id",
        id: "id",
        Id: "id",
        UserId: "userId",
        userId: "userId",
        "User Id": "userId",
        p_user_id: "userId",
        "user-id": "userId",
        user_id: "userId",
        Topic: "topic",
        topic: "topic",
        p_topic: "topic",
        lesson: "lesson",
        Lesson: "lesson",
        p_lesson: "lesson",
        difficulty: "difficulty",
        Difficulty: "difficulty",
        p_difficulty: "difficulty",
        p_front: "front",
        Front: "front",
        front: "front",
        Back: "back",
        p_back: "back",
        back: "back",
        example: "example",
        Example: "example",
        p_example: "example",
        "Detailed Explanation": "detailedExplanation",
        "detailed-explanation": "detailedExplanation",
        detailed_explanation: "detailedExplanation",
        DetailedExplanation: "detailedExplanation",
        p_detailed_explanation: "detailedExplanation",
        detailedExplanation: "detailedExplanation",
        "audio-explanation": "audioExplanation",
        audioExplanation: "audioExplanation",
        p_audio_explanation: "audioExplanation",
        "Audio Explanation": "audioExplanation",
        AudioExplanation: "audioExplanation",
        audio_explanation: "audioExplanation",
        "Personal Notes": "personalNotes",
        "personal-notes": "personalNotes",
        p_personal_notes: "personalNotes",
        PersonalNotes: "personalNotes",
        personal_notes: "personalNotes",
        personalNotes: "personalNotes",
        IsDeleted: "isDeleted",
        isDeleted: "isDeleted",
        p_is_deleted: "isDeleted",
        "is-deleted": "isDeleted",
        is_deleted: "isDeleted",
        "Is Deleted": "isDeleted",
        public: "public",
        p_public: "public",
        Public: "public",
        "shared-with": "sharedWith",
        p_shared_with: "sharedWith",
        shared_with: "sharedWith",
        SharedWith: "sharedWith",
        "Shared With": "sharedWith",
        sharedWith: "sharedWith",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        "updated-at": "updatedAt",
        UpdatedAt: "updatedAt",
        "Updated At": "updatedAt",
        updatedAt: "updatedAt",
        p_updated_at: "updatedAt",
        updated_at: "updatedAt",
    },
    flashcardHistory: {
        p_id: "id",
        id: "id",
        Id: "id",
        flashcard_id: "flashcardId",
        "Flashcard Id": "flashcardId",
        FlashcardId: "flashcardId",
        "flashcard-id": "flashcardId",
        flashcardId: "flashcardId",
        p_flashcard_id: "flashcardId",
        UserId: "userId",
        userId: "userId",
        "User Id": "userId",
        p_user_id: "userId",
        "user-id": "userId",
        user_id: "userId",
        "Review Count": "reviewCount",
        p_review_count: "reviewCount",
        ReviewCount: "reviewCount",
        reviewCount: "reviewCount",
        review_count: "reviewCount",
        "review-count": "reviewCount",
        CorrectCount: "correctCount",
        correct_count: "correctCount",
        "correct-count": "correctCount",
        correctCount: "correctCount",
        p_correct_count: "correctCount",
        "Correct Count": "correctCount",
        "Incorrect Count": "incorrectCount",
        incorrectCount: "incorrectCount",
        "incorrect-count": "incorrectCount",
        p_incorrect_count: "incorrectCount",
        incorrect_count: "incorrectCount",
        IncorrectCount: "incorrectCount",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        "updated-at": "updatedAt",
        UpdatedAt: "updatedAt",
        "Updated At": "updatedAt",
        updatedAt: "updatedAt",
        p_updated_at: "updatedAt",
        updated_at: "updatedAt",
    },
    flashcardImages: {
        p_id: "id",
        id: "id",
        Id: "id",
        flashcard_id: "flashcardId",
        "Flashcard Id": "flashcardId",
        FlashcardId: "flashcardId",
        "flashcard-id": "flashcardId",
        flashcardId: "flashcardId",
        p_flashcard_id: "flashcardId",
        p_file_path: "filePath",
        "File Path": "filePath",
        FilePath: "filePath",
        file_path: "filePath",
        filePath: "filePath",
        "file-path": "filePath",
        FileName: "fileName",
        "File Name": "fileName",
        file_name: "fileName",
        p_file_name: "fileName",
        fileName: "fileName",
        "file-name": "fileName",
        "Mime Type": "mimeType",
        "mime-type": "mimeType",
        mime_type: "mimeType",
        p_mime_type: "mimeType",
        mimeType: "mimeType",
        MimeType: "mimeType",
        p_size: "size",
        Size: "size",
        size: "size",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
    },
    flashcardSetRelations: {
        flashcard_id: "flashcardId",
        "Flashcard Id": "flashcardId",
        FlashcardId: "flashcardId",
        "flashcard-id": "flashcardId",
        flashcardId: "flashcardId",
        p_flashcard_id: "flashcardId",
        SetId: "setId",
        setId: "setId",
        "Set Id": "setId",
        set_id: "setId",
        p_set_id: "setId",
        "set-id": "setId",
        p_order: "order",
        order: "order",
        Order: "order",
    },
    flashcardSets: {
        SetId: "setId",
        setId: "setId",
        "Set Id": "setId",
        set_id: "setId",
        p_set_id: "setId",
        "set-id": "setId",
        UserId: "userId",
        userId: "userId",
        "User Id": "userId",
        p_user_id: "userId",
        "user-id": "userId",
        user_id: "userId",
        Name: "name",
        name: "name",
        p_name: "name",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        "updated-at": "updatedAt",
        UpdatedAt: "updatedAt",
        "Updated At": "updatedAt",
        updatedAt: "updatedAt",
        p_updated_at: "updatedAt",
        updated_at: "updatedAt",
        "shared-with": "sharedWith",
        p_shared_with: "sharedWith",
        shared_with: "sharedWith",
        SharedWith: "sharedWith",
        "Shared With": "sharedWith",
        sharedWith: "sharedWith",
        public: "public",
        p_public: "public",
        Public: "public",
        Topic: "topic",
        topic: "topic",
        p_topic: "topic",
        lesson: "lesson",
        Lesson: "lesson",
        p_lesson: "lesson",
        difficulty: "difficulty",
        Difficulty: "difficulty",
        p_difficulty: "difficulty",
        audioOverview: "audioOverview",
        p_audio_overview: "audioOverview",
        audio_overview: "audioOverview",
        "audio-overview": "audioOverview",
        "Audio Overview": "audioOverview",
        AudioOverview: "audioOverview",
    },
    message: {
        p_id: "id",
        id: "id",
        Id: "id",
        "conversation-id": "conversationId",
        conversationId: "conversationId",
        ConversationId: "conversationId",
        conversation_id: "conversationId",
        "Conversation Id": "conversationId",
        p_conversation_id: "conversationId",
        role: "role",
        p_role: "role",
        Role: "role",
        Content: "content",
        p_content: "content",
        content: "content",
        p_type: "type",
        type: "type",
        Type: "type",
        displayOrder: "displayOrder",
        p_display_order: "displayOrder",
        DisplayOrder: "displayOrder",
        "Display Order": "displayOrder",
        "display-order": "displayOrder",
        display_order: "displayOrder",
        SystemOrder: "systemOrder",
        "System Order": "systemOrder",
        "system-order": "systemOrder",
        system_order: "systemOrder",
        p_system_order: "systemOrder",
        systemOrder: "systemOrder",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        metadata: "metadata",
        Metadata: "metadata",
        p_metadata: "metadata",
        UserId: "userId",
        userId: "userId",
        "User Id": "userId",
        p_user_id: "userId",
        "user-id": "userId",
        user_id: "userId",
    },
    messageBroker: {
        p_id: "id",
        id: "id",
        Id: "id",
        message_id: "messageId",
        messageId: "messageId",
        "message-id": "messageId",
        p_message_id: "messageId",
        "Message Id": "messageId",
        MessageId: "messageId",
        brokerId: "brokerId",
        "broker-id": "brokerId",
        broker_id: "brokerId",
        "Broker Id": "brokerId",
        p_broker_id: "brokerId",
        BrokerId: "brokerId",
        "default-value": "defaultValue",
        defaultValue: "defaultValue",
        p_default_value: "defaultValue",
        DefaultValue: "defaultValue",
        "Default Value": "defaultValue",
        default_value: "defaultValue",
        p_default_component: "defaultComponent",
        "default-component": "defaultComponent",
        default_component: "defaultComponent",
        "Default Component": "defaultComponent",
        defaultComponent: "defaultComponent",
        DefaultComponent: "defaultComponent",
    },
    messageTemplate: {
        p_id: "id",
        id: "id",
        Id: "id",
        role: "role",
        p_role: "role",
        Role: "role",
        p_type: "type",
        type: "type",
        Type: "type",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        Content: "content",
        p_content: "content",
        content: "content",
    },
    processor: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        depends_default: "dependsDefault",
        "Depends Default": "dependsDefault",
        "depends-default": "dependsDefault",
        DependsDefault: "dependsDefault",
        p_depends_default: "dependsDefault",
        dependsDefault: "dependsDefault",
        p_default_extractors: "defaultExtractors",
        defaultExtractors: "defaultExtractors",
        "default-extractors": "defaultExtractors",
        default_extractors: "defaultExtractors",
        "Default Extractors": "defaultExtractors",
        DefaultExtractors: "defaultExtractors",
        params: "params",
        p_params: "params",
        Params: "params",
    },
    projectMembers: {
        p_id: "id",
        id: "id",
        Id: "id",
        projectId: "projectId",
        p_project_id: "projectId",
        "Project Id": "projectId",
        ProjectId: "projectId",
        "project-id": "projectId",
        project_id: "projectId",
        UserId: "userId",
        userId: "userId",
        "User Id": "userId",
        p_user_id: "userId",
        "user-id": "userId",
        user_id: "userId",
        role: "role",
        p_role: "role",
        Role: "role",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
    },
    projects: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        description: "description",
        p_description: "description",
        Description: "description",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        "updated-at": "updatedAt",
        UpdatedAt: "updatedAt",
        "Updated At": "updatedAt",
        updatedAt: "updatedAt",
        p_updated_at: "updatedAt",
        updated_at: "updatedAt",
        "Created By": "createdBy",
        created_by: "createdBy",
        createdBy: "createdBy",
        CreatedBy: "createdBy",
        "created-by": "createdBy",
        p_created_by: "createdBy",
    },
    recipe: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        description: "description",
        p_description: "description",
        Description: "description",
        tags: "tags",
        p_tags: "tags",
        Tags: "tags",
        "Sample Output": "sampleOutput",
        "sample-output": "sampleOutput",
        p_sample_output: "sampleOutput",
        sampleOutput: "sampleOutput",
        SampleOutput: "sampleOutput",
        sample_output: "sampleOutput",
        is_public: "isPublic",
        isPublic: "isPublic",
        "Is Public": "isPublic",
        "is-public": "isPublic",
        p_is_public: "isPublic",
        IsPublic: "isPublic",
        Status: "status",
        status: "status",
        p_status: "status",
        Version: "version",
        p_version: "version",
        version: "version",
        PostResultOptions: "postResultOptions",
        post_result_options: "postResultOptions",
        "post-result-options": "postResultOptions",
        postResultOptions: "postResultOptions",
        "Post Result Options": "postResultOptions",
        p_post_result_options: "postResultOptions",
    },
    recipeBroker: {
        p_id: "id",
        id: "id",
        Id: "id",
        p_recipe: "recipe",
        Recipe: "recipe",
        recipe: "recipe",
        Broker: "broker",
        p_broker: "broker",
        broker: "broker",
        "Broker Role": "brokerRole",
        broker_role: "brokerRole",
        "broker-role": "brokerRole",
        brokerRole: "brokerRole",
        BrokerRole: "brokerRole",
        p_broker_role: "brokerRole",
        required: "required",
        Required: "required",
        p_required: "required",
    },
    recipeDisplay: {
        p_id: "id",
        id: "id",
        Id: "id",
        p_recipe: "recipe",
        Recipe: "recipe",
        recipe: "recipe",
        p_display: "display",
        Display: "display",
        display: "display",
        priority: "priority",
        p_priority: "priority",
        Priority: "priority",
        "Display Settings": "displaySettings",
        display_settings: "displaySettings",
        displaySettings: "displaySettings",
        "display-settings": "displaySettings",
        p_display_settings: "displaySettings",
        DisplaySettings: "displaySettings",
    },
    recipeFunction: {
        p_id: "id",
        id: "id",
        Id: "id",
        p_recipe: "recipe",
        Recipe: "recipe",
        recipe: "recipe",
        p_function: "function",
        function: "function",
        Function: "function",
        role: "role",
        p_role: "role",
        Role: "role",
        params: "params",
        p_params: "params",
        Params: "params",
    },
    recipeMessage: {
        p_id: "id",
        id: "id",
        Id: "id",
        message_id: "messageId",
        messageId: "messageId",
        "message-id": "messageId",
        p_message_id: "messageId",
        "Message Id": "messageId",
        MessageId: "messageId",
        recipeId: "recipeId",
        "recipe-id": "recipeId",
        "Recipe Id": "recipeId",
        RecipeId: "recipeId",
        p_recipe_id: "recipeId",
        recipe_id: "recipeId",
        p_order: "order",
        order: "order",
        Order: "order",
    },
    recipeMessageReorderQueue: {
        recipeId: "recipeId",
        "recipe-id": "recipeId",
        "Recipe Id": "recipeId",
        RecipeId: "recipeId",
        p_recipe_id: "recipeId",
        recipe_id: "recipeId",
        lastModified: "lastModified",
        LastModified: "lastModified",
        last_modified: "lastModified",
        "last-modified": "lastModified",
        "Last Modified": "lastModified",
        p_last_modified: "lastModified",
    },
    recipeModel: {
        p_id: "id",
        id: "id",
        Id: "id",
        p_recipe: "recipe",
        Recipe: "recipe",
        recipe: "recipe",
        "ai-model": "aiModel",
        ai_model: "aiModel",
        AiModel: "aiModel",
        aiModel: "aiModel",
        p_ai_model: "aiModel",
        "Ai Model": "aiModel",
        role: "role",
        p_role: "role",
        Role: "role",
        priority: "priority",
        p_priority: "priority",
        Priority: "priority",
    },
    recipeProcessor: {
        p_id: "id",
        id: "id",
        Id: "id",
        p_recipe: "recipe",
        Recipe: "recipe",
        recipe: "recipe",
        Processor: "processor",
        p_processor: "processor",
        processor: "processor",
        params: "params",
        p_params: "params",
        Params: "params",
    },
    recipeTool: {
        p_id: "id",
        id: "id",
        Id: "id",
        p_recipe: "recipe",
        Recipe: "recipe",
        recipe: "recipe",
        p_tool: "tool",
        tool: "tool",
        Tool: "tool",
        params: "params",
        p_params: "params",
        Params: "params",
    },
    registeredFunction: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        module_path: "modulePath",
        ModulePath: "modulePath",
        modulePath: "modulePath",
        "Module Path": "modulePath",
        "module-path": "modulePath",
        p_module_path: "modulePath",
        "Class Name": "className",
        ClassName: "className",
        p_class_name: "className",
        className: "className",
        class_name: "className",
        "class-name": "className",
        description: "description",
        p_description: "description",
        Description: "description",
        p_return_broker: "returnBroker",
        returnBroker: "returnBroker",
        ReturnBroker: "returnBroker",
        "return-broker": "returnBroker",
        "Return Broker": "returnBroker",
        return_broker: "returnBroker",
    },
    subcategory: {
        p_id: "id",
        id: "id",
        Id: "id",
        category_id: "categoryId",
        CategoryId: "categoryId",
        p_category_id: "categoryId",
        "Category Id": "categoryId",
        "category-id": "categoryId",
        categoryId: "categoryId",
        Name: "name",
        name: "name",
        p_name: "name",
        description: "description",
        p_description: "description",
        Description: "description",
        slug: "slug",
        p_slug: "slug",
        Slug: "slug",
        Icon: "icon",
        icon: "icon",
        p_icon: "icon",
        Features: "features",
        features: "features",
        p_features: "features",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
    },
    systemFunction: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        description: "description",
        p_description: "description",
        Description: "description",
        sample: "sample",
        p_sample: "sample",
        Sample: "sample",
        input_params: "inputParams",
        p_input_params: "inputParams",
        InputParams: "inputParams",
        "input-params": "inputParams",
        inputParams: "inputParams",
        "Input Params": "inputParams",
        "output-options": "outputOptions",
        output_options: "outputOptions",
        p_output_options: "outputOptions",
        OutputOptions: "outputOptions",
        outputOptions: "outputOptions",
        "Output Options": "outputOptions",
        rfId: "rfId",
        RfId: "rfId",
        "rf-id": "rfId",
        "Rf Id": "rfId",
        p_rf_id: "rfId",
        rf_id: "rfId",
    },
    taskAssignments: {
        p_id: "id",
        id: "id",
        Id: "id",
        TaskId: "taskId",
        "Task Id": "taskId",
        taskId: "taskId",
        task_id: "taskId",
        p_task_id: "taskId",
        "task-id": "taskId",
        UserId: "userId",
        userId: "userId",
        "User Id": "userId",
        p_user_id: "userId",
        "user-id": "userId",
        user_id: "userId",
        "assigned-by": "assignedBy",
        AssignedBy: "assignedBy",
        "Assigned By": "assignedBy",
        p_assigned_by: "assignedBy",
        assignedBy: "assignedBy",
        assigned_by: "assignedBy",
        AssignedAt: "assignedAt",
        "assigned-at": "assignedAt",
        assigned_at: "assignedAt",
        assignedAt: "assignedAt",
        "Assigned At": "assignedAt",
        p_assigned_at: "assignedAt",
    },
    taskAttachments: {
        p_id: "id",
        id: "id",
        Id: "id",
        TaskId: "taskId",
        "Task Id": "taskId",
        taskId: "taskId",
        task_id: "taskId",
        p_task_id: "taskId",
        "task-id": "taskId",
        FileName: "fileName",
        "File Name": "fileName",
        file_name: "fileName",
        p_file_name: "fileName",
        fileName: "fileName",
        "file-name": "fileName",
        file_type: "fileType",
        FileType: "fileType",
        "File Type": "fileType",
        "file-type": "fileType",
        fileType: "fileType",
        p_file_type: "fileType",
        p_file_size: "fileSize",
        "File Size": "fileSize",
        fileSize: "fileSize",
        FileSize: "fileSize",
        "file-size": "fileSize",
        file_size: "fileSize",
        p_file_path: "filePath",
        "File Path": "filePath",
        FilePath: "filePath",
        file_path: "filePath",
        filePath: "filePath",
        "file-path": "filePath",
        "Uploaded By": "uploadedBy",
        uploadedBy: "uploadedBy",
        p_uploaded_by: "uploadedBy",
        UploadedBy: "uploadedBy",
        uploaded_by: "uploadedBy",
        "uploaded-by": "uploadedBy",
        UploadedAt: "uploadedAt",
        uploaded_at: "uploadedAt",
        p_uploaded_at: "uploadedAt",
        uploadedAt: "uploadedAt",
        "uploaded-at": "uploadedAt",
        "Uploaded At": "uploadedAt",
    },
    taskComments: {
        p_id: "id",
        id: "id",
        Id: "id",
        TaskId: "taskId",
        "Task Id": "taskId",
        taskId: "taskId",
        task_id: "taskId",
        p_task_id: "taskId",
        "task-id": "taskId",
        UserId: "userId",
        userId: "userId",
        "User Id": "userId",
        p_user_id: "userId",
        "user-id": "userId",
        user_id: "userId",
        Content: "content",
        p_content: "content",
        content: "content",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        "updated-at": "updatedAt",
        UpdatedAt: "updatedAt",
        "Updated At": "updatedAt",
        updatedAt: "updatedAt",
        p_updated_at: "updatedAt",
        updated_at: "updatedAt",
    },
    tasks: {
        p_id: "id",
        id: "id",
        Id: "id",
        p_title: "title",
        Title: "title",
        title: "title",
        description: "description",
        p_description: "description",
        Description: "description",
        projectId: "projectId",
        p_project_id: "projectId",
        "Project Id": "projectId",
        ProjectId: "projectId",
        "project-id": "projectId",
        project_id: "projectId",
        Status: "status",
        status: "status",
        p_status: "status",
        "Due Date": "dueDate",
        due_date: "dueDate",
        p_due_date: "dueDate",
        DueDate: "dueDate",
        "due-date": "dueDate",
        dueDate: "dueDate",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        "updated-at": "updatedAt",
        UpdatedAt: "updatedAt",
        "Updated At": "updatedAt",
        updatedAt: "updatedAt",
        p_updated_at: "updatedAt",
        updated_at: "updatedAt",
        "Created By": "createdBy",
        created_by: "createdBy",
        createdBy: "createdBy",
        CreatedBy: "createdBy",
        "created-by": "createdBy",
        p_created_by: "createdBy",
    },
    tool: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        Source: "source",
        source: "source",
        p_source: "source",
        description: "description",
        p_description: "description",
        Description: "description",
        parameters: "parameters",
        p_parameters: "parameters",
        Parameters: "parameters",
        required_args: "requiredArgs",
        "Required Args": "requiredArgs",
        requiredArgs: "requiredArgs",
        p_required_args: "requiredArgs",
        "required-args": "requiredArgs",
        RequiredArgs: "requiredArgs",
        p_system_function: "systemFunction",
        SystemFunction: "systemFunction",
        systemFunction: "systemFunction",
        "system-function": "systemFunction",
        system_function: "systemFunction",
        "System Function": "systemFunction",
        additional_params: "additionalParams",
        "Additional Params": "additionalParams",
        "additional-params": "additionalParams",
        p_additional_params: "additionalParams",
        additionalParams: "additionalParams",
        AdditionalParams: "additionalParams",
    },
    transformer: {
        p_id: "id",
        id: "id",
        Id: "id",
        Name: "name",
        name: "name",
        p_name: "name",
        input_params: "inputParams",
        p_input_params: "inputParams",
        InputParams: "inputParams",
        "input-params": "inputParams",
        inputParams: "inputParams",
        "Input Params": "inputParams",
        p_output_params: "outputParams",
        "output-params": "outputParams",
        output_params: "outputParams",
        "Output Params": "outputParams",
        outputParams: "outputParams",
        OutputParams: "outputParams",
    },
    userPreferences: {
        UserId: "userId",
        userId: "userId",
        "User Id": "userId",
        p_user_id: "userId",
        "user-id": "userId",
        user_id: "userId",
        p_preferences: "preferences",
        preferences: "preferences",
        Preferences: "preferences",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        "updated-at": "updatedAt",
        UpdatedAt: "updatedAt",
        "Updated At": "updatedAt",
        updatedAt: "updatedAt",
        p_updated_at: "updatedAt",
        updated_at: "updatedAt",
    },
    wcClaim: {
        p_id: "id",
        id: "id",
        Id: "id",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        applicantName: "applicantName",
        "applicant-name": "applicantName",
        ApplicantName: "applicantName",
        "Applicant Name": "applicantName",
        p_applicant_name: "applicantName",
        applicant_name: "applicantName",
        PersonId: "personId",
        personId: "personId",
        p_person_id: "personId",
        person_id: "personId",
        "person-id": "personId",
        "Person Id": "personId",
        "Date Of Birth": "dateOfBirth",
        date_of_birth: "dateOfBirth",
        "date-of-birth": "dateOfBirth",
        p_date_of_birth: "dateOfBirth",
        DateOfBirth: "dateOfBirth",
        dateOfBirth: "dateOfBirth",
        "date-of-injury": "dateOfInjury",
        DateOfInjury: "dateOfInjury",
        p_date_of_injury: "dateOfInjury",
        date_of_injury: "dateOfInjury",
        dateOfInjury: "dateOfInjury",
        "Date Of Injury": "dateOfInjury",
        "age-at-doi": "ageAtDoi",
        AgeAtDoi: "ageAtDoi",
        ageAtDoi: "ageAtDoi",
        p_age_at_doi: "ageAtDoi",
        "Age At Doi": "ageAtDoi",
        age_at_doi: "ageAtDoi",
        p_occupational_code: "occupationalCode",
        OccupationalCode: "occupationalCode",
        "occupational-code": "occupationalCode",
        "Occupational Code": "occupationalCode",
        occupationalCode: "occupationalCode",
        occupational_code: "occupationalCode",
        p_weekly_earnings: "weeklyEarnings",
        "Weekly Earnings": "weeklyEarnings",
        WeeklyEarnings: "weeklyEarnings",
        weeklyEarnings: "weeklyEarnings",
        weekly_earnings: "weeklyEarnings",
        "weekly-earnings": "weeklyEarnings",
    },
    wcImpairmentDefinition: {
        p_id: "id",
        id: "id",
        Id: "id",
        "Impairment Number": "impairmentNumber",
        impairment_number: "impairmentNumber",
        ImpairmentNumber: "impairmentNumber",
        p_impairment_number: "impairmentNumber",
        impairmentNumber: "impairmentNumber",
        "impairment-number": "impairmentNumber",
        "Fec Rank": "fecRank",
        FecRank: "fecRank",
        "fec-rank": "fecRank",
        p_fec_rank: "fecRank",
        fecRank: "fecRank",
        fec_rank: "fecRank",
        Name: "name",
        name: "name",
        p_name: "name",
        attributes: "attributes",
        p_attributes: "attributes",
        Attributes: "attributes",
        FingerType: "fingerType",
        finger_type: "fingerType",
        "finger-type": "fingerType",
        p_finger_type: "fingerType",
        "Finger Type": "fingerType",
        fingerType: "fingerType",
    },
    wcInjury: {
        p_id: "id",
        id: "id",
        Id: "id",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        p_report_id: "reportId",
        reportId: "reportId",
        "report-id": "reportId",
        ReportId: "reportId",
        "Report Id": "reportId",
        report_id: "reportId",
        "impairment-definition-id": "impairmentDefinitionId",
        p_impairment_definition_id: "impairmentDefinitionId",
        ImpairmentDefinitionId: "impairmentDefinitionId",
        "Impairment Definition Id": "impairmentDefinitionId",
        impairmentDefinitionId: "impairmentDefinitionId",
        impairment_definition_id: "impairmentDefinitionId",
        digit: "digit",
        p_digit: "digit",
        Digit: "digit",
        p_le: "le",
        le: "le",
        Le: "le",
        p_side: "side",
        side: "side",
        Side: "side",
        Ue: "ue",
        p_ue: "ue",
        ue: "ue",
        p_wpi: "wpi",
        wpi: "wpi",
        Wpi: "wpi",
        p_pain: "pain",
        Pain: "pain",
        pain: "pain",
        p_industrial: "industrial",
        industrial: "industrial",
        Industrial: "industrial",
        p_rating: "rating",
        rating: "rating",
        Rating: "rating",
        p_formula: "formula",
        formula: "formula",
        Formula: "formula",
        "updated-at": "updatedAt",
        UpdatedAt: "updatedAt",
        "Updated At": "updatedAt",
        updatedAt: "updatedAt",
        p_updated_at: "updatedAt",
        updated_at: "updatedAt",
    },
    wcReport: {
        p_id: "id",
        id: "id",
        Id: "id",
        "created-at": "createdAt",
        created_at: "createdAt",
        createdAt: "createdAt",
        CreatedAt: "createdAt",
        p_created_at: "createdAt",
        "Created At": "createdAt",
        claimId: "claimId",
        ClaimId: "claimId",
        "Claim Id": "claimId",
        claim_id: "claimId",
        "claim-id": "claimId",
        p_claim_id: "claimId",
        p_final_rating: "finalRating",
        "Final Rating": "finalRating",
        FinalRating: "finalRating",
        final_rating: "finalRating",
        "final-rating": "finalRating",
        finalRating: "finalRating",
        left_side_total: "leftSideTotal",
        p_left_side_total: "leftSideTotal",
        LeftSideTotal: "leftSideTotal",
        leftSideTotal: "leftSideTotal",
        "Left Side Total": "leftSideTotal",
        "left-side-total": "leftSideTotal",
        rightSideTotal: "rightSideTotal",
        p_right_side_total: "rightSideTotal",
        right_side_total: "rightSideTotal",
        "right-side-total": "rightSideTotal",
        "Right Side Total": "rightSideTotal",
        RightSideTotal: "rightSideTotal",
        DefaultSideTotal: "defaultSideTotal",
        "Default Side Total": "defaultSideTotal",
        "default-side-total": "defaultSideTotal",
        p_default_side_total: "defaultSideTotal",
        default_side_total: "defaultSideTotal",
        defaultSideTotal: "defaultSideTotal",
        "Compensation Amount": "compensationAmount",
        "compensation-amount": "compensationAmount",
        p_compensation_amount: "compensationAmount",
        compensation_amount: "compensationAmount",
        compensationAmount: "compensationAmount",
        CompensationAmount: "compensationAmount",
        CompensationWeeks: "compensationWeeks",
        compensationWeeks: "compensationWeeks",
        "compensation-weeks": "compensationWeeks",
        compensation_weeks: "compensationWeeks",
        p_compensation_weeks: "compensationWeeks",
        "Compensation Weeks": "compensationWeeks",
        "compensation-days": "compensationDays",
        p_compensation_days: "compensationDays",
        compensation_days: "compensationDays",
        compensationDays: "compensationDays",
        CompensationDays: "compensationDays",
        "Compensation Days": "compensationDays",
    },
};

export const entityNameFormats: EntityNameFormatMap = {
    action: {
        frontend: "action",
        backend: "action",
        database: "action",
        pretty: "Action",
        component: "Action",
        kebab: "action",
        sqlFunctionRef: "p_action",
        RestAPI: "action",
        GraphQL: "action",
        custom: "action",
    },
    aiAgent: {
        frontend: "aiAgent",
        backend: "ai_agent",
        database: "ai_agent",
        pretty: "Ai Agent",
        component: "AiAgent",
        kebab: "ai-agent",
        sqlFunctionRef: "p_ai_agent",
        RestAPI: "aiAgent",
        GraphQL: "aiAgent",
        custom: "aiAgent",
    },
    aiEndpoint: {
        frontend: "aiEndpoint",
        backend: "ai_endpoint",
        database: "ai_endpoint",
        pretty: "Ai Endpoint",
        component: "AiEndpoint",
        kebab: "ai-endpoint",
        sqlFunctionRef: "p_ai_endpoint",
        RestAPI: "aiEndpoint",
        GraphQL: "aiEndpoint",
        custom: "aiEndpoint",
    },
    aiModel: {
        frontend: "aiModel",
        backend: "ai_model",
        database: "ai_model",
        pretty: "Ai Model",
        component: "AiModel",
        kebab: "ai-model",
        sqlFunctionRef: "p_ai_model",
        RestAPI: "aiModel",
        GraphQL: "aiModel",
        custom: "aiModel",
    },
    aiModelEndpoint: {
        frontend: "aiModelEndpoint",
        backend: "ai_model_endpoint",
        database: "ai_model_endpoint",
        pretty: "Ai Model Endpoint",
        component: "AiModelEndpoint",
        kebab: "ai-model-endpoint",
        sqlFunctionRef: "p_ai_model_endpoint",
        RestAPI: "aiModelEndpoint",
        GraphQL: "aiModelEndpoint",
        custom: "aiModelEndpoint",
    },
    aiProvider: {
        frontend: "aiProvider",
        backend: "ai_provider",
        database: "ai_provider",
        pretty: "Ai Provider",
        component: "AiProvider",
        kebab: "ai-provider",
        sqlFunctionRef: "p_ai_provider",
        RestAPI: "aiProvider",
        GraphQL: "aiProvider",
        custom: "aiProvider",
    },
    aiSettings: {
        frontend: "aiSettings",
        backend: "ai_settings",
        database: "ai_settings",
        pretty: "Ai Settings",
        component: "AiSettings",
        kebab: "ai-settings",
        sqlFunctionRef: "p_ai_settings",
        RestAPI: "aiSettings",
        GraphQL: "aiSettings",
        custom: "aiSettings",
    },
    applet: {
        frontend: "applet",
        backend: "applet",
        database: "applet",
        pretty: "Applet",
        component: "Applet",
        kebab: "applet",
        sqlFunctionRef: "p_applet",
        RestAPI: "applet",
        GraphQL: "applet",
        custom: "applet",
    },
    arg: {
        frontend: "arg",
        backend: "arg",
        database: "arg",
        pretty: "Arg",
        component: "Arg",
        kebab: "arg",
        sqlFunctionRef: "p_arg",
        RestAPI: "arg",
        GraphQL: "arg",
        custom: "arg",
    },
    audioLabel: {
        frontend: "audioLabel",
        backend: "audio_label",
        database: "audio_label",
        pretty: "Audio Label",
        component: "AudioLabel",
        kebab: "audio-label",
        sqlFunctionRef: "p_audio_label",
        RestAPI: "audioLabel",
        GraphQL: "audioLabel",
        custom: "audioLabel",
    },
    audioRecording: {
        frontend: "audioRecording",
        backend: "audio_recording",
        database: "audio_recording",
        pretty: "Audio Recording",
        component: "AudioRecording",
        kebab: "audio-recording",
        sqlFunctionRef: "p_audio_recording",
        RestAPI: "audioRecording",
        GraphQL: "audioRecording",
        custom: "audioRecording",
    },
    audioRecordingUsers: {
        frontend: "audioRecordingUsers",
        backend: "audio_recording_users",
        database: "audio_recording_users",
        pretty: "Audio Recording Users",
        component: "AudioRecordingUsers",
        kebab: "audio-recording-users",
        sqlFunctionRef: "p_audio_recording_users",
        RestAPI: "audioRecordingUsers",
        GraphQL: "audioRecordingUsers",
        custom: "audioRecordingUsers",
    },
    automationBoundaryBroker: {
        frontend: "automationBoundaryBroker",
        backend: "automation_boundary_broker",
        database: "automation_boundary_broker",
        pretty: "Automation Boundary Broker",
        component: "AutomationBoundaryBroker",
        kebab: "automation-boundary-broker",
        sqlFunctionRef: "p_automation_boundary_broker",
        RestAPI: "automationBoundaryBroker",
        GraphQL: "automationBoundaryBroker",
        custom: "automationBoundaryBroker",
    },
    automationMatrix: {
        frontend: "automationMatrix",
        backend: "automation_matrix",
        database: "automation_matrix",
        pretty: "Automation Matrix",
        component: "AutomationMatrix",
        kebab: "automation-matrix",
        sqlFunctionRef: "p_automation_matrix",
        RestAPI: "automationMatrix",
        GraphQL: "automationMatrix",
        custom: "automationMatrix",
    },
    broker: {
        frontend: "broker",
        backend: "broker",
        database: "broker",
        pretty: "Broker",
        component: "Broker",
        kebab: "broker",
        sqlFunctionRef: "p_broker",
        RestAPI: "broker",
        GraphQL: "broker",
        custom: "broker",
    },
    brokerValue: {
        frontend: "brokerValue",
        backend: "broker_value",
        database: "broker_value",
        pretty: "Broker Value",
        component: "BrokerValue",
        kebab: "broker-value",
        sqlFunctionRef: "p_broker_value",
        RestAPI: "brokerValue",
        GraphQL: "brokerValue",
        custom: "brokerValue",
    },
    bucketStructures: {
        frontend: "bucketStructures",
        backend: "bucket_structures",
        database: "bucket_structures",
        pretty: "Bucket Structures",
        component: "BucketStructures",
        kebab: "bucket-structures",
        sqlFunctionRef: "p_bucket_structures",
        RestAPI: "bucketStructures",
        GraphQL: "bucketStructures",
        custom: "bucketStructures",
    },
    bucketTreeStructures: {
        frontend: "bucketTreeStructures",
        backend: "bucket_tree_structures",
        database: "bucket_tree_structures",
        pretty: "Bucket Tree Structures",
        component: "BucketTreeStructures",
        kebab: "bucket-tree-structures",
        sqlFunctionRef: "p_bucket_tree_structures",
        RestAPI: "bucketTreeStructures",
        GraphQL: "bucketTreeStructures",
        custom: "bucketTreeStructures",
    },
    category: {
        frontend: "category",
        backend: "category",
        database: "category",
        pretty: "Category",
        component: "Category",
        kebab: "category",
        sqlFunctionRef: "p_category",
        RestAPI: "category",
        GraphQL: "category",
        custom: "category",
    },
    compiledRecipe: {
        frontend: "compiledRecipe",
        backend: "compiled_recipe",
        database: "compiled_recipe",
        pretty: "Compiled Recipe",
        component: "CompiledRecipe",
        kebab: "compiled-recipe",
        sqlFunctionRef: "p_compiled_recipe",
        RestAPI: "compiledRecipe",
        GraphQL: "compiledRecipe",
        custom: "compiledRecipe",
    },
    conversation: {
        frontend: "conversation",
        backend: "conversation",
        database: "conversation",
        pretty: "Conversation",
        component: "Conversation",
        kebab: "conversation",
        sqlFunctionRef: "p_conversation",
        RestAPI: "conversation",
        GraphQL: "conversation",
        custom: "conversation",
    },
    dataBroker: {
        frontend: "dataBroker",
        backend: "data_broker",
        database: "data_broker",
        pretty: "Data Broker",
        component: "DataBroker",
        kebab: "data-broker",
        sqlFunctionRef: "p_data_broker",
        RestAPI: "dataBroker",
        GraphQL: "dataBroker",
        custom: "dataBroker",
    },
    dataInputComponent: {
        frontend: "dataInputComponent",
        backend: "data_input_component",
        database: "data_input_component",
        pretty: "Data Input Component",
        component: "DataInputComponent",
        kebab: "data-input-component",
        sqlFunctionRef: "p_data_input_component",
        RestAPI: "dataInputComponent",
        GraphQL: "dataInputComponent",
        custom: "dataInputComponent",
    },
    dataOutputComponent: {
        frontend: "dataOutputComponent",
        backend: "data_output_component",
        database: "data_output_component",
        pretty: "Data Output Component",
        component: "DataOutputComponent",
        kebab: "data-output-component",
        sqlFunctionRef: "p_data_output_component",
        RestAPI: "dataOutputComponent",
        GraphQL: "dataOutputComponent",
        custom: "dataOutputComponent",
    },
    displayOption: {
        frontend: "displayOption",
        backend: "display_option",
        database: "display_option",
        pretty: "Display Option",
        component: "DisplayOption",
        kebab: "display-option",
        sqlFunctionRef: "p_display_option",
        RestAPI: "displayOption",
        GraphQL: "displayOption",
        custom: "displayOption",
    },
    emails: {
        frontend: "emails",
        backend: "emails",
        database: "emails",
        pretty: "Emails",
        component: "Emails",
        kebab: "emails",
        sqlFunctionRef: "p_emails",
        RestAPI: "emails",
        GraphQL: "emails",
        custom: "emails",
    },
    extractor: {
        frontend: "extractor",
        backend: "extractor",
        database: "extractor",
        pretty: "Extractor",
        component: "Extractor",
        kebab: "extractor",
        sqlFunctionRef: "p_extractor",
        RestAPI: "extractor",
        GraphQL: "extractor",
        custom: "extractor",
    },
    fileStructure: {
        frontend: "fileStructure",
        backend: "file_structure",
        database: "file_structure",
        pretty: "File Structure",
        component: "FileStructure",
        kebab: "file-structure",
        sqlFunctionRef: "p_file_structure",
        RestAPI: "fileStructure",
        GraphQL: "fileStructure",
        custom: "fileStructure",
    },
    flashcardData: {
        frontend: "flashcardData",
        backend: "flashcard_data",
        database: "flashcard_data",
        pretty: "Flashcard Data",
        component: "FlashcardData",
        kebab: "flashcard-data",
        sqlFunctionRef: "p_flashcard_data",
        RestAPI: "flashcardData",
        GraphQL: "flashcardData",
        custom: "flashcardData",
    },
    flashcardHistory: {
        frontend: "flashcardHistory",
        backend: "flashcard_history",
        database: "flashcard_history",
        pretty: "Flashcard History",
        component: "FlashcardHistory",
        kebab: "flashcard-history",
        sqlFunctionRef: "p_flashcard_history",
        RestAPI: "flashcardHistory",
        GraphQL: "flashcardHistory",
        custom: "flashcardHistory",
    },
    flashcardImages: {
        frontend: "flashcardImages",
        backend: "flashcard_images",
        database: "flashcard_images",
        pretty: "Flashcard Images",
        component: "FlashcardImages",
        kebab: "flashcard-images",
        sqlFunctionRef: "p_flashcard_images",
        RestAPI: "flashcardImages",
        GraphQL: "flashcardImages",
        custom: "flashcardImages",
    },
    flashcardSetRelations: {
        frontend: "flashcardSetRelations",
        backend: "flashcard_set_relations",
        database: "flashcard_set_relations",
        pretty: "Flashcard Set Relations",
        component: "FlashcardSetRelations",
        kebab: "flashcard-set-relations",
        sqlFunctionRef: "p_flashcard_set_relations",
        RestAPI: "flashcardSetRelations",
        GraphQL: "flashcardSetRelations",
        custom: "flashcardSetRelations",
    },
    flashcardSets: {
        frontend: "flashcardSets",
        backend: "flashcard_sets",
        database: "flashcard_sets",
        pretty: "Flashcard Sets",
        component: "FlashcardSets",
        kebab: "flashcard-sets",
        sqlFunctionRef: "p_flashcard_sets",
        RestAPI: "flashcardSets",
        GraphQL: "flashcardSets",
        custom: "flashcardSets",
    },
    message: {
        frontend: "message",
        backend: "message",
        database: "message",
        pretty: "Message",
        component: "Message",
        kebab: "message",
        sqlFunctionRef: "p_message",
        RestAPI: "message",
        GraphQL: "message",
        custom: "message",
    },
    messageBroker: {
        frontend: "messageBroker",
        backend: "message_broker",
        database: "message_broker",
        pretty: "Message Broker",
        component: "MessageBroker",
        kebab: "message-broker",
        sqlFunctionRef: "p_message_broker",
        RestAPI: "messageBroker",
        GraphQL: "messageBroker",
        custom: "messageBroker",
    },
    messageTemplate: {
        frontend: "messageTemplate",
        backend: "message_template",
        database: "message_template",
        pretty: "Message Template",
        component: "MessageTemplate",
        kebab: "message-template",
        sqlFunctionRef: "p_message_template",
        RestAPI: "messageTemplate",
        GraphQL: "messageTemplate",
        custom: "messageTemplate",
    },
    processor: {
        frontend: "processor",
        backend: "processor",
        database: "processor",
        pretty: "Processor",
        component: "Processor",
        kebab: "processor",
        sqlFunctionRef: "p_processor",
        RestAPI: "processor",
        GraphQL: "processor",
        custom: "processor",
    },
    projectMembers: {
        frontend: "projectMembers",
        backend: "project_members",
        database: "project_members",
        pretty: "Project Members",
        component: "ProjectMembers",
        kebab: "project-members",
        sqlFunctionRef: "p_project_members",
        RestAPI: "projectMembers",
        GraphQL: "projectMembers",
        custom: "projectMembers",
    },
    projects: {
        frontend: "projects",
        backend: "projects",
        database: "projects",
        pretty: "Projects",
        component: "Projects",
        kebab: "projects",
        sqlFunctionRef: "p_projects",
        RestAPI: "projects",
        GraphQL: "projects",
        custom: "projects",
    },
    recipe: {
        frontend: "recipe",
        backend: "recipe",
        database: "recipe",
        pretty: "Recipe",
        component: "Recipe",
        kebab: "recipe",
        sqlFunctionRef: "p_recipe",
        RestAPI: "recipe",
        GraphQL: "recipe",
        custom: "recipe",
    },
    recipeBroker: {
        frontend: "recipeBroker",
        backend: "recipe_broker",
        database: "recipe_broker",
        pretty: "Recipe Broker",
        component: "RecipeBroker",
        kebab: "recipe-broker",
        sqlFunctionRef: "p_recipe_broker",
        RestAPI: "recipeBroker",
        GraphQL: "recipeBroker",
        custom: "recipeBroker",
    },
    recipeDisplay: {
        frontend: "recipeDisplay",
        backend: "recipe_display",
        database: "recipe_display",
        pretty: "Recipe Display",
        component: "RecipeDisplay",
        kebab: "recipe-display",
        sqlFunctionRef: "p_recipe_display",
        RestAPI: "recipeDisplay",
        GraphQL: "recipeDisplay",
        custom: "recipeDisplay",
    },
    recipeFunction: {
        frontend: "recipeFunction",
        backend: "recipe_function",
        database: "recipe_function",
        pretty: "Recipe Function",
        component: "RecipeFunction",
        kebab: "recipe-function",
        sqlFunctionRef: "p_recipe_function",
        RestAPI: "recipeFunction",
        GraphQL: "recipeFunction",
        custom: "recipeFunction",
    },
    recipeMessage: {
        frontend: "recipeMessage",
        backend: "recipe_message",
        database: "recipe_message",
        pretty: "Recipe Message",
        component: "RecipeMessage",
        kebab: "recipe-message",
        sqlFunctionRef: "p_recipe_message",
        RestAPI: "recipeMessage",
        GraphQL: "recipeMessage",
        custom: "recipeMessage",
    },
    recipeMessageReorderQueue: {
        frontend: "recipeMessageReorderQueue",
        backend: "recipe_message_reorder_queue",
        database: "recipe_message_reorder_queue",
        pretty: "Recipe Message Reorder Queue",
        component: "RecipeMessageReorderQueue",
        kebab: "recipe-message-reorder-queue",
        sqlFunctionRef: "p_recipe_message_reorder_queue",
        RestAPI: "recipeMessageReorderQueue",
        GraphQL: "recipeMessageReorderQueue",
        custom: "recipeMessageReorderQueue",
    },
    recipeModel: {
        frontend: "recipeModel",
        backend: "recipe_model",
        database: "recipe_model",
        pretty: "Recipe Model",
        component: "RecipeModel",
        kebab: "recipe-model",
        sqlFunctionRef: "p_recipe_model",
        RestAPI: "recipeModel",
        GraphQL: "recipeModel",
        custom: "recipeModel",
    },
    recipeProcessor: {
        frontend: "recipeProcessor",
        backend: "recipe_processor",
        database: "recipe_processor",
        pretty: "Recipe Processor",
        component: "RecipeProcessor",
        kebab: "recipe-processor",
        sqlFunctionRef: "p_recipe_processor",
        RestAPI: "recipeProcessor",
        GraphQL: "recipeProcessor",
        custom: "recipeProcessor",
    },
    recipeTool: {
        frontend: "recipeTool",
        backend: "recipe_tool",
        database: "recipe_tool",
        pretty: "Recipe Tool",
        component: "RecipeTool",
        kebab: "recipe-tool",
        sqlFunctionRef: "p_recipe_tool",
        RestAPI: "recipeTool",
        GraphQL: "recipeTool",
        custom: "recipeTool",
    },
    registeredFunction: {
        frontend: "registeredFunction",
        backend: "registered_function",
        database: "registered_function",
        pretty: "Registered Function",
        component: "RegisteredFunction",
        kebab: "registered-function",
        sqlFunctionRef: "p_registered_function",
        RestAPI: "registeredFunction",
        GraphQL: "registeredFunction",
        custom: "registeredFunction",
    },
    subcategory: {
        frontend: "subcategory",
        backend: "subcategory",
        database: "subcategory",
        pretty: "Subcategory",
        component: "Subcategory",
        kebab: "subcategory",
        sqlFunctionRef: "p_subcategory",
        RestAPI: "subcategory",
        GraphQL: "subcategory",
        custom: "subcategory",
    },
    systemFunction: {
        frontend: "systemFunction",
        backend: "system_function",
        database: "system_function",
        pretty: "System Function",
        component: "SystemFunction",
        kebab: "system-function",
        sqlFunctionRef: "p_system_function",
        RestAPI: "systemFunction",
        GraphQL: "systemFunction",
        custom: "systemFunction",
    },
    taskAssignments: {
        frontend: "taskAssignments",
        backend: "task_assignments",
        database: "task_assignments",
        pretty: "Task Assignments",
        component: "TaskAssignments",
        kebab: "task-assignments",
        sqlFunctionRef: "p_task_assignments",
        RestAPI: "taskAssignments",
        GraphQL: "taskAssignments",
        custom: "taskAssignments",
    },
    taskAttachments: {
        frontend: "taskAttachments",
        backend: "task_attachments",
        database: "task_attachments",
        pretty: "Task Attachments",
        component: "TaskAttachments",
        kebab: "task-attachments",
        sqlFunctionRef: "p_task_attachments",
        RestAPI: "taskAttachments",
        GraphQL: "taskAttachments",
        custom: "taskAttachments",
    },
    taskComments: {
        frontend: "taskComments",
        backend: "task_comments",
        database: "task_comments",
        pretty: "Task Comments",
        component: "TaskComments",
        kebab: "task-comments",
        sqlFunctionRef: "p_task_comments",
        RestAPI: "taskComments",
        GraphQL: "taskComments",
        custom: "taskComments",
    },
    tasks: {
        frontend: "tasks",
        backend: "tasks",
        database: "tasks",
        pretty: "Tasks",
        component: "Tasks",
        kebab: "tasks",
        sqlFunctionRef: "p_tasks",
        RestAPI: "tasks",
        GraphQL: "tasks",
        custom: "tasks",
    },
    tool: {
        frontend: "tool",
        backend: "tool",
        database: "tool",
        pretty: "Tool",
        component: "Tool",
        kebab: "tool",
        sqlFunctionRef: "p_tool",
        RestAPI: "tool",
        GraphQL: "tool",
        custom: "tool",
    },
    transformer: {
        frontend: "transformer",
        backend: "transformer",
        database: "transformer",
        pretty: "Transformer",
        component: "Transformer",
        kebab: "transformer",
        sqlFunctionRef: "p_transformer",
        RestAPI: "transformer",
        GraphQL: "transformer",
        custom: "transformer",
    },
    userPreferences: {
        frontend: "userPreferences",
        backend: "user_preferences",
        database: "user_preferences",
        pretty: "User Preferences",
        component: "UserPreferences",
        kebab: "user-preferences",
        sqlFunctionRef: "p_user_preferences",
        RestAPI: "userPreferences",
        GraphQL: "userPreferences",
        custom: "userPreferences",
    },
    wcClaim: {
        frontend: "wcClaim",
        backend: "wc_claim",
        database: "wc_claim",
        pretty: "Wc Claim",
        component: "WcClaim",
        kebab: "wc-claim",
        sqlFunctionRef: "p_wc_claim",
        RestAPI: "wcClaim",
        GraphQL: "wcClaim",
        custom: "wcClaim",
    },
    wcImpairmentDefinition: {
        frontend: "wcImpairmentDefinition",
        backend: "wc_impairment_definition",
        database: "wc_impairment_definition",
        pretty: "Wc Impairment Definition",
        component: "WcImpairmentDefinition",
        kebab: "wc-impairment-definition",
        sqlFunctionRef: "p_wc_impairment_definition",
        RestAPI: "wcImpairmentDefinition",
        GraphQL: "wcImpairmentDefinition",
        custom: "wcImpairmentDefinition",
    },
    wcInjury: {
        frontend: "wcInjury",
        backend: "wc_injury",
        database: "wc_injury",
        pretty: "Wc Injury",
        component: "WcInjury",
        kebab: "wc-injury",
        sqlFunctionRef: "p_wc_injury",
        RestAPI: "wcInjury",
        GraphQL: "wcInjury",
        custom: "wcInjury",
    },
    wcReport: {
        frontend: "wcReport",
        backend: "wc_report",
        database: "wc_report",
        pretty: "Wc Report",
        component: "WcReport",
        kebab: "wc-report",
        sqlFunctionRef: "p_wc_report",
        RestAPI: "wcReport",
        GraphQL: "wcReport",
        custom: "wcReport",
    },
};

export const fieldNameFormats: FieldNameFormatMap = {
    action: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        matrix: {
            frontend: "matrix",
            backend: "matrix",
            database: "matrix",
            pretty: "Matrix",
            component: "Matrix",
            kebab: "matrix",
            sqlFunctionRef: "p_matrix",
            RestAPI: "matrix",
            GraphQL: "matrix",
            custom: "matrix",
        },
        transformer: {
            frontend: "transformer",
            backend: "transformer",
            database: "transformer",
            pretty: "Transformer",
            component: "Transformer",
            kebab: "transformer",
            sqlFunctionRef: "p_transformer",
            RestAPI: "transformer",
            GraphQL: "transformer",
            custom: "transformer",
        },
        nodeType: {
            frontend: "nodeType",
            backend: "node_type",
            database: "node_type",
            pretty: "Node Type",
            component: "NodeType",
            kebab: "node-type",
            sqlFunctionRef: "p_node_type",
            RestAPI: "nodeType",
            GraphQL: "nodeType",
            custom: "nodeType",
        },
        referenceId: {
            frontend: "referenceId",
            backend: "reference_id",
            database: "reference_id",
            pretty: "Reference Id",
            component: "ReferenceId",
            kebab: "reference-id",
            sqlFunctionRef: "p_reference_id",
            RestAPI: "referenceId",
            GraphQL: "referenceId",
            custom: "referenceId",
        },
        automationMatrixReference: {
            frontend: "automationMatrixReference",
            backend: "automation_matrix_reference",
            database: "ref_automation_matrix",
            pretty: "Automation Matrix Reference",
            component: "AutomationMatrixReference",
            kebab: "automation-matrixReference",
            sqlFunctionRef: "p_ref_automation_matrix",
            RestAPI: "automationMatrixReference",
            GraphQL: "automationMatrixReference",
            custom: "automationMatrixReference",
        },
        transformerReference: {
            frontend: "transformerReference",
            backend: "transformer_reference",
            database: "ref_transformer",
            pretty: "Transformer Reference",
            component: "TransformerReference",
            kebab: "transformerReference",
            sqlFunctionRef: "p_ref_transformer",
            RestAPI: "transformerReference",
            GraphQL: "transformerReference",
            custom: "transformerReference",
        },
    },
    aiAgent: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        recipeId: {
            frontend: "recipeId",
            backend: "recipe_id",
            database: "recipe_id",
            pretty: "Recipe Id",
            component: "RecipeId",
            kebab: "recipe-id",
            sqlFunctionRef: "p_recipe_id",
            RestAPI: "recipeId",
            GraphQL: "recipeId",
            custom: "recipeId",
        },
        aiSettingsId: {
            frontend: "aiSettingsId",
            backend: "ai_settings_id",
            database: "ai_settings_id",
            pretty: "Ai Settings Id",
            component: "AiSettingsId",
            kebab: "ai-settings-id",
            sqlFunctionRef: "p_ai_settings_id",
            RestAPI: "aiSettingsId",
            GraphQL: "aiSettingsId",
            custom: "aiSettingsId",
        },
        systemMessageOverride: {
            frontend: "systemMessageOverride",
            backend: "system_message_override",
            database: "system_message_override",
            pretty: "System Message Override",
            component: "SystemMessageOverride",
            kebab: "system-message-override",
            sqlFunctionRef: "p_system_message_override",
            RestAPI: "systemMessageOverride",
            GraphQL: "systemMessageOverride",
            custom: "systemMessageOverride",
        },
        aiSettingsReference: {
            frontend: "aiSettingsReference",
            backend: "ai_settings_reference",
            database: "ref_ai_settings",
            pretty: "Ai Settings Reference",
            component: "AiSettingsReference",
            kebab: "ai-settingsReference",
            sqlFunctionRef: "p_ref_ai_settings",
            RestAPI: "aiSettingsReference",
            GraphQL: "aiSettingsReference",
            custom: "aiSettingsReference",
        },
        recipeReference: {
            frontend: "recipeReference",
            backend: "recipe_reference",
            database: "ref_recipe",
            pretty: "Recipe Reference",
            component: "RecipeReference",
            kebab: "recipeReference",
            sqlFunctionRef: "p_ref_recipe",
            RestAPI: "recipeReference",
            GraphQL: "recipeReference",
            custom: "recipeReference",
        },
    },
    aiEndpoint: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        provider: {
            frontend: "provider",
            backend: "provider",
            database: "provider",
            pretty: "Provider",
            component: "Provider",
            kebab: "provider",
            sqlFunctionRef: "p_provider",
            RestAPI: "provider",
            GraphQL: "provider",
            custom: "provider",
        },
        description: {
            frontend: "description",
            backend: "description",
            database: "description",
            pretty: "Description",
            component: "Description",
            kebab: "description",
            sqlFunctionRef: "p_description",
            RestAPI: "description",
            GraphQL: "description",
            custom: "description",
        },
        additionalCost: {
            frontend: "additionalCost",
            backend: "additional_cost",
            database: "additional_cost",
            pretty: "Additional Cost",
            component: "AdditionalCost",
            kebab: "additional-cost",
            sqlFunctionRef: "p_additional_cost",
            RestAPI: "additionalCost",
            GraphQL: "additionalCost",
            custom: "additionalCost",
        },
        costDetails: {
            frontend: "costDetails",
            backend: "cost_details",
            database: "cost_details",
            pretty: "Cost Details",
            component: "CostDetails",
            kebab: "cost-details",
            sqlFunctionRef: "p_cost_details",
            RestAPI: "costDetails",
            GraphQL: "costDetails",
            custom: "costDetails",
        },
        params: {
            frontend: "params",
            backend: "params",
            database: "params",
            pretty: "Params",
            component: "Params",
            kebab: "params",
            sqlFunctionRef: "p_params",
            RestAPI: "params",
            GraphQL: "params",
            custom: "params",
        },
        aiModelEndpointInverse: {
            frontend: "aiModelEndpointInverse",
            backend: "ai_model_endpoint_Inverse",
            database: "ifk_ai_model_endpoint",
            pretty: "Ai Model Endpoint Inverse",
            component: "AiModelEndpointInverse",
            kebab: "ai-model-endpointInverse",
            sqlFunctionRef: "p_ifk_ai_model_endpoint",
            RestAPI: "aiModelEndpointInverse",
            GraphQL: "aiModelEndpointInverse",
            custom: "aiModelEndpointInverse",
        },
        aiSettingsInverse: {
            frontend: "aiSettingsInverse",
            backend: "ai_settings_Inverse",
            database: "ifk_ai_settings",
            pretty: "Ai Settings Inverse",
            component: "AiSettingsInverse",
            kebab: "ai-settingsInverse",
            sqlFunctionRef: "p_ifk_ai_settings",
            RestAPI: "aiSettingsInverse",
            GraphQL: "aiSettingsInverse",
            custom: "aiSettingsInverse",
        },
    },
    aiModel: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        commonName: {
            frontend: "commonName",
            backend: "common_name",
            database: "common_name",
            pretty: "Common Name",
            component: "CommonName",
            kebab: "common-name",
            sqlFunctionRef: "p_common_name",
            RestAPI: "commonName",
            GraphQL: "commonName",
            custom: "commonName",
        },
        modelClass: {
            frontend: "modelClass",
            backend: "model_class",
            database: "model_class",
            pretty: "Model Class",
            component: "ModelClass",
            kebab: "model-class",
            sqlFunctionRef: "p_model_class",
            RestAPI: "modelClass",
            GraphQL: "modelClass",
            custom: "modelClass",
        },
        provider: {
            frontend: "provider",
            backend: "provider",
            database: "provider",
            pretty: "Provider",
            component: "Provider",
            kebab: "provider",
            sqlFunctionRef: "p_provider",
            RestAPI: "provider",
            GraphQL: "provider",
            custom: "provider",
        },
        endpoints: {
            frontend: "endpoints",
            backend: "endpoints",
            database: "endpoints",
            pretty: "Endpoints",
            component: "Endpoints",
            kebab: "endpoints",
            sqlFunctionRef: "p_endpoints",
            RestAPI: "endpoints",
            GraphQL: "endpoints",
            custom: "endpoints",
        },
        contextWindow: {
            frontend: "contextWindow",
            backend: "context_window",
            database: "context_window",
            pretty: "Context Window",
            component: "ContextWindow",
            kebab: "context-window",
            sqlFunctionRef: "p_context_window",
            RestAPI: "contextWindow",
            GraphQL: "contextWindow",
            custom: "contextWindow",
        },
        maxTokens: {
            frontend: "maxTokens",
            backend: "max_tokens",
            database: "max_tokens",
            pretty: "Max Tokens",
            component: "MaxTokens",
            kebab: "max-tokens",
            sqlFunctionRef: "p_max_tokens",
            RestAPI: "maxTokens",
            GraphQL: "maxTokens",
            custom: "maxTokens",
        },
        capabilities: {
            frontend: "capabilities",
            backend: "capabilities",
            database: "capabilities",
            pretty: "Capabilities",
            component: "Capabilities",
            kebab: "capabilities",
            sqlFunctionRef: "p_capabilities",
            RestAPI: "capabilities",
            GraphQL: "capabilities",
            custom: "capabilities",
        },
        controls: {
            frontend: "controls",
            backend: "controls",
            database: "controls",
            pretty: "Controls",
            component: "Controls",
            kebab: "controls",
            sqlFunctionRef: "p_controls",
            RestAPI: "controls",
            GraphQL: "controls",
            custom: "controls",
        },
        modelProvider: {
            frontend: "modelProvider",
            backend: "model_provider",
            database: "model_provider",
            pretty: "Model Provider",
            component: "ModelProvider",
            kebab: "model-provider",
            sqlFunctionRef: "p_model_provider",
            RestAPI: "modelProvider",
            GraphQL: "modelProvider",
            custom: "modelProvider",
        },
        aiProviderReference: {
            frontend: "aiProviderReference",
            backend: "ai_provider_reference",
            database: "ref_ai_provider",
            pretty: "Ai Provider Reference",
            component: "AiProviderReference",
            kebab: "ai-providerReference",
            sqlFunctionRef: "p_ref_ai_provider",
            RestAPI: "aiProviderReference",
            GraphQL: "aiProviderReference",
            custom: "aiProviderReference",
        },
        aiModelEndpointInverse: {
            frontend: "aiModelEndpointInverse",
            backend: "ai_model_endpoint_Inverse",
            database: "ifk_ai_model_endpoint",
            pretty: "Ai Model Endpoint Inverse",
            component: "AiModelEndpointInverse",
            kebab: "ai-model-endpointInverse",
            sqlFunctionRef: "p_ifk_ai_model_endpoint",
            RestAPI: "aiModelEndpointInverse",
            GraphQL: "aiModelEndpointInverse",
            custom: "aiModelEndpointInverse",
        },
        aiSettingsInverse: {
            frontend: "aiSettingsInverse",
            backend: "ai_settings_Inverse",
            database: "ifk_ai_settings",
            pretty: "Ai Settings Inverse",
            component: "AiSettingsInverse",
            kebab: "ai-settingsInverse",
            sqlFunctionRef: "p_ifk_ai_settings",
            RestAPI: "aiSettingsInverse",
            GraphQL: "aiSettingsInverse",
            custom: "aiSettingsInverse",
        },
        recipeModelInverse: {
            frontend: "recipeModelInverse",
            backend: "recipe_model_Inverse",
            database: "ifk_recipe_model",
            pretty: "Recipe Model Inverse",
            component: "RecipeModelInverse",
            kebab: "recipe-modelInverse",
            sqlFunctionRef: "p_ifk_recipe_model",
            RestAPI: "recipeModelInverse",
            GraphQL: "recipeModelInverse",
            custom: "recipeModelInverse",
        },
    },
    aiModelEndpoint: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        aiModelId: {
            frontend: "aiModelId",
            backend: "ai_model_id",
            database: "ai_model_id",
            pretty: "Ai Model Id",
            component: "AiModelId",
            kebab: "ai-model-id",
            sqlFunctionRef: "p_ai_model_id",
            RestAPI: "aiModelId",
            GraphQL: "aiModelId",
            custom: "aiModelId",
        },
        aiEndpointId: {
            frontend: "aiEndpointId",
            backend: "ai_endpoint_id",
            database: "ai_endpoint_id",
            pretty: "Ai Endpoint Id",
            component: "AiEndpointId",
            kebab: "ai-endpoint-id",
            sqlFunctionRef: "p_ai_endpoint_id",
            RestAPI: "aiEndpointId",
            GraphQL: "aiEndpointId",
            custom: "aiEndpointId",
        },
        available: {
            frontend: "available",
            backend: "available",
            database: "available",
            pretty: "Available",
            component: "Available",
            kebab: "available",
            sqlFunctionRef: "p_available",
            RestAPI: "available",
            GraphQL: "available",
            custom: "available",
        },
        endpointPriority: {
            frontend: "endpointPriority",
            backend: "endpoint_priority",
            database: "endpoint_priority",
            pretty: "Endpoint Priority",
            component: "EndpointPriority",
            kebab: "endpoint-priority",
            sqlFunctionRef: "p_endpoint_priority",
            RestAPI: "endpointPriority",
            GraphQL: "endpointPriority",
            custom: "endpointPriority",
        },
        configuration: {
            frontend: "configuration",
            backend: "configuration",
            database: "configuration",
            pretty: "Configuration",
            component: "Configuration",
            kebab: "configuration",
            sqlFunctionRef: "p_configuration",
            RestAPI: "configuration",
            GraphQL: "configuration",
            custom: "configuration",
        },
        notes: {
            frontend: "notes",
            backend: "notes",
            database: "notes",
            pretty: "Notes",
            component: "Notes",
            kebab: "notes",
            sqlFunctionRef: "p_notes",
            RestAPI: "notes",
            GraphQL: "notes",
            custom: "notes",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        aiEndpointReference: {
            frontend: "aiEndpointReference",
            backend: "ai_endpoint_reference",
            database: "ref_ai_endpoint",
            pretty: "Ai Endpoint Reference",
            component: "AiEndpointReference",
            kebab: "ai-endpointReference",
            sqlFunctionRef: "p_ref_ai_endpoint",
            RestAPI: "aiEndpointReference",
            GraphQL: "aiEndpointReference",
            custom: "aiEndpointReference",
        },
        aiModelReference: {
            frontend: "aiModelReference",
            backend: "ai_model_reference",
            database: "ref_ai_model",
            pretty: "Ai Model Reference",
            component: "AiModelReference",
            kebab: "ai-modelReference",
            sqlFunctionRef: "p_ref_ai_model",
            RestAPI: "aiModelReference",
            GraphQL: "aiModelReference",
            custom: "aiModelReference",
        },
    },
    aiProvider: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        companyDescription: {
            frontend: "companyDescription",
            backend: "company_description",
            database: "company_description",
            pretty: "Company Description",
            component: "CompanyDescription",
            kebab: "company-description",
            sqlFunctionRef: "p_company_description",
            RestAPI: "companyDescription",
            GraphQL: "companyDescription",
            custom: "companyDescription",
        },
        documentationLink: {
            frontend: "documentationLink",
            backend: "documentation_link",
            database: "documentation_link",
            pretty: "Documentation Link",
            component: "DocumentationLink",
            kebab: "documentation-link",
            sqlFunctionRef: "p_documentation_link",
            RestAPI: "documentationLink",
            GraphQL: "documentationLink",
            custom: "documentationLink",
        },
        modelsLink: {
            frontend: "modelsLink",
            backend: "models_link",
            database: "models_link",
            pretty: "Models Link",
            component: "ModelsLink",
            kebab: "models-link",
            sqlFunctionRef: "p_models_link",
            RestAPI: "modelsLink",
            GraphQL: "modelsLink",
            custom: "modelsLink",
        },
        aiSettingsInverse: {
            frontend: "aiSettingsInverse",
            backend: "ai_settings_Inverse",
            database: "ifk_ai_settings",
            pretty: "Ai Settings Inverse",
            component: "AiSettingsInverse",
            kebab: "ai-settingsInverse",
            sqlFunctionRef: "p_ifk_ai_settings",
            RestAPI: "aiSettingsInverse",
            GraphQL: "aiSettingsInverse",
            custom: "aiSettingsInverse",
        },
        aiModelInverse: {
            frontend: "aiModelInverse",
            backend: "ai_model_Inverse",
            database: "ifk_ai_model",
            pretty: "Ai Model Inverse",
            component: "AiModelInverse",
            kebab: "ai-modelInverse",
            sqlFunctionRef: "p_ifk_ai_model",
            RestAPI: "aiModelInverse",
            GraphQL: "aiModelInverse",
            custom: "aiModelInverse",
        },
    },
    aiSettings: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        aiEndpoint: {
            frontend: "aiEndpoint",
            backend: "ai_endpoint",
            database: "ai_endpoint",
            pretty: "Ai Endpoint",
            component: "AiEndpoint",
            kebab: "ai-endpoint",
            sqlFunctionRef: "p_ai_endpoint",
            RestAPI: "aiEndpoint",
            GraphQL: "aiEndpoint",
            custom: "aiEndpoint",
        },
        aiProvider: {
            frontend: "aiProvider",
            backend: "ai_provider",
            database: "ai_provider",
            pretty: "Ai Provider",
            component: "AiProvider",
            kebab: "ai-provider",
            sqlFunctionRef: "p_ai_provider",
            RestAPI: "aiProvider",
            GraphQL: "aiProvider",
            custom: "aiProvider",
        },
        aiModel: {
            frontend: "aiModel",
            backend: "ai_model",
            database: "ai_model",
            pretty: "Ai Model",
            component: "AiModel",
            kebab: "ai-model",
            sqlFunctionRef: "p_ai_model",
            RestAPI: "aiModel",
            GraphQL: "aiModel",
            custom: "aiModel",
        },
        temperature: {
            frontend: "temperature",
            backend: "temperature",
            database: "temperature",
            pretty: "Temperature",
            component: "Temperature",
            kebab: "temperature",
            sqlFunctionRef: "p_temperature",
            RestAPI: "temperature",
            GraphQL: "temperature",
            custom: "temperature",
        },
        maxTokens: {
            frontend: "maxTokens",
            backend: "max_tokens",
            database: "max_tokens",
            pretty: "Max Tokens",
            component: "MaxTokens",
            kebab: "max-tokens",
            sqlFunctionRef: "p_max_tokens",
            RestAPI: "maxTokens",
            GraphQL: "maxTokens",
            custom: "maxTokens",
        },
        topP: {
            frontend: "topP",
            backend: "top_p",
            database: "top_p",
            pretty: "Top P",
            component: "TopP",
            kebab: "top-p",
            sqlFunctionRef: "p_top_p",
            RestAPI: "topP",
            GraphQL: "topP",
            custom: "topP",
        },
        frequencyPenalty: {
            frontend: "frequencyPenalty",
            backend: "frequency_penalty",
            database: "frequency_penalty",
            pretty: "Frequency Penalty",
            component: "FrequencyPenalty",
            kebab: "frequency-penalty",
            sqlFunctionRef: "p_frequency_penalty",
            RestAPI: "frequencyPenalty",
            GraphQL: "frequencyPenalty",
            custom: "frequencyPenalty",
        },
        presencePenalty: {
            frontend: "presencePenalty",
            backend: "presence_penalty",
            database: "presence_penalty",
            pretty: "Presence Penalty",
            component: "PresencePenalty",
            kebab: "presence-penalty",
            sqlFunctionRef: "p_presence_penalty",
            RestAPI: "presencePenalty",
            GraphQL: "presencePenalty",
            custom: "presencePenalty",
        },
        stream: {
            frontend: "stream",
            backend: "stream",
            database: "stream",
            pretty: "Stream",
            component: "Stream",
            kebab: "stream",
            sqlFunctionRef: "p_stream",
            RestAPI: "stream",
            GraphQL: "stream",
            custom: "stream",
        },
        responseFormat: {
            frontend: "responseFormat",
            backend: "response_format",
            database: "response_format",
            pretty: "Response Format",
            component: "ResponseFormat",
            kebab: "response-format",
            sqlFunctionRef: "p_response_format",
            RestAPI: "responseFormat",
            GraphQL: "responseFormat",
            custom: "responseFormat",
        },
        size: {
            frontend: "size",
            backend: "size",
            database: "size",
            pretty: "Size",
            component: "Size",
            kebab: "size",
            sqlFunctionRef: "p_size",
            RestAPI: "size",
            GraphQL: "size",
            custom: "size",
        },
        quality: {
            frontend: "quality",
            backend: "quality",
            database: "quality",
            pretty: "Quality",
            component: "Quality",
            kebab: "quality",
            sqlFunctionRef: "p_quality",
            RestAPI: "quality",
            GraphQL: "quality",
            custom: "quality",
        },
        count: {
            frontend: "count",
            backend: "count",
            database: "count",
            pretty: "Count",
            component: "Count",
            kebab: "count",
            sqlFunctionRef: "p_count",
            RestAPI: "count",
            GraphQL: "count",
            custom: "count",
        },
        audioVoice: {
            frontend: "audioVoice",
            backend: "audio_voice",
            database: "audio_voice",
            pretty: "Audio Voice",
            component: "AudioVoice",
            kebab: "audio-voice",
            sqlFunctionRef: "p_audio_voice",
            RestAPI: "audioVoice",
            GraphQL: "audioVoice",
            custom: "audioVoice",
        },
        audioFormat: {
            frontend: "audioFormat",
            backend: "audio_format",
            database: "audio_format",
            pretty: "Audio Format",
            component: "AudioFormat",
            kebab: "audio-format",
            sqlFunctionRef: "p_audio_format",
            RestAPI: "audioFormat",
            GraphQL: "audioFormat",
            custom: "audioFormat",
        },
        modalities: {
            frontend: "modalities",
            backend: "modalities",
            database: "modalities",
            pretty: "Modalities",
            component: "Modalities",
            kebab: "modalities",
            sqlFunctionRef: "p_modalities",
            RestAPI: "modalities",
            GraphQL: "modalities",
            custom: "modalities",
        },
        tools: {
            frontend: "tools",
            backend: "tools",
            database: "tools",
            pretty: "Tools",
            component: "Tools",
            kebab: "tools",
            sqlFunctionRef: "p_tools",
            RestAPI: "tools",
            GraphQL: "tools",
            custom: "tools",
        },
        presetName: {
            frontend: "presetName",
            backend: "preset_name",
            database: "preset_name",
            pretty: "Preset Name",
            component: "PresetName",
            kebab: "preset-name",
            sqlFunctionRef: "p_preset_name",
            RestAPI: "presetName",
            GraphQL: "presetName",
            custom: "presetName",
        },
        aiEndpointReference: {
            frontend: "aiEndpointReference",
            backend: "ai_endpoint_reference",
            database: "ref_ai_endpoint",
            pretty: "Ai Endpoint Reference",
            component: "AiEndpointReference",
            kebab: "ai-endpointReference",
            sqlFunctionRef: "p_ref_ai_endpoint",
            RestAPI: "aiEndpointReference",
            GraphQL: "aiEndpointReference",
            custom: "aiEndpointReference",
        },
        aiModelReference: {
            frontend: "aiModelReference",
            backend: "ai_model_reference",
            database: "ref_ai_model",
            pretty: "Ai Model Reference",
            component: "AiModelReference",
            kebab: "ai-modelReference",
            sqlFunctionRef: "p_ref_ai_model",
            RestAPI: "aiModelReference",
            GraphQL: "aiModelReference",
            custom: "aiModelReference",
        },
        aiProviderReference: {
            frontend: "aiProviderReference",
            backend: "ai_provider_reference",
            database: "ref_ai_provider",
            pretty: "Ai Provider Reference",
            component: "AiProviderReference",
            kebab: "ai-providerReference",
            sqlFunctionRef: "p_ref_ai_provider",
            RestAPI: "aiProviderReference",
            GraphQL: "aiProviderReference",
            custom: "aiProviderReference",
        },
        aiAgentInverse: {
            frontend: "aiAgentInverse",
            backend: "ai_agent_Inverse",
            database: "ifk_ai_agent",
            pretty: "Ai Agent Inverse",
            component: "AiAgentInverse",
            kebab: "ai-agentInverse",
            sqlFunctionRef: "p_ifk_ai_agent",
            RestAPI: "aiAgentInverse",
            GraphQL: "aiAgentInverse",
            custom: "aiAgentInverse",
        },
    },
    applet: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        description: {
            frontend: "description",
            backend: "description",
            database: "description",
            pretty: "Description",
            component: "Description",
            kebab: "description",
            sqlFunctionRef: "p_description",
            RestAPI: "description",
            GraphQL: "description",
            custom: "description",
        },
        creator: {
            frontend: "creator",
            backend: "creator",
            database: "creator",
            pretty: "Creator",
            component: "Creator",
            kebab: "creator",
            sqlFunctionRef: "p_creator",
            RestAPI: "creator",
            GraphQL: "creator",
            custom: "creator",
        },
        type: {
            frontend: "type",
            backend: "type",
            database: "type",
            pretty: "Type",
            component: "Type",
            kebab: "type",
            sqlFunctionRef: "p_type",
            RestAPI: "type",
            GraphQL: "type",
            custom: "type",
        },
        compiledRecipeId: {
            frontend: "compiledRecipeId",
            backend: "compiled_recipe_id",
            database: "compiled_recipe_id",
            pretty: "Compiled Recipe Id",
            component: "CompiledRecipeId",
            kebab: "compiled-recipe-id",
            sqlFunctionRef: "p_compiled_recipe_id",
            RestAPI: "compiledRecipeId",
            GraphQL: "compiledRecipeId",
            custom: "compiledRecipeId",
        },
        slug: {
            frontend: "slug",
            backend: "slug",
            database: "slug",
            pretty: "Slug",
            component: "Slug",
            kebab: "slug",
            sqlFunctionRef: "p_slug",
            RestAPI: "slug",
            GraphQL: "slug",
            custom: "slug",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        userId: {
            frontend: "userId",
            backend: "user_id",
            database: "user_id",
            pretty: "User Id",
            component: "UserId",
            kebab: "user-id",
            sqlFunctionRef: "p_user_id",
            RestAPI: "userId",
            GraphQL: "userId",
            custom: "userId",
        },
        isPublic: {
            frontend: "isPublic",
            backend: "is_public",
            database: "is_public",
            pretty: "Is Public",
            component: "IsPublic",
            kebab: "is-public",
            sqlFunctionRef: "p_is_public",
            RestAPI: "isPublic",
            GraphQL: "isPublic",
            custom: "isPublic",
        },
        dataSourceConfig: {
            frontend: "dataSourceConfig",
            backend: "data_source_config",
            database: "data_source_config",
            pretty: "Data Source Config",
            component: "DataSourceConfig",
            kebab: "data-source-config",
            sqlFunctionRef: "p_data_source_config",
            RestAPI: "dataSourceConfig",
            GraphQL: "dataSourceConfig",
            custom: "dataSourceConfig",
        },
        resultComponentConfig: {
            frontend: "resultComponentConfig",
            backend: "result_component_config",
            database: "result_component_config",
            pretty: "Result Component Config",
            component: "ResultComponentConfig",
            kebab: "result-component-config",
            sqlFunctionRef: "p_result_component_config",
            RestAPI: "resultComponentConfig",
            GraphQL: "resultComponentConfig",
            custom: "resultComponentConfig",
        },
        nextStepConfig: {
            frontend: "nextStepConfig",
            backend: "next_step_config",
            database: "next_step_config",
            pretty: "Next Step Config",
            component: "NextStepConfig",
            kebab: "next-step-config",
            sqlFunctionRef: "p_next_step_config",
            RestAPI: "nextStepConfig",
            GraphQL: "nextStepConfig",
            custom: "nextStepConfig",
        },
        subcategoryId: {
            frontend: "subcategoryId",
            backend: "subcategory_id",
            database: "subcategory_id",
            pretty: "Subcategory Id",
            component: "SubcategoryId",
            kebab: "subcategory-id",
            sqlFunctionRef: "p_subcategory_id",
            RestAPI: "subcategoryId",
            GraphQL: "subcategoryId",
            custom: "subcategoryId",
        },
        ctaText: {
            frontend: "ctaText",
            backend: "cta_text",
            database: "cta_text",
            pretty: "Cta Text",
            component: "CtaText",
            kebab: "cta-text",
            sqlFunctionRef: "p_cta_text",
            RestAPI: "ctaText",
            GraphQL: "ctaText",
            custom: "ctaText",
        },
        theme: {
            frontend: "theme",
            backend: "theme",
            database: "theme",
            pretty: "Theme",
            component: "Theme",
            kebab: "theme",
            sqlFunctionRef: "p_theme",
            RestAPI: "theme",
            GraphQL: "theme",
            custom: "theme",
        },
        compiledRecipeReference: {
            frontend: "compiledRecipeReference",
            backend: "compiled_recipe_reference",
            database: "ref_compiled_recipe",
            pretty: "Compiled Recipe Reference",
            component: "CompiledRecipeReference",
            kebab: "compiled-recipeReference",
            sqlFunctionRef: "p_ref_compiled_recipe",
            RestAPI: "compiledRecipeReference",
            GraphQL: "compiledRecipeReference",
            custom: "compiledRecipeReference",
        },
        subcategoryReference: {
            frontend: "subcategoryReference",
            backend: "subcategory_reference",
            database: "ref_subcategory",
            pretty: "Subcategory Reference",
            component: "SubcategoryReference",
            kebab: "subcategoryReference",
            sqlFunctionRef: "p_ref_subcategory",
            RestAPI: "subcategoryReference",
            GraphQL: "subcategoryReference",
            custom: "subcategoryReference",
        },
    },
    arg: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        required: {
            frontend: "required",
            backend: "required",
            database: "required",
            pretty: "Required",
            component: "Required",
            kebab: "required",
            sqlFunctionRef: "p_required",
            RestAPI: "required",
            GraphQL: "required",
            custom: "required",
        },
        default: {
            frontend: "default",
            backend: "default",
            database: "default",
            pretty: "Default",
            component: "Default",
            kebab: "default",
            sqlFunctionRef: "p_default",
            RestAPI: "default",
            GraphQL: "default",
            custom: "default",
        },
        dataType: {
            frontend: "dataType",
            backend: "data_type",
            database: "data_type",
            pretty: "Data Type",
            component: "DataType",
            kebab: "data-type",
            sqlFunctionRef: "p_data_type",
            RestAPI: "dataType",
            GraphQL: "dataType",
            custom: "dataType",
        },
        ready: {
            frontend: "ready",
            backend: "ready",
            database: "ready",
            pretty: "Ready",
            component: "Ready",
            kebab: "ready",
            sqlFunctionRef: "p_ready",
            RestAPI: "ready",
            GraphQL: "ready",
            custom: "ready",
        },
        registeredFunction: {
            frontend: "registeredFunction",
            backend: "registered_function",
            database: "registered_function",
            pretty: "Registered Function",
            component: "RegisteredFunction",
            kebab: "registered-function",
            sqlFunctionRef: "p_registered_function",
            RestAPI: "registeredFunction",
            GraphQL: "registeredFunction",
            custom: "registeredFunction",
        },
        registeredFunctionReference: {
            frontend: "registeredFunctionReference",
            backend: "registered_function_reference",
            database: "ref_registered_function",
            pretty: "Registered Function Reference",
            component: "RegisteredFunctionReference",
            kebab: "registered-functionReference",
            sqlFunctionRef: "p_ref_registered_function",
            RestAPI: "registeredFunctionReference",
            GraphQL: "registeredFunctionReference",
            custom: "registeredFunctionReference",
        },
    },
    audioLabel: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        description: {
            frontend: "description",
            backend: "description",
            database: "description",
            pretty: "Description",
            component: "Description",
            kebab: "description",
            sqlFunctionRef: "p_description",
            RestAPI: "description",
            GraphQL: "description",
            custom: "description",
        },
        audioRecordingInverse: {
            frontend: "audioRecordingInverse",
            backend: "audio_recording_Inverse",
            database: "ifk_audio_recording",
            pretty: "Audio Recording Inverse",
            component: "AudioRecordingInverse",
            kebab: "audio-recordingInverse",
            sqlFunctionRef: "p_ifk_audio_recording",
            RestAPI: "audioRecordingInverse",
            GraphQL: "audioRecordingInverse",
            custom: "audioRecordingInverse",
        },
    },
    audioRecording: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        userId: {
            frontend: "userId",
            backend: "user_id",
            database: "user_id",
            pretty: "User Id",
            component: "UserId",
            kebab: "user-id",
            sqlFunctionRef: "p_user_id",
            RestAPI: "userId",
            GraphQL: "userId",
            custom: "userId",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        label: {
            frontend: "label",
            backend: "label",
            database: "label",
            pretty: "Label",
            component: "Label",
            kebab: "label",
            sqlFunctionRef: "p_label",
            RestAPI: "label",
            GraphQL: "label",
            custom: "label",
        },
        fileUrl: {
            frontend: "fileUrl",
            backend: "file_url",
            database: "file_url",
            pretty: "File Url",
            component: "FileUrl",
            kebab: "file-url",
            sqlFunctionRef: "p_file_url",
            RestAPI: "fileUrl",
            GraphQL: "fileUrl",
            custom: "fileUrl",
        },
        duration: {
            frontend: "duration",
            backend: "duration",
            database: "duration",
            pretty: "Duration",
            component: "Duration",
            kebab: "duration",
            sqlFunctionRef: "p_duration",
            RestAPI: "duration",
            GraphQL: "duration",
            custom: "duration",
        },
        localPath: {
            frontend: "localPath",
            backend: "local_path",
            database: "local_path",
            pretty: "Local Path",
            component: "LocalPath",
            kebab: "local-path",
            sqlFunctionRef: "p_local_path",
            RestAPI: "localPath",
            GraphQL: "localPath",
            custom: "localPath",
        },
        size: {
            frontend: "size",
            backend: "size",
            database: "size",
            pretty: "Size",
            component: "Size",
            kebab: "size",
            sqlFunctionRef: "p_size",
            RestAPI: "size",
            GraphQL: "size",
            custom: "size",
        },
        isPublic: {
            frontend: "isPublic",
            backend: "is_public",
            database: "is_public",
            pretty: "Is Public",
            component: "IsPublic",
            kebab: "is-public",
            sqlFunctionRef: "p_is_public",
            RestAPI: "isPublic",
            GraphQL: "isPublic",
            custom: "isPublic",
        },
        audioLabelReference: {
            frontend: "audioLabelReference",
            backend: "audio_label_reference",
            database: "ref_audio_label",
            pretty: "Audio Label Reference",
            component: "AudioLabelReference",
            kebab: "audio-labelReference",
            sqlFunctionRef: "p_ref_audio_label",
            RestAPI: "audioLabelReference",
            GraphQL: "audioLabelReference",
            custom: "audioLabelReference",
        },
    },
    audioRecordingUsers: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        firstName: {
            frontend: "firstName",
            backend: "first_name",
            database: "first_name",
            pretty: "First Name",
            component: "FirstName",
            kebab: "first-name",
            sqlFunctionRef: "p_first_name",
            RestAPI: "firstName",
            GraphQL: "firstName",
            custom: "firstName",
        },
        lastName: {
            frontend: "lastName",
            backend: "last_name",
            database: "last_name",
            pretty: "Last Name",
            component: "LastName",
            kebab: "last-name",
            sqlFunctionRef: "p_last_name",
            RestAPI: "lastName",
            GraphQL: "lastName",
            custom: "lastName",
        },
        email: {
            frontend: "email",
            backend: "email",
            database: "email",
            pretty: "Email",
            component: "Email",
            kebab: "email",
            sqlFunctionRef: "p_email",
            RestAPI: "email",
            GraphQL: "email",
            custom: "email",
        },
    },
    automationBoundaryBroker: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        matrix: {
            frontend: "matrix",
            backend: "matrix",
            database: "matrix",
            pretty: "Matrix",
            component: "Matrix",
            kebab: "matrix",
            sqlFunctionRef: "p_matrix",
            RestAPI: "matrix",
            GraphQL: "matrix",
            custom: "matrix",
        },
        broker: {
            frontend: "broker",
            backend: "broker",
            database: "broker",
            pretty: "Broker",
            component: "Broker",
            kebab: "broker",
            sqlFunctionRef: "p_broker",
            RestAPI: "broker",
            GraphQL: "broker",
            custom: "broker",
        },
        sparkSource: {
            frontend: "sparkSource",
            backend: "spark_source",
            database: "spark_source",
            pretty: "Spark Source",
            component: "SparkSource",
            kebab: "spark-source",
            sqlFunctionRef: "p_spark_source",
            RestAPI: "sparkSource",
            GraphQL: "sparkSource",
            custom: "sparkSource",
        },
        beaconDestination: {
            frontend: "beaconDestination",
            backend: "beacon_destination",
            database: "beacon_destination",
            pretty: "Beacon Destination",
            component: "BeaconDestination",
            kebab: "beacon-destination",
            sqlFunctionRef: "p_beacon_destination",
            RestAPI: "beaconDestination",
            GraphQL: "beaconDestination",
            custom: "beaconDestination",
        },
        brokerReference: {
            frontend: "brokerReference",
            backend: "broker_reference",
            database: "ref_broker",
            pretty: "Broker Reference",
            component: "BrokerReference",
            kebab: "brokerReference",
            sqlFunctionRef: "p_ref_broker",
            RestAPI: "brokerReference",
            GraphQL: "brokerReference",
            custom: "brokerReference",
        },
        automationMatrixReference: {
            frontend: "automationMatrixReference",
            backend: "automation_matrix_reference",
            database: "ref_automation_matrix",
            pretty: "Automation Matrix Reference",
            component: "AutomationMatrixReference",
            kebab: "automation-matrixReference",
            sqlFunctionRef: "p_ref_automation_matrix",
            RestAPI: "automationMatrixReference",
            GraphQL: "automationMatrixReference",
            custom: "automationMatrixReference",
        },
    },
    automationMatrix: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        description: {
            frontend: "description",
            backend: "description",
            database: "description",
            pretty: "Description",
            component: "Description",
            kebab: "description",
            sqlFunctionRef: "p_description",
            RestAPI: "description",
            GraphQL: "description",
            custom: "description",
        },
        averageSeconds: {
            frontend: "averageSeconds",
            backend: "average_seconds",
            database: "average_seconds",
            pretty: "Average Seconds",
            component: "AverageSeconds",
            kebab: "average-seconds",
            sqlFunctionRef: "p_average_seconds",
            RestAPI: "averageSeconds",
            GraphQL: "averageSeconds",
            custom: "averageSeconds",
        },
        isAutomated: {
            frontend: "isAutomated",
            backend: "is_automated",
            database: "is_automated",
            pretty: "Is Automated",
            component: "IsAutomated",
            kebab: "is-automated",
            sqlFunctionRef: "p_is_automated",
            RestAPI: "isAutomated",
            GraphQL: "isAutomated",
            custom: "isAutomated",
        },
        cognitionMatrices: {
            frontend: "cognitionMatrices",
            backend: "cognition_matrices",
            database: "cognition_matrices",
            pretty: "Cognition Matrices",
            component: "CognitionMatrices",
            kebab: "cognition-matrices",
            sqlFunctionRef: "p_cognition_matrices",
            RestAPI: "cognitionMatrices",
            GraphQL: "cognitionMatrices",
            custom: "cognitionMatrices",
        },
        actionInverse: {
            frontend: "actionInverse",
            backend: "action_Inverse",
            database: "ifk_action",
            pretty: "Action Inverse",
            component: "ActionInverse",
            kebab: "actionInverse",
            sqlFunctionRef: "p_ifk_action",
            RestAPI: "actionInverse",
            GraphQL: "actionInverse",
            custom: "actionInverse",
        },
        automationBoundaryBrokerInverse: {
            frontend: "automationBoundaryBrokerInverse",
            backend: "automation_boundary_broker_Inverse",
            database: "ifk_automation_boundary_broker",
            pretty: "Automation Boundary Broker Inverse",
            component: "AutomationBoundaryBrokerInverse",
            kebab: "automation-boundary-brokerInverse",
            sqlFunctionRef: "p_ifk_automation_boundary_broker",
            RestAPI: "automationBoundaryBrokerInverse",
            GraphQL: "automationBoundaryBrokerInverse",
            custom: "automationBoundaryBrokerInverse",
        },
    },
    broker: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        value: {
            frontend: "value",
            backend: "value",
            database: "value",
            pretty: "Value",
            component: "Value",
            kebab: "value",
            sqlFunctionRef: "p_value",
            RestAPI: "value",
            GraphQL: "value",
            custom: "value",
        },
        dataType: {
            frontend: "dataType",
            backend: "data_type",
            database: "data_type",
            pretty: "Data Type",
            component: "DataType",
            kebab: "data-type",
            sqlFunctionRef: "p_data_type",
            RestAPI: "dataType",
            GraphQL: "dataType",
            custom: "dataType",
        },
        ready: {
            frontend: "ready",
            backend: "ready",
            database: "ready",
            pretty: "Ready",
            component: "Ready",
            kebab: "ready",
            sqlFunctionRef: "p_ready",
            RestAPI: "ready",
            GraphQL: "ready",
            custom: "ready",
        },
        defaultSource: {
            frontend: "defaultSource",
            backend: "default_source",
            database: "default_source",
            pretty: "Default Source",
            component: "DefaultSource",
            kebab: "default-source",
            sqlFunctionRef: "p_default_source",
            RestAPI: "defaultSource",
            GraphQL: "defaultSource",
            custom: "defaultSource",
        },
        displayName: {
            frontend: "displayName",
            backend: "display_name",
            database: "display_name",
            pretty: "Display Name",
            component: "DisplayName",
            kebab: "display-name",
            sqlFunctionRef: "p_display_name",
            RestAPI: "displayName",
            GraphQL: "displayName",
            custom: "displayName",
        },
        description: {
            frontend: "description",
            backend: "description",
            database: "description",
            pretty: "Description",
            component: "Description",
            kebab: "description",
            sqlFunctionRef: "p_description",
            RestAPI: "description",
            GraphQL: "description",
            custom: "description",
        },
        tooltip: {
            frontend: "tooltip",
            backend: "tooltip",
            database: "tooltip",
            pretty: "Tooltip",
            component: "Tooltip",
            kebab: "tooltip",
            sqlFunctionRef: "p_tooltip",
            RestAPI: "tooltip",
            GraphQL: "tooltip",
            custom: "tooltip",
        },
        validationRules: {
            frontend: "validationRules",
            backend: "validation_rules",
            database: "validation_rules",
            pretty: "Validation Rules",
            component: "ValidationRules",
            kebab: "validation-rules",
            sqlFunctionRef: "p_validation_rules",
            RestAPI: "validationRules",
            GraphQL: "validationRules",
            custom: "validationRules",
        },
        sampleEntries: {
            frontend: "sampleEntries",
            backend: "sample_entries",
            database: "sample_entries",
            pretty: "Sample Entries",
            component: "SampleEntries",
            kebab: "sample-entries",
            sqlFunctionRef: "p_sample_entries",
            RestAPI: "sampleEntries",
            GraphQL: "sampleEntries",
            custom: "sampleEntries",
        },
        customSourceComponent: {
            frontend: "customSourceComponent",
            backend: "custom_source_component",
            database: "custom_source_component",
            pretty: "Custom Source Component",
            component: "CustomSourceComponent",
            kebab: "custom-source-component",
            sqlFunctionRef: "p_custom_source_component",
            RestAPI: "customSourceComponent",
            GraphQL: "customSourceComponent",
            custom: "customSourceComponent",
        },
        additionalParams: {
            frontend: "additionalParams",
            backend: "additional_params",
            database: "additional_params",
            pretty: "Additional Params",
            component: "AdditionalParams",
            kebab: "additional-params",
            sqlFunctionRef: "p_additional_params",
            RestAPI: "additionalParams",
            GraphQL: "additionalParams",
            custom: "additionalParams",
        },
        otherSourceParams: {
            frontend: "otherSourceParams",
            backend: "other_source_params",
            database: "other_source_params",
            pretty: "Other Source Params",
            component: "OtherSourceParams",
            kebab: "other-source-params",
            sqlFunctionRef: "p_other_source_params",
            RestAPI: "otherSourceParams",
            GraphQL: "otherSourceParams",
            custom: "otherSourceParams",
        },
        defaultDestination: {
            frontend: "defaultDestination",
            backend: "default_destination",
            database: "default_destination",
            pretty: "Default Destination",
            component: "DefaultDestination",
            kebab: "default-destination",
            sqlFunctionRef: "p_default_destination",
            RestAPI: "defaultDestination",
            GraphQL: "defaultDestination",
            custom: "defaultDestination",
        },
        outputComponent: {
            frontend: "outputComponent",
            backend: "output_component",
            database: "output_component",
            pretty: "Output Component",
            component: "OutputComponent",
            kebab: "output-component",
            sqlFunctionRef: "p_output_component",
            RestAPI: "outputComponent",
            GraphQL: "outputComponent",
            custom: "outputComponent",
        },
        tags: {
            frontend: "tags",
            backend: "tags",
            database: "tags",
            pretty: "Tags",
            component: "Tags",
            kebab: "tags",
            sqlFunctionRef: "p_tags",
            RestAPI: "tags",
            GraphQL: "tags",
            custom: "tags",
        },
        stringValue: {
            frontend: "stringValue",
            backend: "string_value",
            database: "string_value",
            pretty: "String Value",
            component: "StringValue",
            kebab: "string-value",
            sqlFunctionRef: "p_string_value",
            RestAPI: "stringValue",
            GraphQL: "stringValue",
            custom: "stringValue",
        },
        dataInputComponentReference: {
            frontend: "dataInputComponentReference",
            backend: "data_input_component_reference",
            database: "ref_data_input_component",
            pretty: "Data Input Component Reference",
            component: "DataInputComponentReference",
            kebab: "data-input-componentReference",
            sqlFunctionRef: "p_ref_data_input_component",
            RestAPI: "dataInputComponentReference",
            GraphQL: "dataInputComponentReference",
            custom: "dataInputComponentReference",
        },
        recipeBrokerInverse: {
            frontend: "recipeBrokerInverse",
            backend: "recipe_broker_Inverse",
            database: "ifk_recipe_broker",
            pretty: "Recipe Broker Inverse",
            component: "RecipeBrokerInverse",
            kebab: "recipe-brokerInverse",
            sqlFunctionRef: "p_ifk_recipe_broker",
            RestAPI: "recipeBrokerInverse",
            GraphQL: "recipeBrokerInverse",
            custom: "recipeBrokerInverse",
        },
        registeredFunctionInverse: {
            frontend: "registeredFunctionInverse",
            backend: "registered_function_Inverse",
            database: "ifk_registered_function",
            pretty: "Registered Function Inverse",
            component: "RegisteredFunctionInverse",
            kebab: "registered-functionInverse",
            sqlFunctionRef: "p_ifk_registered_function",
            RestAPI: "registeredFunctionInverse",
            GraphQL: "registeredFunctionInverse",
            custom: "registeredFunctionInverse",
        },
        automationBoundaryBrokerInverse: {
            frontend: "automationBoundaryBrokerInverse",
            backend: "automation_boundary_broker_Inverse",
            database: "ifk_automation_boundary_broker",
            pretty: "Automation Boundary Broker Inverse",
            component: "AutomationBoundaryBrokerInverse",
            kebab: "automation-boundary-brokerInverse",
            sqlFunctionRef: "p_ifk_automation_boundary_broker",
            RestAPI: "automationBoundaryBrokerInverse",
            GraphQL: "automationBoundaryBrokerInverse",
            custom: "automationBoundaryBrokerInverse",
        },
    },
    brokerValue: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        userId: {
            frontend: "userId",
            backend: "user_id",
            database: "user_id",
            pretty: "User Id",
            component: "UserId",
            kebab: "user-id",
            sqlFunctionRef: "p_user_id",
            RestAPI: "userId",
            GraphQL: "userId",
            custom: "userId",
        },
        dataBroker: {
            frontend: "dataBroker",
            backend: "data_broker",
            database: "data_broker",
            pretty: "Data Broker",
            component: "DataBroker",
            kebab: "data-broker",
            sqlFunctionRef: "p_data_broker",
            RestAPI: "dataBroker",
            GraphQL: "dataBroker",
            custom: "dataBroker",
        },
        data: {
            frontend: "data",
            backend: "data",
            database: "data",
            pretty: "Data",
            component: "Data",
            kebab: "data",
            sqlFunctionRef: "p_data",
            RestAPI: "data",
            GraphQL: "data",
            custom: "data",
        },
        category: {
            frontend: "category",
            backend: "category",
            database: "category",
            pretty: "Category",
            component: "Category",
            kebab: "category",
            sqlFunctionRef: "p_category",
            RestAPI: "category",
            GraphQL: "category",
            custom: "category",
        },
        subCategory: {
            frontend: "subCategory",
            backend: "sub_category",
            database: "sub_category",
            pretty: "Sub Category",
            component: "SubCategory",
            kebab: "sub-category",
            sqlFunctionRef: "p_sub_category",
            RestAPI: "subCategory",
            GraphQL: "subCategory",
            custom: "subCategory",
        },
        tags: {
            frontend: "tags",
            backend: "tags",
            database: "tags",
            pretty: "Tags",
            component: "Tags",
            kebab: "tags",
            sqlFunctionRef: "p_tags",
            RestAPI: "tags",
            GraphQL: "tags",
            custom: "tags",
        },
        comments: {
            frontend: "comments",
            backend: "comments",
            database: "comments",
            pretty: "Comments",
            component: "Comments",
            kebab: "comments",
            sqlFunctionRef: "p_comments",
            RestAPI: "comments",
            GraphQL: "comments",
            custom: "comments",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        dataBrokerReference: {
            frontend: "dataBrokerReference",
            backend: "data_broker_reference",
            database: "ref_data_broker",
            pretty: "Data Broker Reference",
            component: "DataBrokerReference",
            kebab: "data-brokerReference",
            sqlFunctionRef: "p_ref_data_broker",
            RestAPI: "dataBrokerReference",
            GraphQL: "dataBrokerReference",
            custom: "dataBrokerReference",
        },
    },
    bucketStructures: {
        bucketId: {
            frontend: "bucketId",
            backend: "bucket_id",
            database: "bucket_id",
            pretty: "Bucket Id",
            component: "BucketId",
            kebab: "bucket-id",
            sqlFunctionRef: "p_bucket_id",
            RestAPI: "bucketId",
            GraphQL: "bucketId",
            custom: "bucketId",
        },
        structure: {
            frontend: "structure",
            backend: "structure",
            database: "structure",
            pretty: "Structure",
            component: "Structure",
            kebab: "structure",
            sqlFunctionRef: "p_structure",
            RestAPI: "structure",
            GraphQL: "structure",
            custom: "structure",
        },
        lastUpdated: {
            frontend: "lastUpdated",
            backend: "last_updated",
            database: "last_updated",
            pretty: "Last Updated",
            component: "LastUpdated",
            kebab: "last-updated",
            sqlFunctionRef: "p_last_updated",
            RestAPI: "lastUpdated",
            GraphQL: "lastUpdated",
            custom: "lastUpdated",
        },
    },
    bucketTreeStructures: {
        bucketId: {
            frontend: "bucketId",
            backend: "bucket_id",
            database: "bucket_id",
            pretty: "Bucket Id",
            component: "BucketId",
            kebab: "bucket-id",
            sqlFunctionRef: "p_bucket_id",
            RestAPI: "bucketId",
            GraphQL: "bucketId",
            custom: "bucketId",
        },
        treeStructure: {
            frontend: "treeStructure",
            backend: "tree_structure",
            database: "tree_structure",
            pretty: "Tree Structure",
            component: "TreeStructure",
            kebab: "tree-structure",
            sqlFunctionRef: "p_tree_structure",
            RestAPI: "treeStructure",
            GraphQL: "treeStructure",
            custom: "treeStructure",
        },
        lastUpdated: {
            frontend: "lastUpdated",
            backend: "last_updated",
            database: "last_updated",
            pretty: "Last Updated",
            component: "LastUpdated",
            kebab: "last-updated",
            sqlFunctionRef: "p_last_updated",
            RestAPI: "lastUpdated",
            GraphQL: "lastUpdated",
            custom: "lastUpdated",
        },
    },
    category: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        description: {
            frontend: "description",
            backend: "description",
            database: "description",
            pretty: "Description",
            component: "Description",
            kebab: "description",
            sqlFunctionRef: "p_description",
            RestAPI: "description",
            GraphQL: "description",
            custom: "description",
        },
        slug: {
            frontend: "slug",
            backend: "slug",
            database: "slug",
            pretty: "Slug",
            component: "Slug",
            kebab: "slug",
            sqlFunctionRef: "p_slug",
            RestAPI: "slug",
            GraphQL: "slug",
            custom: "slug",
        },
        icon: {
            frontend: "icon",
            backend: "icon",
            database: "icon",
            pretty: "Icon",
            component: "Icon",
            kebab: "icon",
            sqlFunctionRef: "p_icon",
            RestAPI: "icon",
            GraphQL: "icon",
            custom: "icon",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        subcategoryInverse: {
            frontend: "subcategoryInverse",
            backend: "subcategory_Inverse",
            database: "ifk_subcategory",
            pretty: "Subcategory Inverse",
            component: "SubcategoryInverse",
            kebab: "subcategoryInverse",
            sqlFunctionRef: "p_ifk_subcategory",
            RestAPI: "subcategoryInverse",
            GraphQL: "subcategoryInverse",
            custom: "subcategoryInverse",
        },
    },
    compiledRecipe: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        recipeId: {
            frontend: "recipeId",
            backend: "recipe_id",
            database: "recipe_id",
            pretty: "Recipe Id",
            component: "RecipeId",
            kebab: "recipe-id",
            sqlFunctionRef: "p_recipe_id",
            RestAPI: "recipeId",
            GraphQL: "recipeId",
            custom: "recipeId",
        },
        version: {
            frontend: "version",
            backend: "version",
            database: "version",
            pretty: "Version",
            component: "Version",
            kebab: "version",
            sqlFunctionRef: "p_version",
            RestAPI: "version",
            GraphQL: "version",
            custom: "version",
        },
        compiledRecipe: {
            frontend: "compiledRecipe",
            backend: "compiled_recipe",
            database: "compiled_recipe",
            pretty: "Compiled Recipe",
            component: "CompiledRecipe",
            kebab: "compiled-recipe",
            sqlFunctionRef: "p_compiled_recipe",
            RestAPI: "compiledRecipe",
            GraphQL: "compiledRecipe",
            custom: "compiledRecipe",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        updatedAt: {
            frontend: "updatedAt",
            backend: "updated_at",
            database: "updated_at",
            pretty: "Updated At",
            component: "UpdatedAt",
            kebab: "updated-at",
            sqlFunctionRef: "p_updated_at",
            RestAPI: "updatedAt",
            GraphQL: "updatedAt",
            custom: "updatedAt",
        },
        userId: {
            frontend: "userId",
            backend: "user_id",
            database: "user_id",
            pretty: "User Id",
            component: "UserId",
            kebab: "user-id",
            sqlFunctionRef: "p_user_id",
            RestAPI: "userId",
            GraphQL: "userId",
            custom: "userId",
        },
        isPublic: {
            frontend: "isPublic",
            backend: "is_public",
            database: "is_public",
            pretty: "Is Public",
            component: "IsPublic",
            kebab: "is-public",
            sqlFunctionRef: "p_is_public",
            RestAPI: "isPublic",
            GraphQL: "isPublic",
            custom: "isPublic",
        },
        authenticatedRead: {
            frontend: "authenticatedRead",
            backend: "authenticated_read",
            database: "authenticated_read",
            pretty: "Authenticated Read",
            component: "AuthenticatedRead",
            kebab: "authenticated-read",
            sqlFunctionRef: "p_authenticated_read",
            RestAPI: "authenticatedRead",
            GraphQL: "authenticatedRead",
            custom: "authenticatedRead",
        },
        recipeReference: {
            frontend: "recipeReference",
            backend: "recipe_reference",
            database: "ref_recipe",
            pretty: "Recipe Reference",
            component: "RecipeReference",
            kebab: "recipeReference",
            sqlFunctionRef: "p_ref_recipe",
            RestAPI: "recipeReference",
            GraphQL: "recipeReference",
            custom: "recipeReference",
        },
        appletInverse: {
            frontend: "appletInverse",
            backend: "applet_Inverse",
            database: "ifk_applet",
            pretty: "Applet Inverse",
            component: "AppletInverse",
            kebab: "appletInverse",
            sqlFunctionRef: "p_ifk_applet",
            RestAPI: "appletInverse",
            GraphQL: "appletInverse",
            custom: "appletInverse",
        },
    },
    conversation: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        updatedAt: {
            frontend: "updatedAt",
            backend: "updated_at",
            database: "updated_at",
            pretty: "Updated At",
            component: "UpdatedAt",
            kebab: "updated-at",
            sqlFunctionRef: "p_updated_at",
            RestAPI: "updatedAt",
            GraphQL: "updatedAt",
            custom: "updatedAt",
        },
        userId: {
            frontend: "userId",
            backend: "user_id",
            database: "user_id",
            pretty: "User Id",
            component: "UserId",
            kebab: "user-id",
            sqlFunctionRef: "p_user_id",
            RestAPI: "userId",
            GraphQL: "userId",
            custom: "userId",
        },
        metadata: {
            frontend: "metadata",
            backend: "metadata",
            database: "metadata",
            pretty: "Metadata",
            component: "Metadata",
            kebab: "metadata",
            sqlFunctionRef: "p_metadata",
            RestAPI: "metadata",
            GraphQL: "metadata",
            custom: "metadata",
        },
        label: {
            frontend: "label",
            backend: "label",
            database: "label",
            pretty: "Label",
            component: "Label",
            kebab: "label",
            sqlFunctionRef: "p_label",
            RestAPI: "label",
            GraphQL: "label",
            custom: "label",
        },
        messageInverse: {
            frontend: "messageInverse",
            backend: "message_Inverse",
            database: "ifk_message",
            pretty: "Message Inverse",
            component: "MessageInverse",
            kebab: "messageInverse",
            sqlFunctionRef: "p_ifk_message",
            RestAPI: "messageInverse",
            GraphQL: "messageInverse",
            custom: "messageInverse",
        },
    },
    dataBroker: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        dataType: {
            frontend: "dataType",
            backend: "data_type",
            database: "data_type",
            pretty: "Data Type",
            component: "DataType",
            kebab: "data-type",
            sqlFunctionRef: "p_data_type",
            RestAPI: "dataType",
            GraphQL: "dataType",
            custom: "dataType",
        },
        defaultValue: {
            frontend: "defaultValue",
            backend: "default_value",
            database: "default_value",
            pretty: "Default Value",
            component: "DefaultValue",
            kebab: "default-value",
            sqlFunctionRef: "p_default_value",
            RestAPI: "defaultValue",
            GraphQL: "defaultValue",
            custom: "defaultValue",
        },
        inputComponent: {
            frontend: "inputComponent",
            backend: "input_component",
            database: "input_component",
            pretty: "Input Component",
            component: "InputComponent",
            kebab: "input-component",
            sqlFunctionRef: "p_input_component",
            RestAPI: "inputComponent",
            GraphQL: "inputComponent",
            custom: "inputComponent",
        },
        color: {
            frontend: "color",
            backend: "color",
            database: "color",
            pretty: "Color",
            component: "Color",
            kebab: "color",
            sqlFunctionRef: "p_color",
            RestAPI: "color",
            GraphQL: "color",
            custom: "color",
        },
        outputComponent: {
            frontend: "outputComponent",
            backend: "output_component",
            database: "output_component",
            pretty: "Output Component",
            component: "OutputComponent",
            kebab: "output-component",
            sqlFunctionRef: "p_output_component",
            RestAPI: "outputComponent",
            GraphQL: "outputComponent",
            custom: "outputComponent",
        },
        dataInputComponentReference: {
            frontend: "dataInputComponentReference",
            backend: "data_input_component_reference",
            database: "ref_data_input_component",
            pretty: "Data Input Component Reference",
            component: "DataInputComponentReference",
            kebab: "data-input-componentReference",
            sqlFunctionRef: "p_ref_data_input_component",
            RestAPI: "dataInputComponentReference",
            GraphQL: "dataInputComponentReference",
            custom: "dataInputComponentReference",
        },
        dataOutputComponentReference: {
            frontend: "dataOutputComponentReference",
            backend: "data_output_component_reference",
            database: "ref_data_output_component",
            pretty: "Data Output Component Reference",
            component: "DataOutputComponentReference",
            kebab: "data-output-componentReference",
            sqlFunctionRef: "p_ref_data_output_component",
            RestAPI: "dataOutputComponentReference",
            GraphQL: "dataOutputComponentReference",
            custom: "dataOutputComponentReference",
        },
        brokerValueInverse: {
            frontend: "brokerValueInverse",
            backend: "broker_value_Inverse",
            database: "ifk_broker_value",
            pretty: "Broker Value Inverse",
            component: "BrokerValueInverse",
            kebab: "broker-valueInverse",
            sqlFunctionRef: "p_ifk_broker_value",
            RestAPI: "brokerValueInverse",
            GraphQL: "brokerValueInverse",
            custom: "brokerValueInverse",
        },
        messageBrokerInverse: {
            frontend: "messageBrokerInverse",
            backend: "message_broker_Inverse",
            database: "ifk_message_broker",
            pretty: "Message Broker Inverse",
            component: "MessageBrokerInverse",
            kebab: "message-brokerInverse",
            sqlFunctionRef: "p_ifk_message_broker",
            RestAPI: "messageBrokerInverse",
            GraphQL: "messageBrokerInverse",
            custom: "messageBrokerInverse",
        },
    },
    dataInputComponent: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        options: {
            frontend: "options",
            backend: "options",
            database: "options",
            pretty: "Options",
            component: "Options",
            kebab: "options",
            sqlFunctionRef: "p_options",
            RestAPI: "options",
            GraphQL: "options",
            custom: "options",
        },
        includeOther: {
            frontend: "includeOther",
            backend: "include_other",
            database: "include_other",
            pretty: "Include Other",
            component: "IncludeOther",
            kebab: "include-other",
            sqlFunctionRef: "p_include_other",
            RestAPI: "includeOther",
            GraphQL: "includeOther",
            custom: "includeOther",
        },
        min: {
            frontend: "min",
            backend: "min",
            database: "min",
            pretty: "Min",
            component: "Min",
            kebab: "min",
            sqlFunctionRef: "p_min",
            RestAPI: "min",
            GraphQL: "min",
            custom: "min",
        },
        max: {
            frontend: "max",
            backend: "max",
            database: "max",
            pretty: "Max",
            component: "Max",
            kebab: "max",
            sqlFunctionRef: "p_max",
            RestAPI: "max",
            GraphQL: "max",
            custom: "max",
        },
        step: {
            frontend: "step",
            backend: "step",
            database: "step",
            pretty: "Step",
            component: "Step",
            kebab: "step",
            sqlFunctionRef: "p_step",
            RestAPI: "step",
            GraphQL: "step",
            custom: "step",
        },
        acceptableFiletypes: {
            frontend: "acceptableFiletypes",
            backend: "acceptable_filetypes",
            database: "acceptable_filetypes",
            pretty: "Acceptable Filetypes",
            component: "AcceptableFiletypes",
            kebab: "acceptable-filetypes",
            sqlFunctionRef: "p_acceptable_filetypes",
            RestAPI: "acceptableFiletypes",
            GraphQL: "acceptableFiletypes",
            custom: "acceptableFiletypes",
        },
        src: {
            frontend: "src",
            backend: "src",
            database: "src",
            pretty: "Src",
            component: "Src",
            kebab: "src",
            sqlFunctionRef: "p_src",
            RestAPI: "src",
            GraphQL: "src",
            custom: "src",
        },
        colorOverrides: {
            frontend: "colorOverrides",
            backend: "color_overrides",
            database: "color_overrides",
            pretty: "Color Overrides",
            component: "ColorOverrides",
            kebab: "color-overrides",
            sqlFunctionRef: "p_color_overrides",
            RestAPI: "colorOverrides",
            GraphQL: "colorOverrides",
            custom: "colorOverrides",
        },
        additionalParams: {
            frontend: "additionalParams",
            backend: "additional_params",
            database: "additional_params",
            pretty: "Additional Params",
            component: "AdditionalParams",
            kebab: "additional-params",
            sqlFunctionRef: "p_additional_params",
            RestAPI: "additionalParams",
            GraphQL: "additionalParams",
            custom: "additionalParams",
        },
        subComponent: {
            frontend: "subComponent",
            backend: "sub_component",
            database: "sub_component",
            pretty: "Sub Component",
            component: "SubComponent",
            kebab: "sub-component",
            sqlFunctionRef: "p_sub_component",
            RestAPI: "subComponent",
            GraphQL: "subComponent",
            custom: "subComponent",
        },
        component: {
            frontend: "component",
            backend: "component",
            database: "component",
            pretty: "Component",
            component: "Component",
            kebab: "component",
            sqlFunctionRef: "p_component",
            RestAPI: "component",
            GraphQL: "component",
            custom: "component",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        description: {
            frontend: "description",
            backend: "description",
            database: "description",
            pretty: "Description",
            component: "Description",
            kebab: "description",
            sqlFunctionRef: "p_description",
            RestAPI: "description",
            GraphQL: "description",
            custom: "description",
        },
        placeholder: {
            frontend: "placeholder",
            backend: "placeholder",
            database: "placeholder",
            pretty: "Placeholder",
            component: "Placeholder",
            kebab: "placeholder",
            sqlFunctionRef: "p_placeholder",
            RestAPI: "placeholder",
            GraphQL: "placeholder",
            custom: "placeholder",
        },
        containerClassName: {
            frontend: "containerClassName",
            backend: "container_class_name",
            database: "container_class_name",
            pretty: "Container Class Name",
            component: "ContainerClassName",
            kebab: "container-class-name",
            sqlFunctionRef: "p_container_class_name",
            RestAPI: "containerClassName",
            GraphQL: "containerClassName",
            custom: "containerClassName",
        },
        collapsibleClassName: {
            frontend: "collapsibleClassName",
            backend: "collapsible_class_name",
            database: "collapsible_class_name",
            pretty: "Collapsible Class Name",
            component: "CollapsibleClassName",
            kebab: "collapsible-class-name",
            sqlFunctionRef: "p_collapsible_class_name",
            RestAPI: "collapsibleClassName",
            GraphQL: "collapsibleClassName",
            custom: "collapsibleClassName",
        },
        labelClassName: {
            frontend: "labelClassName",
            backend: "label_class_name",
            database: "label_class_name",
            pretty: "Label Class Name",
            component: "LabelClassName",
            kebab: "label-class-name",
            sqlFunctionRef: "p_label_class_name",
            RestAPI: "labelClassName",
            GraphQL: "labelClassName",
            custom: "labelClassName",
        },
        descriptionClassName: {
            frontend: "descriptionClassName",
            backend: "description_class_name",
            database: "description_class_name",
            pretty: "Description Class Name",
            component: "DescriptionClassName",
            kebab: "description-class-name",
            sqlFunctionRef: "p_description_class_name",
            RestAPI: "descriptionClassName",
            GraphQL: "descriptionClassName",
            custom: "descriptionClassName",
        },
        componentClassName: {
            frontend: "componentClassName",
            backend: "component_class_name",
            database: "component_class_name",
            pretty: "Component Class Name",
            component: "ComponentClassName",
            kebab: "component-class-name",
            sqlFunctionRef: "p_component_class_name",
            RestAPI: "componentClassName",
            GraphQL: "componentClassName",
            custom: "componentClassName",
        },
        size: {
            frontend: "size",
            backend: "size",
            database: "size",
            pretty: "Size",
            component: "Size",
            kebab: "size",
            sqlFunctionRef: "p_size",
            RestAPI: "size",
            GraphQL: "size",
            custom: "size",
        },
        height: {
            frontend: "height",
            backend: "height",
            database: "height",
            pretty: "Height",
            component: "Height",
            kebab: "height",
            sqlFunctionRef: "p_height",
            RestAPI: "height",
            GraphQL: "height",
            custom: "height",
        },
        width: {
            frontend: "width",
            backend: "width",
            database: "width",
            pretty: "Width",
            component: "Width",
            kebab: "width",
            sqlFunctionRef: "p_width",
            RestAPI: "width",
            GraphQL: "width",
            custom: "width",
        },
        minHeight: {
            frontend: "minHeight",
            backend: "min_height",
            database: "min_height",
            pretty: "Min Height",
            component: "MinHeight",
            kebab: "min-height",
            sqlFunctionRef: "p_min_height",
            RestAPI: "minHeight",
            GraphQL: "minHeight",
            custom: "minHeight",
        },
        maxHeight: {
            frontend: "maxHeight",
            backend: "max_height",
            database: "max_height",
            pretty: "Max Height",
            component: "MaxHeight",
            kebab: "max-height",
            sqlFunctionRef: "p_max_height",
            RestAPI: "maxHeight",
            GraphQL: "maxHeight",
            custom: "maxHeight",
        },
        minWidth: {
            frontend: "minWidth",
            backend: "min_width",
            database: "min_width",
            pretty: "Min Width",
            component: "MinWidth",
            kebab: "min-width",
            sqlFunctionRef: "p_min_width",
            RestAPI: "minWidth",
            GraphQL: "minWidth",
            custom: "minWidth",
        },
        maxWidth: {
            frontend: "maxWidth",
            backend: "max_width",
            database: "max_width",
            pretty: "Max Width",
            component: "MaxWidth",
            kebab: "max-width",
            sqlFunctionRef: "p_max_width",
            RestAPI: "maxWidth",
            GraphQL: "maxWidth",
            custom: "maxWidth",
        },
        orientation: {
            frontend: "orientation",
            backend: "orientation",
            database: "orientation",
            pretty: "Orientation",
            component: "Orientation",
            kebab: "orientation",
            sqlFunctionRef: "p_orientation",
            RestAPI: "orientation",
            GraphQL: "orientation",
            custom: "orientation",
        },
        messageBrokerInverse: {
            frontend: "messageBrokerInverse",
            backend: "message_broker_Inverse",
            database: "ifk_message_broker",
            pretty: "Message Broker Inverse",
            component: "MessageBrokerInverse",
            kebab: "message-brokerInverse",
            sqlFunctionRef: "p_ifk_message_broker",
            RestAPI: "messageBrokerInverse",
            GraphQL: "messageBrokerInverse",
            custom: "messageBrokerInverse",
        },
        brokerInverse: {
            frontend: "brokerInverse",
            backend: "broker_Inverse",
            database: "ifk_broker",
            pretty: "Broker Inverse",
            component: "BrokerInverse",
            kebab: "brokerInverse",
            sqlFunctionRef: "p_ifk_broker",
            RestAPI: "brokerInverse",
            GraphQL: "brokerInverse",
            custom: "brokerInverse",
        },
        dataBrokerInverse: {
            frontend: "dataBrokerInverse",
            backend: "data_broker_Inverse",
            database: "ifk_data_broker",
            pretty: "Data Broker Inverse",
            component: "DataBrokerInverse",
            kebab: "data-brokerInverse",
            sqlFunctionRef: "p_ifk_data_broker",
            RestAPI: "dataBrokerInverse",
            GraphQL: "dataBrokerInverse",
            custom: "dataBrokerInverse",
        },
    },
    dataOutputComponent: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        componentType: {
            frontend: "componentType",
            backend: "component_type",
            database: "component_type",
            pretty: "Component Type",
            component: "ComponentType",
            kebab: "component-type",
            sqlFunctionRef: "p_component_type",
            RestAPI: "componentType",
            GraphQL: "componentType",
            custom: "componentType",
        },
        uiComponent: {
            frontend: "uiComponent",
            backend: "ui_component",
            database: "ui_component",
            pretty: "Ui Component",
            component: "UiComponent",
            kebab: "ui-component",
            sqlFunctionRef: "p_ui_component",
            RestAPI: "uiComponent",
            GraphQL: "uiComponent",
            custom: "uiComponent",
        },
        props: {
            frontend: "props",
            backend: "props",
            database: "props",
            pretty: "Props",
            component: "Props",
            kebab: "props",
            sqlFunctionRef: "p_props",
            RestAPI: "props",
            GraphQL: "props",
            custom: "props",
        },
        additionalParams: {
            frontend: "additionalParams",
            backend: "additional_params",
            database: "additional_params",
            pretty: "Additional Params",
            component: "AdditionalParams",
            kebab: "additional-params",
            sqlFunctionRef: "p_additional_params",
            RestAPI: "additionalParams",
            GraphQL: "additionalParams",
            custom: "additionalParams",
        },
        dataBrokerInverse: {
            frontend: "dataBrokerInverse",
            backend: "data_broker_Inverse",
            database: "ifk_data_broker",
            pretty: "Data Broker Inverse",
            component: "DataBrokerInverse",
            kebab: "data-brokerInverse",
            sqlFunctionRef: "p_ifk_data_broker",
            RestAPI: "dataBrokerInverse",
            GraphQL: "dataBrokerInverse",
            custom: "dataBrokerInverse",
        },
    },
    displayOption: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        defaultParams: {
            frontend: "defaultParams",
            backend: "default_params",
            database: "default_params",
            pretty: "Default Params",
            component: "DefaultParams",
            kebab: "default-params",
            sqlFunctionRef: "p_default_params",
            RestAPI: "defaultParams",
            GraphQL: "defaultParams",
            custom: "defaultParams",
        },
        customizableParams: {
            frontend: "customizableParams",
            backend: "customizable_params",
            database: "customizable_params",
            pretty: "Customizable Params",
            component: "CustomizableParams",
            kebab: "customizable-params",
            sqlFunctionRef: "p_customizable_params",
            RestAPI: "customizableParams",
            GraphQL: "customizableParams",
            custom: "customizableParams",
        },
        additionalParams: {
            frontend: "additionalParams",
            backend: "additional_params",
            database: "additional_params",
            pretty: "Additional Params",
            component: "AdditionalParams",
            kebab: "additional-params",
            sqlFunctionRef: "p_additional_params",
            RestAPI: "additionalParams",
            GraphQL: "additionalParams",
            custom: "additionalParams",
        },
        recipeDisplayInverse: {
            frontend: "recipeDisplayInverse",
            backend: "recipe_display_Inverse",
            database: "ifk_recipe_display",
            pretty: "Recipe Display Inverse",
            component: "RecipeDisplayInverse",
            kebab: "recipe-displayInverse",
            sqlFunctionRef: "p_ifk_recipe_display",
            RestAPI: "recipeDisplayInverse",
            GraphQL: "recipeDisplayInverse",
            custom: "recipeDisplayInverse",
        },
    },
    emails: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        sender: {
            frontend: "sender",
            backend: "sender",
            database: "sender",
            pretty: "Sender",
            component: "Sender",
            kebab: "sender",
            sqlFunctionRef: "p_sender",
            RestAPI: "sender",
            GraphQL: "sender",
            custom: "sender",
        },
        recipient: {
            frontend: "recipient",
            backend: "recipient",
            database: "recipient",
            pretty: "Recipient",
            component: "Recipient",
            kebab: "recipient",
            sqlFunctionRef: "p_recipient",
            RestAPI: "recipient",
            GraphQL: "recipient",
            custom: "recipient",
        },
        subject: {
            frontend: "subject",
            backend: "subject",
            database: "subject",
            pretty: "Subject",
            component: "Subject",
            kebab: "subject",
            sqlFunctionRef: "p_subject",
            RestAPI: "subject",
            GraphQL: "subject",
            custom: "subject",
        },
        body: {
            frontend: "body",
            backend: "body",
            database: "body",
            pretty: "Body",
            component: "Body",
            kebab: "body",
            sqlFunctionRef: "p_body",
            RestAPI: "body",
            GraphQL: "body",
            custom: "body",
        },
        timestamp: {
            frontend: "timestamp",
            backend: "timestamp",
            database: "timestamp",
            pretty: "Timestamp",
            component: "Timestamp",
            kebab: "timestamp",
            sqlFunctionRef: "p_timestamp",
            RestAPI: "timestamp",
            GraphQL: "timestamp",
            custom: "timestamp",
        },
        isRead: {
            frontend: "isRead",
            backend: "is_read",
            database: "is_read",
            pretty: "Is Read",
            component: "IsRead",
            kebab: "is-read",
            sqlFunctionRef: "p_is_read",
            RestAPI: "isRead",
            GraphQL: "isRead",
            custom: "isRead",
        },
    },
    extractor: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        outputType: {
            frontend: "outputType",
            backend: "output_type",
            database: "output_type",
            pretty: "Output Type",
            component: "OutputType",
            kebab: "output-type",
            sqlFunctionRef: "p_output_type",
            RestAPI: "outputType",
            GraphQL: "outputType",
            custom: "outputType",
        },
        defaultIdentifier: {
            frontend: "defaultIdentifier",
            backend: "default_identifier",
            database: "default_identifier",
            pretty: "Default Identifier",
            component: "DefaultIdentifier",
            kebab: "default-identifier",
            sqlFunctionRef: "p_default_identifier",
            RestAPI: "defaultIdentifier",
            GraphQL: "defaultIdentifier",
            custom: "defaultIdentifier",
        },
        defaultIndex: {
            frontend: "defaultIndex",
            backend: "default_index",
            database: "default_index",
            pretty: "Default Index",
            component: "DefaultIndex",
            kebab: "default-index",
            sqlFunctionRef: "p_default_index",
            RestAPI: "defaultIndex",
            GraphQL: "defaultIndex",
            custom: "defaultIndex",
        },
    },
    fileStructure: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        bucketId: {
            frontend: "bucketId",
            backend: "bucket_id",
            database: "bucket_id",
            pretty: "Bucket Id",
            component: "BucketId",
            kebab: "bucket-id",
            sqlFunctionRef: "p_bucket_id",
            RestAPI: "bucketId",
            GraphQL: "bucketId",
            custom: "bucketId",
        },
        path: {
            frontend: "path",
            backend: "path",
            database: "path",
            pretty: "Path",
            component: "Path",
            kebab: "path",
            sqlFunctionRef: "p_path",
            RestAPI: "path",
            GraphQL: "path",
            custom: "path",
        },
        isFolder: {
            frontend: "isFolder",
            backend: "is_folder",
            database: "is_folder",
            pretty: "Is Folder",
            component: "IsFolder",
            kebab: "is-folder",
            sqlFunctionRef: "p_is_folder",
            RestAPI: "isFolder",
            GraphQL: "isFolder",
            custom: "isFolder",
        },
        fileId: {
            frontend: "fileId",
            backend: "file_id",
            database: "file_id",
            pretty: "File Id",
            component: "FileId",
            kebab: "file-id",
            sqlFunctionRef: "p_file_id",
            RestAPI: "fileId",
            GraphQL: "fileId",
            custom: "fileId",
        },
        parentPath: {
            frontend: "parentPath",
            backend: "parent_path",
            database: "parent_path",
            pretty: "Parent Path",
            component: "ParentPath",
            kebab: "parent-path",
            sqlFunctionRef: "p_parent_path",
            RestAPI: "parentPath",
            GraphQL: "parentPath",
            custom: "parentPath",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        metadata: {
            frontend: "metadata",
            backend: "metadata",
            database: "metadata",
            pretty: "Metadata",
            component: "Metadata",
            kebab: "metadata",
            sqlFunctionRef: "p_metadata",
            RestAPI: "metadata",
            GraphQL: "metadata",
            custom: "metadata",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        updatedAt: {
            frontend: "updatedAt",
            backend: "updated_at",
            database: "updated_at",
            pretty: "Updated At",
            component: "UpdatedAt",
            kebab: "updated-at",
            sqlFunctionRef: "p_updated_at",
            RestAPI: "updatedAt",
            GraphQL: "updatedAt",
            custom: "updatedAt",
        },
    },
    flashcardData: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        userId: {
            frontend: "userId",
            backend: "user_id",
            database: "user_id",
            pretty: "User Id",
            component: "UserId",
            kebab: "user-id",
            sqlFunctionRef: "p_user_id",
            RestAPI: "userId",
            GraphQL: "userId",
            custom: "userId",
        },
        topic: {
            frontend: "topic",
            backend: "topic",
            database: "topic",
            pretty: "Topic",
            component: "Topic",
            kebab: "topic",
            sqlFunctionRef: "p_topic",
            RestAPI: "topic",
            GraphQL: "topic",
            custom: "topic",
        },
        lesson: {
            frontend: "lesson",
            backend: "lesson",
            database: "lesson",
            pretty: "Lesson",
            component: "Lesson",
            kebab: "lesson",
            sqlFunctionRef: "p_lesson",
            RestAPI: "lesson",
            GraphQL: "lesson",
            custom: "lesson",
        },
        difficulty: {
            frontend: "difficulty",
            backend: "difficulty",
            database: "difficulty",
            pretty: "Difficulty",
            component: "Difficulty",
            kebab: "difficulty",
            sqlFunctionRef: "p_difficulty",
            RestAPI: "difficulty",
            GraphQL: "difficulty",
            custom: "difficulty",
        },
        front: {
            frontend: "front",
            backend: "front",
            database: "front",
            pretty: "Front",
            component: "Front",
            kebab: "front",
            sqlFunctionRef: "p_front",
            RestAPI: "front",
            GraphQL: "front",
            custom: "front",
        },
        back: {
            frontend: "back",
            backend: "back",
            database: "back",
            pretty: "Back",
            component: "Back",
            kebab: "back",
            sqlFunctionRef: "p_back",
            RestAPI: "back",
            GraphQL: "back",
            custom: "back",
        },
        example: {
            frontend: "example",
            backend: "example",
            database: "example",
            pretty: "Example",
            component: "Example",
            kebab: "example",
            sqlFunctionRef: "p_example",
            RestAPI: "example",
            GraphQL: "example",
            custom: "example",
        },
        detailedExplanation: {
            frontend: "detailedExplanation",
            backend: "detailed_explanation",
            database: "detailed_explanation",
            pretty: "Detailed Explanation",
            component: "DetailedExplanation",
            kebab: "detailed-explanation",
            sqlFunctionRef: "p_detailed_explanation",
            RestAPI: "detailedExplanation",
            GraphQL: "detailedExplanation",
            custom: "detailedExplanation",
        },
        audioExplanation: {
            frontend: "audioExplanation",
            backend: "audio_explanation",
            database: "audio_explanation",
            pretty: "Audio Explanation",
            component: "AudioExplanation",
            kebab: "audio-explanation",
            sqlFunctionRef: "p_audio_explanation",
            RestAPI: "audioExplanation",
            GraphQL: "audioExplanation",
            custom: "audioExplanation",
        },
        personalNotes: {
            frontend: "personalNotes",
            backend: "personal_notes",
            database: "personal_notes",
            pretty: "Personal Notes",
            component: "PersonalNotes",
            kebab: "personal-notes",
            sqlFunctionRef: "p_personal_notes",
            RestAPI: "personalNotes",
            GraphQL: "personalNotes",
            custom: "personalNotes",
        },
        isDeleted: {
            frontend: "isDeleted",
            backend: "is_deleted",
            database: "is_deleted",
            pretty: "Is Deleted",
            component: "IsDeleted",
            kebab: "is-deleted",
            sqlFunctionRef: "p_is_deleted",
            RestAPI: "isDeleted",
            GraphQL: "isDeleted",
            custom: "isDeleted",
        },
        public: {
            frontend: "public",
            backend: "public",
            database: "public",
            pretty: "Public",
            component: "Public",
            kebab: "public",
            sqlFunctionRef: "p_public",
            RestAPI: "public",
            GraphQL: "public",
            custom: "public",
        },
        sharedWith: {
            frontend: "sharedWith",
            backend: "shared_with",
            database: "shared_with",
            pretty: "Shared With",
            component: "SharedWith",
            kebab: "shared-with",
            sqlFunctionRef: "p_shared_with",
            RestAPI: "sharedWith",
            GraphQL: "sharedWith",
            custom: "sharedWith",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        updatedAt: {
            frontend: "updatedAt",
            backend: "updated_at",
            database: "updated_at",
            pretty: "Updated At",
            component: "UpdatedAt",
            kebab: "updated-at",
            sqlFunctionRef: "p_updated_at",
            RestAPI: "updatedAt",
            GraphQL: "updatedAt",
            custom: "updatedAt",
        },
        flashcardHistoryInverse: {
            frontend: "flashcardHistoryInverse",
            backend: "flashcard_history_Inverse",
            database: "ifk_flashcard_history",
            pretty: "Flashcard History Inverse",
            component: "FlashcardHistoryInverse",
            kebab: "flashcard-historyInverse",
            sqlFunctionRef: "p_ifk_flashcard_history",
            RestAPI: "flashcardHistoryInverse",
            GraphQL: "flashcardHistoryInverse",
            custom: "flashcardHistoryInverse",
        },
        flashcardSetRelationsInverse: {
            frontend: "flashcardSetRelationsInverse",
            backend: "flashcard_set_relations_Inverse",
            database: "ifk_flashcard_set_relations",
            pretty: "Flashcard Set Relations Inverse",
            component: "FlashcardSetRelationsInverse",
            kebab: "flashcard-set-relationsInverse",
            sqlFunctionRef: "p_ifk_flashcard_set_relations",
            RestAPI: "flashcardSetRelationsInverse",
            GraphQL: "flashcardSetRelationsInverse",
            custom: "flashcardSetRelationsInverse",
        },
        flashcardImagesInverse: {
            frontend: "flashcardImagesInverse",
            backend: "flashcard_images_Inverse",
            database: "ifk_flashcard_images",
            pretty: "Flashcard Images Inverse",
            component: "FlashcardImagesInverse",
            kebab: "flashcard-imagesInverse",
            sqlFunctionRef: "p_ifk_flashcard_images",
            RestAPI: "flashcardImagesInverse",
            GraphQL: "flashcardImagesInverse",
            custom: "flashcardImagesInverse",
        },
    },
    flashcardHistory: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        flashcardId: {
            frontend: "flashcardId",
            backend: "flashcard_id",
            database: "flashcard_id",
            pretty: "Flashcard Id",
            component: "FlashcardId",
            kebab: "flashcard-id",
            sqlFunctionRef: "p_flashcard_id",
            RestAPI: "flashcardId",
            GraphQL: "flashcardId",
            custom: "flashcardId",
        },
        userId: {
            frontend: "userId",
            backend: "user_id",
            database: "user_id",
            pretty: "User Id",
            component: "UserId",
            kebab: "user-id",
            sqlFunctionRef: "p_user_id",
            RestAPI: "userId",
            GraphQL: "userId",
            custom: "userId",
        },
        reviewCount: {
            frontend: "reviewCount",
            backend: "review_count",
            database: "review_count",
            pretty: "Review Count",
            component: "ReviewCount",
            kebab: "review-count",
            sqlFunctionRef: "p_review_count",
            RestAPI: "reviewCount",
            GraphQL: "reviewCount",
            custom: "reviewCount",
        },
        correctCount: {
            frontend: "correctCount",
            backend: "correct_count",
            database: "correct_count",
            pretty: "Correct Count",
            component: "CorrectCount",
            kebab: "correct-count",
            sqlFunctionRef: "p_correct_count",
            RestAPI: "correctCount",
            GraphQL: "correctCount",
            custom: "correctCount",
        },
        incorrectCount: {
            frontend: "incorrectCount",
            backend: "incorrect_count",
            database: "incorrect_count",
            pretty: "Incorrect Count",
            component: "IncorrectCount",
            kebab: "incorrect-count",
            sqlFunctionRef: "p_incorrect_count",
            RestAPI: "incorrectCount",
            GraphQL: "incorrectCount",
            custom: "incorrectCount",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        updatedAt: {
            frontend: "updatedAt",
            backend: "updated_at",
            database: "updated_at",
            pretty: "Updated At",
            component: "UpdatedAt",
            kebab: "updated-at",
            sqlFunctionRef: "p_updated_at",
            RestAPI: "updatedAt",
            GraphQL: "updatedAt",
            custom: "updatedAt",
        },
        flashcardDataReference: {
            frontend: "flashcardDataReference",
            backend: "flashcard_data_reference",
            database: "ref_flashcard_data",
            pretty: "Flashcard Data Reference",
            component: "FlashcardDataReference",
            kebab: "flashcard-dataReference",
            sqlFunctionRef: "p_ref_flashcard_data",
            RestAPI: "flashcardDataReference",
            GraphQL: "flashcardDataReference",
            custom: "flashcardDataReference",
        },
    },
    flashcardImages: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        flashcardId: {
            frontend: "flashcardId",
            backend: "flashcard_id",
            database: "flashcard_id",
            pretty: "Flashcard Id",
            component: "FlashcardId",
            kebab: "flashcard-id",
            sqlFunctionRef: "p_flashcard_id",
            RestAPI: "flashcardId",
            GraphQL: "flashcardId",
            custom: "flashcardId",
        },
        filePath: {
            frontend: "filePath",
            backend: "file_path",
            database: "file_path",
            pretty: "File Path",
            component: "FilePath",
            kebab: "file-path",
            sqlFunctionRef: "p_file_path",
            RestAPI: "filePath",
            GraphQL: "filePath",
            custom: "filePath",
        },
        fileName: {
            frontend: "fileName",
            backend: "file_name",
            database: "file_name",
            pretty: "File Name",
            component: "FileName",
            kebab: "file-name",
            sqlFunctionRef: "p_file_name",
            RestAPI: "fileName",
            GraphQL: "fileName",
            custom: "fileName",
        },
        mimeType: {
            frontend: "mimeType",
            backend: "mime_type",
            database: "mime_type",
            pretty: "Mime Type",
            component: "MimeType",
            kebab: "mime-type",
            sqlFunctionRef: "p_mime_type",
            RestAPI: "mimeType",
            GraphQL: "mimeType",
            custom: "mimeType",
        },
        size: {
            frontend: "size",
            backend: "size",
            database: "size",
            pretty: "Size",
            component: "Size",
            kebab: "size",
            sqlFunctionRef: "p_size",
            RestAPI: "size",
            GraphQL: "size",
            custom: "size",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        flashcardDataReference: {
            frontend: "flashcardDataReference",
            backend: "flashcard_data_reference",
            database: "ref_flashcard_data",
            pretty: "Flashcard Data Reference",
            component: "FlashcardDataReference",
            kebab: "flashcard-dataReference",
            sqlFunctionRef: "p_ref_flashcard_data",
            RestAPI: "flashcardDataReference",
            GraphQL: "flashcardDataReference",
            custom: "flashcardDataReference",
        },
    },
    flashcardSetRelations: {
        flashcardId: {
            frontend: "flashcardId",
            backend: "flashcard_id",
            database: "flashcard_id",
            pretty: "Flashcard Id",
            component: "FlashcardId",
            kebab: "flashcard-id",
            sqlFunctionRef: "p_flashcard_id",
            RestAPI: "flashcardId",
            GraphQL: "flashcardId",
            custom: "flashcardId",
        },
        setId: {
            frontend: "setId",
            backend: "set_id",
            database: "set_id",
            pretty: "Set Id",
            component: "SetId",
            kebab: "set-id",
            sqlFunctionRef: "p_set_id",
            RestAPI: "setId",
            GraphQL: "setId",
            custom: "setId",
        },
        order: {
            frontend: "order",
            backend: "order",
            database: "order",
            pretty: "Order",
            component: "Order",
            kebab: "order",
            sqlFunctionRef: "p_order",
            RestAPI: "order",
            GraphQL: "order",
            custom: "order",
        },
        flashcardDataReference: {
            frontend: "flashcardDataReference",
            backend: "flashcard_data_reference",
            database: "ref_flashcard_data",
            pretty: "Flashcard Data Reference",
            component: "FlashcardDataReference",
            kebab: "flashcard-dataReference",
            sqlFunctionRef: "p_ref_flashcard_data",
            RestAPI: "flashcardDataReference",
            GraphQL: "flashcardDataReference",
            custom: "flashcardDataReference",
        },
        flashcardSetsReference: {
            frontend: "flashcardSetsReference",
            backend: "flashcard_sets_reference",
            database: "ref_flashcard_sets",
            pretty: "Flashcard Sets Reference",
            component: "FlashcardSetsReference",
            kebab: "flashcard-setsReference",
            sqlFunctionRef: "p_ref_flashcard_sets",
            RestAPI: "flashcardSetsReference",
            GraphQL: "flashcardSetsReference",
            custom: "flashcardSetsReference",
        },
    },
    flashcardSets: {
        setId: {
            frontend: "setId",
            backend: "set_id",
            database: "set_id",
            pretty: "Set Id",
            component: "SetId",
            kebab: "set-id",
            sqlFunctionRef: "p_set_id",
            RestAPI: "setId",
            GraphQL: "setId",
            custom: "setId",
        },
        userId: {
            frontend: "userId",
            backend: "user_id",
            database: "user_id",
            pretty: "User Id",
            component: "UserId",
            kebab: "user-id",
            sqlFunctionRef: "p_user_id",
            RestAPI: "userId",
            GraphQL: "userId",
            custom: "userId",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        updatedAt: {
            frontend: "updatedAt",
            backend: "updated_at",
            database: "updated_at",
            pretty: "Updated At",
            component: "UpdatedAt",
            kebab: "updated-at",
            sqlFunctionRef: "p_updated_at",
            RestAPI: "updatedAt",
            GraphQL: "updatedAt",
            custom: "updatedAt",
        },
        sharedWith: {
            frontend: "sharedWith",
            backend: "shared_with",
            database: "shared_with",
            pretty: "Shared With",
            component: "SharedWith",
            kebab: "shared-with",
            sqlFunctionRef: "p_shared_with",
            RestAPI: "sharedWith",
            GraphQL: "sharedWith",
            custom: "sharedWith",
        },
        public: {
            frontend: "public",
            backend: "public",
            database: "public",
            pretty: "Public",
            component: "Public",
            kebab: "public",
            sqlFunctionRef: "p_public",
            RestAPI: "public",
            GraphQL: "public",
            custom: "public",
        },
        topic: {
            frontend: "topic",
            backend: "topic",
            database: "topic",
            pretty: "Topic",
            component: "Topic",
            kebab: "topic",
            sqlFunctionRef: "p_topic",
            RestAPI: "topic",
            GraphQL: "topic",
            custom: "topic",
        },
        lesson: {
            frontend: "lesson",
            backend: "lesson",
            database: "lesson",
            pretty: "Lesson",
            component: "Lesson",
            kebab: "lesson",
            sqlFunctionRef: "p_lesson",
            RestAPI: "lesson",
            GraphQL: "lesson",
            custom: "lesson",
        },
        difficulty: {
            frontend: "difficulty",
            backend: "difficulty",
            database: "difficulty",
            pretty: "Difficulty",
            component: "Difficulty",
            kebab: "difficulty",
            sqlFunctionRef: "p_difficulty",
            RestAPI: "difficulty",
            GraphQL: "difficulty",
            custom: "difficulty",
        },
        audioOverview: {
            frontend: "audioOverview",
            backend: "audio_overview",
            database: "audio_overview",
            pretty: "Audio Overview",
            component: "AudioOverview",
            kebab: "audio-overview",
            sqlFunctionRef: "p_audio_overview",
            RestAPI: "audioOverview",
            GraphQL: "audioOverview",
            custom: "audioOverview",
        },
        flashcardSetRelationsInverse: {
            frontend: "flashcardSetRelationsInverse",
            backend: "flashcard_set_relations_Inverse",
            database: "ifk_flashcard_set_relations",
            pretty: "Flashcard Set Relations Inverse",
            component: "FlashcardSetRelationsInverse",
            kebab: "flashcard-set-relationsInverse",
            sqlFunctionRef: "p_ifk_flashcard_set_relations",
            RestAPI: "flashcardSetRelationsInverse",
            GraphQL: "flashcardSetRelationsInverse",
            custom: "flashcardSetRelationsInverse",
        },
    },
    message: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        conversationId: {
            frontend: "conversationId",
            backend: "conversation_id",
            database: "conversation_id",
            pretty: "Conversation Id",
            component: "ConversationId",
            kebab: "conversation-id",
            sqlFunctionRef: "p_conversation_id",
            RestAPI: "conversationId",
            GraphQL: "conversationId",
            custom: "conversationId",
        },
        role: {
            frontend: "role",
            backend: "role",
            database: "role",
            pretty: "Role",
            component: "Role",
            kebab: "role",
            sqlFunctionRef: "p_role",
            RestAPI: "role",
            GraphQL: "role",
            custom: "role",
        },
        content: {
            frontend: "content",
            backend: "content",
            database: "content",
            pretty: "Content",
            component: "Content",
            kebab: "content",
            sqlFunctionRef: "p_content",
            RestAPI: "content",
            GraphQL: "content",
            custom: "content",
        },
        type: {
            frontend: "type",
            backend: "type",
            database: "type",
            pretty: "Type",
            component: "Type",
            kebab: "type",
            sqlFunctionRef: "p_type",
            RestAPI: "type",
            GraphQL: "type",
            custom: "type",
        },
        displayOrder: {
            frontend: "displayOrder",
            backend: "display_order",
            database: "display_order",
            pretty: "Display Order",
            component: "DisplayOrder",
            kebab: "display-order",
            sqlFunctionRef: "p_display_order",
            RestAPI: "displayOrder",
            GraphQL: "displayOrder",
            custom: "displayOrder",
        },
        systemOrder: {
            frontend: "systemOrder",
            backend: "system_order",
            database: "system_order",
            pretty: "System Order",
            component: "SystemOrder",
            kebab: "system-order",
            sqlFunctionRef: "p_system_order",
            RestAPI: "systemOrder",
            GraphQL: "systemOrder",
            custom: "systemOrder",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        metadata: {
            frontend: "metadata",
            backend: "metadata",
            database: "metadata",
            pretty: "Metadata",
            component: "Metadata",
            kebab: "metadata",
            sqlFunctionRef: "p_metadata",
            RestAPI: "metadata",
            GraphQL: "metadata",
            custom: "metadata",
        },
        userId: {
            frontend: "userId",
            backend: "user_id",
            database: "user_id",
            pretty: "User Id",
            component: "UserId",
            kebab: "user-id",
            sqlFunctionRef: "p_user_id",
            RestAPI: "userId",
            GraphQL: "userId",
            custom: "userId",
        },
        conversationReference: {
            frontend: "conversationReference",
            backend: "conversation_reference",
            database: "ref_conversation",
            pretty: "Conversation Reference",
            component: "ConversationReference",
            kebab: "conversationReference",
            sqlFunctionRef: "p_ref_conversation",
            RestAPI: "conversationReference",
            GraphQL: "conversationReference",
            custom: "conversationReference",
        },
    },
    messageBroker: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        messageId: {
            frontend: "messageId",
            backend: "message_id",
            database: "message_id",
            pretty: "Message Id",
            component: "MessageId",
            kebab: "message-id",
            sqlFunctionRef: "p_message_id",
            RestAPI: "messageId",
            GraphQL: "messageId",
            custom: "messageId",
        },
        brokerId: {
            frontend: "brokerId",
            backend: "broker_id",
            database: "broker_id",
            pretty: "Broker Id",
            component: "BrokerId",
            kebab: "broker-id",
            sqlFunctionRef: "p_broker_id",
            RestAPI: "brokerId",
            GraphQL: "brokerId",
            custom: "brokerId",
        },
        defaultValue: {
            frontend: "defaultValue",
            backend: "default_value",
            database: "default_value",
            pretty: "Default Value",
            component: "DefaultValue",
            kebab: "default-value",
            sqlFunctionRef: "p_default_value",
            RestAPI: "defaultValue",
            GraphQL: "defaultValue",
            custom: "defaultValue",
        },
        defaultComponent: {
            frontend: "defaultComponent",
            backend: "default_component",
            database: "default_component",
            pretty: "Default Component",
            component: "DefaultComponent",
            kebab: "default-component",
            sqlFunctionRef: "p_default_component",
            RestAPI: "defaultComponent",
            GraphQL: "defaultComponent",
            custom: "defaultComponent",
        },
        dataBrokerReference: {
            frontend: "dataBrokerReference",
            backend: "data_broker_reference",
            database: "ref_data_broker",
            pretty: "Data Broker Reference",
            component: "DataBrokerReference",
            kebab: "data-brokerReference",
            sqlFunctionRef: "p_ref_data_broker",
            RestAPI: "dataBrokerReference",
            GraphQL: "dataBrokerReference",
            custom: "dataBrokerReference",
        },
        dataInputComponentReference: {
            frontend: "dataInputComponentReference",
            backend: "data_input_component_reference",
            database: "ref_data_input_component",
            pretty: "Data Input Component Reference",
            component: "DataInputComponentReference",
            kebab: "data-input-componentReference",
            sqlFunctionRef: "p_ref_data_input_component",
            RestAPI: "dataInputComponentReference",
            GraphQL: "dataInputComponentReference",
            custom: "dataInputComponentReference",
        },
        messageTemplateReference: {
            frontend: "messageTemplateReference",
            backend: "message_template_reference",
            database: "ref_message_template",
            pretty: "Message Template Reference",
            component: "MessageTemplateReference",
            kebab: "message-templateReference",
            sqlFunctionRef: "p_ref_message_template",
            RestAPI: "messageTemplateReference",
            GraphQL: "messageTemplateReference",
            custom: "messageTemplateReference",
        },
    },
    messageTemplate: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        role: {
            frontend: "role",
            backend: "role",
            database: "role",
            pretty: "Role",
            component: "Role",
            kebab: "role",
            sqlFunctionRef: "p_role",
            RestAPI: "role",
            GraphQL: "role",
            custom: "role",
        },
        type: {
            frontend: "type",
            backend: "type",
            database: "type",
            pretty: "Type",
            component: "Type",
            kebab: "type",
            sqlFunctionRef: "p_type",
            RestAPI: "type",
            GraphQL: "type",
            custom: "type",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        content: {
            frontend: "content",
            backend: "content",
            database: "content",
            pretty: "Content",
            component: "Content",
            kebab: "content",
            sqlFunctionRef: "p_content",
            RestAPI: "content",
            GraphQL: "content",
            custom: "content",
        },
        messageBrokerInverse: {
            frontend: "messageBrokerInverse",
            backend: "message_broker_Inverse",
            database: "ifk_message_broker",
            pretty: "Message Broker Inverse",
            component: "MessageBrokerInverse",
            kebab: "message-brokerInverse",
            sqlFunctionRef: "p_ifk_message_broker",
            RestAPI: "messageBrokerInverse",
            GraphQL: "messageBrokerInverse",
            custom: "messageBrokerInverse",
        },
        recipeMessageInverse: {
            frontend: "recipeMessageInverse",
            backend: "recipe_message_Inverse",
            database: "ifk_recipe_message",
            pretty: "Recipe Message Inverse",
            component: "RecipeMessageInverse",
            kebab: "recipe-messageInverse",
            sqlFunctionRef: "p_ifk_recipe_message",
            RestAPI: "recipeMessageInverse",
            GraphQL: "recipeMessageInverse",
            custom: "recipeMessageInverse",
        },
    },
    processor: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        dependsDefault: {
            frontend: "dependsDefault",
            backend: "depends_default",
            database: "depends_default",
            pretty: "Depends Default",
            component: "DependsDefault",
            kebab: "depends-default",
            sqlFunctionRef: "p_depends_default",
            RestAPI: "dependsDefault",
            GraphQL: "dependsDefault",
            custom: "dependsDefault",
        },
        defaultExtractors: {
            frontend: "defaultExtractors",
            backend: "default_extractors",
            database: "default_extractors",
            pretty: "Default Extractors",
            component: "DefaultExtractors",
            kebab: "default-extractors",
            sqlFunctionRef: "p_default_extractors",
            RestAPI: "defaultExtractors",
            GraphQL: "defaultExtractors",
            custom: "defaultExtractors",
        },
        params: {
            frontend: "params",
            backend: "params",
            database: "params",
            pretty: "Params",
            component: "Params",
            kebab: "params",
            sqlFunctionRef: "p_params",
            RestAPI: "params",
            GraphQL: "params",
            custom: "params",
        },
        processorReference: {
            frontend: "processorReference",
            backend: "processor_reference",
            database: "ref_processor",
            pretty: "Processor Reference",
            component: "ProcessorReference",
            kebab: "processorReference",
            sqlFunctionRef: "p_ref_processor",
            RestAPI: "processorReference",
            GraphQL: "processorReference",
            custom: "processorReference",
        },
        recipeProcessorInverse: {
            frontend: "recipeProcessorInverse",
            backend: "recipe_processor_Inverse",
            database: "ifk_recipe_processor",
            pretty: "Recipe Processor Inverse",
            component: "RecipeProcessorInverse",
            kebab: "recipe-processorInverse",
            sqlFunctionRef: "p_ifk_recipe_processor",
            RestAPI: "recipeProcessorInverse",
            GraphQL: "recipeProcessorInverse",
            custom: "recipeProcessorInverse",
        },
    },
    projectMembers: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        projectId: {
            frontend: "projectId",
            backend: "project_id",
            database: "project_id",
            pretty: "Project Id",
            component: "ProjectId",
            kebab: "project-id",
            sqlFunctionRef: "p_project_id",
            RestAPI: "projectId",
            GraphQL: "projectId",
            custom: "projectId",
        },
        userId: {
            frontend: "userId",
            backend: "user_id",
            database: "user_id",
            pretty: "User Id",
            component: "UserId",
            kebab: "user-id",
            sqlFunctionRef: "p_user_id",
            RestAPI: "userId",
            GraphQL: "userId",
            custom: "userId",
        },
        role: {
            frontend: "role",
            backend: "role",
            database: "role",
            pretty: "Role",
            component: "Role",
            kebab: "role",
            sqlFunctionRef: "p_role",
            RestAPI: "role",
            GraphQL: "role",
            custom: "role",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        projectsReference: {
            frontend: "projectsReference",
            backend: "projects_reference",
            database: "ref_projects",
            pretty: "Projects Reference",
            component: "ProjectsReference",
            kebab: "projectsReference",
            sqlFunctionRef: "p_ref_projects",
            RestAPI: "projectsReference",
            GraphQL: "projectsReference",
            custom: "projectsReference",
        },
    },
    projects: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        description: {
            frontend: "description",
            backend: "description",
            database: "description",
            pretty: "Description",
            component: "Description",
            kebab: "description",
            sqlFunctionRef: "p_description",
            RestAPI: "description",
            GraphQL: "description",
            custom: "description",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        updatedAt: {
            frontend: "updatedAt",
            backend: "updated_at",
            database: "updated_at",
            pretty: "Updated At",
            component: "UpdatedAt",
            kebab: "updated-at",
            sqlFunctionRef: "p_updated_at",
            RestAPI: "updatedAt",
            GraphQL: "updatedAt",
            custom: "updatedAt",
        },
        createdBy: {
            frontend: "createdBy",
            backend: "created_by",
            database: "created_by",
            pretty: "Created By",
            component: "CreatedBy",
            kebab: "created-by",
            sqlFunctionRef: "p_created_by",
            RestAPI: "createdBy",
            GraphQL: "createdBy",
            custom: "createdBy",
        },
        projectMembersInverse: {
            frontend: "projectMembersInverse",
            backend: "project_members_Inverse",
            database: "ifk_project_members",
            pretty: "Project Members Inverse",
            component: "ProjectMembersInverse",
            kebab: "project-membersInverse",
            sqlFunctionRef: "p_ifk_project_members",
            RestAPI: "projectMembersInverse",
            GraphQL: "projectMembersInverse",
            custom: "projectMembersInverse",
        },
        tasksInverse: {
            frontend: "tasksInverse",
            backend: "tasks_Inverse",
            database: "ifk_tasks",
            pretty: "Tasks Inverse",
            component: "TasksInverse",
            kebab: "tasksInverse",
            sqlFunctionRef: "p_ifk_tasks",
            RestAPI: "tasksInverse",
            GraphQL: "tasksInverse",
            custom: "tasksInverse",
        },
    },
    recipe: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        description: {
            frontend: "description",
            backend: "description",
            database: "description",
            pretty: "Description",
            component: "Description",
            kebab: "description",
            sqlFunctionRef: "p_description",
            RestAPI: "description",
            GraphQL: "description",
            custom: "description",
        },
        tags: {
            frontend: "tags",
            backend: "tags",
            database: "tags",
            pretty: "Tags",
            component: "Tags",
            kebab: "tags",
            sqlFunctionRef: "p_tags",
            RestAPI: "tags",
            GraphQL: "tags",
            custom: "tags",
        },
        sampleOutput: {
            frontend: "sampleOutput",
            backend: "sample_output",
            database: "sample_output",
            pretty: "Sample Output",
            component: "SampleOutput",
            kebab: "sample-output",
            sqlFunctionRef: "p_sample_output",
            RestAPI: "sampleOutput",
            GraphQL: "sampleOutput",
            custom: "sampleOutput",
        },
        isPublic: {
            frontend: "isPublic",
            backend: "is_public",
            database: "is_public",
            pretty: "Is Public",
            component: "IsPublic",
            kebab: "is-public",
            sqlFunctionRef: "p_is_public",
            RestAPI: "isPublic",
            GraphQL: "isPublic",
            custom: "isPublic",
        },
        status: {
            frontend: "status",
            backend: "status",
            database: "status",
            pretty: "Status",
            component: "Status",
            kebab: "status",
            sqlFunctionRef: "p_status",
            RestAPI: "status",
            GraphQL: "status",
            custom: "status",
        },
        version: {
            frontend: "version",
            backend: "version",
            database: "version",
            pretty: "Version",
            component: "Version",
            kebab: "version",
            sqlFunctionRef: "p_version",
            RestAPI: "version",
            GraphQL: "version",
            custom: "version",
        },
        postResultOptions: {
            frontend: "postResultOptions",
            backend: "post_result_options",
            database: "post_result_options",
            pretty: "Post Result Options",
            component: "PostResultOptions",
            kebab: "post-result-options",
            sqlFunctionRef: "p_post_result_options",
            RestAPI: "postResultOptions",
            GraphQL: "postResultOptions",
            custom: "postResultOptions",
        },
        compiledRecipeInverse: {
            frontend: "compiledRecipeInverse",
            backend: "compiled_recipe_Inverse",
            database: "ifk_compiled_recipe",
            pretty: "Compiled Recipe Inverse",
            component: "CompiledRecipeInverse",
            kebab: "compiled-recipeInverse",
            sqlFunctionRef: "p_ifk_compiled_recipe",
            RestAPI: "compiledRecipeInverse",
            GraphQL: "compiledRecipeInverse",
            custom: "compiledRecipeInverse",
        },
        aiAgentInverse: {
            frontend: "aiAgentInverse",
            backend: "ai_agent_Inverse",
            database: "ifk_ai_agent",
            pretty: "Ai Agent Inverse",
            component: "AiAgentInverse",
            kebab: "ai-agentInverse",
            sqlFunctionRef: "p_ifk_ai_agent",
            RestAPI: "aiAgentInverse",
            GraphQL: "aiAgentInverse",
            custom: "aiAgentInverse",
        },
        recipeDisplayInverse: {
            frontend: "recipeDisplayInverse",
            backend: "recipe_display_Inverse",
            database: "ifk_recipe_display",
            pretty: "Recipe Display Inverse",
            component: "RecipeDisplayInverse",
            kebab: "recipe-displayInverse",
            sqlFunctionRef: "p_ifk_recipe_display",
            RestAPI: "recipeDisplayInverse",
            GraphQL: "recipeDisplayInverse",
            custom: "recipeDisplayInverse",
        },
        recipeProcessorInverse: {
            frontend: "recipeProcessorInverse",
            backend: "recipe_processor_Inverse",
            database: "ifk_recipe_processor",
            pretty: "Recipe Processor Inverse",
            component: "RecipeProcessorInverse",
            kebab: "recipe-processorInverse",
            sqlFunctionRef: "p_ifk_recipe_processor",
            RestAPI: "recipeProcessorInverse",
            GraphQL: "recipeProcessorInverse",
            custom: "recipeProcessorInverse",
        },
        recipeModelInverse: {
            frontend: "recipeModelInverse",
            backend: "recipe_model_Inverse",
            database: "ifk_recipe_model",
            pretty: "Recipe Model Inverse",
            component: "RecipeModelInverse",
            kebab: "recipe-modelInverse",
            sqlFunctionRef: "p_ifk_recipe_model",
            RestAPI: "recipeModelInverse",
            GraphQL: "recipeModelInverse",
            custom: "recipeModelInverse",
        },
        recipeBrokerInverse: {
            frontend: "recipeBrokerInverse",
            backend: "recipe_broker_Inverse",
            database: "ifk_recipe_broker",
            pretty: "Recipe Broker Inverse",
            component: "RecipeBrokerInverse",
            kebab: "recipe-brokerInverse",
            sqlFunctionRef: "p_ifk_recipe_broker",
            RestAPI: "recipeBrokerInverse",
            GraphQL: "recipeBrokerInverse",
            custom: "recipeBrokerInverse",
        },
        recipeMessageInverse: {
            frontend: "recipeMessageInverse",
            backend: "recipe_message_Inverse",
            database: "ifk_recipe_message",
            pretty: "Recipe Message Inverse",
            component: "RecipeMessageInverse",
            kebab: "recipe-messageInverse",
            sqlFunctionRef: "p_ifk_recipe_message",
            RestAPI: "recipeMessageInverse",
            GraphQL: "recipeMessageInverse",
            custom: "recipeMessageInverse",
        },
        recipeToolInverse: {
            frontend: "recipeToolInverse",
            backend: "recipe_tool_Inverse",
            database: "ifk_recipe_tool",
            pretty: "Recipe Tool Inverse",
            component: "RecipeToolInverse",
            kebab: "recipe-toolInverse",
            sqlFunctionRef: "p_ifk_recipe_tool",
            RestAPI: "recipeToolInverse",
            GraphQL: "recipeToolInverse",
            custom: "recipeToolInverse",
        },
        recipeFunctionInverse: {
            frontend: "recipeFunctionInverse",
            backend: "recipe_function_Inverse",
            database: "ifk_recipe_function",
            pretty: "Recipe Function Inverse",
            component: "RecipeFunctionInverse",
            kebab: "recipe-functionInverse",
            sqlFunctionRef: "p_ifk_recipe_function",
            RestAPI: "recipeFunctionInverse",
            GraphQL: "recipeFunctionInverse",
            custom: "recipeFunctionInverse",
        },
    },
    recipeBroker: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        recipe: {
            frontend: "recipe",
            backend: "recipe",
            database: "recipe",
            pretty: "Recipe",
            component: "Recipe",
            kebab: "recipe",
            sqlFunctionRef: "p_recipe",
            RestAPI: "recipe",
            GraphQL: "recipe",
            custom: "recipe",
        },
        broker: {
            frontend: "broker",
            backend: "broker",
            database: "broker",
            pretty: "Broker",
            component: "Broker",
            kebab: "broker",
            sqlFunctionRef: "p_broker",
            RestAPI: "broker",
            GraphQL: "broker",
            custom: "broker",
        },
        brokerRole: {
            frontend: "brokerRole",
            backend: "broker_role",
            database: "broker_role",
            pretty: "Broker Role",
            component: "BrokerRole",
            kebab: "broker-role",
            sqlFunctionRef: "p_broker_role",
            RestAPI: "brokerRole",
            GraphQL: "brokerRole",
            custom: "brokerRole",
        },
        required: {
            frontend: "required",
            backend: "required",
            database: "required",
            pretty: "Required",
            component: "Required",
            kebab: "required",
            sqlFunctionRef: "p_required",
            RestAPI: "required",
            GraphQL: "required",
            custom: "required",
        },
        brokerReference: {
            frontend: "brokerReference",
            backend: "broker_reference",
            database: "ref_broker",
            pretty: "Broker Reference",
            component: "BrokerReference",
            kebab: "brokerReference",
            sqlFunctionRef: "p_ref_broker",
            RestAPI: "brokerReference",
            GraphQL: "brokerReference",
            custom: "brokerReference",
        },
        recipeReference: {
            frontend: "recipeReference",
            backend: "recipe_reference",
            database: "ref_recipe",
            pretty: "Recipe Reference",
            component: "RecipeReference",
            kebab: "recipeReference",
            sqlFunctionRef: "p_ref_recipe",
            RestAPI: "recipeReference",
            GraphQL: "recipeReference",
            custom: "recipeReference",
        },
    },
    recipeDisplay: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        recipe: {
            frontend: "recipe",
            backend: "recipe",
            database: "recipe",
            pretty: "Recipe",
            component: "Recipe",
            kebab: "recipe",
            sqlFunctionRef: "p_recipe",
            RestAPI: "recipe",
            GraphQL: "recipe",
            custom: "recipe",
        },
        display: {
            frontend: "display",
            backend: "display",
            database: "display",
            pretty: "Display",
            component: "Display",
            kebab: "display",
            sqlFunctionRef: "p_display",
            RestAPI: "display",
            GraphQL: "display",
            custom: "display",
        },
        priority: {
            frontend: "priority",
            backend: "priority",
            database: "priority",
            pretty: "Priority",
            component: "Priority",
            kebab: "priority",
            sqlFunctionRef: "p_priority",
            RestAPI: "priority",
            GraphQL: "priority",
            custom: "priority",
        },
        displaySettings: {
            frontend: "displaySettings",
            backend: "display_settings",
            database: "display_settings",
            pretty: "Display Settings",
            component: "DisplaySettings",
            kebab: "display-settings",
            sqlFunctionRef: "p_display_settings",
            RestAPI: "displaySettings",
            GraphQL: "displaySettings",
            custom: "displaySettings",
        },
        displayOptionReference: {
            frontend: "displayOptionReference",
            backend: "display_option_reference",
            database: "ref_display_option",
            pretty: "Display Option Reference",
            component: "DisplayOptionReference",
            kebab: "display-optionReference",
            sqlFunctionRef: "p_ref_display_option",
            RestAPI: "displayOptionReference",
            GraphQL: "displayOptionReference",
            custom: "displayOptionReference",
        },
        recipeReference: {
            frontend: "recipeReference",
            backend: "recipe_reference",
            database: "ref_recipe",
            pretty: "Recipe Reference",
            component: "RecipeReference",
            kebab: "recipeReference",
            sqlFunctionRef: "p_ref_recipe",
            RestAPI: "recipeReference",
            GraphQL: "recipeReference",
            custom: "recipeReference",
        },
    },
    recipeFunction: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        recipe: {
            frontend: "recipe",
            backend: "recipe",
            database: "recipe",
            pretty: "Recipe",
            component: "Recipe",
            kebab: "recipe",
            sqlFunctionRef: "p_recipe",
            RestAPI: "recipe",
            GraphQL: "recipe",
            custom: "recipe",
        },
        function: {
            frontend: "function",
            backend: "function",
            database: "function",
            pretty: "Function",
            component: "Function",
            kebab: "function",
            sqlFunctionRef: "p_function",
            RestAPI: "function",
            GraphQL: "function",
            custom: "function",
        },
        role: {
            frontend: "role",
            backend: "role",
            database: "role",
            pretty: "Role",
            component: "Role",
            kebab: "role",
            sqlFunctionRef: "p_role",
            RestAPI: "role",
            GraphQL: "role",
            custom: "role",
        },
        params: {
            frontend: "params",
            backend: "params",
            database: "params",
            pretty: "Params",
            component: "Params",
            kebab: "params",
            sqlFunctionRef: "p_params",
            RestAPI: "params",
            GraphQL: "params",
            custom: "params",
        },
        systemFunctionReference: {
            frontend: "systemFunctionReference",
            backend: "system_function_reference",
            database: "ref_system_function",
            pretty: "System Function Reference",
            component: "SystemFunctionReference",
            kebab: "system-functionReference",
            sqlFunctionRef: "p_ref_system_function",
            RestAPI: "systemFunctionReference",
            GraphQL: "systemFunctionReference",
            custom: "systemFunctionReference",
        },
        recipeReference: {
            frontend: "recipeReference",
            backend: "recipe_reference",
            database: "ref_recipe",
            pretty: "Recipe Reference",
            component: "RecipeReference",
            kebab: "recipeReference",
            sqlFunctionRef: "p_ref_recipe",
            RestAPI: "recipeReference",
            GraphQL: "recipeReference",
            custom: "recipeReference",
        },
    },
    recipeMessage: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        messageId: {
            frontend: "messageId",
            backend: "message_id",
            database: "message_id",
            pretty: "Message Id",
            component: "MessageId",
            kebab: "message-id",
            sqlFunctionRef: "p_message_id",
            RestAPI: "messageId",
            GraphQL: "messageId",
            custom: "messageId",
        },
        recipeId: {
            frontend: "recipeId",
            backend: "recipe_id",
            database: "recipe_id",
            pretty: "Recipe Id",
            component: "RecipeId",
            kebab: "recipe-id",
            sqlFunctionRef: "p_recipe_id",
            RestAPI: "recipeId",
            GraphQL: "recipeId",
            custom: "recipeId",
        },
        order: {
            frontend: "order",
            backend: "order",
            database: "order",
            pretty: "Order",
            component: "Order",
            kebab: "order",
            sqlFunctionRef: "p_order",
            RestAPI: "order",
            GraphQL: "order",
            custom: "order",
        },
        messageTemplateReference: {
            frontend: "messageTemplateReference",
            backend: "message_template_reference",
            database: "ref_message_template",
            pretty: "Message Template Reference",
            component: "MessageTemplateReference",
            kebab: "message-templateReference",
            sqlFunctionRef: "p_ref_message_template",
            RestAPI: "messageTemplateReference",
            GraphQL: "messageTemplateReference",
            custom: "messageTemplateReference",
        },
        recipeReference: {
            frontend: "recipeReference",
            backend: "recipe_reference",
            database: "ref_recipe",
            pretty: "Recipe Reference",
            component: "RecipeReference",
            kebab: "recipeReference",
            sqlFunctionRef: "p_ref_recipe",
            RestAPI: "recipeReference",
            GraphQL: "recipeReference",
            custom: "recipeReference",
        },
    },
    recipeMessageReorderQueue: {
        recipeId: {
            frontend: "recipeId",
            backend: "recipe_id",
            database: "recipe_id",
            pretty: "Recipe Id",
            component: "RecipeId",
            kebab: "recipe-id",
            sqlFunctionRef: "p_recipe_id",
            RestAPI: "recipeId",
            GraphQL: "recipeId",
            custom: "recipeId",
        },
        lastModified: {
            frontend: "lastModified",
            backend: "last_modified",
            database: "last_modified",
            pretty: "Last Modified",
            component: "LastModified",
            kebab: "last-modified",
            sqlFunctionRef: "p_last_modified",
            RestAPI: "lastModified",
            GraphQL: "lastModified",
            custom: "lastModified",
        },
    },
    recipeModel: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        recipe: {
            frontend: "recipe",
            backend: "recipe",
            database: "recipe",
            pretty: "Recipe",
            component: "Recipe",
            kebab: "recipe",
            sqlFunctionRef: "p_recipe",
            RestAPI: "recipe",
            GraphQL: "recipe",
            custom: "recipe",
        },
        aiModel: {
            frontend: "aiModel",
            backend: "ai_model",
            database: "ai_model",
            pretty: "Ai Model",
            component: "AiModel",
            kebab: "ai-model",
            sqlFunctionRef: "p_ai_model",
            RestAPI: "aiModel",
            GraphQL: "aiModel",
            custom: "aiModel",
        },
        role: {
            frontend: "role",
            backend: "role",
            database: "role",
            pretty: "Role",
            component: "Role",
            kebab: "role",
            sqlFunctionRef: "p_role",
            RestAPI: "role",
            GraphQL: "role",
            custom: "role",
        },
        priority: {
            frontend: "priority",
            backend: "priority",
            database: "priority",
            pretty: "Priority",
            component: "Priority",
            kebab: "priority",
            sqlFunctionRef: "p_priority",
            RestAPI: "priority",
            GraphQL: "priority",
            custom: "priority",
        },
        aiModelReference: {
            frontend: "aiModelReference",
            backend: "ai_model_reference",
            database: "ref_ai_model",
            pretty: "Ai Model Reference",
            component: "AiModelReference",
            kebab: "ai-modelReference",
            sqlFunctionRef: "p_ref_ai_model",
            RestAPI: "aiModelReference",
            GraphQL: "aiModelReference",
            custom: "aiModelReference",
        },
        recipeReference: {
            frontend: "recipeReference",
            backend: "recipe_reference",
            database: "ref_recipe",
            pretty: "Recipe Reference",
            component: "RecipeReference",
            kebab: "recipeReference",
            sqlFunctionRef: "p_ref_recipe",
            RestAPI: "recipeReference",
            GraphQL: "recipeReference",
            custom: "recipeReference",
        },
    },
    recipeProcessor: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        recipe: {
            frontend: "recipe",
            backend: "recipe",
            database: "recipe",
            pretty: "Recipe",
            component: "Recipe",
            kebab: "recipe",
            sqlFunctionRef: "p_recipe",
            RestAPI: "recipe",
            GraphQL: "recipe",
            custom: "recipe",
        },
        processor: {
            frontend: "processor",
            backend: "processor",
            database: "processor",
            pretty: "Processor",
            component: "Processor",
            kebab: "processor",
            sqlFunctionRef: "p_processor",
            RestAPI: "processor",
            GraphQL: "processor",
            custom: "processor",
        },
        params: {
            frontend: "params",
            backend: "params",
            database: "params",
            pretty: "Params",
            component: "Params",
            kebab: "params",
            sqlFunctionRef: "p_params",
            RestAPI: "params",
            GraphQL: "params",
            custom: "params",
        },
        processorReference: {
            frontend: "processorReference",
            backend: "processor_reference",
            database: "ref_processor",
            pretty: "Processor Reference",
            component: "ProcessorReference",
            kebab: "processorReference",
            sqlFunctionRef: "p_ref_processor",
            RestAPI: "processorReference",
            GraphQL: "processorReference",
            custom: "processorReference",
        },
        recipeReference: {
            frontend: "recipeReference",
            backend: "recipe_reference",
            database: "ref_recipe",
            pretty: "Recipe Reference",
            component: "RecipeReference",
            kebab: "recipeReference",
            sqlFunctionRef: "p_ref_recipe",
            RestAPI: "recipeReference",
            GraphQL: "recipeReference",
            custom: "recipeReference",
        },
    },
    recipeTool: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        recipe: {
            frontend: "recipe",
            backend: "recipe",
            database: "recipe",
            pretty: "Recipe",
            component: "Recipe",
            kebab: "recipe",
            sqlFunctionRef: "p_recipe",
            RestAPI: "recipe",
            GraphQL: "recipe",
            custom: "recipe",
        },
        tool: {
            frontend: "tool",
            backend: "tool",
            database: "tool",
            pretty: "Tool",
            component: "Tool",
            kebab: "tool",
            sqlFunctionRef: "p_tool",
            RestAPI: "tool",
            GraphQL: "tool",
            custom: "tool",
        },
        params: {
            frontend: "params",
            backend: "params",
            database: "params",
            pretty: "Params",
            component: "Params",
            kebab: "params",
            sqlFunctionRef: "p_params",
            RestAPI: "params",
            GraphQL: "params",
            custom: "params",
        },
        recipeReference: {
            frontend: "recipeReference",
            backend: "recipe_reference",
            database: "ref_recipe",
            pretty: "Recipe Reference",
            component: "RecipeReference",
            kebab: "recipeReference",
            sqlFunctionRef: "p_ref_recipe",
            RestAPI: "recipeReference",
            GraphQL: "recipeReference",
            custom: "recipeReference",
        },
        toolReference: {
            frontend: "toolReference",
            backend: "tool_reference",
            database: "ref_tool",
            pretty: "Tool Reference",
            component: "ToolReference",
            kebab: "toolReference",
            sqlFunctionRef: "p_ref_tool",
            RestAPI: "toolReference",
            GraphQL: "toolReference",
            custom: "toolReference",
        },
    },
    registeredFunction: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        modulePath: {
            frontend: "modulePath",
            backend: "module_path",
            database: "module_path",
            pretty: "Module Path",
            component: "ModulePath",
            kebab: "module-path",
            sqlFunctionRef: "p_module_path",
            RestAPI: "modulePath",
            GraphQL: "modulePath",
            custom: "modulePath",
        },
        className: {
            frontend: "className",
            backend: "class_name",
            database: "class_name",
            pretty: "Class Name",
            component: "ClassName",
            kebab: "class-name",
            sqlFunctionRef: "p_class_name",
            RestAPI: "className",
            GraphQL: "className",
            custom: "className",
        },
        description: {
            frontend: "description",
            backend: "description",
            database: "description",
            pretty: "Description",
            component: "Description",
            kebab: "description",
            sqlFunctionRef: "p_description",
            RestAPI: "description",
            GraphQL: "description",
            custom: "description",
        },
        returnBroker: {
            frontend: "returnBroker",
            backend: "return_broker",
            database: "return_broker",
            pretty: "Return Broker",
            component: "ReturnBroker",
            kebab: "return-broker",
            sqlFunctionRef: "p_return_broker",
            RestAPI: "returnBroker",
            GraphQL: "returnBroker",
            custom: "returnBroker",
        },
        brokerReference: {
            frontend: "brokerReference",
            backend: "broker_reference",
            database: "ref_broker",
            pretty: "Broker Reference",
            component: "BrokerReference",
            kebab: "brokerReference",
            sqlFunctionRef: "p_ref_broker",
            RestAPI: "brokerReference",
            GraphQL: "brokerReference",
            custom: "brokerReference",
        },
        systemFunctionInverse: {
            frontend: "systemFunctionInverse",
            backend: "system_function_Inverse",
            database: "ifk_system_function",
            pretty: "System Function Inverse",
            component: "SystemFunctionInverse",
            kebab: "system-functionInverse",
            sqlFunctionRef: "p_ifk_system_function",
            RestAPI: "systemFunctionInverse",
            GraphQL: "systemFunctionInverse",
            custom: "systemFunctionInverse",
        },
        argInverse: {
            frontend: "argInverse",
            backend: "arg_Inverse",
            database: "ifk_arg",
            pretty: "Arg Inverse",
            component: "ArgInverse",
            kebab: "argInverse",
            sqlFunctionRef: "p_ifk_arg",
            RestAPI: "argInverse",
            GraphQL: "argInverse",
            custom: "argInverse",
        },
    },
    subcategory: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        categoryId: {
            frontend: "categoryId",
            backend: "category_id",
            database: "category_id",
            pretty: "Category Id",
            component: "CategoryId",
            kebab: "category-id",
            sqlFunctionRef: "p_category_id",
            RestAPI: "categoryId",
            GraphQL: "categoryId",
            custom: "categoryId",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        description: {
            frontend: "description",
            backend: "description",
            database: "description",
            pretty: "Description",
            component: "Description",
            kebab: "description",
            sqlFunctionRef: "p_description",
            RestAPI: "description",
            GraphQL: "description",
            custom: "description",
        },
        slug: {
            frontend: "slug",
            backend: "slug",
            database: "slug",
            pretty: "Slug",
            component: "Slug",
            kebab: "slug",
            sqlFunctionRef: "p_slug",
            RestAPI: "slug",
            GraphQL: "slug",
            custom: "slug",
        },
        icon: {
            frontend: "icon",
            backend: "icon",
            database: "icon",
            pretty: "Icon",
            component: "Icon",
            kebab: "icon",
            sqlFunctionRef: "p_icon",
            RestAPI: "icon",
            GraphQL: "icon",
            custom: "icon",
        },
        features: {
            frontend: "features",
            backend: "features",
            database: "features",
            pretty: "Features",
            component: "Features",
            kebab: "features",
            sqlFunctionRef: "p_features",
            RestAPI: "features",
            GraphQL: "features",
            custom: "features",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        categoryReference: {
            frontend: "categoryReference",
            backend: "category_reference",
            database: "ref_category",
            pretty: "Category Reference",
            component: "CategoryReference",
            kebab: "categoryReference",
            sqlFunctionRef: "p_ref_category",
            RestAPI: "categoryReference",
            GraphQL: "categoryReference",
            custom: "categoryReference",
        },
        appletInverse: {
            frontend: "appletInverse",
            backend: "applet_Inverse",
            database: "ifk_applet",
            pretty: "Applet Inverse",
            component: "AppletInverse",
            kebab: "appletInverse",
            sqlFunctionRef: "p_ifk_applet",
            RestAPI: "appletInverse",
            GraphQL: "appletInverse",
            custom: "appletInverse",
        },
    },
    systemFunction: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        description: {
            frontend: "description",
            backend: "description",
            database: "description",
            pretty: "Description",
            component: "Description",
            kebab: "description",
            sqlFunctionRef: "p_description",
            RestAPI: "description",
            GraphQL: "description",
            custom: "description",
        },
        sample: {
            frontend: "sample",
            backend: "sample",
            database: "sample",
            pretty: "Sample",
            component: "Sample",
            kebab: "sample",
            sqlFunctionRef: "p_sample",
            RestAPI: "sample",
            GraphQL: "sample",
            custom: "sample",
        },
        inputParams: {
            frontend: "inputParams",
            backend: "input_params",
            database: "input_params",
            pretty: "Input Params",
            component: "InputParams",
            kebab: "input-params",
            sqlFunctionRef: "p_input_params",
            RestAPI: "inputParams",
            GraphQL: "inputParams",
            custom: "inputParams",
        },
        outputOptions: {
            frontend: "outputOptions",
            backend: "output_options",
            database: "output_options",
            pretty: "Output Options",
            component: "OutputOptions",
            kebab: "output-options",
            sqlFunctionRef: "p_output_options",
            RestAPI: "outputOptions",
            GraphQL: "outputOptions",
            custom: "outputOptions",
        },
        rfId: {
            frontend: "rfId",
            backend: "rf_id",
            database: "rf_id",
            pretty: "Rf Id",
            component: "RfId",
            kebab: "rf-id",
            sqlFunctionRef: "p_rf_id",
            RestAPI: "rfId",
            GraphQL: "rfId",
            custom: "rfId",
        },
        registeredFunctionReference: {
            frontend: "registeredFunctionReference",
            backend: "registered_function_reference",
            database: "ref_registered_function",
            pretty: "Registered Function Reference",
            component: "RegisteredFunctionReference",
            kebab: "registered-functionReference",
            sqlFunctionRef: "p_ref_registered_function",
            RestAPI: "registeredFunctionReference",
            GraphQL: "registeredFunctionReference",
            custom: "registeredFunctionReference",
        },
        toolInverse: {
            frontend: "toolInverse",
            backend: "tool_Inverse",
            database: "ifk_tool",
            pretty: "Tool Inverse",
            component: "ToolInverse",
            kebab: "toolInverse",
            sqlFunctionRef: "p_ifk_tool",
            RestAPI: "toolInverse",
            GraphQL: "toolInverse",
            custom: "toolInverse",
        },
        recipeFunctionInverse: {
            frontend: "recipeFunctionInverse",
            backend: "recipe_function_Inverse",
            database: "ifk_recipe_function",
            pretty: "Recipe Function Inverse",
            component: "RecipeFunctionInverse",
            kebab: "recipe-functionInverse",
            sqlFunctionRef: "p_ifk_recipe_function",
            RestAPI: "recipeFunctionInverse",
            GraphQL: "recipeFunctionInverse",
            custom: "recipeFunctionInverse",
        },
    },
    taskAssignments: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        taskId: {
            frontend: "taskId",
            backend: "task_id",
            database: "task_id",
            pretty: "Task Id",
            component: "TaskId",
            kebab: "task-id",
            sqlFunctionRef: "p_task_id",
            RestAPI: "taskId",
            GraphQL: "taskId",
            custom: "taskId",
        },
        userId: {
            frontend: "userId",
            backend: "user_id",
            database: "user_id",
            pretty: "User Id",
            component: "UserId",
            kebab: "user-id",
            sqlFunctionRef: "p_user_id",
            RestAPI: "userId",
            GraphQL: "userId",
            custom: "userId",
        },
        assignedBy: {
            frontend: "assignedBy",
            backend: "assigned_by",
            database: "assigned_by",
            pretty: "Assigned By",
            component: "AssignedBy",
            kebab: "assigned-by",
            sqlFunctionRef: "p_assigned_by",
            RestAPI: "assignedBy",
            GraphQL: "assignedBy",
            custom: "assignedBy",
        },
        assignedAt: {
            frontend: "assignedAt",
            backend: "assigned_at",
            database: "assigned_at",
            pretty: "Assigned At",
            component: "AssignedAt",
            kebab: "assigned-at",
            sqlFunctionRef: "p_assigned_at",
            RestAPI: "assignedAt",
            GraphQL: "assignedAt",
            custom: "assignedAt",
        },
        tasksReference: {
            frontend: "tasksReference",
            backend: "tasks_reference",
            database: "ref_tasks",
            pretty: "Tasks Reference",
            component: "TasksReference",
            kebab: "tasksReference",
            sqlFunctionRef: "p_ref_tasks",
            RestAPI: "tasksReference",
            GraphQL: "tasksReference",
            custom: "tasksReference",
        },
    },
    taskAttachments: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        taskId: {
            frontend: "taskId",
            backend: "task_id",
            database: "task_id",
            pretty: "Task Id",
            component: "TaskId",
            kebab: "task-id",
            sqlFunctionRef: "p_task_id",
            RestAPI: "taskId",
            GraphQL: "taskId",
            custom: "taskId",
        },
        fileName: {
            frontend: "fileName",
            backend: "file_name",
            database: "file_name",
            pretty: "File Name",
            component: "FileName",
            kebab: "file-name",
            sqlFunctionRef: "p_file_name",
            RestAPI: "fileName",
            GraphQL: "fileName",
            custom: "fileName",
        },
        fileType: {
            frontend: "fileType",
            backend: "file_type",
            database: "file_type",
            pretty: "File Type",
            component: "FileType",
            kebab: "file-type",
            sqlFunctionRef: "p_file_type",
            RestAPI: "fileType",
            GraphQL: "fileType",
            custom: "fileType",
        },
        fileSize: {
            frontend: "fileSize",
            backend: "file_size",
            database: "file_size",
            pretty: "File Size",
            component: "FileSize",
            kebab: "file-size",
            sqlFunctionRef: "p_file_size",
            RestAPI: "fileSize",
            GraphQL: "fileSize",
            custom: "fileSize",
        },
        filePath: {
            frontend: "filePath",
            backend: "file_path",
            database: "file_path",
            pretty: "File Path",
            component: "FilePath",
            kebab: "file-path",
            sqlFunctionRef: "p_file_path",
            RestAPI: "filePath",
            GraphQL: "filePath",
            custom: "filePath",
        },
        uploadedBy: {
            frontend: "uploadedBy",
            backend: "uploaded_by",
            database: "uploaded_by",
            pretty: "Uploaded By",
            component: "UploadedBy",
            kebab: "uploaded-by",
            sqlFunctionRef: "p_uploaded_by",
            RestAPI: "uploadedBy",
            GraphQL: "uploadedBy",
            custom: "uploadedBy",
        },
        uploadedAt: {
            frontend: "uploadedAt",
            backend: "uploaded_at",
            database: "uploaded_at",
            pretty: "Uploaded At",
            component: "UploadedAt",
            kebab: "uploaded-at",
            sqlFunctionRef: "p_uploaded_at",
            RestAPI: "uploadedAt",
            GraphQL: "uploadedAt",
            custom: "uploadedAt",
        },
        tasksReference: {
            frontend: "tasksReference",
            backend: "tasks_reference",
            database: "ref_tasks",
            pretty: "Tasks Reference",
            component: "TasksReference",
            kebab: "tasksReference",
            sqlFunctionRef: "p_ref_tasks",
            RestAPI: "tasksReference",
            GraphQL: "tasksReference",
            custom: "tasksReference",
        },
    },
    taskComments: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        taskId: {
            frontend: "taskId",
            backend: "task_id",
            database: "task_id",
            pretty: "Task Id",
            component: "TaskId",
            kebab: "task-id",
            sqlFunctionRef: "p_task_id",
            RestAPI: "taskId",
            GraphQL: "taskId",
            custom: "taskId",
        },
        userId: {
            frontend: "userId",
            backend: "user_id",
            database: "user_id",
            pretty: "User Id",
            component: "UserId",
            kebab: "user-id",
            sqlFunctionRef: "p_user_id",
            RestAPI: "userId",
            GraphQL: "userId",
            custom: "userId",
        },
        content: {
            frontend: "content",
            backend: "content",
            database: "content",
            pretty: "Content",
            component: "Content",
            kebab: "content",
            sqlFunctionRef: "p_content",
            RestAPI: "content",
            GraphQL: "content",
            custom: "content",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        updatedAt: {
            frontend: "updatedAt",
            backend: "updated_at",
            database: "updated_at",
            pretty: "Updated At",
            component: "UpdatedAt",
            kebab: "updated-at",
            sqlFunctionRef: "p_updated_at",
            RestAPI: "updatedAt",
            GraphQL: "updatedAt",
            custom: "updatedAt",
        },
        tasksReference: {
            frontend: "tasksReference",
            backend: "tasks_reference",
            database: "ref_tasks",
            pretty: "Tasks Reference",
            component: "TasksReference",
            kebab: "tasksReference",
            sqlFunctionRef: "p_ref_tasks",
            RestAPI: "tasksReference",
            GraphQL: "tasksReference",
            custom: "tasksReference",
        },
    },
    tasks: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        title: {
            frontend: "title",
            backend: "title",
            database: "title",
            pretty: "Title",
            component: "Title",
            kebab: "title",
            sqlFunctionRef: "p_title",
            RestAPI: "title",
            GraphQL: "title",
            custom: "title",
        },
        description: {
            frontend: "description",
            backend: "description",
            database: "description",
            pretty: "Description",
            component: "Description",
            kebab: "description",
            sqlFunctionRef: "p_description",
            RestAPI: "description",
            GraphQL: "description",
            custom: "description",
        },
        projectId: {
            frontend: "projectId",
            backend: "project_id",
            database: "project_id",
            pretty: "Project Id",
            component: "ProjectId",
            kebab: "project-id",
            sqlFunctionRef: "p_project_id",
            RestAPI: "projectId",
            GraphQL: "projectId",
            custom: "projectId",
        },
        status: {
            frontend: "status",
            backend: "status",
            database: "status",
            pretty: "Status",
            component: "Status",
            kebab: "status",
            sqlFunctionRef: "p_status",
            RestAPI: "status",
            GraphQL: "status",
            custom: "status",
        },
        dueDate: {
            frontend: "dueDate",
            backend: "due_date",
            database: "due_date",
            pretty: "Due Date",
            component: "DueDate",
            kebab: "due-date",
            sqlFunctionRef: "p_due_date",
            RestAPI: "dueDate",
            GraphQL: "dueDate",
            custom: "dueDate",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        updatedAt: {
            frontend: "updatedAt",
            backend: "updated_at",
            database: "updated_at",
            pretty: "Updated At",
            component: "UpdatedAt",
            kebab: "updated-at",
            sqlFunctionRef: "p_updated_at",
            RestAPI: "updatedAt",
            GraphQL: "updatedAt",
            custom: "updatedAt",
        },
        createdBy: {
            frontend: "createdBy",
            backend: "created_by",
            database: "created_by",
            pretty: "Created By",
            component: "CreatedBy",
            kebab: "created-by",
            sqlFunctionRef: "p_created_by",
            RestAPI: "createdBy",
            GraphQL: "createdBy",
            custom: "createdBy",
        },
        projectsReference: {
            frontend: "projectsReference",
            backend: "projects_reference",
            database: "ref_projects",
            pretty: "Projects Reference",
            component: "ProjectsReference",
            kebab: "projectsReference",
            sqlFunctionRef: "p_ref_projects",
            RestAPI: "projectsReference",
            GraphQL: "projectsReference",
            custom: "projectsReference",
        },
        taskAssignmentsInverse: {
            frontend: "taskAssignmentsInverse",
            backend: "task_assignments_Inverse",
            database: "ifk_task_assignments",
            pretty: "Task Assignments Inverse",
            component: "TaskAssignmentsInverse",
            kebab: "task-assignmentsInverse",
            sqlFunctionRef: "p_ifk_task_assignments",
            RestAPI: "taskAssignmentsInverse",
            GraphQL: "taskAssignmentsInverse",
            custom: "taskAssignmentsInverse",
        },
        taskAttachmentsInverse: {
            frontend: "taskAttachmentsInverse",
            backend: "task_attachments_Inverse",
            database: "ifk_task_attachments",
            pretty: "Task Attachments Inverse",
            component: "TaskAttachmentsInverse",
            kebab: "task-attachmentsInverse",
            sqlFunctionRef: "p_ifk_task_attachments",
            RestAPI: "taskAttachmentsInverse",
            GraphQL: "taskAttachmentsInverse",
            custom: "taskAttachmentsInverse",
        },
        taskCommentsInverse: {
            frontend: "taskCommentsInverse",
            backend: "task_comments_Inverse",
            database: "ifk_task_comments",
            pretty: "Task Comments Inverse",
            component: "TaskCommentsInverse",
            kebab: "task-commentsInverse",
            sqlFunctionRef: "p_ifk_task_comments",
            RestAPI: "taskCommentsInverse",
            GraphQL: "taskCommentsInverse",
            custom: "taskCommentsInverse",
        },
    },
    tool: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        source: {
            frontend: "source",
            backend: "source",
            database: "source",
            pretty: "Source",
            component: "Source",
            kebab: "source",
            sqlFunctionRef: "p_source",
            RestAPI: "source",
            GraphQL: "source",
            custom: "source",
        },
        description: {
            frontend: "description",
            backend: "description",
            database: "description",
            pretty: "Description",
            component: "Description",
            kebab: "description",
            sqlFunctionRef: "p_description",
            RestAPI: "description",
            GraphQL: "description",
            custom: "description",
        },
        parameters: {
            frontend: "parameters",
            backend: "parameters",
            database: "parameters",
            pretty: "Parameters",
            component: "Parameters",
            kebab: "parameters",
            sqlFunctionRef: "p_parameters",
            RestAPI: "parameters",
            GraphQL: "parameters",
            custom: "parameters",
        },
        requiredArgs: {
            frontend: "requiredArgs",
            backend: "required_args",
            database: "required_args",
            pretty: "Required Args",
            component: "RequiredArgs",
            kebab: "required-args",
            sqlFunctionRef: "p_required_args",
            RestAPI: "requiredArgs",
            GraphQL: "requiredArgs",
            custom: "requiredArgs",
        },
        systemFunction: {
            frontend: "systemFunction",
            backend: "system_function",
            database: "system_function",
            pretty: "System Function",
            component: "SystemFunction",
            kebab: "system-function",
            sqlFunctionRef: "p_system_function",
            RestAPI: "systemFunction",
            GraphQL: "systemFunction",
            custom: "systemFunction",
        },
        additionalParams: {
            frontend: "additionalParams",
            backend: "additional_params",
            database: "additional_params",
            pretty: "Additional Params",
            component: "AdditionalParams",
            kebab: "additional-params",
            sqlFunctionRef: "p_additional_params",
            RestAPI: "additionalParams",
            GraphQL: "additionalParams",
            custom: "additionalParams",
        },
        systemFunctionReference: {
            frontend: "systemFunctionReference",
            backend: "system_function_reference",
            database: "ref_system_function",
            pretty: "System Function Reference",
            component: "SystemFunctionReference",
            kebab: "system-functionReference",
            sqlFunctionRef: "p_ref_system_function",
            RestAPI: "systemFunctionReference",
            GraphQL: "systemFunctionReference",
            custom: "systemFunctionReference",
        },
        recipeToolInverse: {
            frontend: "recipeToolInverse",
            backend: "recipe_tool_Inverse",
            database: "ifk_recipe_tool",
            pretty: "Recipe Tool Inverse",
            component: "RecipeToolInverse",
            kebab: "recipe-toolInverse",
            sqlFunctionRef: "p_ifk_recipe_tool",
            RestAPI: "recipeToolInverse",
            GraphQL: "recipeToolInverse",
            custom: "recipeToolInverse",
        },
    },
    transformer: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        inputParams: {
            frontend: "inputParams",
            backend: "input_params",
            database: "input_params",
            pretty: "Input Params",
            component: "InputParams",
            kebab: "input-params",
            sqlFunctionRef: "p_input_params",
            RestAPI: "inputParams",
            GraphQL: "inputParams",
            custom: "inputParams",
        },
        outputParams: {
            frontend: "outputParams",
            backend: "output_params",
            database: "output_params",
            pretty: "Output Params",
            component: "OutputParams",
            kebab: "output-params",
            sqlFunctionRef: "p_output_params",
            RestAPI: "outputParams",
            GraphQL: "outputParams",
            custom: "outputParams",
        },
        actionInverse: {
            frontend: "actionInverse",
            backend: "action_Inverse",
            database: "ifk_action",
            pretty: "Action Inverse",
            component: "ActionInverse",
            kebab: "actionInverse",
            sqlFunctionRef: "p_ifk_action",
            RestAPI: "actionInverse",
            GraphQL: "actionInverse",
            custom: "actionInverse",
        },
    },
    userPreferences: {
        userId: {
            frontend: "userId",
            backend: "user_id",
            database: "user_id",
            pretty: "User Id",
            component: "UserId",
            kebab: "user-id",
            sqlFunctionRef: "p_user_id",
            RestAPI: "userId",
            GraphQL: "userId",
            custom: "userId",
        },
        preferences: {
            frontend: "preferences",
            backend: "preferences",
            database: "preferences",
            pretty: "Preferences",
            component: "Preferences",
            kebab: "preferences",
            sqlFunctionRef: "p_preferences",
            RestAPI: "preferences",
            GraphQL: "preferences",
            custom: "preferences",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        updatedAt: {
            frontend: "updatedAt",
            backend: "updated_at",
            database: "updated_at",
            pretty: "Updated At",
            component: "UpdatedAt",
            kebab: "updated-at",
            sqlFunctionRef: "p_updated_at",
            RestAPI: "updatedAt",
            GraphQL: "updatedAt",
            custom: "updatedAt",
        },
    },
    wcClaim: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        applicantName: {
            frontend: "applicantName",
            backend: "applicant_name",
            database: "applicant_name",
            pretty: "Applicant Name",
            component: "ApplicantName",
            kebab: "applicant-name",
            sqlFunctionRef: "p_applicant_name",
            RestAPI: "applicantName",
            GraphQL: "applicantName",
            custom: "applicantName",
        },
        personId: {
            frontend: "personId",
            backend: "person_id",
            database: "person_id",
            pretty: "Person Id",
            component: "PersonId",
            kebab: "person-id",
            sqlFunctionRef: "p_person_id",
            RestAPI: "personId",
            GraphQL: "personId",
            custom: "personId",
        },
        dateOfBirth: {
            frontend: "dateOfBirth",
            backend: "date_of_birth",
            database: "date_of_birth",
            pretty: "Date Of Birth",
            component: "DateOfBirth",
            kebab: "date-of-birth",
            sqlFunctionRef: "p_date_of_birth",
            RestAPI: "dateOfBirth",
            GraphQL: "dateOfBirth",
            custom: "dateOfBirth",
        },
        dateOfInjury: {
            frontend: "dateOfInjury",
            backend: "date_of_injury",
            database: "date_of_injury",
            pretty: "Date Of Injury",
            component: "DateOfInjury",
            kebab: "date-of-injury",
            sqlFunctionRef: "p_date_of_injury",
            RestAPI: "dateOfInjury",
            GraphQL: "dateOfInjury",
            custom: "dateOfInjury",
        },
        ageAtDoi: {
            frontend: "ageAtDoi",
            backend: "age_at_doi",
            database: "age_at_doi",
            pretty: "Age At Doi",
            component: "AgeAtDoi",
            kebab: "age-at-doi",
            sqlFunctionRef: "p_age_at_doi",
            RestAPI: "ageAtDoi",
            GraphQL: "ageAtDoi",
            custom: "ageAtDoi",
        },
        occupationalCode: {
            frontend: "occupationalCode",
            backend: "occupational_code",
            database: "occupational_code",
            pretty: "Occupational Code",
            component: "OccupationalCode",
            kebab: "occupational-code",
            sqlFunctionRef: "p_occupational_code",
            RestAPI: "occupationalCode",
            GraphQL: "occupationalCode",
            custom: "occupationalCode",
        },
        weeklyEarnings: {
            frontend: "weeklyEarnings",
            backend: "weekly_earnings",
            database: "weekly_earnings",
            pretty: "Weekly Earnings",
            component: "WeeklyEarnings",
            kebab: "weekly-earnings",
            sqlFunctionRef: "p_weekly_earnings",
            RestAPI: "weeklyEarnings",
            GraphQL: "weeklyEarnings",
            custom: "weeklyEarnings",
        },
        wcReportInverse: {
            frontend: "wcReportInverse",
            backend: "wc_report_Inverse",
            database: "ifk_wc_report",
            pretty: "Wc Report Inverse",
            component: "WcReportInverse",
            kebab: "wc-reportInverse",
            sqlFunctionRef: "p_ifk_wc_report",
            RestAPI: "wcReportInverse",
            GraphQL: "wcReportInverse",
            custom: "wcReportInverse",
        },
    },
    wcImpairmentDefinition: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        impairmentNumber: {
            frontend: "impairmentNumber",
            backend: "impairment_number",
            database: "impairment_number",
            pretty: "Impairment Number",
            component: "ImpairmentNumber",
            kebab: "impairment-number",
            sqlFunctionRef: "p_impairment_number",
            RestAPI: "impairmentNumber",
            GraphQL: "impairmentNumber",
            custom: "impairmentNumber",
        },
        fecRank: {
            frontend: "fecRank",
            backend: "fec_rank",
            database: "fec_rank",
            pretty: "Fec Rank",
            component: "FecRank",
            kebab: "fec-rank",
            sqlFunctionRef: "p_fec_rank",
            RestAPI: "fecRank",
            GraphQL: "fecRank",
            custom: "fecRank",
        },
        name: {
            frontend: "name",
            backend: "name",
            database: "name",
            pretty: "Name",
            component: "Name",
            kebab: "name",
            sqlFunctionRef: "p_name",
            RestAPI: "name",
            GraphQL: "name",
            custom: "name",
        },
        attributes: {
            frontend: "attributes",
            backend: "attributes",
            database: "attributes",
            pretty: "Attributes",
            component: "Attributes",
            kebab: "attributes",
            sqlFunctionRef: "p_attributes",
            RestAPI: "attributes",
            GraphQL: "attributes",
            custom: "attributes",
        },
        fingerType: {
            frontend: "fingerType",
            backend: "finger_type",
            database: "finger_type",
            pretty: "Finger Type",
            component: "FingerType",
            kebab: "finger-type",
            sqlFunctionRef: "p_finger_type",
            RestAPI: "fingerType",
            GraphQL: "fingerType",
            custom: "fingerType",
        },
        wcInjuryInverse: {
            frontend: "wcInjuryInverse",
            backend: "wc_injury_Inverse",
            database: "ifk_wc_injury",
            pretty: "Wc Injury Inverse",
            component: "WcInjuryInverse",
            kebab: "wc-injuryInverse",
            sqlFunctionRef: "p_ifk_wc_injury",
            RestAPI: "wcInjuryInverse",
            GraphQL: "wcInjuryInverse",
            custom: "wcInjuryInverse",
        },
    },
    wcInjury: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        reportId: {
            frontend: "reportId",
            backend: "report_id",
            database: "report_id",
            pretty: "Report Id",
            component: "ReportId",
            kebab: "report-id",
            sqlFunctionRef: "p_report_id",
            RestAPI: "reportId",
            GraphQL: "reportId",
            custom: "reportId",
        },
        impairmentDefinitionId: {
            frontend: "impairmentDefinitionId",
            backend: "impairment_definition_id",
            database: "impairment_definition_id",
            pretty: "Impairment Definition Id",
            component: "ImpairmentDefinitionId",
            kebab: "impairment-definition-id",
            sqlFunctionRef: "p_impairment_definition_id",
            RestAPI: "impairmentDefinitionId",
            GraphQL: "impairmentDefinitionId",
            custom: "impairmentDefinitionId",
        },
        digit: {
            frontend: "digit",
            backend: "digit",
            database: "digit",
            pretty: "Digit",
            component: "Digit",
            kebab: "digit",
            sqlFunctionRef: "p_digit",
            RestAPI: "digit",
            GraphQL: "digit",
            custom: "digit",
        },
        le: {
            frontend: "le",
            backend: "le",
            database: "le",
            pretty: "Le",
            component: "Le",
            kebab: "le",
            sqlFunctionRef: "p_le",
            RestAPI: "le",
            GraphQL: "le",
            custom: "le",
        },
        side: {
            frontend: "side",
            backend: "side",
            database: "side",
            pretty: "Side",
            component: "Side",
            kebab: "side",
            sqlFunctionRef: "p_side",
            RestAPI: "side",
            GraphQL: "side",
            custom: "side",
        },
        ue: {
            frontend: "ue",
            backend: "ue",
            database: "ue",
            pretty: "Ue",
            component: "Ue",
            kebab: "ue",
            sqlFunctionRef: "p_ue",
            RestAPI: "ue",
            GraphQL: "ue",
            custom: "ue",
        },
        wpi: {
            frontend: "wpi",
            backend: "wpi",
            database: "wpi",
            pretty: "Wpi",
            component: "Wpi",
            kebab: "wpi",
            sqlFunctionRef: "p_wpi",
            RestAPI: "wpi",
            GraphQL: "wpi",
            custom: "wpi",
        },
        pain: {
            frontend: "pain",
            backend: "pain",
            database: "pain",
            pretty: "Pain",
            component: "Pain",
            kebab: "pain",
            sqlFunctionRef: "p_pain",
            RestAPI: "pain",
            GraphQL: "pain",
            custom: "pain",
        },
        industrial: {
            frontend: "industrial",
            backend: "industrial",
            database: "industrial",
            pretty: "Industrial",
            component: "Industrial",
            kebab: "industrial",
            sqlFunctionRef: "p_industrial",
            RestAPI: "industrial",
            GraphQL: "industrial",
            custom: "industrial",
        },
        rating: {
            frontend: "rating",
            backend: "rating",
            database: "rating",
            pretty: "Rating",
            component: "Rating",
            kebab: "rating",
            sqlFunctionRef: "p_rating",
            RestAPI: "rating",
            GraphQL: "rating",
            custom: "rating",
        },
        formula: {
            frontend: "formula",
            backend: "formula",
            database: "formula",
            pretty: "Formula",
            component: "Formula",
            kebab: "formula",
            sqlFunctionRef: "p_formula",
            RestAPI: "formula",
            GraphQL: "formula",
            custom: "formula",
        },
        updatedAt: {
            frontend: "updatedAt",
            backend: "updated_at",
            database: "updated_at",
            pretty: "Updated At",
            component: "UpdatedAt",
            kebab: "updated-at",
            sqlFunctionRef: "p_updated_at",
            RestAPI: "updatedAt",
            GraphQL: "updatedAt",
            custom: "updatedAt",
        },
        wcImpairmentDefinitionReference: {
            frontend: "wcImpairmentDefinitionReference",
            backend: "wc_impairment_definition_reference",
            database: "ref_wc_impairment_definition",
            pretty: "Wc Impairment Definition Reference",
            component: "WcImpairmentDefinitionReference",
            kebab: "wc-impairment-definitionReference",
            sqlFunctionRef: "p_ref_wc_impairment_definition",
            RestAPI: "wcImpairmentDefinitionReference",
            GraphQL: "wcImpairmentDefinitionReference",
            custom: "wcImpairmentDefinitionReference",
        },
        wcReportReference: {
            frontend: "wcReportReference",
            backend: "wc_report_reference",
            database: "ref_wc_report",
            pretty: "Wc Report Reference",
            component: "WcReportReference",
            kebab: "wc-reportReference",
            sqlFunctionRef: "p_ref_wc_report",
            RestAPI: "wcReportReference",
            GraphQL: "wcReportReference",
            custom: "wcReportReference",
        },
    },
    wcReport: {
        id: {
            frontend: "id",
            backend: "id",
            database: "id",
            pretty: "Id",
            component: "Id",
            kebab: "id",
            sqlFunctionRef: "p_id",
            RestAPI: "id",
            GraphQL: "id",
            custom: "id",
        },
        createdAt: {
            frontend: "createdAt",
            backend: "created_at",
            database: "created_at",
            pretty: "Created At",
            component: "CreatedAt",
            kebab: "created-at",
            sqlFunctionRef: "p_created_at",
            RestAPI: "createdAt",
            GraphQL: "createdAt",
            custom: "createdAt",
        },
        claimId: {
            frontend: "claimId",
            backend: "claim_id",
            database: "claim_id",
            pretty: "Claim Id",
            component: "ClaimId",
            kebab: "claim-id",
            sqlFunctionRef: "p_claim_id",
            RestAPI: "claimId",
            GraphQL: "claimId",
            custom: "claimId",
        },
        finalRating: {
            frontend: "finalRating",
            backend: "final_rating",
            database: "final_rating",
            pretty: "Final Rating",
            component: "FinalRating",
            kebab: "final-rating",
            sqlFunctionRef: "p_final_rating",
            RestAPI: "finalRating",
            GraphQL: "finalRating",
            custom: "finalRating",
        },
        leftSideTotal: {
            frontend: "leftSideTotal",
            backend: "left_side_total",
            database: "left_side_total",
            pretty: "Left Side Total",
            component: "LeftSideTotal",
            kebab: "left-side-total",
            sqlFunctionRef: "p_left_side_total",
            RestAPI: "leftSideTotal",
            GraphQL: "leftSideTotal",
            custom: "leftSideTotal",
        },
        rightSideTotal: {
            frontend: "rightSideTotal",
            backend: "right_side_total",
            database: "right_side_total",
            pretty: "Right Side Total",
            component: "RightSideTotal",
            kebab: "right-side-total",
            sqlFunctionRef: "p_right_side_total",
            RestAPI: "rightSideTotal",
            GraphQL: "rightSideTotal",
            custom: "rightSideTotal",
        },
        defaultSideTotal: {
            frontend: "defaultSideTotal",
            backend: "default_side_total",
            database: "default_side_total",
            pretty: "Default Side Total",
            component: "DefaultSideTotal",
            kebab: "default-side-total",
            sqlFunctionRef: "p_default_side_total",
            RestAPI: "defaultSideTotal",
            GraphQL: "defaultSideTotal",
            custom: "defaultSideTotal",
        },
        compensationAmount: {
            frontend: "compensationAmount",
            backend: "compensation_amount",
            database: "compensation_amount",
            pretty: "Compensation Amount",
            component: "CompensationAmount",
            kebab: "compensation-amount",
            sqlFunctionRef: "p_compensation_amount",
            RestAPI: "compensationAmount",
            GraphQL: "compensationAmount",
            custom: "compensationAmount",
        },
        compensationWeeks: {
            frontend: "compensationWeeks",
            backend: "compensation_weeks",
            database: "compensation_weeks",
            pretty: "Compensation Weeks",
            component: "CompensationWeeks",
            kebab: "compensation-weeks",
            sqlFunctionRef: "p_compensation_weeks",
            RestAPI: "compensationWeeks",
            GraphQL: "compensationWeeks",
            custom: "compensationWeeks",
        },
        compensationDays: {
            frontend: "compensationDays",
            backend: "compensation_days",
            database: "compensation_days",
            pretty: "Compensation Days",
            component: "CompensationDays",
            kebab: "compensation-days",
            sqlFunctionRef: "p_compensation_days",
            RestAPI: "compensationDays",
            GraphQL: "compensationDays",
            custom: "compensationDays",
        },
        wcClaimReference: {
            frontend: "wcClaimReference",
            backend: "wc_claim_reference",
            database: "ref_wc_claim",
            pretty: "Wc Claim Reference",
            component: "WcClaimReference",
            kebab: "wc-claimReference",
            sqlFunctionRef: "p_ref_wc_claim",
            RestAPI: "wcClaimReference",
            GraphQL: "wcClaimReference",
            custom: "wcClaimReference",
        },
        wcInjuryInverse: {
            frontend: "wcInjuryInverse",
            backend: "wc_injury_Inverse",
            database: "ifk_wc_injury",
            pretty: "Wc Injury Inverse",
            component: "WcInjuryInverse",
            kebab: "wc-injuryInverse",
            sqlFunctionRef: "p_ifk_wc_injury",
            RestAPI: "wcInjuryInverse",
            GraphQL: "wcInjuryInverse",
            custom: "wcInjuryInverse",
        },
    },
};

export const viewNameLookup: Record<string, string> = {
    p_view_registered_function: "viewRegisteredFunction",
    "view-registered-function": "viewRegisteredFunction",
    ViewRegisteredFunction: "viewRegisteredFunction",
    viewRegisteredFunction: "viewRegisteredFunction",
    view_registered_function: "viewRegisteredFunction",
    "View Registered Function": "viewRegisteredFunction",
    "view-registered-function-all-rels": "viewRegisteredFunctionAllRels",
    view_registered_function_all_rels: "viewRegisteredFunctionAllRels",
    viewRegisteredFunctionAllRels: "viewRegisteredFunctionAllRels",
    "View Registered Function All Rels": "viewRegisteredFunctionAllRels",
    p_view_registered_function_all_rels: "viewRegisteredFunctionAllRels",
    ViewRegisteredFunctionAllRels: "viewRegisteredFunctionAllRels",
};
