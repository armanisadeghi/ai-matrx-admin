import { EntityNameToCanonicalMap, FieldNameToCanonicalMap, EntityNameFormatMap, FieldNameFormatMap } from '@/types/entityTypes';

export const entityNameToCanonical: EntityNameToCanonicalMap = {
    action: 'action',
    p_action: 'action',
    Action: 'action',
    AiAgent: 'aiAgent',
    'ai-agent': 'aiAgent',
    ai_agent: 'aiAgent',
    'Ai Agent': 'aiAgent',
    aiAgent: 'aiAgent',
    p_ai_agent: 'aiAgent',
    aiEndpoint: 'aiEndpoint',
    p_ai_endpoint: 'aiEndpoint',
    AiEndpoint: 'aiEndpoint',
    'Ai Endpoint': 'aiEndpoint',
    'ai-endpoint': 'aiEndpoint',
    ai_endpoint: 'aiEndpoint',
    'Ai Model': 'aiModel',
    ai_model: 'aiModel',
    AiModel: 'aiModel',
    aiModel: 'aiModel',
    'ai-model': 'aiModel',
    p_ai_model: 'aiModel',
    'ai-model-endpoint': 'aiModelEndpoint',
    'Ai Model Endpoint': 'aiModelEndpoint',
    ai_model_endpoint: 'aiModelEndpoint',
    aiModelEndpoint: 'aiModelEndpoint',
    AiModelEndpoint: 'aiModelEndpoint',
    p_ai_model_endpoint: 'aiModelEndpoint',
    'Ai Provider': 'aiProvider',
    p_ai_provider: 'aiProvider',
    ai_provider: 'aiProvider',
    'ai-provider': 'aiProvider',
    AiProvider: 'aiProvider',
    aiProvider: 'aiProvider',
    AiSettings: 'aiSettings',
    'ai-settings': 'aiSettings',
    'Ai Settings': 'aiSettings',
    ai_settings: 'aiSettings',
    p_ai_settings: 'aiSettings',
    aiSettings: 'aiSettings',
    arg: 'arg',
    Arg: 'arg',
    p_arg: 'arg',
    automation_boundary_broker: 'automationBoundaryBroker',
    'Automation Boundary Broker': 'automationBoundaryBroker',
    'automation-boundary-broker': 'automationBoundaryBroker',
    automationBoundaryBroker: 'automationBoundaryBroker',
    p_automation_boundary_broker: 'automationBoundaryBroker',
    AutomationBoundaryBroker: 'automationBoundaryBroker',
    'automation-matrix': 'automationMatrix',
    'Automation Matrix': 'automationMatrix',
    p_automation_matrix: 'automationMatrix',
    AutomationMatrix: 'automationMatrix',
    automationMatrix: 'automationMatrix',
    automation_matrix: 'automationMatrix',
    p_broker: 'broker',
    Broker: 'broker',
    broker: 'broker',
    p_bucket_structures: 'bucketStructures',
    BucketStructures: 'bucketStructures',
    bucketStructures: 'bucketStructures',
    'Bucket Structures': 'bucketStructures',
    'bucket-structures': 'bucketStructures',
    bucket_structures: 'bucketStructures',
    bucketTreeStructures: 'bucketTreeStructures',
    'bucket-tree-structures': 'bucketTreeStructures',
    p_bucket_tree_structures: 'bucketTreeStructures',
    bucket_tree_structures: 'bucketTreeStructures',
    BucketTreeStructures: 'bucketTreeStructures',
    'Bucket Tree Structures': 'bucketTreeStructures',
    p_data_broker: 'dataBroker',
    DataBroker: 'dataBroker',
    data_broker: 'dataBroker',
    'data-broker': 'dataBroker',
    'Data Broker': 'dataBroker',
    dataBroker: 'dataBroker',
    p_data_input_component: 'dataInputComponent',
    data_input_component: 'dataInputComponent',
    'Data Input Component': 'dataInputComponent',
    DataInputComponent: 'dataInputComponent',
    'data-input-component': 'dataInputComponent',
    dataInputComponent: 'dataInputComponent',
    'data-output-component': 'dataOutputComponent',
    'Data Output Component': 'dataOutputComponent',
    dataOutputComponent: 'dataOutputComponent',
    data_output_component: 'dataOutputComponent',
    p_data_output_component: 'dataOutputComponent',
    DataOutputComponent: 'dataOutputComponent',
    p_display_option: 'displayOption',
    DisplayOption: 'displayOption',
    displayOption: 'displayOption',
    display_option: 'displayOption',
    'display-option': 'displayOption',
    'Display Option': 'displayOption',
    p_emails: 'emails',
    emails: 'emails',
    Emails: 'emails',
    extractor: 'extractor',
    p_extractor: 'extractor',
    Extractor: 'extractor',
    file_structure: 'fileStructure',
    'File Structure': 'fileStructure',
    fileStructure: 'fileStructure',
    'file-structure': 'fileStructure',
    FileStructure: 'fileStructure',
    p_file_structure: 'fileStructure',
    'flashcard-data': 'flashcardData',
    FlashcardData: 'flashcardData',
    flashcardData: 'flashcardData',
    p_flashcard_data: 'flashcardData',
    flashcard_data: 'flashcardData',
    'Flashcard Data': 'flashcardData',
    'flashcard-history': 'flashcardHistory',
    flashcard_history: 'flashcardHistory',
    'Flashcard History': 'flashcardHistory',
    p_flashcard_history: 'flashcardHistory',
    FlashcardHistory: 'flashcardHistory',
    flashcardHistory: 'flashcardHistory',
    'Flashcard Images': 'flashcardImages',
    p_flashcard_images: 'flashcardImages',
    'flashcard-images': 'flashcardImages',
    flashcard_images: 'flashcardImages',
    FlashcardImages: 'flashcardImages',
    flashcardImages: 'flashcardImages',
    FlashcardSetRelations: 'flashcardSetRelations',
    'flashcard-set-relations': 'flashcardSetRelations',
    flashcardSetRelations: 'flashcardSetRelations',
    'Flashcard Set Relations': 'flashcardSetRelations',
    flashcard_set_relations: 'flashcardSetRelations',
    p_flashcard_set_relations: 'flashcardSetRelations',
    flashcardSets: 'flashcardSets',
    p_flashcard_sets: 'flashcardSets',
    FlashcardSets: 'flashcardSets',
    'Flashcard Sets': 'flashcardSets',
    'flashcard-sets': 'flashcardSets',
    flashcard_sets: 'flashcardSets',
    p_message_broker: 'messageBroker',
    'message-broker': 'messageBroker',
    MessageBroker: 'messageBroker',
    messageBroker: 'messageBroker',
    message_broker: 'messageBroker',
    'Message Broker': 'messageBroker',
    'Message Template': 'messageTemplate',
    p_message_template: 'messageTemplate',
    message_template: 'messageTemplate',
    messageTemplate: 'messageTemplate',
    MessageTemplate: 'messageTemplate',
    'message-template': 'messageTemplate',
    Processor: 'processor',
    p_processor: 'processor',
    processor: 'processor',
    Recipe: 'recipe',
    p_recipe: 'recipe',
    recipe: 'recipe',
    recipeBroker: 'recipeBroker',
    'recipe-broker': 'recipeBroker',
    p_recipe_broker: 'recipeBroker',
    recipe_broker: 'recipeBroker',
    RecipeBroker: 'recipeBroker',
    'Recipe Broker': 'recipeBroker',
    'Recipe Display': 'recipeDisplay',
    RecipeDisplay: 'recipeDisplay',
    recipe_display: 'recipeDisplay',
    'recipe-display': 'recipeDisplay',
    p_recipe_display: 'recipeDisplay',
    recipeDisplay: 'recipeDisplay',
    recipeFunction: 'recipeFunction',
    recipe_function: 'recipeFunction',
    p_recipe_function: 'recipeFunction',
    'recipe-function': 'recipeFunction',
    RecipeFunction: 'recipeFunction',
    'Recipe Function': 'recipeFunction',
    p_recipe_message: 'recipeMessage',
    recipeMessage: 'recipeMessage',
    RecipeMessage: 'recipeMessage',
    'Recipe Message': 'recipeMessage',
    'recipe-message': 'recipeMessage',
    recipe_message: 'recipeMessage',
    recipeModel: 'recipeModel',
    RecipeModel: 'recipeModel',
    recipe_model: 'recipeModel',
    p_recipe_model: 'recipeModel',
    'recipe-model': 'recipeModel',
    'Recipe Model': 'recipeModel',
    'recipe-processor': 'recipeProcessor',
    recipeProcessor: 'recipeProcessor',
    p_recipe_processor: 'recipeProcessor',
    'Recipe Processor': 'recipeProcessor',
    RecipeProcessor: 'recipeProcessor',
    recipe_processor: 'recipeProcessor',
    p_recipe_tool: 'recipeTool',
    'Recipe Tool': 'recipeTool',
    recipe_tool: 'recipeTool',
    'recipe-tool': 'recipeTool',
    RecipeTool: 'recipeTool',
    recipeTool: 'recipeTool',
    'Registered Function': 'registeredFunction',
    RegisteredFunction: 'registeredFunction',
    p_registered_function: 'registeredFunction',
    registeredFunction: 'registeredFunction',
    registered_function: 'registeredFunction',
    'registered-function': 'registeredFunction',
    SystemFunction: 'systemFunction',
    p_system_function: 'systemFunction',
    systemFunction: 'systemFunction',
    system_function: 'systemFunction',
    'System Function': 'systemFunction',
    'system-function': 'systemFunction',
    tool: 'tool',
    p_tool: 'tool',
    Tool: 'tool',
    Transformer: 'transformer',
    transformer: 'transformer',
    p_transformer: 'transformer',
    UserPreferences: 'userPreferences',
    p_user_preferences: 'userPreferences',
    userPreferences: 'userPreferences',
    'user-preferences': 'userPreferences',
    user_preferences: 'userPreferences',
    'User Preferences': 'userPreferences',
};

export const fieldNameToCanonical: FieldNameToCanonicalMap = {
    action: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        p_matrix: 'matrix',
        Matrix: 'matrix',
        matrix: 'matrix',
        Transformer: 'transformer',
        transformer: 'transformer',
        p_transformer: 'transformer',
        'Node Type': 'nodeType',
        nodeType: 'nodeType',
        'node-type': 'nodeType',
        NodeType: 'nodeType',
        p_node_type: 'nodeType',
        node_type: 'nodeType',
        'reference-id': 'referenceId',
        'Reference Id': 'referenceId',
        p_reference_id: 'referenceId',
        reference_id: 'referenceId',
        ReferenceId: 'referenceId',
        referenceId: 'referenceId',
    },
    aiAgent: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        RecipeId: 'recipeId',
        recipe_id: 'recipeId',
        p_recipe_id: 'recipeId',
        recipeId: 'recipeId',
        'Recipe Id': 'recipeId',
        'recipe-id': 'recipeId',
        AiSettingsId: 'aiSettingsId',
        aiSettingsId: 'aiSettingsId',
        'ai-settings-id': 'aiSettingsId',
        'Ai Settings Id': 'aiSettingsId',
        p_ai_settings_id: 'aiSettingsId',
        ai_settings_id: 'aiSettingsId',
        systemMessageOverride: 'systemMessageOverride',
        'System Message Override': 'systemMessageOverride',
        SystemMessageOverride: 'systemMessageOverride',
        'system-message-override': 'systemMessageOverride',
        p_system_message_override: 'systemMessageOverride',
        system_message_override: 'systemMessageOverride',
    },
    aiEndpoint: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        p_provider: 'provider',
        provider: 'provider',
        Provider: 'provider',
        Description: 'description',
        description: 'description',
        p_description: 'description',
        additionalCost: 'additionalCost',
        AdditionalCost: 'additionalCost',
        'additional-cost': 'additionalCost',
        'Additional Cost': 'additionalCost',
        p_additional_cost: 'additionalCost',
        additional_cost: 'additionalCost',
        cost_details: 'costDetails',
        p_cost_details: 'costDetails',
        costDetails: 'costDetails',
        'cost-details': 'costDetails',
        'Cost Details': 'costDetails',
        CostDetails: 'costDetails',
        Params: 'params',
        params: 'params',
        p_params: 'params',
    },
    aiModel: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        'Common Name': 'commonName',
        CommonName: 'commonName',
        'common-name': 'commonName',
        p_common_name: 'commonName',
        commonName: 'commonName',
        common_name: 'commonName',
        model_class: 'modelClass',
        'model-class': 'modelClass',
        'Model Class': 'modelClass',
        modelClass: 'modelClass',
        ModelClass: 'modelClass',
        p_model_class: 'modelClass',
        p_provider: 'provider',
        provider: 'provider',
        Provider: 'provider',
        endpoints: 'endpoints',
        p_endpoints: 'endpoints',
        Endpoints: 'endpoints',
        p_context_window: 'contextWindow',
        contextWindow: 'contextWindow',
        'Context Window': 'contextWindow',
        'context-window': 'contextWindow',
        ContextWindow: 'contextWindow',
        context_window: 'contextWindow',
        maxTokens: 'maxTokens',
        'max-tokens': 'maxTokens',
        'Max Tokens': 'maxTokens',
        p_max_tokens: 'maxTokens',
        MaxTokens: 'maxTokens',
        max_tokens: 'maxTokens',
        p_capabilities: 'capabilities',
        Capabilities: 'capabilities',
        capabilities: 'capabilities',
        controls: 'controls',
        Controls: 'controls',
        p_controls: 'controls',
        p_model_provider: 'modelProvider',
        modelProvider: 'modelProvider',
        'Model Provider': 'modelProvider',
        ModelProvider: 'modelProvider',
        model_provider: 'modelProvider',
        'model-provider': 'modelProvider',
    },
    aiModelEndpoint: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        ai_model_id: 'aiModelId',
        p_ai_model_id: 'aiModelId',
        aiModelId: 'aiModelId',
        'ai-model-id': 'aiModelId',
        AiModelId: 'aiModelId',
        'Ai Model Id': 'aiModelId',
        'ai-endpoint-id': 'aiEndpointId',
        p_ai_endpoint_id: 'aiEndpointId',
        aiEndpointId: 'aiEndpointId',
        'Ai Endpoint Id': 'aiEndpointId',
        AiEndpointId: 'aiEndpointId',
        ai_endpoint_id: 'aiEndpointId',
        Available: 'available',
        p_available: 'available',
        available: 'available',
        p_endpoint_priority: 'endpointPriority',
        endpoint_priority: 'endpointPriority',
        endpointPriority: 'endpointPriority',
        EndpointPriority: 'endpointPriority',
        'endpoint-priority': 'endpointPriority',
        'Endpoint Priority': 'endpointPriority',
        configuration: 'configuration',
        Configuration: 'configuration',
        p_configuration: 'configuration',
        Notes: 'notes',
        p_notes: 'notes',
        notes: 'notes',
        created_at: 'createdAt',
        p_created_at: 'createdAt',
        CreatedAt: 'createdAt',
        'Created At': 'createdAt',
        'created-at': 'createdAt',
        createdAt: 'createdAt',
    },
    aiProvider: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        company_description: 'companyDescription',
        'Company Description': 'companyDescription',
        companyDescription: 'companyDescription',
        p_company_description: 'companyDescription',
        'company-description': 'companyDescription',
        CompanyDescription: 'companyDescription',
        documentationLink: 'documentationLink',
        'Documentation Link': 'documentationLink',
        p_documentation_link: 'documentationLink',
        DocumentationLink: 'documentationLink',
        'documentation-link': 'documentationLink',
        documentation_link: 'documentationLink',
        'Models Link': 'modelsLink',
        models_link: 'modelsLink',
        p_models_link: 'modelsLink',
        modelsLink: 'modelsLink',
        ModelsLink: 'modelsLink',
        'models-link': 'modelsLink',
    },
    aiSettings: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        aiEndpoint: 'aiEndpoint',
        AiEndpoint: 'aiEndpoint',
        'Ai Endpoint': 'aiEndpoint',
        'ai-endpoint': 'aiEndpoint',
        ai_endpoint: 'aiEndpoint',
        p_ai_endpoint: 'aiEndpoint',
        aiProvider: 'aiProvider',
        'Ai Provider': 'aiProvider',
        p_ai_provider: 'aiProvider',
        AiProvider: 'aiProvider',
        ai_provider: 'aiProvider',
        'ai-provider': 'aiProvider',
        AiModel: 'aiModel',
        'Ai Model': 'aiModel',
        'ai-model': 'aiModel',
        aiModel: 'aiModel',
        ai_model: 'aiModel',
        p_ai_model: 'aiModel',
        p_temperature: 'temperature',
        Temperature: 'temperature',
        temperature: 'temperature',
        maxTokens: 'maxTokens',
        'max-tokens': 'maxTokens',
        'Max Tokens': 'maxTokens',
        p_max_tokens: 'maxTokens',
        MaxTokens: 'maxTokens',
        max_tokens: 'maxTokens',
        top_p: 'topP',
        'top-p': 'topP',
        TopP: 'topP',
        'Top P': 'topP',
        p_top_p: 'topP',
        topP: 'topP',
        frequencyPenalty: 'frequencyPenalty',
        frequency_penalty: 'frequencyPenalty',
        FrequencyPenalty: 'frequencyPenalty',
        'frequency-penalty': 'frequencyPenalty',
        p_frequency_penalty: 'frequencyPenalty',
        'Frequency Penalty': 'frequencyPenalty',
        'presence-penalty': 'presencePenalty',
        PresencePenalty: 'presencePenalty',
        'Presence Penalty': 'presencePenalty',
        presence_penalty: 'presencePenalty',
        p_presence_penalty: 'presencePenalty',
        presencePenalty: 'presencePenalty',
        stream: 'stream',
        Stream: 'stream',
        p_stream: 'stream',
        p_response_format: 'responseFormat',
        response_format: 'responseFormat',
        'Response Format': 'responseFormat',
        'response-format': 'responseFormat',
        responseFormat: 'responseFormat',
        ResponseFormat: 'responseFormat',
        Size: 'size',
        size: 'size',
        p_size: 'size',
        Quality: 'quality',
        p_quality: 'quality',
        quality: 'quality',
        count: 'count',
        Count: 'count',
        p_count: 'count',
        'Audio Voice': 'audioVoice',
        'audio-voice': 'audioVoice',
        audio_voice: 'audioVoice',
        AudioVoice: 'audioVoice',
        audioVoice: 'audioVoice',
        p_audio_voice: 'audioVoice',
        audio_format: 'audioFormat',
        audioFormat: 'audioFormat',
        AudioFormat: 'audioFormat',
        'audio-format': 'audioFormat',
        'Audio Format': 'audioFormat',
        p_audio_format: 'audioFormat',
        p_modalities: 'modalities',
        Modalities: 'modalities',
        modalities: 'modalities',
        p_tools: 'tools',
        tools: 'tools',
        Tools: 'tools',
        created_at: 'createdAt',
        p_created_at: 'createdAt',
        CreatedAt: 'createdAt',
        'Created At': 'createdAt',
        'created-at': 'createdAt',
        createdAt: 'createdAt',
    },
    arg: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        Required: 'required',
        p_required: 'required',
        required: 'required',
        default: 'default',
        p_default: 'default',
        Default: 'default',
        dataType: 'dataType',
        'Data Type': 'dataType',
        p_data_type: 'dataType',
        data_type: 'dataType',
        DataType: 'dataType',
        'data-type': 'dataType',
        p_ready: 'ready',
        ready: 'ready',
        Ready: 'ready',
        p_registered_function: 'registeredFunction',
        'registered-function': 'registeredFunction',
        'Registered Function': 'registeredFunction',
        RegisteredFunction: 'registeredFunction',
        registeredFunction: 'registeredFunction',
        registered_function: 'registeredFunction',
    },
    automationBoundaryBroker: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_matrix: 'matrix',
        Matrix: 'matrix',
        matrix: 'matrix',
        p_broker: 'broker',
        Broker: 'broker',
        broker: 'broker',
        'spark-source': 'sparkSource',
        SparkSource: 'sparkSource',
        sparkSource: 'sparkSource',
        'Spark Source': 'sparkSource',
        p_spark_source: 'sparkSource',
        spark_source: 'sparkSource',
        BeaconDestination: 'beaconDestination',
        'beacon-destination': 'beaconDestination',
        beacon_destination: 'beaconDestination',
        beaconDestination: 'beaconDestination',
        p_beacon_destination: 'beaconDestination',
        'Beacon Destination': 'beaconDestination',
    },
    automationMatrix: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        Description: 'description',
        description: 'description',
        p_description: 'description',
        p_average_seconds: 'averageSeconds',
        average_seconds: 'averageSeconds',
        averageSeconds: 'averageSeconds',
        'average-seconds': 'averageSeconds',
        'Average Seconds': 'averageSeconds',
        AverageSeconds: 'averageSeconds',
        IsAutomated: 'isAutomated',
        isAutomated: 'isAutomated',
        p_is_automated: 'isAutomated',
        'Is Automated': 'isAutomated',
        'is-automated': 'isAutomated',
        is_automated: 'isAutomated',
        cognitionMatrices: 'cognitionMatrices',
        CognitionMatrices: 'cognitionMatrices',
        cognition_matrices: 'cognitionMatrices',
        'cognition-matrices': 'cognitionMatrices',
        p_cognition_matrices: 'cognitionMatrices',
        'Cognition Matrices': 'cognitionMatrices',
    },
    broker: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        value: 'value',
        Value: 'value',
        p_value: 'value',
        dataType: 'dataType',
        'Data Type': 'dataType',
        p_data_type: 'dataType',
        data_type: 'dataType',
        DataType: 'dataType',
        'data-type': 'dataType',
        p_ready: 'ready',
        ready: 'ready',
        Ready: 'ready',
        DefaultSource: 'defaultSource',
        'Default Source': 'defaultSource',
        'default-source': 'defaultSource',
        default_source: 'defaultSource',
        p_default_source: 'defaultSource',
        defaultSource: 'defaultSource',
        display_name: 'displayName',
        DisplayName: 'displayName',
        p_display_name: 'displayName',
        displayName: 'displayName',
        'Display Name': 'displayName',
        'display-name': 'displayName',
        Description: 'description',
        description: 'description',
        p_description: 'description',
        p_tooltip: 'tooltip',
        Tooltip: 'tooltip',
        tooltip: 'tooltip',
        ValidationRules: 'validationRules',
        p_validation_rules: 'validationRules',
        'Validation Rules': 'validationRules',
        validation_rules: 'validationRules',
        validationRules: 'validationRules',
        'validation-rules': 'validationRules',
        sampleEntries: 'sampleEntries',
        'sample-entries': 'sampleEntries',
        'Sample Entries': 'sampleEntries',
        SampleEntries: 'sampleEntries',
        sample_entries: 'sampleEntries',
        p_sample_entries: 'sampleEntries',
        CustomSourceComponent: 'customSourceComponent',
        custom_source_component: 'customSourceComponent',
        customSourceComponent: 'customSourceComponent',
        'custom-source-component': 'customSourceComponent',
        p_custom_source_component: 'customSourceComponent',
        'Custom Source Component': 'customSourceComponent',
        'Additional Params': 'additionalParams',
        'additional-params': 'additionalParams',
        AdditionalParams: 'additionalParams',
        additional_params: 'additionalParams',
        additionalParams: 'additionalParams',
        p_additional_params: 'additionalParams',
        'Other Source Params': 'otherSourceParams',
        otherSourceParams: 'otherSourceParams',
        p_other_source_params: 'otherSourceParams',
        OtherSourceParams: 'otherSourceParams',
        other_source_params: 'otherSourceParams',
        'other-source-params': 'otherSourceParams',
        'default-destination': 'defaultDestination',
        defaultDestination: 'defaultDestination',
        'Default Destination': 'defaultDestination',
        default_destination: 'defaultDestination',
        p_default_destination: 'defaultDestination',
        DefaultDestination: 'defaultDestination',
        p_output_component: 'outputComponent',
        output_component: 'outputComponent',
        'output-component': 'outputComponent',
        'Output Component': 'outputComponent',
        OutputComponent: 'outputComponent',
        outputComponent: 'outputComponent',
        Tags: 'tags',
        p_tags: 'tags',
        tags: 'tags',
        'String Value': 'stringValue',
        StringValue: 'stringValue',
        string_value: 'stringValue',
        stringValue: 'stringValue',
        'string-value': 'stringValue',
        p_string_value: 'stringValue',
    },
    bucketStructures: {
        bucket_id: 'bucketId',
        'Bucket Id': 'bucketId',
        bucketId: 'bucketId',
        p_bucket_id: 'bucketId',
        BucketId: 'bucketId',
        'bucket-id': 'bucketId',
        structure: 'structure',
        Structure: 'structure',
        p_structure: 'structure',
        p_last_updated: 'lastUpdated',
        'last-updated': 'lastUpdated',
        last_updated: 'lastUpdated',
        lastUpdated: 'lastUpdated',
        LastUpdated: 'lastUpdated',
        'Last Updated': 'lastUpdated',
    },
    bucketTreeStructures: {
        bucket_id: 'bucketId',
        'Bucket Id': 'bucketId',
        bucketId: 'bucketId',
        p_bucket_id: 'bucketId',
        BucketId: 'bucketId',
        'bucket-id': 'bucketId',
        TreeStructure: 'treeStructure',
        'Tree Structure': 'treeStructure',
        p_tree_structure: 'treeStructure',
        'tree-structure': 'treeStructure',
        tree_structure: 'treeStructure',
        treeStructure: 'treeStructure',
        p_last_updated: 'lastUpdated',
        'last-updated': 'lastUpdated',
        last_updated: 'lastUpdated',
        lastUpdated: 'lastUpdated',
        LastUpdated: 'lastUpdated',
        'Last Updated': 'lastUpdated',
    },
    dataBroker: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        dataType: 'dataType',
        'Data Type': 'dataType',
        p_data_type: 'dataType',
        data_type: 'dataType',
        DataType: 'dataType',
        'data-type': 'dataType',
        defaultValue: 'defaultValue',
        'Default Value': 'defaultValue',
        default_value: 'defaultValue',
        p_default_value: 'defaultValue',
        'default-value': 'defaultValue',
        DefaultValue: 'defaultValue',
        'Default Component': 'defaultComponent',
        DefaultComponent: 'defaultComponent',
        'default-component': 'defaultComponent',
        default_component: 'defaultComponent',
        defaultComponent: 'defaultComponent',
        p_default_component: 'defaultComponent',
    },
    dataInputComponent: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        options: 'options',
        p_options: 'options',
        Options: 'options',
        include_other: 'includeOther',
        'include-other': 'includeOther',
        IncludeOther: 'includeOther',
        p_include_other: 'includeOther',
        includeOther: 'includeOther',
        'Include Other': 'includeOther',
        p_min: 'min',
        Min: 'min',
        min: 'min',
        Max: 'max',
        max: 'max',
        p_max: 'max',
        step: 'step',
        Step: 'step',
        p_step: 'step',
        'min-rows': 'minRows',
        p_min_rows: 'minRows',
        minRows: 'minRows',
        'Min Rows': 'minRows',
        MinRows: 'minRows',
        min_rows: 'minRows',
        max_rows: 'maxRows',
        p_max_rows: 'maxRows',
        'max-rows': 'maxRows',
        MaxRows: 'maxRows',
        maxRows: 'maxRows',
        'Max Rows': 'maxRows',
        'Acceptable Filetypes': 'acceptableFiletypes',
        'acceptable-filetypes': 'acceptableFiletypes',
        p_acceptable_filetypes: 'acceptableFiletypes',
        AcceptableFiletypes: 'acceptableFiletypes',
        acceptableFiletypes: 'acceptableFiletypes',
        acceptable_filetypes: 'acceptableFiletypes',
        src: 'src',
        Src: 'src',
        p_src: 'src',
        classes: 'classes',
        Classes: 'classes',
        p_classes: 'classes',
        colorOverrides: 'colorOverrides',
        color_overrides: 'colorOverrides',
        p_color_overrides: 'colorOverrides',
        'Color Overrides': 'colorOverrides',
        ColorOverrides: 'colorOverrides',
        'color-overrides': 'colorOverrides',
        'Additional Params': 'additionalParams',
        'additional-params': 'additionalParams',
        AdditionalParams: 'additionalParams',
        additional_params: 'additionalParams',
        additionalParams: 'additionalParams',
        p_additional_params: 'additionalParams',
        'Sub Component': 'subComponent',
        'sub-component': 'subComponent',
        SubComponent: 'subComponent',
        p_sub_component: 'subComponent',
        sub_component: 'subComponent',
        subComponent: 'subComponent',
        p_component: 'component',
        component: 'component',
        Component: 'component',
        p_name: 'name',
        name: 'name',
        Name: 'name',
    },
    dataOutputComponent: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_component_type: 'componentType',
        component_type: 'componentType',
        'component-type': 'componentType',
        componentType: 'componentType',
        'Component Type': 'componentType',
        ComponentType: 'componentType',
        UiComponent: 'uiComponent',
        'ui-component': 'uiComponent',
        ui_component: 'uiComponent',
        uiComponent: 'uiComponent',
        'Ui Component': 'uiComponent',
        p_ui_component: 'uiComponent',
        Props: 'props',
        props: 'props',
        p_props: 'props',
        'Additional Params': 'additionalParams',
        'additional-params': 'additionalParams',
        AdditionalParams: 'additionalParams',
        additional_params: 'additionalParams',
        additionalParams: 'additionalParams',
        p_additional_params: 'additionalParams',
    },
    displayOption: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        'default-params': 'defaultParams',
        'Default Params': 'defaultParams',
        defaultParams: 'defaultParams',
        default_params: 'defaultParams',
        p_default_params: 'defaultParams',
        DefaultParams: 'defaultParams',
        customizableParams: 'customizableParams',
        CustomizableParams: 'customizableParams',
        'Customizable Params': 'customizableParams',
        customizable_params: 'customizableParams',
        'customizable-params': 'customizableParams',
        p_customizable_params: 'customizableParams',
        'Additional Params': 'additionalParams',
        'additional-params': 'additionalParams',
        AdditionalParams: 'additionalParams',
        additional_params: 'additionalParams',
        additionalParams: 'additionalParams',
        p_additional_params: 'additionalParams',
    },
    emails: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_sender: 'sender',
        sender: 'sender',
        Sender: 'sender',
        recipient: 'recipient',
        p_recipient: 'recipient',
        Recipient: 'recipient',
        Subject: 'subject',
        subject: 'subject',
        p_subject: 'subject',
        p_body: 'body',
        Body: 'body',
        body: 'body',
        p_timestamp: 'timestamp',
        timestamp: 'timestamp',
        Timestamp: 'timestamp',
        IsRead: 'isRead',
        is_read: 'isRead',
        'is-read': 'isRead',
        p_is_read: 'isRead',
        'Is Read': 'isRead',
        isRead: 'isRead',
    },
    extractor: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        outputType: 'outputType',
        p_output_type: 'outputType',
        'Output Type': 'outputType',
        OutputType: 'outputType',
        output_type: 'outputType',
        'output-type': 'outputType',
        default_identifier: 'defaultIdentifier',
        DefaultIdentifier: 'defaultIdentifier',
        'Default Identifier': 'defaultIdentifier',
        defaultIdentifier: 'defaultIdentifier',
        p_default_identifier: 'defaultIdentifier',
        'default-identifier': 'defaultIdentifier',
        default_index: 'defaultIndex',
        DefaultIndex: 'defaultIndex',
        'default-index': 'defaultIndex',
        'Default Index': 'defaultIndex',
        p_default_index: 'defaultIndex',
        defaultIndex: 'defaultIndex',
    },
    fileStructure: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        bucket_id: 'bucketId',
        'Bucket Id': 'bucketId',
        bucketId: 'bucketId',
        p_bucket_id: 'bucketId',
        BucketId: 'bucketId',
        'bucket-id': 'bucketId',
        p_path: 'path',
        path: 'path',
        Path: 'path',
        is_folder: 'isFolder',
        'is-folder': 'isFolder',
        p_is_folder: 'isFolder',
        IsFolder: 'isFolder',
        'Is Folder': 'isFolder',
        isFolder: 'isFolder',
        FileId: 'fileId',
        'file-id': 'fileId',
        p_file_id: 'fileId',
        fileId: 'fileId',
        file_id: 'fileId',
        'File Id': 'fileId',
        ParentPath: 'parentPath',
        parentPath: 'parentPath',
        p_parent_path: 'parentPath',
        parent_path: 'parentPath',
        'Parent Path': 'parentPath',
        'parent-path': 'parentPath',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        Metadata: 'metadata',
        metadata: 'metadata',
        p_metadata: 'metadata',
        created_at: 'createdAt',
        p_created_at: 'createdAt',
        CreatedAt: 'createdAt',
        'Created At': 'createdAt',
        'created-at': 'createdAt',
        createdAt: 'createdAt',
        updated_at: 'updatedAt',
        'Updated At': 'updatedAt',
        UpdatedAt: 'updatedAt',
        'updated-at': 'updatedAt',
        p_updated_at: 'updatedAt',
        updatedAt: 'updatedAt',
    },
    flashcardData: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        user_id: 'userId',
        p_user_id: 'userId',
        'User Id': 'userId',
        userId: 'userId',
        UserId: 'userId',
        'user-id': 'userId',
        Topic: 'topic',
        p_topic: 'topic',
        topic: 'topic',
        Lesson: 'lesson',
        lesson: 'lesson',
        p_lesson: 'lesson',
        difficulty: 'difficulty',
        Difficulty: 'difficulty',
        p_difficulty: 'difficulty',
        p_front: 'front',
        front: 'front',
        Front: 'front',
        back: 'back',
        Back: 'back',
        p_back: 'back',
        p_example: 'example',
        example: 'example',
        Example: 'example',
        'Detailed Explanation': 'detailedExplanation',
        'detailed-explanation': 'detailedExplanation',
        DetailedExplanation: 'detailedExplanation',
        detailedExplanation: 'detailedExplanation',
        p_detailed_explanation: 'detailedExplanation',
        detailed_explanation: 'detailedExplanation',
        audioExplanation: 'audioExplanation',
        p_audio_explanation: 'audioExplanation',
        'audio-explanation': 'audioExplanation',
        AudioExplanation: 'audioExplanation',
        audio_explanation: 'audioExplanation',
        'Audio Explanation': 'audioExplanation',
        PersonalNotes: 'personalNotes',
        p_personal_notes: 'personalNotes',
        'Personal Notes': 'personalNotes',
        personal_notes: 'personalNotes',
        'personal-notes': 'personalNotes',
        personalNotes: 'personalNotes',
        isDeleted: 'isDeleted',
        'is-deleted': 'isDeleted',
        is_deleted: 'isDeleted',
        IsDeleted: 'isDeleted',
        'Is Deleted': 'isDeleted',
        p_is_deleted: 'isDeleted',
        p_public: 'public',
        public: 'public',
        Public: 'public',
        shared_with: 'sharedWith',
        SharedWith: 'sharedWith',
        p_shared_with: 'sharedWith',
        'shared-with': 'sharedWith',
        sharedWith: 'sharedWith',
        'Shared With': 'sharedWith',
        created_at: 'createdAt',
        p_created_at: 'createdAt',
        CreatedAt: 'createdAt',
        'Created At': 'createdAt',
        'created-at': 'createdAt',
        createdAt: 'createdAt',
        updated_at: 'updatedAt',
        'Updated At': 'updatedAt',
        UpdatedAt: 'updatedAt',
        'updated-at': 'updatedAt',
        p_updated_at: 'updatedAt',
        updatedAt: 'updatedAt',
    },
    flashcardHistory: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        'flashcard-id': 'flashcardId',
        flashcardId: 'flashcardId',
        p_flashcard_id: 'flashcardId',
        FlashcardId: 'flashcardId',
        flashcard_id: 'flashcardId',
        'Flashcard Id': 'flashcardId',
        user_id: 'userId',
        p_user_id: 'userId',
        'User Id': 'userId',
        userId: 'userId',
        UserId: 'userId',
        'user-id': 'userId',
        review_count: 'reviewCount',
        reviewCount: 'reviewCount',
        'review-count': 'reviewCount',
        p_review_count: 'reviewCount',
        ReviewCount: 'reviewCount',
        'Review Count': 'reviewCount',
        correctCount: 'correctCount',
        'Correct Count': 'correctCount',
        CorrectCount: 'correctCount',
        p_correct_count: 'correctCount',
        correct_count: 'correctCount',
        'correct-count': 'correctCount',
        incorrectCount: 'incorrectCount',
        'Incorrect Count': 'incorrectCount',
        p_incorrect_count: 'incorrectCount',
        'incorrect-count': 'incorrectCount',
        IncorrectCount: 'incorrectCount',
        incorrect_count: 'incorrectCount',
        created_at: 'createdAt',
        p_created_at: 'createdAt',
        CreatedAt: 'createdAt',
        'Created At': 'createdAt',
        'created-at': 'createdAt',
        createdAt: 'createdAt',
        updated_at: 'updatedAt',
        'Updated At': 'updatedAt',
        UpdatedAt: 'updatedAt',
        'updated-at': 'updatedAt',
        p_updated_at: 'updatedAt',
        updatedAt: 'updatedAt',
    },
    flashcardImages: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        'flashcard-id': 'flashcardId',
        flashcardId: 'flashcardId',
        p_flashcard_id: 'flashcardId',
        FlashcardId: 'flashcardId',
        flashcard_id: 'flashcardId',
        'Flashcard Id': 'flashcardId',
        p_file_path: 'filePath',
        filePath: 'filePath',
        FilePath: 'filePath',
        file_path: 'filePath',
        'File Path': 'filePath',
        'file-path': 'filePath',
        'file-name': 'fileName',
        p_file_name: 'fileName',
        file_name: 'fileName',
        fileName: 'fileName',
        FileName: 'fileName',
        'File Name': 'fileName',
        'Mime Type': 'mimeType',
        MimeType: 'mimeType',
        'mime-type': 'mimeType',
        mime_type: 'mimeType',
        mimeType: 'mimeType',
        p_mime_type: 'mimeType',
        Size: 'size',
        size: 'size',
        p_size: 'size',
        created_at: 'createdAt',
        p_created_at: 'createdAt',
        CreatedAt: 'createdAt',
        'Created At': 'createdAt',
        'created-at': 'createdAt',
        createdAt: 'createdAt',
    },
    flashcardSetRelations: {
        'flashcard-id': 'flashcardId',
        flashcardId: 'flashcardId',
        p_flashcard_id: 'flashcardId',
        FlashcardId: 'flashcardId',
        flashcard_id: 'flashcardId',
        'Flashcard Id': 'flashcardId',
        SetId: 'setId',
        p_set_id: 'setId',
        'Set Id': 'setId',
        'set-id': 'setId',
        setId: 'setId',
        set_id: 'setId',
        p_order: 'order',
        Order: 'order',
        order: 'order',
    },
    flashcardSets: {
        SetId: 'setId',
        p_set_id: 'setId',
        'Set Id': 'setId',
        'set-id': 'setId',
        setId: 'setId',
        set_id: 'setId',
        user_id: 'userId',
        p_user_id: 'userId',
        'User Id': 'userId',
        userId: 'userId',
        UserId: 'userId',
        'user-id': 'userId',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        created_at: 'createdAt',
        p_created_at: 'createdAt',
        CreatedAt: 'createdAt',
        'Created At': 'createdAt',
        'created-at': 'createdAt',
        createdAt: 'createdAt',
        updated_at: 'updatedAt',
        'Updated At': 'updatedAt',
        UpdatedAt: 'updatedAt',
        'updated-at': 'updatedAt',
        p_updated_at: 'updatedAt',
        updatedAt: 'updatedAt',
        shared_with: 'sharedWith',
        SharedWith: 'sharedWith',
        p_shared_with: 'sharedWith',
        'shared-with': 'sharedWith',
        sharedWith: 'sharedWith',
        'Shared With': 'sharedWith',
        p_public: 'public',
        public: 'public',
        Public: 'public',
        Topic: 'topic',
        p_topic: 'topic',
        topic: 'topic',
        Lesson: 'lesson',
        lesson: 'lesson',
        p_lesson: 'lesson',
        difficulty: 'difficulty',
        Difficulty: 'difficulty',
        p_difficulty: 'difficulty',
        'audio-overview': 'audioOverview',
        'Audio Overview': 'audioOverview',
        audio_overview: 'audioOverview',
        p_audio_overview: 'audioOverview',
        AudioOverview: 'audioOverview',
        audioOverview: 'audioOverview',
    },
    messageBroker: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        messageId: 'messageId',
        message_id: 'messageId',
        p_message_id: 'messageId',
        'message-id': 'messageId',
        'Message Id': 'messageId',
        MessageId: 'messageId',
        BrokerId: 'brokerId',
        brokerId: 'brokerId',
        'broker-id': 'brokerId',
        broker_id: 'brokerId',
        'Broker Id': 'brokerId',
        p_broker_id: 'brokerId',
        defaultValue: 'defaultValue',
        'Default Value': 'defaultValue',
        default_value: 'defaultValue',
        p_default_value: 'defaultValue',
        'default-value': 'defaultValue',
        DefaultValue: 'defaultValue',
        'Default Component': 'defaultComponent',
        DefaultComponent: 'defaultComponent',
        'default-component': 'defaultComponent',
        default_component: 'defaultComponent',
        defaultComponent: 'defaultComponent',
        p_default_component: 'defaultComponent',
    },
    messageTemplate: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        Role: 'role',
        p_role: 'role',
        role: 'role',
        type: 'type',
        p_type: 'type',
        Type: 'type',
        created_at: 'createdAt',
        p_created_at: 'createdAt',
        CreatedAt: 'createdAt',
        'Created At': 'createdAt',
        'created-at': 'createdAt',
        createdAt: 'createdAt',
        content: 'content',
        p_content: 'content',
        Content: 'content',
    },
    processor: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        p_depends_default: 'dependsDefault',
        dependsDefault: 'dependsDefault',
        'depends-default': 'dependsDefault',
        DependsDefault: 'dependsDefault',
        depends_default: 'dependsDefault',
        'Depends Default': 'dependsDefault',
        default_extractors: 'defaultExtractors',
        p_default_extractors: 'defaultExtractors',
        'default-extractors': 'defaultExtractors',
        DefaultExtractors: 'defaultExtractors',
        defaultExtractors: 'defaultExtractors',
        'Default Extractors': 'defaultExtractors',
        Params: 'params',
        params: 'params',
        p_params: 'params',
    },
    recipe: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        Description: 'description',
        description: 'description',
        p_description: 'description',
        Tags: 'tags',
        p_tags: 'tags',
        tags: 'tags',
        'sample-output': 'sampleOutput',
        sampleOutput: 'sampleOutput',
        sample_output: 'sampleOutput',
        p_sample_output: 'sampleOutput',
        SampleOutput: 'sampleOutput',
        'Sample Output': 'sampleOutput',
        IsPublic: 'isPublic',
        is_public: 'isPublic',
        p_is_public: 'isPublic',
        'is-public': 'isPublic',
        isPublic: 'isPublic',
        'Is Public': 'isPublic',
        p_status: 'status',
        Status: 'status',
        status: 'status',
        Version: 'version',
        version: 'version',
        p_version: 'version',
        p_messages: 'messages',
        Messages: 'messages',
        messages: 'messages',
        postResultOptions: 'postResultOptions',
        'post-result-options': 'postResultOptions',
        PostResultOptions: 'postResultOptions',
        p_post_result_options: 'postResultOptions',
        'Post Result Options': 'postResultOptions',
        post_result_options: 'postResultOptions',
    },
    recipeBroker: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        Recipe: 'recipe',
        p_recipe: 'recipe',
        recipe: 'recipe',
        p_broker: 'broker',
        Broker: 'broker',
        broker: 'broker',
        BrokerRole: 'brokerRole',
        brokerRole: 'brokerRole',
        'broker-role': 'brokerRole',
        p_broker_role: 'brokerRole',
        'Broker Role': 'brokerRole',
        broker_role: 'brokerRole',
        Required: 'required',
        p_required: 'required',
        required: 'required',
    },
    recipeDisplay: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        Recipe: 'recipe',
        p_recipe: 'recipe',
        recipe: 'recipe',
        Display: 'display',
        p_display: 'display',
        display: 'display',
        Priority: 'priority',
        priority: 'priority',
        p_priority: 'priority',
        displaySettings: 'displaySettings',
        display_settings: 'displaySettings',
        p_display_settings: 'displaySettings',
        'display-settings': 'displaySettings',
        'Display Settings': 'displaySettings',
        DisplaySettings: 'displaySettings',
    },
    recipeFunction: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        Recipe: 'recipe',
        p_recipe: 'recipe',
        recipe: 'recipe',
        p_function: 'function',
        Function: 'function',
        function: 'function',
        Role: 'role',
        p_role: 'role',
        role: 'role',
        Params: 'params',
        params: 'params',
        p_params: 'params',
    },
    recipeMessage: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        messageId: 'messageId',
        message_id: 'messageId',
        p_message_id: 'messageId',
        'message-id': 'messageId',
        'Message Id': 'messageId',
        MessageId: 'messageId',
        RecipeId: 'recipeId',
        recipe_id: 'recipeId',
        p_recipe_id: 'recipeId',
        recipeId: 'recipeId',
        'Recipe Id': 'recipeId',
        'recipe-id': 'recipeId',
        p_order: 'order',
        Order: 'order',
        order: 'order',
    },
    recipeModel: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        Recipe: 'recipe',
        p_recipe: 'recipe',
        recipe: 'recipe',
        AiModel: 'aiModel',
        'Ai Model': 'aiModel',
        'ai-model': 'aiModel',
        aiModel: 'aiModel',
        ai_model: 'aiModel',
        p_ai_model: 'aiModel',
        Role: 'role',
        p_role: 'role',
        role: 'role',
        Priority: 'priority',
        priority: 'priority',
        p_priority: 'priority',
    },
    recipeProcessor: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        Recipe: 'recipe',
        p_recipe: 'recipe',
        recipe: 'recipe',
        Processor: 'processor',
        p_processor: 'processor',
        processor: 'processor',
        Params: 'params',
        params: 'params',
        p_params: 'params',
    },
    recipeTool: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        Recipe: 'recipe',
        p_recipe: 'recipe',
        recipe: 'recipe',
        tool: 'tool',
        p_tool: 'tool',
        Tool: 'tool',
        Params: 'params',
        params: 'params',
        p_params: 'params',
    },
    registeredFunction: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        'module-path': 'modulePath',
        'Module Path': 'modulePath',
        p_module_path: 'modulePath',
        modulePath: 'modulePath',
        module_path: 'modulePath',
        ModulePath: 'modulePath',
        'class-name': 'className',
        p_class_name: 'className',
        className: 'className',
        'Class Name': 'className',
        ClassName: 'className',
        class_name: 'className',
        Description: 'description',
        description: 'description',
        p_description: 'description',
        ReturnBroker: 'returnBroker',
        returnBroker: 'returnBroker',
        'return-broker': 'returnBroker',
        'Return Broker': 'returnBroker',
        p_return_broker: 'returnBroker',
        return_broker: 'returnBroker',
    },
    systemFunction: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        Description: 'description',
        description: 'description',
        p_description: 'description',
        Sample: 'sample',
        sample: 'sample',
        p_sample: 'sample',
        p_input_params: 'inputParams',
        input_params: 'inputParams',
        'input-params': 'inputParams',
        'Input Params': 'inputParams',
        inputParams: 'inputParams',
        InputParams: 'inputParams',
        p_output_options: 'outputOptions',
        OutputOptions: 'outputOptions',
        'output-options': 'outputOptions',
        'Output Options': 'outputOptions',
        output_options: 'outputOptions',
        outputOptions: 'outputOptions',
        p_rf_id: 'rfId',
        'rf-id': 'rfId',
        rfId: 'rfId',
        'Rf Id': 'rfId',
        rf_id: 'rfId',
        RfId: 'rfId',
    },
    tool: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        Source: 'source',
        source: 'source',
        p_source: 'source',
        Description: 'description',
        description: 'description',
        p_description: 'description',
        parameters: 'parameters',
        p_parameters: 'parameters',
        Parameters: 'parameters',
        requiredArgs: 'requiredArgs',
        'required-args': 'requiredArgs',
        'Required Args': 'requiredArgs',
        p_required_args: 'requiredArgs',
        required_args: 'requiredArgs',
        RequiredArgs: 'requiredArgs',
        SystemFunction: 'systemFunction',
        p_system_function: 'systemFunction',
        systemFunction: 'systemFunction',
        'System Function': 'systemFunction',
        system_function: 'systemFunction',
        'system-function': 'systemFunction',
        'Additional Params': 'additionalParams',
        'additional-params': 'additionalParams',
        AdditionalParams: 'additionalParams',
        additional_params: 'additionalParams',
        additionalParams: 'additionalParams',
        p_additional_params: 'additionalParams',
    },
    transformer: {
        p_id: 'id',
        Id: 'id',
        id: 'id',
        p_name: 'name',
        name: 'name',
        Name: 'name',
        p_input_params: 'inputParams',
        input_params: 'inputParams',
        'input-params': 'inputParams',
        'Input Params': 'inputParams',
        inputParams: 'inputParams',
        InputParams: 'inputParams',
        output_params: 'outputParams',
        p_output_params: 'outputParams',
        'output-params': 'outputParams',
        outputParams: 'outputParams',
        OutputParams: 'outputParams',
        'Output Params': 'outputParams',
    },
    userPreferences: {
        user_id: 'userId',
        p_user_id: 'userId',
        'User Id': 'userId',
        userId: 'userId',
        UserId: 'userId',
        'user-id': 'userId',
        Preferences: 'preferences',
        p_preferences: 'preferences',
        preferences: 'preferences',
        created_at: 'createdAt',
        p_created_at: 'createdAt',
        CreatedAt: 'createdAt',
        'Created At': 'createdAt',
        'created-at': 'createdAt',
        createdAt: 'createdAt',
        updated_at: 'updatedAt',
        'Updated At': 'updatedAt',
        UpdatedAt: 'updatedAt',
        'updated-at': 'updatedAt',
        p_updated_at: 'updatedAt',
        updatedAt: 'updatedAt',
    },
};

export const entityNameFormats: EntityNameFormatMap = {
    action: {
        frontend: 'action',
        backend: 'action',
        database: 'action',
        pretty: 'Action',
        component: 'Action',
        kebab: 'action',
        sqlFunctionRef: 'p_action',
        RestAPI: 'action',
        GraphQL: 'action',
        custom: 'action',
    },
    aiAgent: {
        frontend: 'aiAgent',
        backend: 'ai_agent',
        database: 'ai_agent',
        pretty: 'Ai Agent',
        component: 'AiAgent',
        kebab: 'ai-agent',
        sqlFunctionRef: 'p_ai_agent',
        RestAPI: 'aiAgent',
        GraphQL: 'aiAgent',
        custom: 'aiAgent',
    },
    aiEndpoint: {
        frontend: 'aiEndpoint',
        backend: 'ai_endpoint',
        database: 'ai_endpoint',
        pretty: 'Ai Endpoint',
        component: 'AiEndpoint',
        kebab: 'ai-endpoint',
        sqlFunctionRef: 'p_ai_endpoint',
        RestAPI: 'aiEndpoint',
        GraphQL: 'aiEndpoint',
        custom: 'aiEndpoint',
    },
    aiModel: {
        frontend: 'aiModel',
        backend: 'ai_model',
        database: 'ai_model',
        pretty: 'Ai Model',
        component: 'AiModel',
        kebab: 'ai-model',
        sqlFunctionRef: 'p_ai_model',
        RestAPI: 'aiModel',
        GraphQL: 'aiModel',
        custom: 'aiModel',
    },
    aiModelEndpoint: {
        frontend: 'aiModelEndpoint',
        backend: 'ai_model_endpoint',
        database: 'ai_model_endpoint',
        pretty: 'Ai Model Endpoint',
        component: 'AiModelEndpoint',
        kebab: 'ai-model-endpoint',
        sqlFunctionRef: 'p_ai_model_endpoint',
        RestAPI: 'aiModelEndpoint',
        GraphQL: 'aiModelEndpoint',
        custom: 'aiModelEndpoint',
    },
    aiProvider: {
        frontend: 'aiProvider',
        backend: 'ai_provider',
        database: 'ai_provider',
        pretty: 'Ai Provider',
        component: 'AiProvider',
        kebab: 'ai-provider',
        sqlFunctionRef: 'p_ai_provider',
        RestAPI: 'aiProvider',
        GraphQL: 'aiProvider',
        custom: 'aiProvider',
    },
    aiSettings: {
        frontend: 'aiSettings',
        backend: 'ai_settings',
        database: 'ai_settings',
        pretty: 'Ai Settings',
        component: 'AiSettings',
        kebab: 'ai-settings',
        sqlFunctionRef: 'p_ai_settings',
        RestAPI: 'aiSettings',
        GraphQL: 'aiSettings',
        custom: 'aiSettings',
    },
    arg: {
        frontend: 'arg',
        backend: 'arg',
        database: 'arg',
        pretty: 'Arg',
        component: 'Arg',
        kebab: 'arg',
        sqlFunctionRef: 'p_arg',
        RestAPI: 'arg',
        GraphQL: 'arg',
        custom: 'arg',
    },
    automationBoundaryBroker: {
        frontend: 'automationBoundaryBroker',
        backend: 'automation_boundary_broker',
        database: 'automation_boundary_broker',
        pretty: 'Automation Boundary Broker',
        component: 'AutomationBoundaryBroker',
        kebab: 'automation-boundary-broker',
        sqlFunctionRef: 'p_automation_boundary_broker',
        RestAPI: 'automationBoundaryBroker',
        GraphQL: 'automationBoundaryBroker',
        custom: 'automationBoundaryBroker',
    },
    automationMatrix: {
        frontend: 'automationMatrix',
        backend: 'automation_matrix',
        database: 'automation_matrix',
        pretty: 'Automation Matrix',
        component: 'AutomationMatrix',
        kebab: 'automation-matrix',
        sqlFunctionRef: 'p_automation_matrix',
        RestAPI: 'automationMatrix',
        GraphQL: 'automationMatrix',
        custom: 'automationMatrix',
    },
    broker: {
        frontend: 'broker',
        backend: 'broker',
        database: 'broker',
        pretty: 'Broker',
        component: 'Broker',
        kebab: 'broker',
        sqlFunctionRef: 'p_broker',
        RestAPI: 'broker',
        GraphQL: 'broker',
        custom: 'broker',
    },
    bucketStructures: {
        frontend: 'bucketStructures',
        backend: 'bucket_structures',
        database: 'bucket_structures',
        pretty: 'Bucket Structures',
        component: 'BucketStructures',
        kebab: 'bucket-structures',
        sqlFunctionRef: 'p_bucket_structures',
        RestAPI: 'bucketStructures',
        GraphQL: 'bucketStructures',
        custom: 'bucketStructures',
    },
    bucketTreeStructures: {
        frontend: 'bucketTreeStructures',
        backend: 'bucket_tree_structures',
        database: 'bucket_tree_structures',
        pretty: 'Bucket Tree Structures',
        component: 'BucketTreeStructures',
        kebab: 'bucket-tree-structures',
        sqlFunctionRef: 'p_bucket_tree_structures',
        RestAPI: 'bucketTreeStructures',
        GraphQL: 'bucketTreeStructures',
        custom: 'bucketTreeStructures',
    },
    dataBroker: {
        frontend: 'dataBroker',
        backend: 'data_broker',
        database: 'data_broker',
        pretty: 'Data Broker',
        component: 'DataBroker',
        kebab: 'data-broker',
        sqlFunctionRef: 'p_data_broker',
        RestAPI: 'dataBroker',
        GraphQL: 'dataBroker',
        custom: 'dataBroker',
    },
    dataInputComponent: {
        frontend: 'dataInputComponent',
        backend: 'data_input_component',
        database: 'data_input_component',
        pretty: 'Data Input Component',
        component: 'DataInputComponent',
        kebab: 'data-input-component',
        sqlFunctionRef: 'p_data_input_component',
        RestAPI: 'dataInputComponent',
        GraphQL: 'dataInputComponent',
        custom: 'dataInputComponent',
    },
    dataOutputComponent: {
        frontend: 'dataOutputComponent',
        backend: 'data_output_component',
        database: 'data_output_component',
        pretty: 'Data Output Component',
        component: 'DataOutputComponent',
        kebab: 'data-output-component',
        sqlFunctionRef: 'p_data_output_component',
        RestAPI: 'dataOutputComponent',
        GraphQL: 'dataOutputComponent',
        custom: 'dataOutputComponent',
    },
    displayOption: {
        frontend: 'displayOption',
        backend: 'display_option',
        database: 'display_option',
        pretty: 'Display Option',
        component: 'DisplayOption',
        kebab: 'display-option',
        sqlFunctionRef: 'p_display_option',
        RestAPI: 'displayOption',
        GraphQL: 'displayOption',
        custom: 'displayOption',
    },
    emails: {
        frontend: 'emails',
        backend: 'emails',
        database: 'emails',
        pretty: 'Emails',
        component: 'Emails',
        kebab: 'emails',
        sqlFunctionRef: 'p_emails',
        RestAPI: 'emails',
        GraphQL: 'emails',
        custom: 'emails',
    },
    extractor: {
        frontend: 'extractor',
        backend: 'extractor',
        database: 'extractor',
        pretty: 'Extractor',
        component: 'Extractor',
        kebab: 'extractor',
        sqlFunctionRef: 'p_extractor',
        RestAPI: 'extractor',
        GraphQL: 'extractor',
        custom: 'extractor',
    },
    fileStructure: {
        frontend: 'fileStructure',
        backend: 'file_structure',
        database: 'file_structure',
        pretty: 'File Structure',
        component: 'FileStructure',
        kebab: 'file-structure',
        sqlFunctionRef: 'p_file_structure',
        RestAPI: 'fileStructure',
        GraphQL: 'fileStructure',
        custom: 'fileStructure',
    },
    flashcardData: {
        frontend: 'flashcardData',
        backend: 'flashcard_data',
        database: 'flashcard_data',
        pretty: 'Flashcard Data',
        component: 'FlashcardData',
        kebab: 'flashcard-data',
        sqlFunctionRef: 'p_flashcard_data',
        RestAPI: 'flashcardData',
        GraphQL: 'flashcardData',
        custom: 'flashcardData',
    },
    flashcardHistory: {
        frontend: 'flashcardHistory',
        backend: 'flashcard_history',
        database: 'flashcard_history',
        pretty: 'Flashcard History',
        component: 'FlashcardHistory',
        kebab: 'flashcard-history',
        sqlFunctionRef: 'p_flashcard_history',
        RestAPI: 'flashcardHistory',
        GraphQL: 'flashcardHistory',
        custom: 'flashcardHistory',
    },
    flashcardImages: {
        frontend: 'flashcardImages',
        backend: 'flashcard_images',
        database: 'flashcard_images',
        pretty: 'Flashcard Images',
        component: 'FlashcardImages',
        kebab: 'flashcard-images',
        sqlFunctionRef: 'p_flashcard_images',
        RestAPI: 'flashcardImages',
        GraphQL: 'flashcardImages',
        custom: 'flashcardImages',
    },
    flashcardSetRelations: {
        frontend: 'flashcardSetRelations',
        backend: 'flashcard_set_relations',
        database: 'flashcard_set_relations',
        pretty: 'Flashcard Set Relations',
        component: 'FlashcardSetRelations',
        kebab: 'flashcard-set-relations',
        sqlFunctionRef: 'p_flashcard_set_relations',
        RestAPI: 'flashcardSetRelations',
        GraphQL: 'flashcardSetRelations',
        custom: 'flashcardSetRelations',
    },
    flashcardSets: {
        frontend: 'flashcardSets',
        backend: 'flashcard_sets',
        database: 'flashcard_sets',
        pretty: 'Flashcard Sets',
        component: 'FlashcardSets',
        kebab: 'flashcard-sets',
        sqlFunctionRef: 'p_flashcard_sets',
        RestAPI: 'flashcardSets',
        GraphQL: 'flashcardSets',
        custom: 'flashcardSets',
    },
    messageBroker: {
        frontend: 'messageBroker',
        backend: 'message_broker',
        database: 'message_broker',
        pretty: 'Message Broker',
        component: 'MessageBroker',
        kebab: 'message-broker',
        sqlFunctionRef: 'p_message_broker',
        RestAPI: 'messageBroker',
        GraphQL: 'messageBroker',
        custom: 'messageBroker',
    },
    messageTemplate: {
        frontend: 'messageTemplate',
        backend: 'message_template',
        database: 'message_template',
        pretty: 'Message Template',
        component: 'MessageTemplate',
        kebab: 'message-template',
        sqlFunctionRef: 'p_message_template',
        RestAPI: 'messageTemplate',
        GraphQL: 'messageTemplate',
        custom: 'messageTemplate',
    },
    processor: {
        frontend: 'processor',
        backend: 'processor',
        database: 'processor',
        pretty: 'Processor',
        component: 'Processor',
        kebab: 'processor',
        sqlFunctionRef: 'p_processor',
        RestAPI: 'processor',
        GraphQL: 'processor',
        custom: 'processor',
    },
    recipe: {
        frontend: 'recipe',
        backend: 'recipe',
        database: 'recipe',
        pretty: 'Recipe',
        component: 'Recipe',
        kebab: 'recipe',
        sqlFunctionRef: 'p_recipe',
        RestAPI: 'recipe',
        GraphQL: 'recipe',
        custom: 'recipe',
    },
    recipeBroker: {
        frontend: 'recipeBroker',
        backend: 'recipe_broker',
        database: 'recipe_broker',
        pretty: 'Recipe Broker',
        component: 'RecipeBroker',
        kebab: 'recipe-broker',
        sqlFunctionRef: 'p_recipe_broker',
        RestAPI: 'recipeBroker',
        GraphQL: 'recipeBroker',
        custom: 'recipeBroker',
    },
    recipeDisplay: {
        frontend: 'recipeDisplay',
        backend: 'recipe_display',
        database: 'recipe_display',
        pretty: 'Recipe Display',
        component: 'RecipeDisplay',
        kebab: 'recipe-display',
        sqlFunctionRef: 'p_recipe_display',
        RestAPI: 'recipeDisplay',
        GraphQL: 'recipeDisplay',
        custom: 'recipeDisplay',
    },
    recipeFunction: {
        frontend: 'recipeFunction',
        backend: 'recipe_function',
        database: 'recipe_function',
        pretty: 'Recipe Function',
        component: 'RecipeFunction',
        kebab: 'recipe-function',
        sqlFunctionRef: 'p_recipe_function',
        RestAPI: 'recipeFunction',
        GraphQL: 'recipeFunction',
        custom: 'recipeFunction',
    },
    recipeMessage: {
        frontend: 'recipeMessage',
        backend: 'recipe_message',
        database: 'recipe_message',
        pretty: 'Recipe Message',
        component: 'RecipeMessage',
        kebab: 'recipe-message',
        sqlFunctionRef: 'p_recipe_message',
        RestAPI: 'recipeMessage',
        GraphQL: 'recipeMessage',
        custom: 'recipeMessage',
    },
    recipeModel: {
        frontend: 'recipeModel',
        backend: 'recipe_model',
        database: 'recipe_model',
        pretty: 'Recipe Model',
        component: 'RecipeModel',
        kebab: 'recipe-model',
        sqlFunctionRef: 'p_recipe_model',
        RestAPI: 'recipeModel',
        GraphQL: 'recipeModel',
        custom: 'recipeModel',
    },
    recipeProcessor: {
        frontend: 'recipeProcessor',
        backend: 'recipe_processor',
        database: 'recipe_processor',
        pretty: 'Recipe Processor',
        component: 'RecipeProcessor',
        kebab: 'recipe-processor',
        sqlFunctionRef: 'p_recipe_processor',
        RestAPI: 'recipeProcessor',
        GraphQL: 'recipeProcessor',
        custom: 'recipeProcessor',
    },
    recipeTool: {
        frontend: 'recipeTool',
        backend: 'recipe_tool',
        database: 'recipe_tool',
        pretty: 'Recipe Tool',
        component: 'RecipeTool',
        kebab: 'recipe-tool',
        sqlFunctionRef: 'p_recipe_tool',
        RestAPI: 'recipeTool',
        GraphQL: 'recipeTool',
        custom: 'recipeTool',
    },
    registeredFunction: {
        frontend: 'registeredFunction',
        backend: 'registered_function',
        database: 'registered_function',
        pretty: 'Registered Function',
        component: 'RegisteredFunction',
        kebab: 'registered-function',
        sqlFunctionRef: 'p_registered_function',
        RestAPI: 'registeredFunction',
        GraphQL: 'registeredFunction',
        custom: 'registeredFunction',
    },
    systemFunction: {
        frontend: 'systemFunction',
        backend: 'system_function',
        database: 'system_function',
        pretty: 'System Function',
        component: 'SystemFunction',
        kebab: 'system-function',
        sqlFunctionRef: 'p_system_function',
        RestAPI: 'systemFunction',
        GraphQL: 'systemFunction',
        custom: 'systemFunction',
    },
    tool: {
        frontend: 'tool',
        backend: 'tool',
        database: 'tool',
        pretty: 'Tool',
        component: 'Tool',
        kebab: 'tool',
        sqlFunctionRef: 'p_tool',
        RestAPI: 'tool',
        GraphQL: 'tool',
        custom: 'tool',
    },
    transformer: {
        frontend: 'transformer',
        backend: 'transformer',
        database: 'transformer',
        pretty: 'Transformer',
        component: 'Transformer',
        kebab: 'transformer',
        sqlFunctionRef: 'p_transformer',
        RestAPI: 'transformer',
        GraphQL: 'transformer',
        custom: 'transformer',
    },
    userPreferences: {
        frontend: 'userPreferences',
        backend: 'user_preferences',
        database: 'user_preferences',
        pretty: 'User Preferences',
        component: 'UserPreferences',
        kebab: 'user-preferences',
        sqlFunctionRef: 'p_user_preferences',
        RestAPI: 'userPreferences',
        GraphQL: 'userPreferences',
        custom: 'userPreferences',
    },
};

export const fieldNameFormats: FieldNameFormatMap = {
    action: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        matrix: {
            frontend: 'matrix',
            backend: 'matrix',
            database: 'matrix',
            pretty: 'Matrix',
            component: 'Matrix',
            kebab: 'matrix',
            sqlFunctionRef: 'p_matrix',
            RestAPI: 'matrix',
            GraphQL: 'matrix',
            custom: 'matrix',
        },
        transformer: {
            frontend: 'transformer',
            backend: 'transformer',
            database: 'transformer',
            pretty: 'Transformer',
            component: 'Transformer',
            kebab: 'transformer',
            sqlFunctionRef: 'p_transformer',
            RestAPI: 'transformer',
            GraphQL: 'transformer',
            custom: 'transformer',
        },
        nodeType: {
            frontend: 'nodeType',
            backend: 'node_type',
            database: 'node_type',
            pretty: 'Node Type',
            component: 'NodeType',
            kebab: 'node-type',
            sqlFunctionRef: 'p_node_type',
            RestAPI: 'nodeType',
            GraphQL: 'nodeType',
            custom: 'nodeType',
        },
        referenceId: {
            frontend: 'referenceId',
            backend: 'reference_id',
            database: 'reference_id',
            pretty: 'Reference Id',
            component: 'ReferenceId',
            kebab: 'reference-id',
            sqlFunctionRef: 'p_reference_id',
            RestAPI: 'referenceId',
            GraphQL: 'referenceId',
            custom: 'referenceId',
        },
        automationMatrixReference: {
            frontend: 'automationMatrixReference',
            backend: 'automation_matrix_reference',
            database: 'ref_automation_matrix',
            pretty: 'Automation Matrix Reference',
            component: 'AutomationMatrixReference',
            kebab: 'automation-matrixReference',
            sqlFunctionRef: 'p_ref_automation_matrix',
            RestAPI: 'automationMatrixReference',
            GraphQL: 'automationMatrixReference',
            custom: 'automationMatrixReference',
        },
        transformerReference: {
            frontend: 'transformerReference',
            backend: 'transformer_reference',
            database: 'ref_transformer',
            pretty: 'Transformer Reference',
            component: 'TransformerReference',
            kebab: 'transformerReference',
            sqlFunctionRef: 'p_ref_transformer',
            RestAPI: 'transformerReference',
            GraphQL: 'transformerReference',
            custom: 'transformerReference',
        },
    },
    aiAgent: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        recipeId: {
            frontend: 'recipeId',
            backend: 'recipe_id',
            database: 'recipe_id',
            pretty: 'Recipe Id',
            component: 'RecipeId',
            kebab: 'recipe-id',
            sqlFunctionRef: 'p_recipe_id',
            RestAPI: 'recipeId',
            GraphQL: 'recipeId',
            custom: 'recipeId',
        },
        aiSettingsId: {
            frontend: 'aiSettingsId',
            backend: 'ai_settings_id',
            database: 'ai_settings_id',
            pretty: 'Ai Settings Id',
            component: 'AiSettingsId',
            kebab: 'ai-settings-id',
            sqlFunctionRef: 'p_ai_settings_id',
            RestAPI: 'aiSettingsId',
            GraphQL: 'aiSettingsId',
            custom: 'aiSettingsId',
        },
        systemMessageOverride: {
            frontend: 'systemMessageOverride',
            backend: 'system_message_override',
            database: 'system_message_override',
            pretty: 'System Message Override',
            component: 'SystemMessageOverride',
            kebab: 'system-message-override',
            sqlFunctionRef: 'p_system_message_override',
            RestAPI: 'systemMessageOverride',
            GraphQL: 'systemMessageOverride',
            custom: 'systemMessageOverride',
        },
    },
    aiEndpoint: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        provider: {
            frontend: 'provider',
            backend: 'provider',
            database: 'provider',
            pretty: 'Provider',
            component: 'Provider',
            kebab: 'provider',
            sqlFunctionRef: 'p_provider',
            RestAPI: 'provider',
            GraphQL: 'provider',
            custom: 'provider',
        },
        description: {
            frontend: 'description',
            backend: 'description',
            database: 'description',
            pretty: 'Description',
            component: 'Description',
            kebab: 'description',
            sqlFunctionRef: 'p_description',
            RestAPI: 'description',
            GraphQL: 'description',
            custom: 'description',
        },
        additionalCost: {
            frontend: 'additionalCost',
            backend: 'additional_cost',
            database: 'additional_cost',
            pretty: 'Additional Cost',
            component: 'AdditionalCost',
            kebab: 'additional-cost',
            sqlFunctionRef: 'p_additional_cost',
            RestAPI: 'additionalCost',
            GraphQL: 'additionalCost',
            custom: 'additionalCost',
        },
        costDetails: {
            frontend: 'costDetails',
            backend: 'cost_details',
            database: 'cost_details',
            pretty: 'Cost Details',
            component: 'CostDetails',
            kebab: 'cost-details',
            sqlFunctionRef: 'p_cost_details',
            RestAPI: 'costDetails',
            GraphQL: 'costDetails',
            custom: 'costDetails',
        },
        params: {
            frontend: 'params',
            backend: 'params',
            database: 'params',
            pretty: 'Params',
            component: 'Params',
            kebab: 'params',
            sqlFunctionRef: 'p_params',
            RestAPI: 'params',
            GraphQL: 'params',
            custom: 'params',
        },
        aiModelEndpointInverse: {
            frontend: 'aiModelEndpointInverse',
            backend: 'ai_model_endpoint_Inverse',
            database: 'ifk_ai_model_endpoint',
            pretty: 'Ai Model Endpoint Inverse',
            component: 'AiModelEndpointInverse',
            kebab: 'ai-model-endpointInverse',
            sqlFunctionRef: 'p_ifk_ai_model_endpoint',
            RestAPI: 'aiModelEndpointInverse',
            GraphQL: 'aiModelEndpointInverse',
            custom: 'aiModelEndpointInverse',
        },
        aiSettingsInverse: {
            frontend: 'aiSettingsInverse',
            backend: 'ai_settings_Inverse',
            database: 'ifk_ai_settings',
            pretty: 'Ai Settings Inverse',
            component: 'AiSettingsInverse',
            kebab: 'ai-settingsInverse',
            sqlFunctionRef: 'p_ifk_ai_settings',
            RestAPI: 'aiSettingsInverse',
            GraphQL: 'aiSettingsInverse',
            custom: 'aiSettingsInverse',
        },
    },
    aiModel: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        commonName: {
            frontend: 'commonName',
            backend: 'common_name',
            database: 'common_name',
            pretty: 'Common Name',
            component: 'CommonName',
            kebab: 'common-name',
            sqlFunctionRef: 'p_common_name',
            RestAPI: 'commonName',
            GraphQL: 'commonName',
            custom: 'commonName',
        },
        modelClass: {
            frontend: 'modelClass',
            backend: 'model_class',
            database: 'model_class',
            pretty: 'Model Class',
            component: 'ModelClass',
            kebab: 'model-class',
            sqlFunctionRef: 'p_model_class',
            RestAPI: 'modelClass',
            GraphQL: 'modelClass',
            custom: 'modelClass',
        },
        provider: {
            frontend: 'provider',
            backend: 'provider',
            database: 'provider',
            pretty: 'Provider',
            component: 'Provider',
            kebab: 'provider',
            sqlFunctionRef: 'p_provider',
            RestAPI: 'provider',
            GraphQL: 'provider',
            custom: 'provider',
        },
        endpoints: {
            frontend: 'endpoints',
            backend: 'endpoints',
            database: 'endpoints',
            pretty: 'Endpoints',
            component: 'Endpoints',
            kebab: 'endpoints',
            sqlFunctionRef: 'p_endpoints',
            RestAPI: 'endpoints',
            GraphQL: 'endpoints',
            custom: 'endpoints',
        },
        contextWindow: {
            frontend: 'contextWindow',
            backend: 'context_window',
            database: 'context_window',
            pretty: 'Context Window',
            component: 'ContextWindow',
            kebab: 'context-window',
            sqlFunctionRef: 'p_context_window',
            RestAPI: 'contextWindow',
            GraphQL: 'contextWindow',
            custom: 'contextWindow',
        },
        maxTokens: {
            frontend: 'maxTokens',
            backend: 'max_tokens',
            database: 'max_tokens',
            pretty: 'Max Tokens',
            component: 'MaxTokens',
            kebab: 'max-tokens',
            sqlFunctionRef: 'p_max_tokens',
            RestAPI: 'maxTokens',
            GraphQL: 'maxTokens',
            custom: 'maxTokens',
        },
        capabilities: {
            frontend: 'capabilities',
            backend: 'capabilities',
            database: 'capabilities',
            pretty: 'Capabilities',
            component: 'Capabilities',
            kebab: 'capabilities',
            sqlFunctionRef: 'p_capabilities',
            RestAPI: 'capabilities',
            GraphQL: 'capabilities',
            custom: 'capabilities',
        },
        controls: {
            frontend: 'controls',
            backend: 'controls',
            database: 'controls',
            pretty: 'Controls',
            component: 'Controls',
            kebab: 'controls',
            sqlFunctionRef: 'p_controls',
            RestAPI: 'controls',
            GraphQL: 'controls',
            custom: 'controls',
        },
        modelProvider: {
            frontend: 'modelProvider',
            backend: 'model_provider',
            database: 'model_provider',
            pretty: 'Model Provider',
            component: 'ModelProvider',
            kebab: 'model-provider',
            sqlFunctionRef: 'p_model_provider',
            RestAPI: 'modelProvider',
            GraphQL: 'modelProvider',
            custom: 'modelProvider',
        },
        aiProviderReference: {
            frontend: 'aiProviderReference',
            backend: 'ai_provider_reference',
            database: 'ref_ai_provider',
            pretty: 'Ai Provider Reference',
            component: 'AiProviderReference',
            kebab: 'ai-providerReference',
            sqlFunctionRef: 'p_ref_ai_provider',
            RestAPI: 'aiProviderReference',
            GraphQL: 'aiProviderReference',
            custom: 'aiProviderReference',
        },
        aiModelEndpointInverse: {
            frontend: 'aiModelEndpointInverse',
            backend: 'ai_model_endpoint_Inverse',
            database: 'ifk_ai_model_endpoint',
            pretty: 'Ai Model Endpoint Inverse',
            component: 'AiModelEndpointInverse',
            kebab: 'ai-model-endpointInverse',
            sqlFunctionRef: 'p_ifk_ai_model_endpoint',
            RestAPI: 'aiModelEndpointInverse',
            GraphQL: 'aiModelEndpointInverse',
            custom: 'aiModelEndpointInverse',
        },
        aiSettingsInverse: {
            frontend: 'aiSettingsInverse',
            backend: 'ai_settings_Inverse',
            database: 'ifk_ai_settings',
            pretty: 'Ai Settings Inverse',
            component: 'AiSettingsInverse',
            kebab: 'ai-settingsInverse',
            sqlFunctionRef: 'p_ifk_ai_settings',
            RestAPI: 'aiSettingsInverse',
            GraphQL: 'aiSettingsInverse',
            custom: 'aiSettingsInverse',
        },
        recipeModelInverse: {
            frontend: 'recipeModelInverse',
            backend: 'recipe_model_Inverse',
            database: 'ifk_recipe_model',
            pretty: 'Recipe Model Inverse',
            component: 'RecipeModelInverse',
            kebab: 'recipe-modelInverse',
            sqlFunctionRef: 'p_ifk_recipe_model',
            RestAPI: 'recipeModelInverse',
            GraphQL: 'recipeModelInverse',
            custom: 'recipeModelInverse',
        },
    },
    aiModelEndpoint: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        aiModelId: {
            frontend: 'aiModelId',
            backend: 'ai_model_id',
            database: 'ai_model_id',
            pretty: 'Ai Model Id',
            component: 'AiModelId',
            kebab: 'ai-model-id',
            sqlFunctionRef: 'p_ai_model_id',
            RestAPI: 'aiModelId',
            GraphQL: 'aiModelId',
            custom: 'aiModelId',
        },
        aiEndpointId: {
            frontend: 'aiEndpointId',
            backend: 'ai_endpoint_id',
            database: 'ai_endpoint_id',
            pretty: 'Ai Endpoint Id',
            component: 'AiEndpointId',
            kebab: 'ai-endpoint-id',
            sqlFunctionRef: 'p_ai_endpoint_id',
            RestAPI: 'aiEndpointId',
            GraphQL: 'aiEndpointId',
            custom: 'aiEndpointId',
        },
        available: {
            frontend: 'available',
            backend: 'available',
            database: 'available',
            pretty: 'Available',
            component: 'Available',
            kebab: 'available',
            sqlFunctionRef: 'p_available',
            RestAPI: 'available',
            GraphQL: 'available',
            custom: 'available',
        },
        endpointPriority: {
            frontend: 'endpointPriority',
            backend: 'endpoint_priority',
            database: 'endpoint_priority',
            pretty: 'Endpoint Priority',
            component: 'EndpointPriority',
            kebab: 'endpoint-priority',
            sqlFunctionRef: 'p_endpoint_priority',
            RestAPI: 'endpointPriority',
            GraphQL: 'endpointPriority',
            custom: 'endpointPriority',
        },
        configuration: {
            frontend: 'configuration',
            backend: 'configuration',
            database: 'configuration',
            pretty: 'Configuration',
            component: 'Configuration',
            kebab: 'configuration',
            sqlFunctionRef: 'p_configuration',
            RestAPI: 'configuration',
            GraphQL: 'configuration',
            custom: 'configuration',
        },
        notes: {
            frontend: 'notes',
            backend: 'notes',
            database: 'notes',
            pretty: 'Notes',
            component: 'Notes',
            kebab: 'notes',
            sqlFunctionRef: 'p_notes',
            RestAPI: 'notes',
            GraphQL: 'notes',
            custom: 'notes',
        },
        createdAt: {
            frontend: 'createdAt',
            backend: 'created_at',
            database: 'created_at',
            pretty: 'Created At',
            component: 'CreatedAt',
            kebab: 'created-at',
            sqlFunctionRef: 'p_created_at',
            RestAPI: 'createdAt',
            GraphQL: 'createdAt',
            custom: 'createdAt',
        },
        aiEndpointReference: {
            frontend: 'aiEndpointReference',
            backend: 'ai_endpoint_reference',
            database: 'ref_ai_endpoint',
            pretty: 'Ai Endpoint Reference',
            component: 'AiEndpointReference',
            kebab: 'ai-endpointReference',
            sqlFunctionRef: 'p_ref_ai_endpoint',
            RestAPI: 'aiEndpointReference',
            GraphQL: 'aiEndpointReference',
            custom: 'aiEndpointReference',
        },
        aiModelReference: {
            frontend: 'aiModelReference',
            backend: 'ai_model_reference',
            database: 'ref_ai_model',
            pretty: 'Ai Model Reference',
            component: 'AiModelReference',
            kebab: 'ai-modelReference',
            sqlFunctionRef: 'p_ref_ai_model',
            RestAPI: 'aiModelReference',
            GraphQL: 'aiModelReference',
            custom: 'aiModelReference',
        },
    },
    aiProvider: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        companyDescription: {
            frontend: 'companyDescription',
            backend: 'company_description',
            database: 'company_description',
            pretty: 'Company Description',
            component: 'CompanyDescription',
            kebab: 'company-description',
            sqlFunctionRef: 'p_company_description',
            RestAPI: 'companyDescription',
            GraphQL: 'companyDescription',
            custom: 'companyDescription',
        },
        documentationLink: {
            frontend: 'documentationLink',
            backend: 'documentation_link',
            database: 'documentation_link',
            pretty: 'Documentation Link',
            component: 'DocumentationLink',
            kebab: 'documentation-link',
            sqlFunctionRef: 'p_documentation_link',
            RestAPI: 'documentationLink',
            GraphQL: 'documentationLink',
            custom: 'documentationLink',
        },
        modelsLink: {
            frontend: 'modelsLink',
            backend: 'models_link',
            database: 'models_link',
            pretty: 'Models Link',
            component: 'ModelsLink',
            kebab: 'models-link',
            sqlFunctionRef: 'p_models_link',
            RestAPI: 'modelsLink',
            GraphQL: 'modelsLink',
            custom: 'modelsLink',
        },
        aiSettingsInverse: {
            frontend: 'aiSettingsInverse',
            backend: 'ai_settings_Inverse',
            database: 'ifk_ai_settings',
            pretty: 'Ai Settings Inverse',
            component: 'AiSettingsInverse',
            kebab: 'ai-settingsInverse',
            sqlFunctionRef: 'p_ifk_ai_settings',
            RestAPI: 'aiSettingsInverse',
            GraphQL: 'aiSettingsInverse',
            custom: 'aiSettingsInverse',
        },
        aiModelInverse: {
            frontend: 'aiModelInverse',
            backend: 'ai_model_Inverse',
            database: 'ifk_ai_model',
            pretty: 'Ai Model Inverse',
            component: 'AiModelInverse',
            kebab: 'ai-modelInverse',
            sqlFunctionRef: 'p_ifk_ai_model',
            RestAPI: 'aiModelInverse',
            GraphQL: 'aiModelInverse',
            custom: 'aiModelInverse',
        },
    },
    aiSettings: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        aiEndpoint: {
            frontend: 'aiEndpoint',
            backend: 'ai_endpoint',
            database: 'ai_endpoint',
            pretty: 'Ai Endpoint',
            component: 'AiEndpoint',
            kebab: 'ai-endpoint',
            sqlFunctionRef: 'p_ai_endpoint',
            RestAPI: 'aiEndpoint',
            GraphQL: 'aiEndpoint',
            custom: 'aiEndpoint',
        },
        aiProvider: {
            frontend: 'aiProvider',
            backend: 'ai_provider',
            database: 'ai_provider',
            pretty: 'Ai Provider',
            component: 'AiProvider',
            kebab: 'ai-provider',
            sqlFunctionRef: 'p_ai_provider',
            RestAPI: 'aiProvider',
            GraphQL: 'aiProvider',
            custom: 'aiProvider',
        },
        aiModel: {
            frontend: 'aiModel',
            backend: 'ai_model',
            database: 'ai_model',
            pretty: 'Ai Model',
            component: 'AiModel',
            kebab: 'ai-model',
            sqlFunctionRef: 'p_ai_model',
            RestAPI: 'aiModel',
            GraphQL: 'aiModel',
            custom: 'aiModel',
        },
        temperature: {
            frontend: 'temperature',
            backend: 'temperature',
            database: 'temperature',
            pretty: 'Temperature',
            component: 'Temperature',
            kebab: 'temperature',
            sqlFunctionRef: 'p_temperature',
            RestAPI: 'temperature',
            GraphQL: 'temperature',
            custom: 'temperature',
        },
        maxTokens: {
            frontend: 'maxTokens',
            backend: 'max_tokens',
            database: 'max_tokens',
            pretty: 'Max Tokens',
            component: 'MaxTokens',
            kebab: 'max-tokens',
            sqlFunctionRef: 'p_max_tokens',
            RestAPI: 'maxTokens',
            GraphQL: 'maxTokens',
            custom: 'maxTokens',
        },
        topP: {
            frontend: 'topP',
            backend: 'top_p',
            database: 'top_p',
            pretty: 'Top P',
            component: 'TopP',
            kebab: 'top-p',
            sqlFunctionRef: 'p_top_p',
            RestAPI: 'topP',
            GraphQL: 'topP',
            custom: 'topP',
        },
        frequencyPenalty: {
            frontend: 'frequencyPenalty',
            backend: 'frequency_penalty',
            database: 'frequency_penalty',
            pretty: 'Frequency Penalty',
            component: 'FrequencyPenalty',
            kebab: 'frequency-penalty',
            sqlFunctionRef: 'p_frequency_penalty',
            RestAPI: 'frequencyPenalty',
            GraphQL: 'frequencyPenalty',
            custom: 'frequencyPenalty',
        },
        presencePenalty: {
            frontend: 'presencePenalty',
            backend: 'presence_penalty',
            database: 'presence_penalty',
            pretty: 'Presence Penalty',
            component: 'PresencePenalty',
            kebab: 'presence-penalty',
            sqlFunctionRef: 'p_presence_penalty',
            RestAPI: 'presencePenalty',
            GraphQL: 'presencePenalty',
            custom: 'presencePenalty',
        },
        stream: {
            frontend: 'stream',
            backend: 'stream',
            database: 'stream',
            pretty: 'Stream',
            component: 'Stream',
            kebab: 'stream',
            sqlFunctionRef: 'p_stream',
            RestAPI: 'stream',
            GraphQL: 'stream',
            custom: 'stream',
        },
        responseFormat: {
            frontend: 'responseFormat',
            backend: 'response_format',
            database: 'response_format',
            pretty: 'Response Format',
            component: 'ResponseFormat',
            kebab: 'response-format',
            sqlFunctionRef: 'p_response_format',
            RestAPI: 'responseFormat',
            GraphQL: 'responseFormat',
            custom: 'responseFormat',
        },
        size: {
            frontend: 'size',
            backend: 'size',
            database: 'size',
            pretty: 'Size',
            component: 'Size',
            kebab: 'size',
            sqlFunctionRef: 'p_size',
            RestAPI: 'size',
            GraphQL: 'size',
            custom: 'size',
        },
        quality: {
            frontend: 'quality',
            backend: 'quality',
            database: 'quality',
            pretty: 'Quality',
            component: 'Quality',
            kebab: 'quality',
            sqlFunctionRef: 'p_quality',
            RestAPI: 'quality',
            GraphQL: 'quality',
            custom: 'quality',
        },
        count: {
            frontend: 'count',
            backend: 'count',
            database: 'count',
            pretty: 'Count',
            component: 'Count',
            kebab: 'count',
            sqlFunctionRef: 'p_count',
            RestAPI: 'count',
            GraphQL: 'count',
            custom: 'count',
        },
        audioVoice: {
            frontend: 'audioVoice',
            backend: 'audio_voice',
            database: 'audio_voice',
            pretty: 'Audio Voice',
            component: 'AudioVoice',
            kebab: 'audio-voice',
            sqlFunctionRef: 'p_audio_voice',
            RestAPI: 'audioVoice',
            GraphQL: 'audioVoice',
            custom: 'audioVoice',
        },
        audioFormat: {
            frontend: 'audioFormat',
            backend: 'audio_format',
            database: 'audio_format',
            pretty: 'Audio Format',
            component: 'AudioFormat',
            kebab: 'audio-format',
            sqlFunctionRef: 'p_audio_format',
            RestAPI: 'audioFormat',
            GraphQL: 'audioFormat',
            custom: 'audioFormat',
        },
        modalities: {
            frontend: 'modalities',
            backend: 'modalities',
            database: 'modalities',
            pretty: 'Modalities',
            component: 'Modalities',
            kebab: 'modalities',
            sqlFunctionRef: 'p_modalities',
            RestAPI: 'modalities',
            GraphQL: 'modalities',
            custom: 'modalities',
        },
        tools: {
            frontend: 'tools',
            backend: 'tools',
            database: 'tools',
            pretty: 'Tools',
            component: 'Tools',
            kebab: 'tools',
            sqlFunctionRef: 'p_tools',
            RestAPI: 'tools',
            GraphQL: 'tools',
            custom: 'tools',
        },
        createdAt: {
            frontend: 'createdAt',
            backend: 'created_at',
            database: 'created_at',
            pretty: 'Created At',
            component: 'CreatedAt',
            kebab: 'created-at',
            sqlFunctionRef: 'p_created_at',
            RestAPI: 'createdAt',
            GraphQL: 'createdAt',
            custom: 'createdAt',
        },
        aiEndpointReference: {
            frontend: 'aiEndpointReference',
            backend: 'ai_endpoint_reference',
            database: 'ref_ai_endpoint',
            pretty: 'Ai Endpoint Reference',
            component: 'AiEndpointReference',
            kebab: 'ai-endpointReference',
            sqlFunctionRef: 'p_ref_ai_endpoint',
            RestAPI: 'aiEndpointReference',
            GraphQL: 'aiEndpointReference',
            custom: 'aiEndpointReference',
        },
        aiModelReference: {
            frontend: 'aiModelReference',
            backend: 'ai_model_reference',
            database: 'ref_ai_model',
            pretty: 'Ai Model Reference',
            component: 'AiModelReference',
            kebab: 'ai-modelReference',
            sqlFunctionRef: 'p_ref_ai_model',
            RestAPI: 'aiModelReference',
            GraphQL: 'aiModelReference',
            custom: 'aiModelReference',
        },
        aiProviderReference: {
            frontend: 'aiProviderReference',
            backend: 'ai_provider_reference',
            database: 'ref_ai_provider',
            pretty: 'Ai Provider Reference',
            component: 'AiProviderReference',
            kebab: 'ai-providerReference',
            sqlFunctionRef: 'p_ref_ai_provider',
            RestAPI: 'aiProviderReference',
            GraphQL: 'aiProviderReference',
            custom: 'aiProviderReference',
        },
    },
    arg: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        required: {
            frontend: 'required',
            backend: 'required',
            database: 'required',
            pretty: 'Required',
            component: 'Required',
            kebab: 'required',
            sqlFunctionRef: 'p_required',
            RestAPI: 'required',
            GraphQL: 'required',
            custom: 'required',
        },
        default: {
            frontend: 'default',
            backend: 'default',
            database: 'default',
            pretty: 'Default',
            component: 'Default',
            kebab: 'default',
            sqlFunctionRef: 'p_default',
            RestAPI: 'default',
            GraphQL: 'default',
            custom: 'default',
        },
        dataType: {
            frontend: 'dataType',
            backend: 'data_type',
            database: 'data_type',
            pretty: 'Data Type',
            component: 'DataType',
            kebab: 'data-type',
            sqlFunctionRef: 'p_data_type',
            RestAPI: 'dataType',
            GraphQL: 'dataType',
            custom: 'dataType',
        },
        ready: {
            frontend: 'ready',
            backend: 'ready',
            database: 'ready',
            pretty: 'Ready',
            component: 'Ready',
            kebab: 'ready',
            sqlFunctionRef: 'p_ready',
            RestAPI: 'ready',
            GraphQL: 'ready',
            custom: 'ready',
        },
        registeredFunction: {
            frontend: 'registeredFunction',
            backend: 'registered_function',
            database: 'registered_function',
            pretty: 'Registered Function',
            component: 'RegisteredFunction',
            kebab: 'registered-function',
            sqlFunctionRef: 'p_registered_function',
            RestAPI: 'registeredFunction',
            GraphQL: 'registeredFunction',
            custom: 'registeredFunction',
        },
        registeredFunctionReference: {
            frontend: 'registeredFunctionReference',
            backend: 'registered_function_reference',
            database: 'ref_registered_function',
            pretty: 'Registered Function Reference',
            component: 'RegisteredFunctionReference',
            kebab: 'registered-functionReference',
            sqlFunctionRef: 'p_ref_registered_function',
            RestAPI: 'registeredFunctionReference',
            GraphQL: 'registeredFunctionReference',
            custom: 'registeredFunctionReference',
        },
    },
    automationBoundaryBroker: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        matrix: {
            frontend: 'matrix',
            backend: 'matrix',
            database: 'matrix',
            pretty: 'Matrix',
            component: 'Matrix',
            kebab: 'matrix',
            sqlFunctionRef: 'p_matrix',
            RestAPI: 'matrix',
            GraphQL: 'matrix',
            custom: 'matrix',
        },
        broker: {
            frontend: 'broker',
            backend: 'broker',
            database: 'broker',
            pretty: 'Broker',
            component: 'Broker',
            kebab: 'broker',
            sqlFunctionRef: 'p_broker',
            RestAPI: 'broker',
            GraphQL: 'broker',
            custom: 'broker',
        },
        sparkSource: {
            frontend: 'sparkSource',
            backend: 'spark_source',
            database: 'spark_source',
            pretty: 'Spark Source',
            component: 'SparkSource',
            kebab: 'spark-source',
            sqlFunctionRef: 'p_spark_source',
            RestAPI: 'sparkSource',
            GraphQL: 'sparkSource',
            custom: 'sparkSource',
        },
        beaconDestination: {
            frontend: 'beaconDestination',
            backend: 'beacon_destination',
            database: 'beacon_destination',
            pretty: 'Beacon Destination',
            component: 'BeaconDestination',
            kebab: 'beacon-destination',
            sqlFunctionRef: 'p_beacon_destination',
            RestAPI: 'beaconDestination',
            GraphQL: 'beaconDestination',
            custom: 'beaconDestination',
        },
        brokerReference: {
            frontend: 'brokerReference',
            backend: 'broker_reference',
            database: 'ref_broker',
            pretty: 'Broker Reference',
            component: 'BrokerReference',
            kebab: 'brokerReference',
            sqlFunctionRef: 'p_ref_broker',
            RestAPI: 'brokerReference',
            GraphQL: 'brokerReference',
            custom: 'brokerReference',
        },
        automationMatrixReference: {
            frontend: 'automationMatrixReference',
            backend: 'automation_matrix_reference',
            database: 'ref_automation_matrix',
            pretty: 'Automation Matrix Reference',
            component: 'AutomationMatrixReference',
            kebab: 'automation-matrixReference',
            sqlFunctionRef: 'p_ref_automation_matrix',
            RestAPI: 'automationMatrixReference',
            GraphQL: 'automationMatrixReference',
            custom: 'automationMatrixReference',
        },
    },
    automationMatrix: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        description: {
            frontend: 'description',
            backend: 'description',
            database: 'description',
            pretty: 'Description',
            component: 'Description',
            kebab: 'description',
            sqlFunctionRef: 'p_description',
            RestAPI: 'description',
            GraphQL: 'description',
            custom: 'description',
        },
        averageSeconds: {
            frontend: 'averageSeconds',
            backend: 'average_seconds',
            database: 'average_seconds',
            pretty: 'Average Seconds',
            component: 'AverageSeconds',
            kebab: 'average-seconds',
            sqlFunctionRef: 'p_average_seconds',
            RestAPI: 'averageSeconds',
            GraphQL: 'averageSeconds',
            custom: 'averageSeconds',
        },
        isAutomated: {
            frontend: 'isAutomated',
            backend: 'is_automated',
            database: 'is_automated',
            pretty: 'Is Automated',
            component: 'IsAutomated',
            kebab: 'is-automated',
            sqlFunctionRef: 'p_is_automated',
            RestAPI: 'isAutomated',
            GraphQL: 'isAutomated',
            custom: 'isAutomated',
        },
        cognitionMatrices: {
            frontend: 'cognitionMatrices',
            backend: 'cognition_matrices',
            database: 'cognition_matrices',
            pretty: 'Cognition Matrices',
            component: 'CognitionMatrices',
            kebab: 'cognition-matrices',
            sqlFunctionRef: 'p_cognition_matrices',
            RestAPI: 'cognitionMatrices',
            GraphQL: 'cognitionMatrices',
            custom: 'cognitionMatrices',
        },
        actionInverse: {
            frontend: 'actionInverse',
            backend: 'action_Inverse',
            database: 'ifk_action',
            pretty: 'Action Inverse',
            component: 'ActionInverse',
            kebab: 'actionInverse',
            sqlFunctionRef: 'p_ifk_action',
            RestAPI: 'actionInverse',
            GraphQL: 'actionInverse',
            custom: 'actionInverse',
        },
        automationBoundaryBrokerInverse: {
            frontend: 'automationBoundaryBrokerInverse',
            backend: 'automation_boundary_broker_Inverse',
            database: 'ifk_automation_boundary_broker',
            pretty: 'Automation Boundary Broker Inverse',
            component: 'AutomationBoundaryBrokerInverse',
            kebab: 'automation-boundary-brokerInverse',
            sqlFunctionRef: 'p_ifk_automation_boundary_broker',
            RestAPI: 'automationBoundaryBrokerInverse',
            GraphQL: 'automationBoundaryBrokerInverse',
            custom: 'automationBoundaryBrokerInverse',
        },
    },
    broker: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        value: {
            frontend: 'value',
            backend: 'value',
            database: 'value',
            pretty: 'Value',
            component: 'Value',
            kebab: 'value',
            sqlFunctionRef: 'p_value',
            RestAPI: 'value',
            GraphQL: 'value',
            custom: 'value',
        },
        dataType: {
            frontend: 'dataType',
            backend: 'data_type',
            database: 'data_type',
            pretty: 'Data Type',
            component: 'DataType',
            kebab: 'data-type',
            sqlFunctionRef: 'p_data_type',
            RestAPI: 'dataType',
            GraphQL: 'dataType',
            custom: 'dataType',
        },
        ready: {
            frontend: 'ready',
            backend: 'ready',
            database: 'ready',
            pretty: 'Ready',
            component: 'Ready',
            kebab: 'ready',
            sqlFunctionRef: 'p_ready',
            RestAPI: 'ready',
            GraphQL: 'ready',
            custom: 'ready',
        },
        defaultSource: {
            frontend: 'defaultSource',
            backend: 'default_source',
            database: 'default_source',
            pretty: 'Default Source',
            component: 'DefaultSource',
            kebab: 'default-source',
            sqlFunctionRef: 'p_default_source',
            RestAPI: 'defaultSource',
            GraphQL: 'defaultSource',
            custom: 'defaultSource',
        },
        displayName: {
            frontend: 'displayName',
            backend: 'display_name',
            database: 'display_name',
            pretty: 'Display Name',
            component: 'DisplayName',
            kebab: 'display-name',
            sqlFunctionRef: 'p_display_name',
            RestAPI: 'displayName',
            GraphQL: 'displayName',
            custom: 'displayName',
        },
        description: {
            frontend: 'description',
            backend: 'description',
            database: 'description',
            pretty: 'Description',
            component: 'Description',
            kebab: 'description',
            sqlFunctionRef: 'p_description',
            RestAPI: 'description',
            GraphQL: 'description',
            custom: 'description',
        },
        tooltip: {
            frontend: 'tooltip',
            backend: 'tooltip',
            database: 'tooltip',
            pretty: 'Tooltip',
            component: 'Tooltip',
            kebab: 'tooltip',
            sqlFunctionRef: 'p_tooltip',
            RestAPI: 'tooltip',
            GraphQL: 'tooltip',
            custom: 'tooltip',
        },
        validationRules: {
            frontend: 'validationRules',
            backend: 'validation_rules',
            database: 'validation_rules',
            pretty: 'Validation Rules',
            component: 'ValidationRules',
            kebab: 'validation-rules',
            sqlFunctionRef: 'p_validation_rules',
            RestAPI: 'validationRules',
            GraphQL: 'validationRules',
            custom: 'validationRules',
        },
        sampleEntries: {
            frontend: 'sampleEntries',
            backend: 'sample_entries',
            database: 'sample_entries',
            pretty: 'Sample Entries',
            component: 'SampleEntries',
            kebab: 'sample-entries',
            sqlFunctionRef: 'p_sample_entries',
            RestAPI: 'sampleEntries',
            GraphQL: 'sampleEntries',
            custom: 'sampleEntries',
        },
        customSourceComponent: {
            frontend: 'customSourceComponent',
            backend: 'custom_source_component',
            database: 'custom_source_component',
            pretty: 'Custom Source Component',
            component: 'CustomSourceComponent',
            kebab: 'custom-source-component',
            sqlFunctionRef: 'p_custom_source_component',
            RestAPI: 'customSourceComponent',
            GraphQL: 'customSourceComponent',
            custom: 'customSourceComponent',
        },
        additionalParams: {
            frontend: 'additionalParams',
            backend: 'additional_params',
            database: 'additional_params',
            pretty: 'Additional Params',
            component: 'AdditionalParams',
            kebab: 'additional-params',
            sqlFunctionRef: 'p_additional_params',
            RestAPI: 'additionalParams',
            GraphQL: 'additionalParams',
            custom: 'additionalParams',
        },
        otherSourceParams: {
            frontend: 'otherSourceParams',
            backend: 'other_source_params',
            database: 'other_source_params',
            pretty: 'Other Source Params',
            component: 'OtherSourceParams',
            kebab: 'other-source-params',
            sqlFunctionRef: 'p_other_source_params',
            RestAPI: 'otherSourceParams',
            GraphQL: 'otherSourceParams',
            custom: 'otherSourceParams',
        },
        defaultDestination: {
            frontend: 'defaultDestination',
            backend: 'default_destination',
            database: 'default_destination',
            pretty: 'Default Destination',
            component: 'DefaultDestination',
            kebab: 'default-destination',
            sqlFunctionRef: 'p_default_destination',
            RestAPI: 'defaultDestination',
            GraphQL: 'defaultDestination',
            custom: 'defaultDestination',
        },
        outputComponent: {
            frontend: 'outputComponent',
            backend: 'output_component',
            database: 'output_component',
            pretty: 'Output Component',
            component: 'OutputComponent',
            kebab: 'output-component',
            sqlFunctionRef: 'p_output_component',
            RestAPI: 'outputComponent',
            GraphQL: 'outputComponent',
            custom: 'outputComponent',
        },
        tags: {
            frontend: 'tags',
            backend: 'tags',
            database: 'tags',
            pretty: 'Tags',
            component: 'Tags',
            kebab: 'tags',
            sqlFunctionRef: 'p_tags',
            RestAPI: 'tags',
            GraphQL: 'tags',
            custom: 'tags',
        },
        stringValue: {
            frontend: 'stringValue',
            backend: 'string_value',
            database: 'string_value',
            pretty: 'String Value',
            component: 'StringValue',
            kebab: 'string-value',
            sqlFunctionRef: 'p_string_value',
            RestAPI: 'stringValue',
            GraphQL: 'stringValue',
            custom: 'stringValue',
        },
        dataInputComponentReference: {
            frontend: 'dataInputComponentReference',
            backend: 'data_input_component_reference',
            database: 'ref_data_input_component',
            pretty: 'Data Input Component Reference',
            component: 'DataInputComponentReference',
            kebab: 'data-input-componentReference',
            sqlFunctionRef: 'p_ref_data_input_component',
            RestAPI: 'dataInputComponentReference',
            GraphQL: 'dataInputComponentReference',
            custom: 'dataInputComponentReference',
        },
        recipeBrokerInverse: {
            frontend: 'recipeBrokerInverse',
            backend: 'recipe_broker_Inverse',
            database: 'ifk_recipe_broker',
            pretty: 'Recipe Broker Inverse',
            component: 'RecipeBrokerInverse',
            kebab: 'recipe-brokerInverse',
            sqlFunctionRef: 'p_ifk_recipe_broker',
            RestAPI: 'recipeBrokerInverse',
            GraphQL: 'recipeBrokerInverse',
            custom: 'recipeBrokerInverse',
        },
        registeredFunctionInverse: {
            frontend: 'registeredFunctionInverse',
            backend: 'registered_function_Inverse',
            database: 'ifk_registered_function',
            pretty: 'Registered Function Inverse',
            component: 'RegisteredFunctionInverse',
            kebab: 'registered-functionInverse',
            sqlFunctionRef: 'p_ifk_registered_function',
            RestAPI: 'registeredFunctionInverse',
            GraphQL: 'registeredFunctionInverse',
            custom: 'registeredFunctionInverse',
        },
        automationBoundaryBrokerInverse: {
            frontend: 'automationBoundaryBrokerInverse',
            backend: 'automation_boundary_broker_Inverse',
            database: 'ifk_automation_boundary_broker',
            pretty: 'Automation Boundary Broker Inverse',
            component: 'AutomationBoundaryBrokerInverse',
            kebab: 'automation-boundary-brokerInverse',
            sqlFunctionRef: 'p_ifk_automation_boundary_broker',
            RestAPI: 'automationBoundaryBrokerInverse',
            GraphQL: 'automationBoundaryBrokerInverse',
            custom: 'automationBoundaryBrokerInverse',
        },
    },
    bucketStructures: {
        bucketId: {
            frontend: 'bucketId',
            backend: 'bucket_id',
            database: 'bucket_id',
            pretty: 'Bucket Id',
            component: 'BucketId',
            kebab: 'bucket-id',
            sqlFunctionRef: 'p_bucket_id',
            RestAPI: 'bucketId',
            GraphQL: 'bucketId',
            custom: 'bucketId',
        },
        structure: {
            frontend: 'structure',
            backend: 'structure',
            database: 'structure',
            pretty: 'Structure',
            component: 'Structure',
            kebab: 'structure',
            sqlFunctionRef: 'p_structure',
            RestAPI: 'structure',
            GraphQL: 'structure',
            custom: 'structure',
        },
        lastUpdated: {
            frontend: 'lastUpdated',
            backend: 'last_updated',
            database: 'last_updated',
            pretty: 'Last Updated',
            component: 'LastUpdated',
            kebab: 'last-updated',
            sqlFunctionRef: 'p_last_updated',
            RestAPI: 'lastUpdated',
            GraphQL: 'lastUpdated',
            custom: 'lastUpdated',
        },
    },
    bucketTreeStructures: {
        bucketId: {
            frontend: 'bucketId',
            backend: 'bucket_id',
            database: 'bucket_id',
            pretty: 'Bucket Id',
            component: 'BucketId',
            kebab: 'bucket-id',
            sqlFunctionRef: 'p_bucket_id',
            RestAPI: 'bucketId',
            GraphQL: 'bucketId',
            custom: 'bucketId',
        },
        treeStructure: {
            frontend: 'treeStructure',
            backend: 'tree_structure',
            database: 'tree_structure',
            pretty: 'Tree Structure',
            component: 'TreeStructure',
            kebab: 'tree-structure',
            sqlFunctionRef: 'p_tree_structure',
            RestAPI: 'treeStructure',
            GraphQL: 'treeStructure',
            custom: 'treeStructure',
        },
        lastUpdated: {
            frontend: 'lastUpdated',
            backend: 'last_updated',
            database: 'last_updated',
            pretty: 'Last Updated',
            component: 'LastUpdated',
            kebab: 'last-updated',
            sqlFunctionRef: 'p_last_updated',
            RestAPI: 'lastUpdated',
            GraphQL: 'lastUpdated',
            custom: 'lastUpdated',
        },
    },
    dataBroker: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        dataType: {
            frontend: 'dataType',
            backend: 'data_type',
            database: 'data_type',
            pretty: 'Data Type',
            component: 'DataType',
            kebab: 'data-type',
            sqlFunctionRef: 'p_data_type',
            RestAPI: 'dataType',
            GraphQL: 'dataType',
            custom: 'dataType',
        },
        defaultValue: {
            frontend: 'defaultValue',
            backend: 'default_value',
            database: 'default_value',
            pretty: 'Default Value',
            component: 'DefaultValue',
            kebab: 'default-value',
            sqlFunctionRef: 'p_default_value',
            RestAPI: 'defaultValue',
            GraphQL: 'defaultValue',
            custom: 'defaultValue',
        },
        defaultComponent: {
            frontend: 'defaultComponent',
            backend: 'default_component',
            database: 'default_component',
            pretty: 'Default Component',
            component: 'DefaultComponent',
            kebab: 'default-component',
            sqlFunctionRef: 'p_default_component',
            RestAPI: 'defaultComponent',
            GraphQL: 'defaultComponent',
            custom: 'defaultComponent',
        },
        dataInputComponentReference: {
            frontend: 'dataInputComponentReference',
            backend: 'data_input_component_reference',
            database: 'ref_data_input_component',
            pretty: 'Data Input Component Reference',
            component: 'DataInputComponentReference',
            kebab: 'data-input-componentReference',
            sqlFunctionRef: 'p_ref_data_input_component',
            RestAPI: 'dataInputComponentReference',
            GraphQL: 'dataInputComponentReference',
            custom: 'dataInputComponentReference',
        },
        messageBrokerInverse: {
            frontend: 'messageBrokerInverse',
            backend: 'message_broker_Inverse',
            database: 'ifk_message_broker',
            pretty: 'Message Broker Inverse',
            component: 'MessageBrokerInverse',
            kebab: 'message-brokerInverse',
            sqlFunctionRef: 'p_ifk_message_broker',
            RestAPI: 'messageBrokerInverse',
            GraphQL: 'messageBrokerInverse',
            custom: 'messageBrokerInverse',
        },
    },
    dataInputComponent: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        options: {
            frontend: 'options',
            backend: 'options',
            database: 'options',
            pretty: 'Options',
            component: 'Options',
            kebab: 'options',
            sqlFunctionRef: 'p_options',
            RestAPI: 'options',
            GraphQL: 'options',
            custom: 'options',
        },
        includeOther: {
            frontend: 'includeOther',
            backend: 'include_other',
            database: 'include_other',
            pretty: 'Include Other',
            component: 'IncludeOther',
            kebab: 'include-other',
            sqlFunctionRef: 'p_include_other',
            RestAPI: 'includeOther',
            GraphQL: 'includeOther',
            custom: 'includeOther',
        },
        min: {
            frontend: 'min',
            backend: 'min',
            database: 'min',
            pretty: 'Min',
            component: 'Min',
            kebab: 'min',
            sqlFunctionRef: 'p_min',
            RestAPI: 'min',
            GraphQL: 'min',
            custom: 'min',
        },
        max: {
            frontend: 'max',
            backend: 'max',
            database: 'max',
            pretty: 'Max',
            component: 'Max',
            kebab: 'max',
            sqlFunctionRef: 'p_max',
            RestAPI: 'max',
            GraphQL: 'max',
            custom: 'max',
        },
        step: {
            frontend: 'step',
            backend: 'step',
            database: 'step',
            pretty: 'Step',
            component: 'Step',
            kebab: 'step',
            sqlFunctionRef: 'p_step',
            RestAPI: 'step',
            GraphQL: 'step',
            custom: 'step',
        },
        minRows: {
            frontend: 'minRows',
            backend: 'min_rows',
            database: 'min_rows',
            pretty: 'Min Rows',
            component: 'MinRows',
            kebab: 'min-rows',
            sqlFunctionRef: 'p_min_rows',
            RestAPI: 'minRows',
            GraphQL: 'minRows',
            custom: 'minRows',
        },
        maxRows: {
            frontend: 'maxRows',
            backend: 'max_rows',
            database: 'max_rows',
            pretty: 'Max Rows',
            component: 'MaxRows',
            kebab: 'max-rows',
            sqlFunctionRef: 'p_max_rows',
            RestAPI: 'maxRows',
            GraphQL: 'maxRows',
            custom: 'maxRows',
        },
        acceptableFiletypes: {
            frontend: 'acceptableFiletypes',
            backend: 'acceptable_filetypes',
            database: 'acceptable_filetypes',
            pretty: 'Acceptable Filetypes',
            component: 'AcceptableFiletypes',
            kebab: 'acceptable-filetypes',
            sqlFunctionRef: 'p_acceptable_filetypes',
            RestAPI: 'acceptableFiletypes',
            GraphQL: 'acceptableFiletypes',
            custom: 'acceptableFiletypes',
        },
        src: {
            frontend: 'src',
            backend: 'src',
            database: 'src',
            pretty: 'Src',
            component: 'Src',
            kebab: 'src',
            sqlFunctionRef: 'p_src',
            RestAPI: 'src',
            GraphQL: 'src',
            custom: 'src',
        },
        classes: {
            frontend: 'classes',
            backend: 'classes',
            database: 'classes',
            pretty: 'Classes',
            component: 'Classes',
            kebab: 'classes',
            sqlFunctionRef: 'p_classes',
            RestAPI: 'classes',
            GraphQL: 'classes',
            custom: 'classes',
        },
        colorOverrides: {
            frontend: 'colorOverrides',
            backend: 'color_overrides',
            database: 'color_overrides',
            pretty: 'Color Overrides',
            component: 'ColorOverrides',
            kebab: 'color-overrides',
            sqlFunctionRef: 'p_color_overrides',
            RestAPI: 'colorOverrides',
            GraphQL: 'colorOverrides',
            custom: 'colorOverrides',
        },
        additionalParams: {
            frontend: 'additionalParams',
            backend: 'additional_params',
            database: 'additional_params',
            pretty: 'Additional Params',
            component: 'AdditionalParams',
            kebab: 'additional-params',
            sqlFunctionRef: 'p_additional_params',
            RestAPI: 'additionalParams',
            GraphQL: 'additionalParams',
            custom: 'additionalParams',
        },
        subComponent: {
            frontend: 'subComponent',
            backend: 'sub_component',
            database: 'sub_component',
            pretty: 'Sub Component',
            component: 'SubComponent',
            kebab: 'sub-component',
            sqlFunctionRef: 'p_sub_component',
            RestAPI: 'subComponent',
            GraphQL: 'subComponent',
            custom: 'subComponent',
        },
        component: {
            frontend: 'component',
            backend: 'component',
            database: 'component',
            pretty: 'Component',
            component: 'Component',
            kebab: 'component',
            sqlFunctionRef: 'p_component',
            RestAPI: 'component',
            GraphQL: 'component',
            custom: 'component',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        messageBrokerInverse: {
            frontend: 'messageBrokerInverse',
            backend: 'message_broker_Inverse',
            database: 'ifk_message_broker',
            pretty: 'Message Broker Inverse',
            component: 'MessageBrokerInverse',
            kebab: 'message-brokerInverse',
            sqlFunctionRef: 'p_ifk_message_broker',
            RestAPI: 'messageBrokerInverse',
            GraphQL: 'messageBrokerInverse',
            custom: 'messageBrokerInverse',
        },
        brokerInverse: {
            frontend: 'brokerInverse',
            backend: 'broker_Inverse',
            database: 'ifk_broker',
            pretty: 'Broker Inverse',
            component: 'BrokerInverse',
            kebab: 'brokerInverse',
            sqlFunctionRef: 'p_ifk_broker',
            RestAPI: 'brokerInverse',
            GraphQL: 'brokerInverse',
            custom: 'brokerInverse',
        },
        dataBrokerInverse: {
            frontend: 'dataBrokerInverse',
            backend: 'data_broker_Inverse',
            database: 'ifk_data_broker',
            pretty: 'Data Broker Inverse',
            component: 'DataBrokerInverse',
            kebab: 'data-brokerInverse',
            sqlFunctionRef: 'p_ifk_data_broker',
            RestAPI: 'dataBrokerInverse',
            GraphQL: 'dataBrokerInverse',
            custom: 'dataBrokerInverse',
        },
    },
    dataOutputComponent: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        componentType: {
            frontend: 'componentType',
            backend: 'component_type',
            database: 'component_type',
            pretty: 'Component Type',
            component: 'ComponentType',
            kebab: 'component-type',
            sqlFunctionRef: 'p_component_type',
            RestAPI: 'componentType',
            GraphQL: 'componentType',
            custom: 'componentType',
        },
        uiComponent: {
            frontend: 'uiComponent',
            backend: 'ui_component',
            database: 'ui_component',
            pretty: 'Ui Component',
            component: 'UiComponent',
            kebab: 'ui-component',
            sqlFunctionRef: 'p_ui_component',
            RestAPI: 'uiComponent',
            GraphQL: 'uiComponent',
            custom: 'uiComponent',
        },
        props: {
            frontend: 'props',
            backend: 'props',
            database: 'props',
            pretty: 'Props',
            component: 'Props',
            kebab: 'props',
            sqlFunctionRef: 'p_props',
            RestAPI: 'props',
            GraphQL: 'props',
            custom: 'props',
        },
        additionalParams: {
            frontend: 'additionalParams',
            backend: 'additional_params',
            database: 'additional_params',
            pretty: 'Additional Params',
            component: 'AdditionalParams',
            kebab: 'additional-params',
            sqlFunctionRef: 'p_additional_params',
            RestAPI: 'additionalParams',
            GraphQL: 'additionalParams',
            custom: 'additionalParams',
        },
    },
    displayOption: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        defaultParams: {
            frontend: 'defaultParams',
            backend: 'default_params',
            database: 'default_params',
            pretty: 'Default Params',
            component: 'DefaultParams',
            kebab: 'default-params',
            sqlFunctionRef: 'p_default_params',
            RestAPI: 'defaultParams',
            GraphQL: 'defaultParams',
            custom: 'defaultParams',
        },
        customizableParams: {
            frontend: 'customizableParams',
            backend: 'customizable_params',
            database: 'customizable_params',
            pretty: 'Customizable Params',
            component: 'CustomizableParams',
            kebab: 'customizable-params',
            sqlFunctionRef: 'p_customizable_params',
            RestAPI: 'customizableParams',
            GraphQL: 'customizableParams',
            custom: 'customizableParams',
        },
        additionalParams: {
            frontend: 'additionalParams',
            backend: 'additional_params',
            database: 'additional_params',
            pretty: 'Additional Params',
            component: 'AdditionalParams',
            kebab: 'additional-params',
            sqlFunctionRef: 'p_additional_params',
            RestAPI: 'additionalParams',
            GraphQL: 'additionalParams',
            custom: 'additionalParams',
        },
        recipeDisplayInverse: {
            frontend: 'recipeDisplayInverse',
            backend: 'recipe_display_Inverse',
            database: 'ifk_recipe_display',
            pretty: 'Recipe Display Inverse',
            component: 'RecipeDisplayInverse',
            kebab: 'recipe-displayInverse',
            sqlFunctionRef: 'p_ifk_recipe_display',
            RestAPI: 'recipeDisplayInverse',
            GraphQL: 'recipeDisplayInverse',
            custom: 'recipeDisplayInverse',
        },
    },
    emails: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        sender: {
            frontend: 'sender',
            backend: 'sender',
            database: 'sender',
            pretty: 'Sender',
            component: 'Sender',
            kebab: 'sender',
            sqlFunctionRef: 'p_sender',
            RestAPI: 'sender',
            GraphQL: 'sender',
            custom: 'sender',
        },
        recipient: {
            frontend: 'recipient',
            backend: 'recipient',
            database: 'recipient',
            pretty: 'Recipient',
            component: 'Recipient',
            kebab: 'recipient',
            sqlFunctionRef: 'p_recipient',
            RestAPI: 'recipient',
            GraphQL: 'recipient',
            custom: 'recipient',
        },
        subject: {
            frontend: 'subject',
            backend: 'subject',
            database: 'subject',
            pretty: 'Subject',
            component: 'Subject',
            kebab: 'subject',
            sqlFunctionRef: 'p_subject',
            RestAPI: 'subject',
            GraphQL: 'subject',
            custom: 'subject',
        },
        body: {
            frontend: 'body',
            backend: 'body',
            database: 'body',
            pretty: 'Body',
            component: 'Body',
            kebab: 'body',
            sqlFunctionRef: 'p_body',
            RestAPI: 'body',
            GraphQL: 'body',
            custom: 'body',
        },
        timestamp: {
            frontend: 'timestamp',
            backend: 'timestamp',
            database: 'timestamp',
            pretty: 'Timestamp',
            component: 'Timestamp',
            kebab: 'timestamp',
            sqlFunctionRef: 'p_timestamp',
            RestAPI: 'timestamp',
            GraphQL: 'timestamp',
            custom: 'timestamp',
        },
        isRead: {
            frontend: 'isRead',
            backend: 'is_read',
            database: 'is_read',
            pretty: 'Is Read',
            component: 'IsRead',
            kebab: 'is-read',
            sqlFunctionRef: 'p_is_read',
            RestAPI: 'isRead',
            GraphQL: 'isRead',
            custom: 'isRead',
        },
    },
    extractor: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        outputType: {
            frontend: 'outputType',
            backend: 'output_type',
            database: 'output_type',
            pretty: 'Output Type',
            component: 'OutputType',
            kebab: 'output-type',
            sqlFunctionRef: 'p_output_type',
            RestAPI: 'outputType',
            GraphQL: 'outputType',
            custom: 'outputType',
        },
        defaultIdentifier: {
            frontend: 'defaultIdentifier',
            backend: 'default_identifier',
            database: 'default_identifier',
            pretty: 'Default Identifier',
            component: 'DefaultIdentifier',
            kebab: 'default-identifier',
            sqlFunctionRef: 'p_default_identifier',
            RestAPI: 'defaultIdentifier',
            GraphQL: 'defaultIdentifier',
            custom: 'defaultIdentifier',
        },
        defaultIndex: {
            frontend: 'defaultIndex',
            backend: 'default_index',
            database: 'default_index',
            pretty: 'Default Index',
            component: 'DefaultIndex',
            kebab: 'default-index',
            sqlFunctionRef: 'p_default_index',
            RestAPI: 'defaultIndex',
            GraphQL: 'defaultIndex',
            custom: 'defaultIndex',
        },
    },
    fileStructure: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        bucketId: {
            frontend: 'bucketId',
            backend: 'bucket_id',
            database: 'bucket_id',
            pretty: 'Bucket Id',
            component: 'BucketId',
            kebab: 'bucket-id',
            sqlFunctionRef: 'p_bucket_id',
            RestAPI: 'bucketId',
            GraphQL: 'bucketId',
            custom: 'bucketId',
        },
        path: {
            frontend: 'path',
            backend: 'path',
            database: 'path',
            pretty: 'Path',
            component: 'Path',
            kebab: 'path',
            sqlFunctionRef: 'p_path',
            RestAPI: 'path',
            GraphQL: 'path',
            custom: 'path',
        },
        isFolder: {
            frontend: 'isFolder',
            backend: 'is_folder',
            database: 'is_folder',
            pretty: 'Is Folder',
            component: 'IsFolder',
            kebab: 'is-folder',
            sqlFunctionRef: 'p_is_folder',
            RestAPI: 'isFolder',
            GraphQL: 'isFolder',
            custom: 'isFolder',
        },
        fileId: {
            frontend: 'fileId',
            backend: 'file_id',
            database: 'file_id',
            pretty: 'File Id',
            component: 'FileId',
            kebab: 'file-id',
            sqlFunctionRef: 'p_file_id',
            RestAPI: 'fileId',
            GraphQL: 'fileId',
            custom: 'fileId',
        },
        parentPath: {
            frontend: 'parentPath',
            backend: 'parent_path',
            database: 'parent_path',
            pretty: 'Parent Path',
            component: 'ParentPath',
            kebab: 'parent-path',
            sqlFunctionRef: 'p_parent_path',
            RestAPI: 'parentPath',
            GraphQL: 'parentPath',
            custom: 'parentPath',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        metadata: {
            frontend: 'metadata',
            backend: 'metadata',
            database: 'metadata',
            pretty: 'Metadata',
            component: 'Metadata',
            kebab: 'metadata',
            sqlFunctionRef: 'p_metadata',
            RestAPI: 'metadata',
            GraphQL: 'metadata',
            custom: 'metadata',
        },
        createdAt: {
            frontend: 'createdAt',
            backend: 'created_at',
            database: 'created_at',
            pretty: 'Created At',
            component: 'CreatedAt',
            kebab: 'created-at',
            sqlFunctionRef: 'p_created_at',
            RestAPI: 'createdAt',
            GraphQL: 'createdAt',
            custom: 'createdAt',
        },
        updatedAt: {
            frontend: 'updatedAt',
            backend: 'updated_at',
            database: 'updated_at',
            pretty: 'Updated At',
            component: 'UpdatedAt',
            kebab: 'updated-at',
            sqlFunctionRef: 'p_updated_at',
            RestAPI: 'updatedAt',
            GraphQL: 'updatedAt',
            custom: 'updatedAt',
        },
    },
    flashcardData: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        userId: {
            frontend: 'userId',
            backend: 'user_id',
            database: 'user_id',
            pretty: 'User Id',
            component: 'UserId',
            kebab: 'user-id',
            sqlFunctionRef: 'p_user_id',
            RestAPI: 'userId',
            GraphQL: 'userId',
            custom: 'userId',
        },
        topic: {
            frontend: 'topic',
            backend: 'topic',
            database: 'topic',
            pretty: 'Topic',
            component: 'Topic',
            kebab: 'topic',
            sqlFunctionRef: 'p_topic',
            RestAPI: 'topic',
            GraphQL: 'topic',
            custom: 'topic',
        },
        lesson: {
            frontend: 'lesson',
            backend: 'lesson',
            database: 'lesson',
            pretty: 'Lesson',
            component: 'Lesson',
            kebab: 'lesson',
            sqlFunctionRef: 'p_lesson',
            RestAPI: 'lesson',
            GraphQL: 'lesson',
            custom: 'lesson',
        },
        difficulty: {
            frontend: 'difficulty',
            backend: 'difficulty',
            database: 'difficulty',
            pretty: 'Difficulty',
            component: 'Difficulty',
            kebab: 'difficulty',
            sqlFunctionRef: 'p_difficulty',
            RestAPI: 'difficulty',
            GraphQL: 'difficulty',
            custom: 'difficulty',
        },
        front: {
            frontend: 'front',
            backend: 'front',
            database: 'front',
            pretty: 'Front',
            component: 'Front',
            kebab: 'front',
            sqlFunctionRef: 'p_front',
            RestAPI: 'front',
            GraphQL: 'front',
            custom: 'front',
        },
        back: {
            frontend: 'back',
            backend: 'back',
            database: 'back',
            pretty: 'Back',
            component: 'Back',
            kebab: 'back',
            sqlFunctionRef: 'p_back',
            RestAPI: 'back',
            GraphQL: 'back',
            custom: 'back',
        },
        example: {
            frontend: 'example',
            backend: 'example',
            database: 'example',
            pretty: 'Example',
            component: 'Example',
            kebab: 'example',
            sqlFunctionRef: 'p_example',
            RestAPI: 'example',
            GraphQL: 'example',
            custom: 'example',
        },
        detailedExplanation: {
            frontend: 'detailedExplanation',
            backend: 'detailed_explanation',
            database: 'detailed_explanation',
            pretty: 'Detailed Explanation',
            component: 'DetailedExplanation',
            kebab: 'detailed-explanation',
            sqlFunctionRef: 'p_detailed_explanation',
            RestAPI: 'detailedExplanation',
            GraphQL: 'detailedExplanation',
            custom: 'detailedExplanation',
        },
        audioExplanation: {
            frontend: 'audioExplanation',
            backend: 'audio_explanation',
            database: 'audio_explanation',
            pretty: 'Audio Explanation',
            component: 'AudioExplanation',
            kebab: 'audio-explanation',
            sqlFunctionRef: 'p_audio_explanation',
            RestAPI: 'audioExplanation',
            GraphQL: 'audioExplanation',
            custom: 'audioExplanation',
        },
        personalNotes: {
            frontend: 'personalNotes',
            backend: 'personal_notes',
            database: 'personal_notes',
            pretty: 'Personal Notes',
            component: 'PersonalNotes',
            kebab: 'personal-notes',
            sqlFunctionRef: 'p_personal_notes',
            RestAPI: 'personalNotes',
            GraphQL: 'personalNotes',
            custom: 'personalNotes',
        },
        isDeleted: {
            frontend: 'isDeleted',
            backend: 'is_deleted',
            database: 'is_deleted',
            pretty: 'Is Deleted',
            component: 'IsDeleted',
            kebab: 'is-deleted',
            sqlFunctionRef: 'p_is_deleted',
            RestAPI: 'isDeleted',
            GraphQL: 'isDeleted',
            custom: 'isDeleted',
        },
        public: {
            frontend: 'public',
            backend: 'public',
            database: 'public',
            pretty: 'Public',
            component: 'Public',
            kebab: 'public',
            sqlFunctionRef: 'p_public',
            RestAPI: 'public',
            GraphQL: 'public',
            custom: 'public',
        },
        sharedWith: {
            frontend: 'sharedWith',
            backend: 'shared_with',
            database: 'shared_with',
            pretty: 'Shared With',
            component: 'SharedWith',
            kebab: 'shared-with',
            sqlFunctionRef: 'p_shared_with',
            RestAPI: 'sharedWith',
            GraphQL: 'sharedWith',
            custom: 'sharedWith',
        },
        createdAt: {
            frontend: 'createdAt',
            backend: 'created_at',
            database: 'created_at',
            pretty: 'Created At',
            component: 'CreatedAt',
            kebab: 'created-at',
            sqlFunctionRef: 'p_created_at',
            RestAPI: 'createdAt',
            GraphQL: 'createdAt',
            custom: 'createdAt',
        },
        updatedAt: {
            frontend: 'updatedAt',
            backend: 'updated_at',
            database: 'updated_at',
            pretty: 'Updated At',
            component: 'UpdatedAt',
            kebab: 'updated-at',
            sqlFunctionRef: 'p_updated_at',
            RestAPI: 'updatedAt',
            GraphQL: 'updatedAt',
            custom: 'updatedAt',
        },
        flashcardHistoryInverse: {
            frontend: 'flashcardHistoryInverse',
            backend: 'flashcard_history_Inverse',
            database: 'ifk_flashcard_history',
            pretty: 'Flashcard History Inverse',
            component: 'FlashcardHistoryInverse',
            kebab: 'flashcard-historyInverse',
            sqlFunctionRef: 'p_ifk_flashcard_history',
            RestAPI: 'flashcardHistoryInverse',
            GraphQL: 'flashcardHistoryInverse',
            custom: 'flashcardHistoryInverse',
        },
        flashcardSetRelationsInverse: {
            frontend: 'flashcardSetRelationsInverse',
            backend: 'flashcard_set_relations_Inverse',
            database: 'ifk_flashcard_set_relations',
            pretty: 'Flashcard Set Relations Inverse',
            component: 'FlashcardSetRelationsInverse',
            kebab: 'flashcard-set-relationsInverse',
            sqlFunctionRef: 'p_ifk_flashcard_set_relations',
            RestAPI: 'flashcardSetRelationsInverse',
            GraphQL: 'flashcardSetRelationsInverse',
            custom: 'flashcardSetRelationsInverse',
        },
        flashcardImagesInverse: {
            frontend: 'flashcardImagesInverse',
            backend: 'flashcard_images_Inverse',
            database: 'ifk_flashcard_images',
            pretty: 'Flashcard Images Inverse',
            component: 'FlashcardImagesInverse',
            kebab: 'flashcard-imagesInverse',
            sqlFunctionRef: 'p_ifk_flashcard_images',
            RestAPI: 'flashcardImagesInverse',
            GraphQL: 'flashcardImagesInverse',
            custom: 'flashcardImagesInverse',
        },
    },
    flashcardHistory: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        flashcardId: {
            frontend: 'flashcardId',
            backend: 'flashcard_id',
            database: 'flashcard_id',
            pretty: 'Flashcard Id',
            component: 'FlashcardId',
            kebab: 'flashcard-id',
            sqlFunctionRef: 'p_flashcard_id',
            RestAPI: 'flashcardId',
            GraphQL: 'flashcardId',
            custom: 'flashcardId',
        },
        userId: {
            frontend: 'userId',
            backend: 'user_id',
            database: 'user_id',
            pretty: 'User Id',
            component: 'UserId',
            kebab: 'user-id',
            sqlFunctionRef: 'p_user_id',
            RestAPI: 'userId',
            GraphQL: 'userId',
            custom: 'userId',
        },
        reviewCount: {
            frontend: 'reviewCount',
            backend: 'review_count',
            database: 'review_count',
            pretty: 'Review Count',
            component: 'ReviewCount',
            kebab: 'review-count',
            sqlFunctionRef: 'p_review_count',
            RestAPI: 'reviewCount',
            GraphQL: 'reviewCount',
            custom: 'reviewCount',
        },
        correctCount: {
            frontend: 'correctCount',
            backend: 'correct_count',
            database: 'correct_count',
            pretty: 'Correct Count',
            component: 'CorrectCount',
            kebab: 'correct-count',
            sqlFunctionRef: 'p_correct_count',
            RestAPI: 'correctCount',
            GraphQL: 'correctCount',
            custom: 'correctCount',
        },
        incorrectCount: {
            frontend: 'incorrectCount',
            backend: 'incorrect_count',
            database: 'incorrect_count',
            pretty: 'Incorrect Count',
            component: 'IncorrectCount',
            kebab: 'incorrect-count',
            sqlFunctionRef: 'p_incorrect_count',
            RestAPI: 'incorrectCount',
            GraphQL: 'incorrectCount',
            custom: 'incorrectCount',
        },
        createdAt: {
            frontend: 'createdAt',
            backend: 'created_at',
            database: 'created_at',
            pretty: 'Created At',
            component: 'CreatedAt',
            kebab: 'created-at',
            sqlFunctionRef: 'p_created_at',
            RestAPI: 'createdAt',
            GraphQL: 'createdAt',
            custom: 'createdAt',
        },
        updatedAt: {
            frontend: 'updatedAt',
            backend: 'updated_at',
            database: 'updated_at',
            pretty: 'Updated At',
            component: 'UpdatedAt',
            kebab: 'updated-at',
            sqlFunctionRef: 'p_updated_at',
            RestAPI: 'updatedAt',
            GraphQL: 'updatedAt',
            custom: 'updatedAt',
        },
        flashcardDataReference: {
            frontend: 'flashcardDataReference',
            backend: 'flashcard_data_reference',
            database: 'ref_flashcard_data',
            pretty: 'Flashcard Data Reference',
            component: 'FlashcardDataReference',
            kebab: 'flashcard-dataReference',
            sqlFunctionRef: 'p_ref_flashcard_data',
            RestAPI: 'flashcardDataReference',
            GraphQL: 'flashcardDataReference',
            custom: 'flashcardDataReference',
        },
    },
    flashcardImages: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        flashcardId: {
            frontend: 'flashcardId',
            backend: 'flashcard_id',
            database: 'flashcard_id',
            pretty: 'Flashcard Id',
            component: 'FlashcardId',
            kebab: 'flashcard-id',
            sqlFunctionRef: 'p_flashcard_id',
            RestAPI: 'flashcardId',
            GraphQL: 'flashcardId',
            custom: 'flashcardId',
        },
        filePath: {
            frontend: 'filePath',
            backend: 'file_path',
            database: 'file_path',
            pretty: 'File Path',
            component: 'FilePath',
            kebab: 'file-path',
            sqlFunctionRef: 'p_file_path',
            RestAPI: 'filePath',
            GraphQL: 'filePath',
            custom: 'filePath',
        },
        fileName: {
            frontend: 'fileName',
            backend: 'file_name',
            database: 'file_name',
            pretty: 'File Name',
            component: 'FileName',
            kebab: 'file-name',
            sqlFunctionRef: 'p_file_name',
            RestAPI: 'fileName',
            GraphQL: 'fileName',
            custom: 'fileName',
        },
        mimeType: {
            frontend: 'mimeType',
            backend: 'mime_type',
            database: 'mime_type',
            pretty: 'Mime Type',
            component: 'MimeType',
            kebab: 'mime-type',
            sqlFunctionRef: 'p_mime_type',
            RestAPI: 'mimeType',
            GraphQL: 'mimeType',
            custom: 'mimeType',
        },
        size: {
            frontend: 'size',
            backend: 'size',
            database: 'size',
            pretty: 'Size',
            component: 'Size',
            kebab: 'size',
            sqlFunctionRef: 'p_size',
            RestAPI: 'size',
            GraphQL: 'size',
            custom: 'size',
        },
        createdAt: {
            frontend: 'createdAt',
            backend: 'created_at',
            database: 'created_at',
            pretty: 'Created At',
            component: 'CreatedAt',
            kebab: 'created-at',
            sqlFunctionRef: 'p_created_at',
            RestAPI: 'createdAt',
            GraphQL: 'createdAt',
            custom: 'createdAt',
        },
        flashcardDataReference: {
            frontend: 'flashcardDataReference',
            backend: 'flashcard_data_reference',
            database: 'ref_flashcard_data',
            pretty: 'Flashcard Data Reference',
            component: 'FlashcardDataReference',
            kebab: 'flashcard-dataReference',
            sqlFunctionRef: 'p_ref_flashcard_data',
            RestAPI: 'flashcardDataReference',
            GraphQL: 'flashcardDataReference',
            custom: 'flashcardDataReference',
        },
    },
    flashcardSetRelations: {
        flashcardId: {
            frontend: 'flashcardId',
            backend: 'flashcard_id',
            database: 'flashcard_id',
            pretty: 'Flashcard Id',
            component: 'FlashcardId',
            kebab: 'flashcard-id',
            sqlFunctionRef: 'p_flashcard_id',
            RestAPI: 'flashcardId',
            GraphQL: 'flashcardId',
            custom: 'flashcardId',
        },
        setId: {
            frontend: 'setId',
            backend: 'set_id',
            database: 'set_id',
            pretty: 'Set Id',
            component: 'SetId',
            kebab: 'set-id',
            sqlFunctionRef: 'p_set_id',
            RestAPI: 'setId',
            GraphQL: 'setId',
            custom: 'setId',
        },
        order: {
            frontend: 'order',
            backend: 'order',
            database: 'order',
            pretty: 'Order',
            component: 'Order',
            kebab: 'order',
            sqlFunctionRef: 'p_order',
            RestAPI: 'order',
            GraphQL: 'order',
            custom: 'order',
        },
        flashcardDataReference: {
            frontend: 'flashcardDataReference',
            backend: 'flashcard_data_reference',
            database: 'ref_flashcard_data',
            pretty: 'Flashcard Data Reference',
            component: 'FlashcardDataReference',
            kebab: 'flashcard-dataReference',
            sqlFunctionRef: 'p_ref_flashcard_data',
            RestAPI: 'flashcardDataReference',
            GraphQL: 'flashcardDataReference',
            custom: 'flashcardDataReference',
        },
        flashcardSetsReference: {
            frontend: 'flashcardSetsReference',
            backend: 'flashcard_sets_reference',
            database: 'ref_flashcard_sets',
            pretty: 'Flashcard Sets Reference',
            component: 'FlashcardSetsReference',
            kebab: 'flashcard-setsReference',
            sqlFunctionRef: 'p_ref_flashcard_sets',
            RestAPI: 'flashcardSetsReference',
            GraphQL: 'flashcardSetsReference',
            custom: 'flashcardSetsReference',
        },
    },
    flashcardSets: {
        setId: {
            frontend: 'setId',
            backend: 'set_id',
            database: 'set_id',
            pretty: 'Set Id',
            component: 'SetId',
            kebab: 'set-id',
            sqlFunctionRef: 'p_set_id',
            RestAPI: 'setId',
            GraphQL: 'setId',
            custom: 'setId',
        },
        userId: {
            frontend: 'userId',
            backend: 'user_id',
            database: 'user_id',
            pretty: 'User Id',
            component: 'UserId',
            kebab: 'user-id',
            sqlFunctionRef: 'p_user_id',
            RestAPI: 'userId',
            GraphQL: 'userId',
            custom: 'userId',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        createdAt: {
            frontend: 'createdAt',
            backend: 'created_at',
            database: 'created_at',
            pretty: 'Created At',
            component: 'CreatedAt',
            kebab: 'created-at',
            sqlFunctionRef: 'p_created_at',
            RestAPI: 'createdAt',
            GraphQL: 'createdAt',
            custom: 'createdAt',
        },
        updatedAt: {
            frontend: 'updatedAt',
            backend: 'updated_at',
            database: 'updated_at',
            pretty: 'Updated At',
            component: 'UpdatedAt',
            kebab: 'updated-at',
            sqlFunctionRef: 'p_updated_at',
            RestAPI: 'updatedAt',
            GraphQL: 'updatedAt',
            custom: 'updatedAt',
        },
        sharedWith: {
            frontend: 'sharedWith',
            backend: 'shared_with',
            database: 'shared_with',
            pretty: 'Shared With',
            component: 'SharedWith',
            kebab: 'shared-with',
            sqlFunctionRef: 'p_shared_with',
            RestAPI: 'sharedWith',
            GraphQL: 'sharedWith',
            custom: 'sharedWith',
        },
        public: {
            frontend: 'public',
            backend: 'public',
            database: 'public',
            pretty: 'Public',
            component: 'Public',
            kebab: 'public',
            sqlFunctionRef: 'p_public',
            RestAPI: 'public',
            GraphQL: 'public',
            custom: 'public',
        },
        topic: {
            frontend: 'topic',
            backend: 'topic',
            database: 'topic',
            pretty: 'Topic',
            component: 'Topic',
            kebab: 'topic',
            sqlFunctionRef: 'p_topic',
            RestAPI: 'topic',
            GraphQL: 'topic',
            custom: 'topic',
        },
        lesson: {
            frontend: 'lesson',
            backend: 'lesson',
            database: 'lesson',
            pretty: 'Lesson',
            component: 'Lesson',
            kebab: 'lesson',
            sqlFunctionRef: 'p_lesson',
            RestAPI: 'lesson',
            GraphQL: 'lesson',
            custom: 'lesson',
        },
        difficulty: {
            frontend: 'difficulty',
            backend: 'difficulty',
            database: 'difficulty',
            pretty: 'Difficulty',
            component: 'Difficulty',
            kebab: 'difficulty',
            sqlFunctionRef: 'p_difficulty',
            RestAPI: 'difficulty',
            GraphQL: 'difficulty',
            custom: 'difficulty',
        },
        audioOverview: {
            frontend: 'audioOverview',
            backend: 'audio_overview',
            database: 'audio_overview',
            pretty: 'Audio Overview',
            component: 'AudioOverview',
            kebab: 'audio-overview',
            sqlFunctionRef: 'p_audio_overview',
            RestAPI: 'audioOverview',
            GraphQL: 'audioOverview',
            custom: 'audioOverview',
        },
        flashcardSetRelationsInverse: {
            frontend: 'flashcardSetRelationsInverse',
            backend: 'flashcard_set_relations_Inverse',
            database: 'ifk_flashcard_set_relations',
            pretty: 'Flashcard Set Relations Inverse',
            component: 'FlashcardSetRelationsInverse',
            kebab: 'flashcard-set-relationsInverse',
            sqlFunctionRef: 'p_ifk_flashcard_set_relations',
            RestAPI: 'flashcardSetRelationsInverse',
            GraphQL: 'flashcardSetRelationsInverse',
            custom: 'flashcardSetRelationsInverse',
        },
    },
    messageBroker: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        messageId: {
            frontend: 'messageId',
            backend: 'message_id',
            database: 'message_id',
            pretty: 'Message Id',
            component: 'MessageId',
            kebab: 'message-id',
            sqlFunctionRef: 'p_message_id',
            RestAPI: 'messageId',
            GraphQL: 'messageId',
            custom: 'messageId',
        },
        brokerId: {
            frontend: 'brokerId',
            backend: 'broker_id',
            database: 'broker_id',
            pretty: 'Broker Id',
            component: 'BrokerId',
            kebab: 'broker-id',
            sqlFunctionRef: 'p_broker_id',
            RestAPI: 'brokerId',
            GraphQL: 'brokerId',
            custom: 'brokerId',
        },
        defaultValue: {
            frontend: 'defaultValue',
            backend: 'default_value',
            database: 'default_value',
            pretty: 'Default Value',
            component: 'DefaultValue',
            kebab: 'default-value',
            sqlFunctionRef: 'p_default_value',
            RestAPI: 'defaultValue',
            GraphQL: 'defaultValue',
            custom: 'defaultValue',
        },
        defaultComponent: {
            frontend: 'defaultComponent',
            backend: 'default_component',
            database: 'default_component',
            pretty: 'Default Component',
            component: 'DefaultComponent',
            kebab: 'default-component',
            sqlFunctionRef: 'p_default_component',
            RestAPI: 'defaultComponent',
            GraphQL: 'defaultComponent',
            custom: 'defaultComponent',
        },
        dataBrokerReference: {
            frontend: 'dataBrokerReference',
            backend: 'data_broker_reference',
            database: 'ref_data_broker',
            pretty: 'Data Broker Reference',
            component: 'DataBrokerReference',
            kebab: 'data-brokerReference',
            sqlFunctionRef: 'p_ref_data_broker',
            RestAPI: 'dataBrokerReference',
            GraphQL: 'dataBrokerReference',
            custom: 'dataBrokerReference',
        },
        dataInputComponentReference: {
            frontend: 'dataInputComponentReference',
            backend: 'data_input_component_reference',
            database: 'ref_data_input_component',
            pretty: 'Data Input Component Reference',
            component: 'DataInputComponentReference',
            kebab: 'data-input-componentReference',
            sqlFunctionRef: 'p_ref_data_input_component',
            RestAPI: 'dataInputComponentReference',
            GraphQL: 'dataInputComponentReference',
            custom: 'dataInputComponentReference',
        },
        messageTemplateReference: {
            frontend: 'messageTemplateReference',
            backend: 'message_template_reference',
            database: 'ref_message_template',
            pretty: 'Message Template Reference',
            component: 'MessageTemplateReference',
            kebab: 'message-templateReference',
            sqlFunctionRef: 'p_ref_message_template',
            RestAPI: 'messageTemplateReference',
            GraphQL: 'messageTemplateReference',
            custom: 'messageTemplateReference',
        },
    },
    messageTemplate: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        role: {
            frontend: 'role',
            backend: 'role',
            database: 'role',
            pretty: 'Role',
            component: 'Role',
            kebab: 'role',
            sqlFunctionRef: 'p_role',
            RestAPI: 'role',
            GraphQL: 'role',
            custom: 'role',
        },
        type: {
            frontend: 'type',
            backend: 'type',
            database: 'type',
            pretty: 'Type',
            component: 'Type',
            kebab: 'type',
            sqlFunctionRef: 'p_type',
            RestAPI: 'type',
            GraphQL: 'type',
            custom: 'type',
        },
        createdAt: {
            frontend: 'createdAt',
            backend: 'created_at',
            database: 'created_at',
            pretty: 'Created At',
            component: 'CreatedAt',
            kebab: 'created-at',
            sqlFunctionRef: 'p_created_at',
            RestAPI: 'createdAt',
            GraphQL: 'createdAt',
            custom: 'createdAt',
        },
        content: {
            frontend: 'content',
            backend: 'content',
            database: 'content',
            pretty: 'Content',
            component: 'Content',
            kebab: 'content',
            sqlFunctionRef: 'p_content',
            RestAPI: 'content',
            GraphQL: 'content',
            custom: 'content',
        },
        messageBrokerInverse: {
            frontend: 'messageBrokerInverse',
            backend: 'message_broker_Inverse',
            database: 'ifk_message_broker',
            pretty: 'Message Broker Inverse',
            component: 'MessageBrokerInverse',
            kebab: 'message-brokerInverse',
            sqlFunctionRef: 'p_ifk_message_broker',
            RestAPI: 'messageBrokerInverse',
            GraphQL: 'messageBrokerInverse',
            custom: 'messageBrokerInverse',
        },
        recipeMessageInverse: {
            frontend: 'recipeMessageInverse',
            backend: 'recipe_message_Inverse',
            database: 'ifk_recipe_message',
            pretty: 'Recipe Message Inverse',
            component: 'RecipeMessageInverse',
            kebab: 'recipe-messageInverse',
            sqlFunctionRef: 'p_ifk_recipe_message',
            RestAPI: 'recipeMessageInverse',
            GraphQL: 'recipeMessageInverse',
            custom: 'recipeMessageInverse',
        },
    },
    processor: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        dependsDefault: {
            frontend: 'dependsDefault',
            backend: 'depends_default',
            database: 'depends_default',
            pretty: 'Depends Default',
            component: 'DependsDefault',
            kebab: 'depends-default',
            sqlFunctionRef: 'p_depends_default',
            RestAPI: 'dependsDefault',
            GraphQL: 'dependsDefault',
            custom: 'dependsDefault',
        },
        defaultExtractors: {
            frontend: 'defaultExtractors',
            backend: 'default_extractors',
            database: 'default_extractors',
            pretty: 'Default Extractors',
            component: 'DefaultExtractors',
            kebab: 'default-extractors',
            sqlFunctionRef: 'p_default_extractors',
            RestAPI: 'defaultExtractors',
            GraphQL: 'defaultExtractors',
            custom: 'defaultExtractors',
        },
        params: {
            frontend: 'params',
            backend: 'params',
            database: 'params',
            pretty: 'Params',
            component: 'Params',
            kebab: 'params',
            sqlFunctionRef: 'p_params',
            RestAPI: 'params',
            GraphQL: 'params',
            custom: 'params',
        },
        processorReference: {
            frontend: 'processorReference',
            backend: 'processor_reference',
            database: 'ref_processor',
            pretty: 'Processor Reference',
            component: 'ProcessorReference',
            kebab: 'processorReference',
            sqlFunctionRef: 'p_ref_processor',
            RestAPI: 'processorReference',
            GraphQL: 'processorReference',
            custom: 'processorReference',
        },
        recipeProcessorInverse: {
            frontend: 'recipeProcessorInverse',
            backend: 'recipe_processor_Inverse',
            database: 'ifk_recipe_processor',
            pretty: 'Recipe Processor Inverse',
            component: 'RecipeProcessorInverse',
            kebab: 'recipe-processorInverse',
            sqlFunctionRef: 'p_ifk_recipe_processor',
            RestAPI: 'recipeProcessorInverse',
            GraphQL: 'recipeProcessorInverse',
            custom: 'recipeProcessorInverse',
        },
    },
    recipe: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        description: {
            frontend: 'description',
            backend: 'description',
            database: 'description',
            pretty: 'Description',
            component: 'Description',
            kebab: 'description',
            sqlFunctionRef: 'p_description',
            RestAPI: 'description',
            GraphQL: 'description',
            custom: 'description',
        },
        tags: {
            frontend: 'tags',
            backend: 'tags',
            database: 'tags',
            pretty: 'Tags',
            component: 'Tags',
            kebab: 'tags',
            sqlFunctionRef: 'p_tags',
            RestAPI: 'tags',
            GraphQL: 'tags',
            custom: 'tags',
        },
        sampleOutput: {
            frontend: 'sampleOutput',
            backend: 'sample_output',
            database: 'sample_output',
            pretty: 'Sample Output',
            component: 'SampleOutput',
            kebab: 'sample-output',
            sqlFunctionRef: 'p_sample_output',
            RestAPI: 'sampleOutput',
            GraphQL: 'sampleOutput',
            custom: 'sampleOutput',
        },
        isPublic: {
            frontend: 'isPublic',
            backend: 'is_public',
            database: 'is_public',
            pretty: 'Is Public',
            component: 'IsPublic',
            kebab: 'is-public',
            sqlFunctionRef: 'p_is_public',
            RestAPI: 'isPublic',
            GraphQL: 'isPublic',
            custom: 'isPublic',
        },
        status: {
            frontend: 'status',
            backend: 'status',
            database: 'status',
            pretty: 'Status',
            component: 'Status',
            kebab: 'status',
            sqlFunctionRef: 'p_status',
            RestAPI: 'status',
            GraphQL: 'status',
            custom: 'status',
        },
        version: {
            frontend: 'version',
            backend: 'version',
            database: 'version',
            pretty: 'Version',
            component: 'Version',
            kebab: 'version',
            sqlFunctionRef: 'p_version',
            RestAPI: 'version',
            GraphQL: 'version',
            custom: 'version',
        },
        messages: {
            frontend: 'messages',
            backend: 'messages',
            database: 'messages',
            pretty: 'Messages',
            component: 'Messages',
            kebab: 'messages',
            sqlFunctionRef: 'p_messages',
            RestAPI: 'messages',
            GraphQL: 'messages',
            custom: 'messages',
        },
        postResultOptions: {
            frontend: 'postResultOptions',
            backend: 'post_result_options',
            database: 'post_result_options',
            pretty: 'Post Result Options',
            component: 'PostResultOptions',
            kebab: 'post-result-options',
            sqlFunctionRef: 'p_post_result_options',
            RestAPI: 'postResultOptions',
            GraphQL: 'postResultOptions',
            custom: 'postResultOptions',
        },
        recipeDisplayInverse: {
            frontend: 'recipeDisplayInverse',
            backend: 'recipe_display_Inverse',
            database: 'ifk_recipe_display',
            pretty: 'Recipe Display Inverse',
            component: 'RecipeDisplayInverse',
            kebab: 'recipe-displayInverse',
            sqlFunctionRef: 'p_ifk_recipe_display',
            RestAPI: 'recipeDisplayInverse',
            GraphQL: 'recipeDisplayInverse',
            custom: 'recipeDisplayInverse',
        },
        recipeProcessorInverse: {
            frontend: 'recipeProcessorInverse',
            backend: 'recipe_processor_Inverse',
            database: 'ifk_recipe_processor',
            pretty: 'Recipe Processor Inverse',
            component: 'RecipeProcessorInverse',
            kebab: 'recipe-processorInverse',
            sqlFunctionRef: 'p_ifk_recipe_processor',
            RestAPI: 'recipeProcessorInverse',
            GraphQL: 'recipeProcessorInverse',
            custom: 'recipeProcessorInverse',
        },
        recipeModelInverse: {
            frontend: 'recipeModelInverse',
            backend: 'recipe_model_Inverse',
            database: 'ifk_recipe_model',
            pretty: 'Recipe Model Inverse',
            component: 'RecipeModelInverse',
            kebab: 'recipe-modelInverse',
            sqlFunctionRef: 'p_ifk_recipe_model',
            RestAPI: 'recipeModelInverse',
            GraphQL: 'recipeModelInverse',
            custom: 'recipeModelInverse',
        },
        recipeBrokerInverse: {
            frontend: 'recipeBrokerInverse',
            backend: 'recipe_broker_Inverse',
            database: 'ifk_recipe_broker',
            pretty: 'Recipe Broker Inverse',
            component: 'RecipeBrokerInverse',
            kebab: 'recipe-brokerInverse',
            sqlFunctionRef: 'p_ifk_recipe_broker',
            RestAPI: 'recipeBrokerInverse',
            GraphQL: 'recipeBrokerInverse',
            custom: 'recipeBrokerInverse',
        },
        recipeToolInverse: {
            frontend: 'recipeToolInverse',
            backend: 'recipe_tool_Inverse',
            database: 'ifk_recipe_tool',
            pretty: 'Recipe Tool Inverse',
            component: 'RecipeToolInverse',
            kebab: 'recipe-toolInverse',
            sqlFunctionRef: 'p_ifk_recipe_tool',
            RestAPI: 'recipeToolInverse',
            GraphQL: 'recipeToolInverse',
            custom: 'recipeToolInverse',
        },
        recipeFunctionInverse: {
            frontend: 'recipeFunctionInverse',
            backend: 'recipe_function_Inverse',
            database: 'ifk_recipe_function',
            pretty: 'Recipe Function Inverse',
            component: 'RecipeFunctionInverse',
            kebab: 'recipe-functionInverse',
            sqlFunctionRef: 'p_ifk_recipe_function',
            RestAPI: 'recipeFunctionInverse',
            GraphQL: 'recipeFunctionInverse',
            custom: 'recipeFunctionInverse',
        },
        recipeMessageInverse: {
            frontend: 'recipeMessageInverse',
            backend: 'recipe_message_Inverse',
            database: 'ifk_recipe_message',
            pretty: 'Recipe Message Inverse',
            component: 'RecipeMessageInverse',
            kebab: 'recipe-messageInverse',
            sqlFunctionRef: 'p_ifk_recipe_message',
            RestAPI: 'recipeMessageInverse',
            GraphQL: 'recipeMessageInverse',
            custom: 'recipeMessageInverse',
        },
    },
    recipeBroker: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        recipe: {
            frontend: 'recipe',
            backend: 'recipe',
            database: 'recipe',
            pretty: 'Recipe',
            component: 'Recipe',
            kebab: 'recipe',
            sqlFunctionRef: 'p_recipe',
            RestAPI: 'recipe',
            GraphQL: 'recipe',
            custom: 'recipe',
        },
        broker: {
            frontend: 'broker',
            backend: 'broker',
            database: 'broker',
            pretty: 'Broker',
            component: 'Broker',
            kebab: 'broker',
            sqlFunctionRef: 'p_broker',
            RestAPI: 'broker',
            GraphQL: 'broker',
            custom: 'broker',
        },
        brokerRole: {
            frontend: 'brokerRole',
            backend: 'broker_role',
            database: 'broker_role',
            pretty: 'Broker Role',
            component: 'BrokerRole',
            kebab: 'broker-role',
            sqlFunctionRef: 'p_broker_role',
            RestAPI: 'brokerRole',
            GraphQL: 'brokerRole',
            custom: 'brokerRole',
        },
        required: {
            frontend: 'required',
            backend: 'required',
            database: 'required',
            pretty: 'Required',
            component: 'Required',
            kebab: 'required',
            sqlFunctionRef: 'p_required',
            RestAPI: 'required',
            GraphQL: 'required',
            custom: 'required',
        },
        brokerReference: {
            frontend: 'brokerReference',
            backend: 'broker_reference',
            database: 'ref_broker',
            pretty: 'Broker Reference',
            component: 'BrokerReference',
            kebab: 'brokerReference',
            sqlFunctionRef: 'p_ref_broker',
            RestAPI: 'brokerReference',
            GraphQL: 'brokerReference',
            custom: 'brokerReference',
        },
        recipeReference: {
            frontend: 'recipeReference',
            backend: 'recipe_reference',
            database: 'ref_recipe',
            pretty: 'Recipe Reference',
            component: 'RecipeReference',
            kebab: 'recipeReference',
            sqlFunctionRef: 'p_ref_recipe',
            RestAPI: 'recipeReference',
            GraphQL: 'recipeReference',
            custom: 'recipeReference',
        },
    },
    recipeDisplay: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        recipe: {
            frontend: 'recipe',
            backend: 'recipe',
            database: 'recipe',
            pretty: 'Recipe',
            component: 'Recipe',
            kebab: 'recipe',
            sqlFunctionRef: 'p_recipe',
            RestAPI: 'recipe',
            GraphQL: 'recipe',
            custom: 'recipe',
        },
        display: {
            frontend: 'display',
            backend: 'display',
            database: 'display',
            pretty: 'Display',
            component: 'Display',
            kebab: 'display',
            sqlFunctionRef: 'p_display',
            RestAPI: 'display',
            GraphQL: 'display',
            custom: 'display',
        },
        priority: {
            frontend: 'priority',
            backend: 'priority',
            database: 'priority',
            pretty: 'Priority',
            component: 'Priority',
            kebab: 'priority',
            sqlFunctionRef: 'p_priority',
            RestAPI: 'priority',
            GraphQL: 'priority',
            custom: 'priority',
        },
        displaySettings: {
            frontend: 'displaySettings',
            backend: 'display_settings',
            database: 'display_settings',
            pretty: 'Display Settings',
            component: 'DisplaySettings',
            kebab: 'display-settings',
            sqlFunctionRef: 'p_display_settings',
            RestAPI: 'displaySettings',
            GraphQL: 'displaySettings',
            custom: 'displaySettings',
        },
        displayOptionReference: {
            frontend: 'displayOptionReference',
            backend: 'display_option_reference',
            database: 'ref_display_option',
            pretty: 'Display Option Reference',
            component: 'DisplayOptionReference',
            kebab: 'display-optionReference',
            sqlFunctionRef: 'p_ref_display_option',
            RestAPI: 'displayOptionReference',
            GraphQL: 'displayOptionReference',
            custom: 'displayOptionReference',
        },
        recipeReference: {
            frontend: 'recipeReference',
            backend: 'recipe_reference',
            database: 'ref_recipe',
            pretty: 'Recipe Reference',
            component: 'RecipeReference',
            kebab: 'recipeReference',
            sqlFunctionRef: 'p_ref_recipe',
            RestAPI: 'recipeReference',
            GraphQL: 'recipeReference',
            custom: 'recipeReference',
        },
    },
    recipeFunction: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        recipe: {
            frontend: 'recipe',
            backend: 'recipe',
            database: 'recipe',
            pretty: 'Recipe',
            component: 'Recipe',
            kebab: 'recipe',
            sqlFunctionRef: 'p_recipe',
            RestAPI: 'recipe',
            GraphQL: 'recipe',
            custom: 'recipe',
        },
        function: {
            frontend: 'function',
            backend: 'function',
            database: 'function',
            pretty: 'Function',
            component: 'Function',
            kebab: 'function',
            sqlFunctionRef: 'p_function',
            RestAPI: 'function',
            GraphQL: 'function',
            custom: 'function',
        },
        role: {
            frontend: 'role',
            backend: 'role',
            database: 'role',
            pretty: 'Role',
            component: 'Role',
            kebab: 'role',
            sqlFunctionRef: 'p_role',
            RestAPI: 'role',
            GraphQL: 'role',
            custom: 'role',
        },
        params: {
            frontend: 'params',
            backend: 'params',
            database: 'params',
            pretty: 'Params',
            component: 'Params',
            kebab: 'params',
            sqlFunctionRef: 'p_params',
            RestAPI: 'params',
            GraphQL: 'params',
            custom: 'params',
        },
        systemFunctionReference: {
            frontend: 'systemFunctionReference',
            backend: 'system_function_reference',
            database: 'ref_system_function',
            pretty: 'System Function Reference',
            component: 'SystemFunctionReference',
            kebab: 'system-functionReference',
            sqlFunctionRef: 'p_ref_system_function',
            RestAPI: 'systemFunctionReference',
            GraphQL: 'systemFunctionReference',
            custom: 'systemFunctionReference',
        },
        recipeReference: {
            frontend: 'recipeReference',
            backend: 'recipe_reference',
            database: 'ref_recipe',
            pretty: 'Recipe Reference',
            component: 'RecipeReference',
            kebab: 'recipeReference',
            sqlFunctionRef: 'p_ref_recipe',
            RestAPI: 'recipeReference',
            GraphQL: 'recipeReference',
            custom: 'recipeReference',
        },
    },
    recipeMessage: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        messageId: {
            frontend: 'messageId',
            backend: 'message_id',
            database: 'message_id',
            pretty: 'Message Id',
            component: 'MessageId',
            kebab: 'message-id',
            sqlFunctionRef: 'p_message_id',
            RestAPI: 'messageId',
            GraphQL: 'messageId',
            custom: 'messageId',
        },
        recipeId: {
            frontend: 'recipeId',
            backend: 'recipe_id',
            database: 'recipe_id',
            pretty: 'Recipe Id',
            component: 'RecipeId',
            kebab: 'recipe-id',
            sqlFunctionRef: 'p_recipe_id',
            RestAPI: 'recipeId',
            GraphQL: 'recipeId',
            custom: 'recipeId',
        },
        order: {
            frontend: 'order',
            backend: 'order',
            database: 'order',
            pretty: 'Order',
            component: 'Order',
            kebab: 'order',
            sqlFunctionRef: 'p_order',
            RestAPI: 'order',
            GraphQL: 'order',
            custom: 'order',
        },
        messageTemplateReference: {
            frontend: 'messageTemplateReference',
            backend: 'message_template_reference',
            database: 'ref_message_template',
            pretty: 'Message Template Reference',
            component: 'MessageTemplateReference',
            kebab: 'message-templateReference',
            sqlFunctionRef: 'p_ref_message_template',
            RestAPI: 'messageTemplateReference',
            GraphQL: 'messageTemplateReference',
            custom: 'messageTemplateReference',
        },
        recipeReference: {
            frontend: 'recipeReference',
            backend: 'recipe_reference',
            database: 'ref_recipe',
            pretty: 'Recipe Reference',
            component: 'RecipeReference',
            kebab: 'recipeReference',
            sqlFunctionRef: 'p_ref_recipe',
            RestAPI: 'recipeReference',
            GraphQL: 'recipeReference',
            custom: 'recipeReference',
        },
    },
    recipeModel: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        recipe: {
            frontend: 'recipe',
            backend: 'recipe',
            database: 'recipe',
            pretty: 'Recipe',
            component: 'Recipe',
            kebab: 'recipe',
            sqlFunctionRef: 'p_recipe',
            RestAPI: 'recipe',
            GraphQL: 'recipe',
            custom: 'recipe',
        },
        aiModel: {
            frontend: 'aiModel',
            backend: 'ai_model',
            database: 'ai_model',
            pretty: 'Ai Model',
            component: 'AiModel',
            kebab: 'ai-model',
            sqlFunctionRef: 'p_ai_model',
            RestAPI: 'aiModel',
            GraphQL: 'aiModel',
            custom: 'aiModel',
        },
        role: {
            frontend: 'role',
            backend: 'role',
            database: 'role',
            pretty: 'Role',
            component: 'Role',
            kebab: 'role',
            sqlFunctionRef: 'p_role',
            RestAPI: 'role',
            GraphQL: 'role',
            custom: 'role',
        },
        priority: {
            frontend: 'priority',
            backend: 'priority',
            database: 'priority',
            pretty: 'Priority',
            component: 'Priority',
            kebab: 'priority',
            sqlFunctionRef: 'p_priority',
            RestAPI: 'priority',
            GraphQL: 'priority',
            custom: 'priority',
        },
        aiModelReference: {
            frontend: 'aiModelReference',
            backend: 'ai_model_reference',
            database: 'ref_ai_model',
            pretty: 'Ai Model Reference',
            component: 'AiModelReference',
            kebab: 'ai-modelReference',
            sqlFunctionRef: 'p_ref_ai_model',
            RestAPI: 'aiModelReference',
            GraphQL: 'aiModelReference',
            custom: 'aiModelReference',
        },
        recipeReference: {
            frontend: 'recipeReference',
            backend: 'recipe_reference',
            database: 'ref_recipe',
            pretty: 'Recipe Reference',
            component: 'RecipeReference',
            kebab: 'recipeReference',
            sqlFunctionRef: 'p_ref_recipe',
            RestAPI: 'recipeReference',
            GraphQL: 'recipeReference',
            custom: 'recipeReference',
        },
    },
    recipeProcessor: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        recipe: {
            frontend: 'recipe',
            backend: 'recipe',
            database: 'recipe',
            pretty: 'Recipe',
            component: 'Recipe',
            kebab: 'recipe',
            sqlFunctionRef: 'p_recipe',
            RestAPI: 'recipe',
            GraphQL: 'recipe',
            custom: 'recipe',
        },
        processor: {
            frontend: 'processor',
            backend: 'processor',
            database: 'processor',
            pretty: 'Processor',
            component: 'Processor',
            kebab: 'processor',
            sqlFunctionRef: 'p_processor',
            RestAPI: 'processor',
            GraphQL: 'processor',
            custom: 'processor',
        },
        params: {
            frontend: 'params',
            backend: 'params',
            database: 'params',
            pretty: 'Params',
            component: 'Params',
            kebab: 'params',
            sqlFunctionRef: 'p_params',
            RestAPI: 'params',
            GraphQL: 'params',
            custom: 'params',
        },
        processorReference: {
            frontend: 'processorReference',
            backend: 'processor_reference',
            database: 'ref_processor',
            pretty: 'Processor Reference',
            component: 'ProcessorReference',
            kebab: 'processorReference',
            sqlFunctionRef: 'p_ref_processor',
            RestAPI: 'processorReference',
            GraphQL: 'processorReference',
            custom: 'processorReference',
        },
        recipeReference: {
            frontend: 'recipeReference',
            backend: 'recipe_reference',
            database: 'ref_recipe',
            pretty: 'Recipe Reference',
            component: 'RecipeReference',
            kebab: 'recipeReference',
            sqlFunctionRef: 'p_ref_recipe',
            RestAPI: 'recipeReference',
            GraphQL: 'recipeReference',
            custom: 'recipeReference',
        },
    },
    recipeTool: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        recipe: {
            frontend: 'recipe',
            backend: 'recipe',
            database: 'recipe',
            pretty: 'Recipe',
            component: 'Recipe',
            kebab: 'recipe',
            sqlFunctionRef: 'p_recipe',
            RestAPI: 'recipe',
            GraphQL: 'recipe',
            custom: 'recipe',
        },
        tool: {
            frontend: 'tool',
            backend: 'tool',
            database: 'tool',
            pretty: 'Tool',
            component: 'Tool',
            kebab: 'tool',
            sqlFunctionRef: 'p_tool',
            RestAPI: 'tool',
            GraphQL: 'tool',
            custom: 'tool',
        },
        params: {
            frontend: 'params',
            backend: 'params',
            database: 'params',
            pretty: 'Params',
            component: 'Params',
            kebab: 'params',
            sqlFunctionRef: 'p_params',
            RestAPI: 'params',
            GraphQL: 'params',
            custom: 'params',
        },
        recipeReference: {
            frontend: 'recipeReference',
            backend: 'recipe_reference',
            database: 'ref_recipe',
            pretty: 'Recipe Reference',
            component: 'RecipeReference',
            kebab: 'recipeReference',
            sqlFunctionRef: 'p_ref_recipe',
            RestAPI: 'recipeReference',
            GraphQL: 'recipeReference',
            custom: 'recipeReference',
        },
        toolReference: {
            frontend: 'toolReference',
            backend: 'tool_reference',
            database: 'ref_tool',
            pretty: 'Tool Reference',
            component: 'ToolReference',
            kebab: 'toolReference',
            sqlFunctionRef: 'p_ref_tool',
            RestAPI: 'toolReference',
            GraphQL: 'toolReference',
            custom: 'toolReference',
        },
    },
    registeredFunction: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        modulePath: {
            frontend: 'modulePath',
            backend: 'module_path',
            database: 'module_path',
            pretty: 'Module Path',
            component: 'ModulePath',
            kebab: 'module-path',
            sqlFunctionRef: 'p_module_path',
            RestAPI: 'modulePath',
            GraphQL: 'modulePath',
            custom: 'modulePath',
        },
        className: {
            frontend: 'className',
            backend: 'class_name',
            database: 'class_name',
            pretty: 'Class Name',
            component: 'ClassName',
            kebab: 'class-name',
            sqlFunctionRef: 'p_class_name',
            RestAPI: 'className',
            GraphQL: 'className',
            custom: 'className',
        },
        description: {
            frontend: 'description',
            backend: 'description',
            database: 'description',
            pretty: 'Description',
            component: 'Description',
            kebab: 'description',
            sqlFunctionRef: 'p_description',
            RestAPI: 'description',
            GraphQL: 'description',
            custom: 'description',
        },
        returnBroker: {
            frontend: 'returnBroker',
            backend: 'return_broker',
            database: 'return_broker',
            pretty: 'Return Broker',
            component: 'ReturnBroker',
            kebab: 'return-broker',
            sqlFunctionRef: 'p_return_broker',
            RestAPI: 'returnBroker',
            GraphQL: 'returnBroker',
            custom: 'returnBroker',
        },
        brokerReference: {
            frontend: 'brokerReference',
            backend: 'broker_reference',
            database: 'ref_broker',
            pretty: 'Broker Reference',
            component: 'BrokerReference',
            kebab: 'brokerReference',
            sqlFunctionRef: 'p_ref_broker',
            RestAPI: 'brokerReference',
            GraphQL: 'brokerReference',
            custom: 'brokerReference',
        },
        systemFunctionInverse: {
            frontend: 'systemFunctionInverse',
            backend: 'system_function_Inverse',
            database: 'ifk_system_function',
            pretty: 'System Function Inverse',
            component: 'SystemFunctionInverse',
            kebab: 'system-functionInverse',
            sqlFunctionRef: 'p_ifk_system_function',
            RestAPI: 'systemFunctionInverse',
            GraphQL: 'systemFunctionInverse',
            custom: 'systemFunctionInverse',
        },
        argInverse: {
            frontend: 'argInverse',
            backend: 'arg_Inverse',
            database: 'ifk_arg',
            pretty: 'Arg Inverse',
            component: 'ArgInverse',
            kebab: 'argInverse',
            sqlFunctionRef: 'p_ifk_arg',
            RestAPI: 'argInverse',
            GraphQL: 'argInverse',
            custom: 'argInverse',
        },
    },
    systemFunction: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        description: {
            frontend: 'description',
            backend: 'description',
            database: 'description',
            pretty: 'Description',
            component: 'Description',
            kebab: 'description',
            sqlFunctionRef: 'p_description',
            RestAPI: 'description',
            GraphQL: 'description',
            custom: 'description',
        },
        sample: {
            frontend: 'sample',
            backend: 'sample',
            database: 'sample',
            pretty: 'Sample',
            component: 'Sample',
            kebab: 'sample',
            sqlFunctionRef: 'p_sample',
            RestAPI: 'sample',
            GraphQL: 'sample',
            custom: 'sample',
        },
        inputParams: {
            frontend: 'inputParams',
            backend: 'input_params',
            database: 'input_params',
            pretty: 'Input Params',
            component: 'InputParams',
            kebab: 'input-params',
            sqlFunctionRef: 'p_input_params',
            RestAPI: 'inputParams',
            GraphQL: 'inputParams',
            custom: 'inputParams',
        },
        outputOptions: {
            frontend: 'outputOptions',
            backend: 'output_options',
            database: 'output_options',
            pretty: 'Output Options',
            component: 'OutputOptions',
            kebab: 'output-options',
            sqlFunctionRef: 'p_output_options',
            RestAPI: 'outputOptions',
            GraphQL: 'outputOptions',
            custom: 'outputOptions',
        },
        rfId: {
            frontend: 'rfId',
            backend: 'rf_id',
            database: 'rf_id',
            pretty: 'Rf Id',
            component: 'RfId',
            kebab: 'rf-id',
            sqlFunctionRef: 'p_rf_id',
            RestAPI: 'rfId',
            GraphQL: 'rfId',
            custom: 'rfId',
        },
        registeredFunctionReference: {
            frontend: 'registeredFunctionReference',
            backend: 'registered_function_reference',
            database: 'ref_registered_function',
            pretty: 'Registered Function Reference',
            component: 'RegisteredFunctionReference',
            kebab: 'registered-functionReference',
            sqlFunctionRef: 'p_ref_registered_function',
            RestAPI: 'registeredFunctionReference',
            GraphQL: 'registeredFunctionReference',
            custom: 'registeredFunctionReference',
        },
        toolInverse: {
            frontend: 'toolInverse',
            backend: 'tool_Inverse',
            database: 'ifk_tool',
            pretty: 'Tool Inverse',
            component: 'ToolInverse',
            kebab: 'toolInverse',
            sqlFunctionRef: 'p_ifk_tool',
            RestAPI: 'toolInverse',
            GraphQL: 'toolInverse',
            custom: 'toolInverse',
        },
        recipeFunctionInverse: {
            frontend: 'recipeFunctionInverse',
            backend: 'recipe_function_Inverse',
            database: 'ifk_recipe_function',
            pretty: 'Recipe Function Inverse',
            component: 'RecipeFunctionInverse',
            kebab: 'recipe-functionInverse',
            sqlFunctionRef: 'p_ifk_recipe_function',
            RestAPI: 'recipeFunctionInverse',
            GraphQL: 'recipeFunctionInverse',
            custom: 'recipeFunctionInverse',
        },
    },
    tool: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        source: {
            frontend: 'source',
            backend: 'source',
            database: 'source',
            pretty: 'Source',
            component: 'Source',
            kebab: 'source',
            sqlFunctionRef: 'p_source',
            RestAPI: 'source',
            GraphQL: 'source',
            custom: 'source',
        },
        description: {
            frontend: 'description',
            backend: 'description',
            database: 'description',
            pretty: 'Description',
            component: 'Description',
            kebab: 'description',
            sqlFunctionRef: 'p_description',
            RestAPI: 'description',
            GraphQL: 'description',
            custom: 'description',
        },
        parameters: {
            frontend: 'parameters',
            backend: 'parameters',
            database: 'parameters',
            pretty: 'Parameters',
            component: 'Parameters',
            kebab: 'parameters',
            sqlFunctionRef: 'p_parameters',
            RestAPI: 'parameters',
            GraphQL: 'parameters',
            custom: 'parameters',
        },
        requiredArgs: {
            frontend: 'requiredArgs',
            backend: 'required_args',
            database: 'required_args',
            pretty: 'Required Args',
            component: 'RequiredArgs',
            kebab: 'required-args',
            sqlFunctionRef: 'p_required_args',
            RestAPI: 'requiredArgs',
            GraphQL: 'requiredArgs',
            custom: 'requiredArgs',
        },
        systemFunction: {
            frontend: 'systemFunction',
            backend: 'system_function',
            database: 'system_function',
            pretty: 'System Function',
            component: 'SystemFunction',
            kebab: 'system-function',
            sqlFunctionRef: 'p_system_function',
            RestAPI: 'systemFunction',
            GraphQL: 'systemFunction',
            custom: 'systemFunction',
        },
        additionalParams: {
            frontend: 'additionalParams',
            backend: 'additional_params',
            database: 'additional_params',
            pretty: 'Additional Params',
            component: 'AdditionalParams',
            kebab: 'additional-params',
            sqlFunctionRef: 'p_additional_params',
            RestAPI: 'additionalParams',
            GraphQL: 'additionalParams',
            custom: 'additionalParams',
        },
        systemFunctionReference: {
            frontend: 'systemFunctionReference',
            backend: 'system_function_reference',
            database: 'ref_system_function',
            pretty: 'System Function Reference',
            component: 'SystemFunctionReference',
            kebab: 'system-functionReference',
            sqlFunctionRef: 'p_ref_system_function',
            RestAPI: 'systemFunctionReference',
            GraphQL: 'systemFunctionReference',
            custom: 'systemFunctionReference',
        },
        recipeToolInverse: {
            frontend: 'recipeToolInverse',
            backend: 'recipe_tool_Inverse',
            database: 'ifk_recipe_tool',
            pretty: 'Recipe Tool Inverse',
            component: 'RecipeToolInverse',
            kebab: 'recipe-toolInverse',
            sqlFunctionRef: 'p_ifk_recipe_tool',
            RestAPI: 'recipeToolInverse',
            GraphQL: 'recipeToolInverse',
            custom: 'recipeToolInverse',
        },
    },
    transformer: {
        id: {
            frontend: 'id',
            backend: 'id',
            database: 'id',
            pretty: 'Id',
            component: 'Id',
            kebab: 'id',
            sqlFunctionRef: 'p_id',
            RestAPI: 'id',
            GraphQL: 'id',
            custom: 'id',
        },
        name: {
            frontend: 'name',
            backend: 'name',
            database: 'name',
            pretty: 'Name',
            component: 'Name',
            kebab: 'name',
            sqlFunctionRef: 'p_name',
            RestAPI: 'name',
            GraphQL: 'name',
            custom: 'name',
        },
        inputParams: {
            frontend: 'inputParams',
            backend: 'input_params',
            database: 'input_params',
            pretty: 'Input Params',
            component: 'InputParams',
            kebab: 'input-params',
            sqlFunctionRef: 'p_input_params',
            RestAPI: 'inputParams',
            GraphQL: 'inputParams',
            custom: 'inputParams',
        },
        outputParams: {
            frontend: 'outputParams',
            backend: 'output_params',
            database: 'output_params',
            pretty: 'Output Params',
            component: 'OutputParams',
            kebab: 'output-params',
            sqlFunctionRef: 'p_output_params',
            RestAPI: 'outputParams',
            GraphQL: 'outputParams',
            custom: 'outputParams',
        },
        actionInverse: {
            frontend: 'actionInverse',
            backend: 'action_Inverse',
            database: 'ifk_action',
            pretty: 'Action Inverse',
            component: 'ActionInverse',
            kebab: 'actionInverse',
            sqlFunctionRef: 'p_ifk_action',
            RestAPI: 'actionInverse',
            GraphQL: 'actionInverse',
            custom: 'actionInverse',
        },
    },
    userPreferences: {
        userId: {
            frontend: 'userId',
            backend: 'user_id',
            database: 'user_id',
            pretty: 'User Id',
            component: 'UserId',
            kebab: 'user-id',
            sqlFunctionRef: 'p_user_id',
            RestAPI: 'userId',
            GraphQL: 'userId',
            custom: 'userId',
        },
        preferences: {
            frontend: 'preferences',
            backend: 'preferences',
            database: 'preferences',
            pretty: 'Preferences',
            component: 'Preferences',
            kebab: 'preferences',
            sqlFunctionRef: 'p_preferences',
            RestAPI: 'preferences',
            GraphQL: 'preferences',
            custom: 'preferences',
        },
        createdAt: {
            frontend: 'createdAt',
            backend: 'created_at',
            database: 'created_at',
            pretty: 'Created At',
            component: 'CreatedAt',
            kebab: 'created-at',
            sqlFunctionRef: 'p_created_at',
            RestAPI: 'createdAt',
            GraphQL: 'createdAt',
            custom: 'createdAt',
        },
        updatedAt: {
            frontend: 'updatedAt',
            backend: 'updated_at',
            database: 'updated_at',
            pretty: 'Updated At',
            component: 'UpdatedAt',
            kebab: 'updated-at',
            sqlFunctionRef: 'p_updated_at',
            RestAPI: 'updatedAt',
            GraphQL: 'updatedAt',
            custom: 'updatedAt',
        },
    },
};

export const viewNameLookup: Record<string, string> = {
    ViewRegisteredFunction: 'viewRegisteredFunction',
    p_view_registered_function: 'viewRegisteredFunction',
    'View Registered Function': 'viewRegisteredFunction',
    viewRegisteredFunction: 'viewRegisteredFunction',
    view_registered_function: 'viewRegisteredFunction',
    'view-registered-function': 'viewRegisteredFunction',
    p_view_registered_function_all_rels: 'viewRegisteredFunctionAllRels',
    viewRegisteredFunctionAllRels: 'viewRegisteredFunctionAllRels',
    ViewRegisteredFunctionAllRels: 'viewRegisteredFunctionAllRels',
    'View Registered Function All Rels': 'viewRegisteredFunctionAllRels',
    view_registered_function_all_rels: 'viewRegisteredFunctionAllRels',
    'view-registered-function-all-rels': 'viewRegisteredFunctionAllRels',
};
