// File: lib/initialTableSchemas.ts

import { AutomationEntity, TypeBrand } from '@/types/entityTypes';

export const action = {
    schemaType: 'table' as const,
    entityName: 'action',
    uniqueTableId: 'supabase_automation_matrix:public:action',
    uniqueEntityId: 'supabase_automation_matrix:action',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'm2mAndFk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:action:id',
            uniqueFieldId: 'supabase_automation_matrix:action:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'action',
            databaseTable: 'action',
            foreignKeyReference: null,
            description: '"Id" field for action. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:action:name',
            uniqueFieldId: 'supabase_automation_matrix:action:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: 255,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 3,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'action',
            databaseTable: 'action',
            foreignKeyReference: null,
            description: '"Name" field for action. This is a required field. Your entry must be an string data type. Maximum Length: 255',
        },
        matrix: {
            fieldNameFormats: {
                frontend: 'matrix',
                backend: 'matrix',
                database: 'matrix',
                pretty: 'Matrix',
                component: 'Matrix',
                kebab: 'matrix',
                sqlFunctionRef: 'p_matrix',
                RestAPI: 'matrix',
                GraphQL: 'matrix',
                custom: 'matrix',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:action:matrix',
            uniqueFieldId: 'supabase_automation_matrix:action:matrix',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'action',
            databaseTable: 'action',
            foreignKeyReference: { table: 'automation_matrix', column: 'id', entity: 'automationMatrix', field: 'id' },
            description:
                '"Matrix" field for action. This is a required field. Your entry must be an uuid data type. This field is a reference to a automationMatrix.',
        },
        transformer: {
            fieldNameFormats: {
                frontend: 'transformer',
                backend: 'transformer',
                database: 'transformer',
                pretty: 'Transformer',
                component: 'Transformer',
                kebab: 'transformer',
                sqlFunctionRef: 'p_transformer',
                RestAPI: 'transformer',
                GraphQL: 'transformer',
                custom: 'transformer',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:action:transformer',
            uniqueFieldId: 'supabase_automation_matrix:action:transformer',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'action',
            databaseTable: 'action',
            foreignKeyReference: { table: 'transformer', column: 'id', entity: 'transformer', field: 'id' },
            description:
                '"Transformer" field for action. This is an optional field. Your entry must be an uuid data type. This field is a reference to a transformer.',
        },
        nodeType: {
            fieldNameFormats: {
                frontend: 'nodeType',
                backend: 'node_type',
                database: 'node_type',
                pretty: 'Node Type',
                component: 'NodeType',
                kebab: 'node-type',
                sqlFunctionRef: 'p_node_type',
                RestAPI: 'nodeType',
                GraphQL: 'nodeType',
                custom: 'nodeType',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:action:node_type',
            uniqueFieldId: 'supabase_automation_matrix:action:nodeType',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: 50,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'action',
            databaseTable: 'action',
            foreignKeyReference: null,
            description: '"Node Type" field for action. This is a required field. Your entry must be an string data type. Maximum Length: 50',
        },
        referenceId: {
            fieldNameFormats: {
                frontend: 'referenceId',
                backend: 'reference_id',
                database: 'reference_id',
                pretty: 'Reference Id',
                component: 'ReferenceId',
                kebab: 'reference-id',
                sqlFunctionRef: 'p_reference_id',
                RestAPI: 'referenceId',
                GraphQL: 'referenceId',
                custom: 'referenceId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:action:reference_id',
            uniqueFieldId: 'supabase_automation_matrix:action:referenceId',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'action',
            databaseTable: 'action',
            foreignKeyReference: null,
            description: '"Reference Id" field for action. This is a required field. Your entry must be an uuid data type.',
        },
        automationMatrixReference: {
            fieldNameFormats: {
                frontend: 'automationMatrixReference',
                backend: 'automation_matrix_reference',
                database: 'ref_automation_matrix',
                pretty: 'Automation Matrix Reference',
                component: 'AutomationMatrixReference',
                kebab: 'automation-matrixReference',
                sqlFunctionRef: 'p_ref_automation_matrix',
                RestAPI: 'automationMatrixReference',
                GraphQL: 'automationMatrixReference',
                custom: 'automationMatrixReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:automation_matrix:id',
            uniqueFieldId: 'supabase_automation_matrix:automationMatrix:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'automationMatrix'>[]>,
            entityName: 'automationMatrix',
            databaseTable: 'automation_matrix',
            relationshipMap: { automation_matrix: 'id', transformer: 'id' },
        },
        transformerReference: {
            fieldNameFormats: {
                frontend: 'transformerReference',
                backend: 'transformer_reference',
                database: 'ref_transformer',
                pretty: 'Transformer Reference',
                component: 'TransformerReference',
                kebab: 'transformerReference',
                sqlFunctionRef: 'p_ref_transformer',
                RestAPI: 'transformerReference',
                GraphQL: 'transformerReference',
                custom: 'transformerReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:transformer:id',
            uniqueFieldId: 'supabase_automation_matrix:transformer:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'transformer'>[]>,
            entityName: 'transformer',
            databaseTable: 'transformer',
            relationshipMap: { automation_matrix: 'id', transformer: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'action',
        backend: 'action',
        database: 'action',
        pretty: 'Action',
        component: 'Action',
        kebab: 'action',
        sqlFunctionRef: 'p_action',
        RestAPI: 'action',
        GraphQL: 'action',
        custom: 'action',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'matrix', relatedTable: 'automation_matrix', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'transformer', relatedTable: 'transformer', relatedColumn: 'id', junctionTable: null },
    ],
} as const;

export const aiAgent = {
    schemaType: 'table' as const,
    entityName: 'aiAgent',
    uniqueTableId: 'supabase_automation_matrix:public:ai_agent',
    uniqueEntityId: 'supabase_automation_matrix:aiAgent',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'm2mAndFk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_agent:id',
            uniqueFieldId: 'supabase_automation_matrix:aiAgent:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiAgent',
            databaseTable: 'ai_agent',
            foreignKeyReference: null,
            description: '"Id" field for aiAgent. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_agent:name',
            uniqueFieldId: 'supabase_automation_matrix:aiAgent:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiAgent',
            databaseTable: 'ai_agent',
            foreignKeyReference: null,
            description: '"Name" field for aiAgent. This is a required field. Your entry must be an string data type. This must be a unique value.',
        },
        recipeId: {
            fieldNameFormats: {
                frontend: 'recipeId',
                backend: 'recipe_id',
                database: 'recipe_id',
                pretty: 'Recipe Id',
                component: 'RecipeId',
                kebab: 'recipe-id',
                sqlFunctionRef: 'p_recipe_id',
                RestAPI: 'recipeId',
                GraphQL: 'recipeId',
                custom: 'recipeId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_agent:recipe_id',
            uniqueFieldId: 'supabase_automation_matrix:aiAgent:recipeId',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiAgent',
            databaseTable: 'ai_agent',
            foreignKeyReference: { table: 'recipe', column: 'id', entity: 'recipe', field: 'id' },
            description:
                '"Recipe Id" field for aiAgent. This is an optional field. Your entry must be an uuid data type. This field is a reference to a recipe.',
        },
        aiSettingsId: {
            fieldNameFormats: {
                frontend: 'aiSettingsId',
                backend: 'ai_settings_id',
                database: 'ai_settings_id',
                pretty: 'Ai Settings Id',
                component: 'AiSettingsId',
                kebab: 'ai-settings-id',
                sqlFunctionRef: 'p_ai_settings_id',
                RestAPI: 'aiSettingsId',
                GraphQL: 'aiSettingsId',
                custom: 'aiSettingsId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_agent:ai_settings_id',
            uniqueFieldId: 'supabase_automation_matrix:aiAgent:aiSettingsId',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiAgent',
            databaseTable: 'ai_agent',
            foreignKeyReference: { table: 'ai_settings', column: 'id', entity: 'aiSettings', field: 'id' },
            description:
                '"Ai Settings Id" field for aiAgent. This is an optional field. Your entry must be an uuid data type. This field is a reference to a aiSettings.',
        },
        systemMessageOverride: {
            fieldNameFormats: {
                frontend: 'systemMessageOverride',
                backend: 'system_message_override',
                database: 'system_message_override',
                pretty: 'System Message Override',
                component: 'SystemMessageOverride',
                kebab: 'system-message-override',
                sqlFunctionRef: 'p_system_message_override',
                RestAPI: 'systemMessageOverride',
                GraphQL: 'systemMessageOverride',
                custom: 'systemMessageOverride',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_agent:system_message_override',
            uniqueFieldId: 'supabase_automation_matrix:aiAgent:systemMessageOverride',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiAgent',
            databaseTable: 'ai_agent',
            foreignKeyReference: null,
            description: '"System Message Override" field for aiAgent. This is an optional field. Your entry must be an string data type.',
        },
        aiSettingsReference: {
            fieldNameFormats: {
                frontend: 'aiSettingsReference',
                backend: 'ai_settings_reference',
                database: 'ref_ai_settings',
                pretty: 'Ai Settings Reference',
                component: 'AiSettingsReference',
                kebab: 'ai-settingsReference',
                sqlFunctionRef: 'p_ref_ai_settings',
                RestAPI: 'aiSettingsReference',
                GraphQL: 'aiSettingsReference',
                custom: 'aiSettingsReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:ai_settings:id',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiSettings'>[]>,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            relationshipMap: { ai_settings: 'id', recipe: 'id' },
        },
        recipeReference: {
            fieldNameFormats: {
                frontend: 'recipeReference',
                backend: 'recipe_reference',
                database: 'ref_recipe',
                pretty: 'Recipe Reference',
                component: 'RecipeReference',
                kebab: 'recipeReference',
                sqlFunctionRef: 'p_ref_recipe',
                RestAPI: 'recipeReference',
                GraphQL: 'recipeReference',
                custom: 'recipeReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:recipe:id',
            uniqueFieldId: 'supabase_automation_matrix:recipe:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipe'>[]>,
            entityName: 'recipe',
            databaseTable: 'recipe',
            relationshipMap: { ai_settings: 'id', recipe: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'aiAgent',
        backend: 'ai_agent',
        database: 'ai_agent',
        pretty: 'Ai Agent',
        component: 'AiAgent',
        kebab: 'ai-agent',
        sqlFunctionRef: 'p_ai_agent',
        RestAPI: 'aiAgent',
        GraphQL: 'aiAgent',
        custom: 'aiAgent',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'ai_settings_id', relatedTable: 'ai_settings', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'recipe_id', relatedTable: 'recipe', relatedColumn: 'id', junctionTable: null },
    ],
} as const;

export const aiEndpoint = {
    schemaType: 'table' as const,
    entityName: 'aiEndpoint',
    uniqueTableId: 'supabase_automation_matrix:public:ai_endpoint',
    uniqueEntityId: 'supabase_automation_matrix:aiEndpoint',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'm2mAndIfk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_endpoint:id',
            uniqueFieldId: 'supabase_automation_matrix:aiEndpoint:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiEndpoint',
            databaseTable: 'ai_endpoint',
            foreignKeyReference: null,
            description: '"Id" field for aiEndpoint. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_endpoint:name',
            uniqueFieldId: 'supabase_automation_matrix:aiEndpoint:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiEndpoint',
            databaseTable: 'ai_endpoint',
            foreignKeyReference: null,
            description: '"Name" field for aiEndpoint. This is a required field. Your entry must be an string data type.',
        },
        provider: {
            fieldNameFormats: {
                frontend: 'provider',
                backend: 'provider',
                database: 'provider',
                pretty: 'Provider',
                component: 'Provider',
                kebab: 'provider',
                sqlFunctionRef: 'p_provider',
                RestAPI: 'provider',
                GraphQL: 'provider',
                custom: 'provider',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_endpoint:provider',
            uniqueFieldId: 'supabase_automation_matrix:aiEndpoint:provider',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiEndpoint',
            databaseTable: 'ai_endpoint',
            foreignKeyReference: null,
            description: '"Provider" field for aiEndpoint. This is an optional field. Your entry must be an string data type.',
        },
        description: {
            fieldNameFormats: {
                frontend: 'description',
                backend: 'description',
                database: 'description',
                pretty: 'Description',
                component: 'Description',
                kebab: 'description',
                sqlFunctionRef: 'p_description',
                RestAPI: 'description',
                GraphQL: 'description',
                custom: 'description',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_endpoint:description',
            uniqueFieldId: 'supabase_automation_matrix:aiEndpoint:description',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiEndpoint',
            databaseTable: 'ai_endpoint',
            foreignKeyReference: null,
            description: '"Description" field for aiEndpoint. This is an optional field. Your entry must be an string data type.',
        },
        additionalCost: {
            fieldNameFormats: {
                frontend: 'additionalCost',
                backend: 'additional_cost',
                database: 'additional_cost',
                pretty: 'Additional Cost',
                component: 'AdditionalCost',
                kebab: 'additional-cost',
                sqlFunctionRef: 'p_additional_cost',
                RestAPI: 'additionalCost',
                GraphQL: 'additionalCost',
                custom: 'additionalCost',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_endpoint:additional_cost',
            uniqueFieldId: 'supabase_automation_matrix:aiEndpoint:additionalCost',

            dataType: 'boolean' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'true' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'aiEndpoint',
            databaseTable: 'ai_endpoint',
            foreignKeyReference: null,
            description: '"Additional Cost" field for aiEndpoint. This is an optional field. Your entry must be an boolean data type.',
        },
        costDetails: {
            fieldNameFormats: {
                frontend: 'costDetails',
                backend: 'cost_details',
                database: 'cost_details',
                pretty: 'Cost Details',
                component: 'CostDetails',
                kebab: 'cost-details',
                sqlFunctionRef: 'p_cost_details',
                RestAPI: 'costDetails',
                GraphQL: 'costDetails',
                custom: 'costDetails',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_endpoint:cost_details',
            uniqueFieldId: 'supabase_automation_matrix:aiEndpoint:costDetails',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'aiEndpoint',
            databaseTable: 'ai_endpoint',
            foreignKeyReference: null,
            description: '"Cost Details" field for aiEndpoint. This is an optional field. Your entry must be an object data type.',
        },
        params: {
            fieldNameFormats: {
                frontend: 'params',
                backend: 'params',
                database: 'params',
                pretty: 'Params',
                component: 'Params',
                kebab: 'params',
                sqlFunctionRef: 'p_params',
                RestAPI: 'params',
                GraphQL: 'params',
                custom: 'params',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_endpoint:params',
            uniqueFieldId: 'supabase_automation_matrix:aiEndpoint:params',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'aiEndpoint',
            databaseTable: 'ai_endpoint',
            foreignKeyReference: null,
            description: '"Params" field for aiEndpoint. This is an optional field. Your entry must be an object data type.',
        },
        aiModelEndpointInverse: {
            fieldNameFormats: {
                frontend: 'aiModelEndpointInverse',
                backend: 'ai_model_endpoint_Inverse',
                database: 'ifk_ai_model_endpoint',
                pretty: 'Ai Model Endpoint Inverse',
                component: 'AiModelEndpointInverse',
                kebab: 'ai-model-endpointInverse',
                sqlFunctionRef: 'p_ifk_ai_model_endpoint',
                RestAPI: 'aiModelEndpointInverse',
                GraphQL: 'aiModelEndpointInverse',
                custom: 'aiModelEndpointInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:ai_model_endpoint',
            uniqueEntityId: 'supabase_automation_matrix:aiModelEndpoint',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiModelEndpoint'>[]>,
            entityName: 'aiModelEndpoint',
            databaseTable: 'ai_model_endpoint',
        },
        aiSettingsInverse: {
            fieldNameFormats: {
                frontend: 'aiSettingsInverse',
                backend: 'ai_settings_Inverse',
                database: 'ifk_ai_settings',
                pretty: 'Ai Settings Inverse',
                component: 'AiSettingsInverse',
                kebab: 'ai-settingsInverse',
                sqlFunctionRef: 'p_ifk_ai_settings',
                RestAPI: 'aiSettingsInverse',
                GraphQL: 'aiSettingsInverse',
                custom: 'aiSettingsInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:ai_settings',
            uniqueEntityId: 'supabase_automation_matrix:aiSettings',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiSettings'>[]>,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
        },
    },
    entityNameFormats: {
        frontend: 'aiEndpoint',
        backend: 'ai_endpoint',
        database: 'ai_endpoint',
        pretty: 'Ai Endpoint',
        component: 'AiEndpoint',
        kebab: 'ai-endpoint',
        sqlFunctionRef: 'p_ai_endpoint',
        RestAPI: 'aiEndpoint',
        GraphQL: 'aiEndpoint',
        custom: 'aiEndpoint',
    },
    relationships: [
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'ai_model_endpoint', relatedColumn: 'ai_endpoint_id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'ai_settings', relatedColumn: 'ai_endpoint', junctionTable: null },
    ],
} as const;

export const aiModel = {
    schemaType: 'table' as const,
    entityName: 'aiModel',
    uniqueTableId: 'supabase_automation_matrix:public:ai_model',
    uniqueEntityId: 'supabase_automation_matrix:aiModel',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'fkIfkAndM2M',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model:id',
            uniqueFieldId: 'supabase_automation_matrix:aiModel:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
            foreignKeyReference: null,
            description: '"Id" field for aiModel. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model:name',
            uniqueFieldId: 'supabase_automation_matrix:aiModel:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
            foreignKeyReference: null,
            description: '"Name" field for aiModel. This is a required field. Your entry must be an string data type.',
        },
        commonName: {
            fieldNameFormats: {
                frontend: 'commonName',
                backend: 'common_name',
                database: 'common_name',
                pretty: 'Common Name',
                component: 'CommonName',
                kebab: 'common-name',
                sqlFunctionRef: 'p_common_name',
                RestAPI: 'commonName',
                GraphQL: 'commonName',
                custom: 'commonName',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model:common_name',
            uniqueFieldId: 'supabase_automation_matrix:aiModel:commonName',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
            foreignKeyReference: null,
            description: '"Common Name" field for aiModel. This is an optional field. Your entry must be an string data type.',
        },
        modelClass: {
            fieldNameFormats: {
                frontend: 'modelClass',
                backend: 'model_class',
                database: 'model_class',
                pretty: 'Model Class',
                component: 'ModelClass',
                kebab: 'model-class',
                sqlFunctionRef: 'p_model_class',
                RestAPI: 'modelClass',
                GraphQL: 'modelClass',
                custom: 'modelClass',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model:model_class',
            uniqueFieldId: 'supabase_automation_matrix:aiModel:modelClass',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
            foreignKeyReference: null,
            description: '"Model Class" field for aiModel. This is a required field. Your entry must be an string data type.',
        },
        provider: {
            fieldNameFormats: {
                frontend: 'provider',
                backend: 'provider',
                database: 'provider',
                pretty: 'Provider',
                component: 'Provider',
                kebab: 'provider',
                sqlFunctionRef: 'p_provider',
                RestAPI: 'provider',
                GraphQL: 'provider',
                custom: 'provider',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model:provider',
            uniqueFieldId: 'supabase_automation_matrix:aiModel:provider',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
            foreignKeyReference: null,
            description: '"Provider" field for aiModel. This is an optional field. Your entry must be an string data type.',
        },
        endpoints: {
            fieldNameFormats: {
                frontend: 'endpoints',
                backend: 'endpoints',
                database: 'endpoints',
                pretty: 'Endpoints',
                component: 'Endpoints',
                kebab: 'endpoints',
                sqlFunctionRef: 'p_endpoints',
                RestAPI: 'endpoints',
                GraphQL: 'endpoints',
                custom: 'endpoints',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model:endpoints',
            uniqueFieldId: 'supabase_automation_matrix:aiModel:endpoints',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
            foreignKeyReference: null,
            description: '"Endpoints" field for aiModel. This is an optional field. Your entry must be an object data type.',
        },
        contextWindow: {
            fieldNameFormats: {
                frontend: 'contextWindow',
                backend: 'context_window',
                database: 'context_window',
                pretty: 'Context Window',
                component: 'ContextWindow',
                kebab: 'context-window',
                sqlFunctionRef: 'p_context_window',
                RestAPI: 'contextWindow',
                GraphQL: 'contextWindow',
                custom: 'contextWindow',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model:context_window',
            uniqueFieldId: 'supabase_automation_matrix:aiModel:contextWindow',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'bigint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
            foreignKeyReference: null,
            description: '"Context Window" field for aiModel. This is an optional field. Your entry must be an number data type.',
        },
        maxTokens: {
            fieldNameFormats: {
                frontend: 'maxTokens',
                backend: 'max_tokens',
                database: 'max_tokens',
                pretty: 'Max Tokens',
                component: 'MaxTokens',
                kebab: 'max-tokens',
                sqlFunctionRef: 'p_max_tokens',
                RestAPI: 'maxTokens',
                GraphQL: 'maxTokens',
                custom: 'maxTokens',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model:max_tokens',
            uniqueFieldId: 'supabase_automation_matrix:aiModel:maxTokens',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'bigint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
            foreignKeyReference: null,
            description: '"Max Tokens" field for aiModel. This is an optional field. Your entry must be an number data type.',
        },
        capabilities: {
            fieldNameFormats: {
                frontend: 'capabilities',
                backend: 'capabilities',
                database: 'capabilities',
                pretty: 'Capabilities',
                component: 'Capabilities',
                kebab: 'capabilities',
                sqlFunctionRef: 'p_capabilities',
                RestAPI: 'capabilities',
                GraphQL: 'capabilities',
                custom: 'capabilities',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model:capabilities',
            uniqueFieldId: 'supabase_automation_matrix:aiModel:capabilities',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
            foreignKeyReference: null,
            description: '"Capabilities" field for aiModel. This is an optional field. Your entry must be an object data type.',
        },
        controls: {
            fieldNameFormats: {
                frontend: 'controls',
                backend: 'controls',
                database: 'controls',
                pretty: 'Controls',
                component: 'Controls',
                kebab: 'controls',
                sqlFunctionRef: 'p_controls',
                RestAPI: 'controls',
                GraphQL: 'controls',
                custom: 'controls',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model:controls',
            uniqueFieldId: 'supabase_automation_matrix:aiModel:controls',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
            foreignKeyReference: null,
            description: '"Controls" field for aiModel. This is an optional field. Your entry must be an object data type.',
        },
        modelProvider: {
            fieldNameFormats: {
                frontend: 'modelProvider',
                backend: 'model_provider',
                database: 'model_provider',
                pretty: 'Model Provider',
                component: 'ModelProvider',
                kebab: 'model-provider',
                sqlFunctionRef: 'p_model_provider',
                RestAPI: 'modelProvider',
                GraphQL: 'modelProvider',
                custom: 'modelProvider',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model:model_provider',
            uniqueFieldId: 'supabase_automation_matrix:aiModel:modelProvider',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
            foreignKeyReference: { table: 'ai_provider', column: 'id', entity: 'aiProvider', field: 'id' },
            description:
                '"Model Provider" field for aiModel. This is an optional field. Your entry must be an uuid data type. This field is a reference to a aiProvider.',
        },
        aiProviderReference: {
            fieldNameFormats: {
                frontend: 'aiProviderReference',
                backend: 'ai_provider_reference',
                database: 'ref_ai_provider',
                pretty: 'Ai Provider Reference',
                component: 'AiProviderReference',
                kebab: 'ai-providerReference',
                sqlFunctionRef: 'p_ref_ai_provider',
                RestAPI: 'aiProviderReference',
                GraphQL: 'aiProviderReference',
                custom: 'aiProviderReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:ai_provider:id',
            uniqueFieldId: 'supabase_automation_matrix:aiProvider:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiProvider'>[]>,
            entityName: 'aiProvider',
            databaseTable: 'ai_provider',
            relationshipMap: { ai_provider: 'id' },
        },
        aiModelEndpointInverse: {
            fieldNameFormats: {
                frontend: 'aiModelEndpointInverse',
                backend: 'ai_model_endpoint_Inverse',
                database: 'ifk_ai_model_endpoint',
                pretty: 'Ai Model Endpoint Inverse',
                component: 'AiModelEndpointInverse',
                kebab: 'ai-model-endpointInverse',
                sqlFunctionRef: 'p_ifk_ai_model_endpoint',
                RestAPI: 'aiModelEndpointInverse',
                GraphQL: 'aiModelEndpointInverse',
                custom: 'aiModelEndpointInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:ai_model_endpoint',
            uniqueEntityId: 'supabase_automation_matrix:aiModelEndpoint',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiModelEndpoint'>[]>,
            entityName: 'aiModelEndpoint',
            databaseTable: 'ai_model_endpoint',
        },
        aiSettingsInverse: {
            fieldNameFormats: {
                frontend: 'aiSettingsInverse',
                backend: 'ai_settings_Inverse',
                database: 'ifk_ai_settings',
                pretty: 'Ai Settings Inverse',
                component: 'AiSettingsInverse',
                kebab: 'ai-settingsInverse',
                sqlFunctionRef: 'p_ifk_ai_settings',
                RestAPI: 'aiSettingsInverse',
                GraphQL: 'aiSettingsInverse',
                custom: 'aiSettingsInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:ai_settings',
            uniqueEntityId: 'supabase_automation_matrix:aiSettings',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiSettings'>[]>,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
        },
        recipeModelInverse: {
            fieldNameFormats: {
                frontend: 'recipeModelInverse',
                backend: 'recipe_model_Inverse',
                database: 'ifk_recipe_model',
                pretty: 'Recipe Model Inverse',
                component: 'RecipeModelInverse',
                kebab: 'recipe-modelInverse',
                sqlFunctionRef: 'p_ifk_recipe_model',
                RestAPI: 'recipeModelInverse',
                GraphQL: 'recipeModelInverse',
                custom: 'recipeModelInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:recipe_model',
            uniqueEntityId: 'supabase_automation_matrix:recipeModel',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipeModel'>[]>,
            entityName: 'recipeModel',
            databaseTable: 'recipe_model',
        },
    },
    entityNameFormats: {
        frontend: 'aiModel',
        backend: 'ai_model',
        database: 'ai_model',
        pretty: 'Ai Model',
        component: 'AiModel',
        kebab: 'ai-model',
        sqlFunctionRef: 'p_ai_model',
        RestAPI: 'aiModel',
        GraphQL: 'aiModel',
        custom: 'aiModel',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'model_provider', relatedTable: 'ai_provider', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'ai_model_endpoint', relatedColumn: 'ai_model_id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'ai_settings', relatedColumn: 'ai_model', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'recipe_model', relatedColumn: 'ai_model', junctionTable: null },
    ],
} as const;

export const aiModelEndpoint = {
    schemaType: 'table' as const,
    entityName: 'aiModelEndpoint',
    uniqueTableId: 'supabase_automation_matrix:public:ai_model_endpoint',
    uniqueEntityId: 'supabase_automation_matrix:aiModelEndpoint',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'id', databaseFieldName: 'id' },
    defaultFetchStrategy: 'm2mAndFk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model_endpoint:id',
            uniqueFieldId: 'supabase_automation_matrix:aiModelEndpoint:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiModelEndpoint',
            databaseTable: 'ai_model_endpoint',
            foreignKeyReference: null,
            description: '"Id" field for aiModelEndpoint. This is a required field. Your entry must be an uuid data type.',
        },
        aiModelId: {
            fieldNameFormats: {
                frontend: 'aiModelId',
                backend: 'ai_model_id',
                database: 'ai_model_id',
                pretty: 'Ai Model Id',
                component: 'AiModelId',
                kebab: 'ai-model-id',
                sqlFunctionRef: 'p_ai_model_id',
                RestAPI: 'aiModelId',
                GraphQL: 'aiModelId',
                custom: 'aiModelId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model_endpoint:ai_model_id',
            uniqueFieldId: 'supabase_automation_matrix:aiModelEndpoint:aiModelId',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiModelEndpoint',
            databaseTable: 'ai_model_endpoint',
            foreignKeyReference: { table: 'ai_model', column: 'id', entity: 'aiModel', field: 'id' },
            description:
                '"Ai Model Id" field for aiModelEndpoint. This is an optional field. Your entry must be an uuid data type. This field is a reference to a aiModel.',
        },
        aiEndpointId: {
            fieldNameFormats: {
                frontend: 'aiEndpointId',
                backend: 'ai_endpoint_id',
                database: 'ai_endpoint_id',
                pretty: 'Ai Endpoint Id',
                component: 'AiEndpointId',
                kebab: 'ai-endpoint-id',
                sqlFunctionRef: 'p_ai_endpoint_id',
                RestAPI: 'aiEndpointId',
                GraphQL: 'aiEndpointId',
                custom: 'aiEndpointId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model_endpoint:ai_endpoint_id',
            uniqueFieldId: 'supabase_automation_matrix:aiModelEndpoint:aiEndpointId',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiModelEndpoint',
            databaseTable: 'ai_model_endpoint',
            foreignKeyReference: { table: 'ai_endpoint', column: 'id', entity: 'aiEndpoint', field: 'id' },
            description:
                '"Ai Endpoint Id" field for aiModelEndpoint. This is an optional field. Your entry must be an uuid data type. This field is a reference to a aiEndpoint.',
        },
        available: {
            fieldNameFormats: {
                frontend: 'available',
                backend: 'available',
                database: 'available',
                pretty: 'Available',
                component: 'Available',
                kebab: 'available',
                sqlFunctionRef: 'p_available',
                RestAPI: 'available',
                GraphQL: 'available',
                custom: 'available',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model_endpoint:available',
            uniqueFieldId: 'supabase_automation_matrix:aiModelEndpoint:available',

            dataType: 'boolean' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: 'true' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'aiModelEndpoint',
            databaseTable: 'ai_model_endpoint',
            foreignKeyReference: null,
            description: '"Available" field for aiModelEndpoint. This is a required field. Your entry must be an boolean data type.',
        },
        endpointPriority: {
            fieldNameFormats: {
                frontend: 'endpointPriority',
                backend: 'endpoint_priority',
                database: 'endpoint_priority',
                pretty: 'Endpoint Priority',
                component: 'EndpointPriority',
                kebab: 'endpoint-priority',
                sqlFunctionRef: 'p_endpoint_priority',
                RestAPI: 'endpointPriority',
                GraphQL: 'endpointPriority',
                custom: 'endpointPriority',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model_endpoint:endpoint_priority',
            uniqueFieldId: 'supabase_automation_matrix:aiModelEndpoint:endpointPriority',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'aiModelEndpoint',
            databaseTable: 'ai_model_endpoint',
            foreignKeyReference: null,
            description: '"Endpoint Priority" field for aiModelEndpoint. This is an optional field. Your entry must be an number data type.',
        },
        configuration: {
            fieldNameFormats: {
                frontend: 'configuration',
                backend: 'configuration',
                database: 'configuration',
                pretty: 'Configuration',
                component: 'Configuration',
                kebab: 'configuration',
                sqlFunctionRef: 'p_configuration',
                RestAPI: 'configuration',
                GraphQL: 'configuration',
                custom: 'configuration',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model_endpoint:configuration',
            uniqueFieldId: 'supabase_automation_matrix:aiModelEndpoint:configuration',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '{}' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'aiModelEndpoint',
            databaseTable: 'ai_model_endpoint',
            foreignKeyReference: null,
            description: '"Configuration" field for aiModelEndpoint. This is an optional field. Your entry must be an object data type.',
        },
        notes: {
            fieldNameFormats: {
                frontend: 'notes',
                backend: 'notes',
                database: 'notes',
                pretty: 'Notes',
                component: 'Notes',
                kebab: 'notes',
                sqlFunctionRef: 'p_notes',
                RestAPI: 'notes',
                GraphQL: 'notes',
                custom: 'notes',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model_endpoint:notes',
            uniqueFieldId: 'supabase_automation_matrix:aiModelEndpoint:notes',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiModelEndpoint',
            databaseTable: 'ai_model_endpoint',
            foreignKeyReference: null,
            description: '"Notes" field for aiModelEndpoint. This is an optional field. Your entry must be an string data type.',
        },
        createdAt: {
            fieldNameFormats: {
                frontend: 'createdAt',
                backend: 'created_at',
                database: 'created_at',
                pretty: 'Created At',
                component: 'CreatedAt',
                kebab: 'created-at',
                sqlFunctionRef: 'p_created_at',
                RestAPI: 'createdAt',
                GraphQL: 'createdAt',
                custom: 'createdAt',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_model_endpoint:created_at',
            uniqueFieldId: 'supabase_automation_matrix:aiModelEndpoint:createdAt',

            dataType: 'date' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'aiModelEndpoint',
            databaseTable: 'ai_model_endpoint',
            foreignKeyReference: null,
            description: '"Created At" field for aiModelEndpoint. This is a required field. Your entry must be an date data type.',
        },
        aiEndpointReference: {
            fieldNameFormats: {
                frontend: 'aiEndpointReference',
                backend: 'ai_endpoint_reference',
                database: 'ref_ai_endpoint',
                pretty: 'Ai Endpoint Reference',
                component: 'AiEndpointReference',
                kebab: 'ai-endpointReference',
                sqlFunctionRef: 'p_ref_ai_endpoint',
                RestAPI: 'aiEndpointReference',
                GraphQL: 'aiEndpointReference',
                custom: 'aiEndpointReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:ai_endpoint:id',
            uniqueFieldId: 'supabase_automation_matrix:aiEndpoint:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiEndpoint'>[]>,
            entityName: 'aiEndpoint',
            databaseTable: 'ai_endpoint',
            relationshipMap: { ai_endpoint: 'id', ai_model: 'id' },
        },
        aiModelReference: {
            fieldNameFormats: {
                frontend: 'aiModelReference',
                backend: 'ai_model_reference',
                database: 'ref_ai_model',
                pretty: 'Ai Model Reference',
                component: 'AiModelReference',
                kebab: 'ai-modelReference',
                sqlFunctionRef: 'p_ref_ai_model',
                RestAPI: 'aiModelReference',
                GraphQL: 'aiModelReference',
                custom: 'aiModelReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:ai_model:id',
            uniqueFieldId: 'supabase_automation_matrix:aiModel:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiModel'>[]>,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
            relationshipMap: { ai_endpoint: 'id', ai_model: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'aiModelEndpoint',
        backend: 'ai_model_endpoint',
        database: 'ai_model_endpoint',
        pretty: 'Ai Model Endpoint',
        component: 'AiModelEndpoint',
        kebab: 'ai-model-endpoint',
        sqlFunctionRef: 'p_ai_model_endpoint',
        RestAPI: 'aiModelEndpoint',
        GraphQL: 'aiModelEndpoint',
        custom: 'aiModelEndpoint',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'ai_endpoint_id', relatedTable: 'ai_endpoint', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'ai_model_id', relatedTable: 'ai_model', relatedColumn: 'id', junctionTable: null },
    ],
} as const;

export const aiProvider = {
    schemaType: 'table' as const,
    entityName: 'aiProvider',
    uniqueTableId: 'supabase_automation_matrix:public:ai_provider',
    uniqueEntityId: 'supabase_automation_matrix:aiProvider',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'ifk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_provider:id',
            uniqueFieldId: 'supabase_automation_matrix:aiProvider:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiProvider',
            databaseTable: 'ai_provider',
            foreignKeyReference: null,
            description: '"Id" field for aiProvider. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_provider:name',
            uniqueFieldId: 'supabase_automation_matrix:aiProvider:name',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiProvider',
            databaseTable: 'ai_provider',
            foreignKeyReference: null,
            description: '"Name" field for aiProvider. This is an optional field. Your entry must be an string data type.',
        },
        companyDescription: {
            fieldNameFormats: {
                frontend: 'companyDescription',
                backend: 'company_description',
                database: 'company_description',
                pretty: 'Company Description',
                component: 'CompanyDescription',
                kebab: 'company-description',
                sqlFunctionRef: 'p_company_description',
                RestAPI: 'companyDescription',
                GraphQL: 'companyDescription',
                custom: 'companyDescription',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_provider:company_description',
            uniqueFieldId: 'supabase_automation_matrix:aiProvider:companyDescription',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiProvider',
            databaseTable: 'ai_provider',
            foreignKeyReference: null,
            description: '"Company Description" field for aiProvider. This is an optional field. Your entry must be an string data type.',
        },
        documentationLink: {
            fieldNameFormats: {
                frontend: 'documentationLink',
                backend: 'documentation_link',
                database: 'documentation_link',
                pretty: 'Documentation Link',
                component: 'DocumentationLink',
                kebab: 'documentation-link',
                sqlFunctionRef: 'p_documentation_link',
                RestAPI: 'documentationLink',
                GraphQL: 'documentationLink',
                custom: 'documentationLink',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_provider:documentation_link',
            uniqueFieldId: 'supabase_automation_matrix:aiProvider:documentationLink',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiProvider',
            databaseTable: 'ai_provider',
            foreignKeyReference: null,
            description: '"Documentation Link" field for aiProvider. This is an optional field. Your entry must be an string data type.',
        },
        modelsLink: {
            fieldNameFormats: {
                frontend: 'modelsLink',
                backend: 'models_link',
                database: 'models_link',
                pretty: 'Models Link',
                component: 'ModelsLink',
                kebab: 'models-link',
                sqlFunctionRef: 'p_models_link',
                RestAPI: 'modelsLink',
                GraphQL: 'modelsLink',
                custom: 'modelsLink',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_provider:models_link',
            uniqueFieldId: 'supabase_automation_matrix:aiProvider:modelsLink',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiProvider',
            databaseTable: 'ai_provider',
            foreignKeyReference: null,
            description: '"Models Link" field for aiProvider. This is an optional field. Your entry must be an string data type.',
        },
        aiSettingsInverse: {
            fieldNameFormats: {
                frontend: 'aiSettingsInverse',
                backend: 'ai_settings_Inverse',
                database: 'ifk_ai_settings',
                pretty: 'Ai Settings Inverse',
                component: 'AiSettingsInverse',
                kebab: 'ai-settingsInverse',
                sqlFunctionRef: 'p_ifk_ai_settings',
                RestAPI: 'aiSettingsInverse',
                GraphQL: 'aiSettingsInverse',
                custom: 'aiSettingsInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:ai_settings',
            uniqueEntityId: 'supabase_automation_matrix:aiSettings',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiSettings'>[]>,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
        },
        aiModelInverse: {
            fieldNameFormats: {
                frontend: 'aiModelInverse',
                backend: 'ai_model_Inverse',
                database: 'ifk_ai_model',
                pretty: 'Ai Model Inverse',
                component: 'AiModelInverse',
                kebab: 'ai-modelInverse',
                sqlFunctionRef: 'p_ifk_ai_model',
                RestAPI: 'aiModelInverse',
                GraphQL: 'aiModelInverse',
                custom: 'aiModelInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:ai_model',
            uniqueEntityId: 'supabase_automation_matrix:aiModel',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiModel'>[]>,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
        },
    },
    entityNameFormats: {
        frontend: 'aiProvider',
        backend: 'ai_provider',
        database: 'ai_provider',
        pretty: 'Ai Provider',
        component: 'AiProvider',
        kebab: 'ai-provider',
        sqlFunctionRef: 'p_ai_provider',
        RestAPI: 'aiProvider',
        GraphQL: 'aiProvider',
        custom: 'aiProvider',
    },
    relationships: [
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'ai_settings', relatedColumn: 'ai_provider', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'ai_model', relatedColumn: 'model_provider', junctionTable: null },
    ],
} as const;

export const aiSettings = {
    schemaType: 'table' as const,
    entityName: 'aiSettings',
    uniqueTableId: 'supabase_automation_matrix:public:ai_settings',
    uniqueEntityId: 'supabase_automation_matrix:aiSettings',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'presetName', databaseFieldName: 'preset_name' },
    defaultFetchStrategy: 'fkIfkAndM2M',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:id',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Id" field for aiSettings. This is a required field. Your entry must be an uuid data type.',
        },
        aiEndpoint: {
            fieldNameFormats: {
                frontend: 'aiEndpoint',
                backend: 'ai_endpoint',
                database: 'ai_endpoint',
                pretty: 'Ai Endpoint',
                component: 'AiEndpoint',
                kebab: 'ai-endpoint',
                sqlFunctionRef: 'p_ai_endpoint',
                RestAPI: 'aiEndpoint',
                GraphQL: 'aiEndpoint',
                custom: 'aiEndpoint',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:ai_endpoint',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:aiEndpoint',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '4bedf336-b274-4cdb-8202-59fd282ae6a0' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: { table: 'ai_endpoint', column: 'id', entity: 'aiEndpoint', field: 'id' },
            description:
                '"Ai Endpoint" field for aiSettings. This is an optional field. Your entry must be an uuid data type. This field is a reference to a aiEndpoint.',
        },
        aiProvider: {
            fieldNameFormats: {
                frontend: 'aiProvider',
                backend: 'ai_provider',
                database: 'ai_provider',
                pretty: 'Ai Provider',
                component: 'AiProvider',
                kebab: 'ai-provider',
                sqlFunctionRef: 'p_ai_provider',
                RestAPI: 'aiProvider',
                GraphQL: 'aiProvider',
                custom: 'aiProvider',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:ai_provider',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:aiProvider',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '99fa34b1-4c36-427f-ab73-cc56f1d5c4a0' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: { table: 'ai_provider', column: 'id', entity: 'aiProvider', field: 'id' },
            description:
                '"Ai Provider" field for aiSettings. This is an optional field. Your entry must be an uuid data type. This field is a reference to a aiProvider.',
        },
        aiModel: {
            fieldNameFormats: {
                frontend: 'aiModel',
                backend: 'ai_model',
                database: 'ai_model',
                pretty: 'Ai Model',
                component: 'AiModel',
                kebab: 'ai-model',
                sqlFunctionRef: 'p_ai_model',
                RestAPI: 'aiModel',
                GraphQL: 'aiModel',
                custom: 'aiModel',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:ai_model',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:aiModel',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'dd45b76e-f470-4765-b6c4-1a275d7860bf' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: { table: 'ai_model', column: 'id', entity: 'aiModel', field: 'id' },
            description:
                '"Ai Model" field for aiSettings. This is an optional field. Your entry must be an uuid data type. This field is a reference to a aiModel.',
        },
        temperature: {
            fieldNameFormats: {
                frontend: 'temperature',
                backend: 'temperature',
                database: 'temperature',
                pretty: 'Temperature',
                component: 'Temperature',
                kebab: 'temperature',
                sqlFunctionRef: 'p_temperature',
                RestAPI: 'temperature',
                GraphQL: 'temperature',
                custom: 'temperature',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:temperature',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:temperature',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '0.25' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'real',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Temperature" field for aiSettings. This is an optional field. Your entry must be an number data type.',
        },
        maxTokens: {
            fieldNameFormats: {
                frontend: 'maxTokens',
                backend: 'max_tokens',
                database: 'max_tokens',
                pretty: 'Max Tokens',
                component: 'MaxTokens',
                kebab: 'max-tokens',
                sqlFunctionRef: 'p_max_tokens',
                RestAPI: 'maxTokens',
                GraphQL: 'maxTokens',
                custom: 'maxTokens',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:max_tokens',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:maxTokens',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '3000' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Max Tokens" field for aiSettings. This is an optional field. Your entry must be an number data type.',
        },
        topP: {
            fieldNameFormats: {
                frontend: 'topP',
                backend: 'top_p',
                database: 'top_p',
                pretty: 'Top P',
                component: 'TopP',
                kebab: 'top-p',
                sqlFunctionRef: 'p_top_p',
                RestAPI: 'topP',
                GraphQL: 'topP',
                custom: 'topP',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:top_p',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:topP',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '1' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Top P" field for aiSettings. This is an optional field. Your entry must be an number data type.',
        },
        frequencyPenalty: {
            fieldNameFormats: {
                frontend: 'frequencyPenalty',
                backend: 'frequency_penalty',
                database: 'frequency_penalty',
                pretty: 'Frequency Penalty',
                component: 'FrequencyPenalty',
                kebab: 'frequency-penalty',
                sqlFunctionRef: 'p_frequency_penalty',
                RestAPI: 'frequencyPenalty',
                GraphQL: 'frequencyPenalty',
                custom: 'frequencyPenalty',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:frequency_penalty',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:frequencyPenalty',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '0' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Frequency Penalty" field for aiSettings. This is an optional field. Your entry must be an number data type.',
        },
        presencePenalty: {
            fieldNameFormats: {
                frontend: 'presencePenalty',
                backend: 'presence_penalty',
                database: 'presence_penalty',
                pretty: 'Presence Penalty',
                component: 'PresencePenalty',
                kebab: 'presence-penalty',
                sqlFunctionRef: 'p_presence_penalty',
                RestAPI: 'presencePenalty',
                GraphQL: 'presencePenalty',
                custom: 'presencePenalty',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:presence_penalty',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:presencePenalty',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '0' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Presence Penalty" field for aiSettings. This is an optional field. Your entry must be an number data type.',
        },
        stream: {
            fieldNameFormats: {
                frontend: 'stream',
                backend: 'stream',
                database: 'stream',
                pretty: 'Stream',
                component: 'Stream',
                kebab: 'stream',
                sqlFunctionRef: 'p_stream',
                RestAPI: 'stream',
                GraphQL: 'stream',
                custom: 'stream',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:stream',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:stream',

            dataType: 'boolean' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'true' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Stream" field for aiSettings. This is an optional field. Your entry must be an boolean data type.',
        },
        responseFormat: {
            fieldNameFormats: {
                frontend: 'responseFormat',
                backend: 'response_format',
                database: 'response_format',
                pretty: 'Response Format',
                component: 'ResponseFormat',
                kebab: 'response-format',
                sqlFunctionRef: 'p_response_format',
                RestAPI: 'responseFormat',
                GraphQL: 'responseFormat',
                custom: 'responseFormat',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:response_format',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:responseFormat',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'text' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Response Format" field for aiSettings. This is an optional field. Your entry must be an string data type.',
        },
        size: {
            fieldNameFormats: {
                frontend: 'size',
                backend: 'size',
                database: 'size',
                pretty: 'Size',
                component: 'Size',
                kebab: 'size',
                sqlFunctionRef: 'p_size',
                RestAPI: 'size',
                GraphQL: 'size',
                custom: 'size',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:size',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:size',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Size" field for aiSettings. This is an optional field. Your entry must be an string data type.',
        },
        quality: {
            fieldNameFormats: {
                frontend: 'quality',
                backend: 'quality',
                database: 'quality',
                pretty: 'Quality',
                component: 'Quality',
                kebab: 'quality',
                sqlFunctionRef: 'p_quality',
                RestAPI: 'quality',
                GraphQL: 'quality',
                custom: 'quality',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:quality',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:quality',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Quality" field for aiSettings. This is an optional field. Your entry must be an string data type.',
        },
        count: {
            fieldNameFormats: {
                frontend: 'count',
                backend: 'count',
                database: 'count',
                pretty: 'Count',
                component: 'Count',
                kebab: 'count',
                sqlFunctionRef: 'p_count',
                RestAPI: 'count',
                GraphQL: 'count',
                custom: 'count',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:count',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:count',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '1' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Count" field for aiSettings. This is an optional field. Your entry must be an number data type.',
        },
        audioVoice: {
            fieldNameFormats: {
                frontend: 'audioVoice',
                backend: 'audio_voice',
                database: 'audio_voice',
                pretty: 'Audio Voice',
                component: 'AudioVoice',
                kebab: 'audio-voice',
                sqlFunctionRef: 'p_audio_voice',
                RestAPI: 'audioVoice',
                GraphQL: 'audioVoice',
                custom: 'audioVoice',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:audio_voice',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:audioVoice',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Audio Voice" field for aiSettings. This is an optional field. Your entry must be an string data type.',
        },
        audioFormat: {
            fieldNameFormats: {
                frontend: 'audioFormat',
                backend: 'audio_format',
                database: 'audio_format',
                pretty: 'Audio Format',
                component: 'AudioFormat',
                kebab: 'audio-format',
                sqlFunctionRef: 'p_audio_format',
                RestAPI: 'audioFormat',
                GraphQL: 'audioFormat',
                custom: 'audioFormat',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:audio_format',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:audioFormat',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Audio Format" field for aiSettings. This is an optional field. Your entry must be an string data type.',
        },
        modalities: {
            fieldNameFormats: {
                frontend: 'modalities',
                backend: 'modalities',
                database: 'modalities',
                pretty: 'Modalities',
                component: 'Modalities',
                kebab: 'modalities',
                sqlFunctionRef: 'p_modalities',
                RestAPI: 'modalities',
                GraphQL: 'modalities',
                custom: 'modalities',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:modalities',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:modalities',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '{}' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Modalities" field for aiSettings. This is an optional field. Your entry must be an object data type.',
        },
        tools: {
            fieldNameFormats: {
                frontend: 'tools',
                backend: 'tools',
                database: 'tools',
                pretty: 'Tools',
                component: 'Tools',
                kebab: 'tools',
                sqlFunctionRef: 'p_tools',
                RestAPI: 'tools',
                GraphQL: 'tools',
                custom: 'tools',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:tools',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:tools',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '{}' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Tools" field for aiSettings. This is an optional field. Your entry must be an object data type.',
        },
        presetName: {
            fieldNameFormats: {
                frontend: 'presetName',
                backend: 'preset_name',
                database: 'preset_name',
                pretty: 'Preset Name',
                component: 'PresetName',
                kebab: 'preset-name',
                sqlFunctionRef: 'p_preset_name',
                RestAPI: 'presetName',
                GraphQL: 'presetName',
                custom: 'presetName',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:ai_settings:preset_name',
            uniqueFieldId: 'supabase_automation_matrix:aiSettings:presetName',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'aiSettings',
            databaseTable: 'ai_settings',
            foreignKeyReference: null,
            description: '"Preset Name" field for aiSettings. This is an optional field. Your entry must be an string data type.',
        },
        aiEndpointReference: {
            fieldNameFormats: {
                frontend: 'aiEndpointReference',
                backend: 'ai_endpoint_reference',
                database: 'ref_ai_endpoint',
                pretty: 'Ai Endpoint Reference',
                component: 'AiEndpointReference',
                kebab: 'ai-endpointReference',
                sqlFunctionRef: 'p_ref_ai_endpoint',
                RestAPI: 'aiEndpointReference',
                GraphQL: 'aiEndpointReference',
                custom: 'aiEndpointReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:ai_endpoint:id',
            uniqueFieldId: 'supabase_automation_matrix:aiEndpoint:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiEndpoint'>[]>,
            entityName: 'aiEndpoint',
            databaseTable: 'ai_endpoint',
            relationshipMap: { ai_endpoint: 'id', ai_model: 'id', ai_provider: 'id' },
        },
        aiModelReference: {
            fieldNameFormats: {
                frontend: 'aiModelReference',
                backend: 'ai_model_reference',
                database: 'ref_ai_model',
                pretty: 'Ai Model Reference',
                component: 'AiModelReference',
                kebab: 'ai-modelReference',
                sqlFunctionRef: 'p_ref_ai_model',
                RestAPI: 'aiModelReference',
                GraphQL: 'aiModelReference',
                custom: 'aiModelReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:ai_model:id',
            uniqueFieldId: 'supabase_automation_matrix:aiModel:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiModel'>[]>,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
            relationshipMap: { ai_endpoint: 'id', ai_model: 'id', ai_provider: 'id' },
        },
        aiProviderReference: {
            fieldNameFormats: {
                frontend: 'aiProviderReference',
                backend: 'ai_provider_reference',
                database: 'ref_ai_provider',
                pretty: 'Ai Provider Reference',
                component: 'AiProviderReference',
                kebab: 'ai-providerReference',
                sqlFunctionRef: 'p_ref_ai_provider',
                RestAPI: 'aiProviderReference',
                GraphQL: 'aiProviderReference',
                custom: 'aiProviderReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:ai_provider:id',
            uniqueFieldId: 'supabase_automation_matrix:aiProvider:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiProvider'>[]>,
            entityName: 'aiProvider',
            databaseTable: 'ai_provider',
            relationshipMap: { ai_endpoint: 'id', ai_model: 'id', ai_provider: 'id' },
        },
        aiAgentInverse: {
            fieldNameFormats: {
                frontend: 'aiAgentInverse',
                backend: 'ai_agent_Inverse',
                database: 'ifk_ai_agent',
                pretty: 'Ai Agent Inverse',
                component: 'AiAgentInverse',
                kebab: 'ai-agentInverse',
                sqlFunctionRef: 'p_ifk_ai_agent',
                RestAPI: 'aiAgentInverse',
                GraphQL: 'aiAgentInverse',
                custom: 'aiAgentInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:ai_agent',
            uniqueEntityId: 'supabase_automation_matrix:aiAgent',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiAgent'>[]>,
            entityName: 'aiAgent',
            databaseTable: 'ai_agent',
        },
    },
    entityNameFormats: {
        frontend: 'aiSettings',
        backend: 'ai_settings',
        database: 'ai_settings',
        pretty: 'Ai Settings',
        component: 'AiSettings',
        kebab: 'ai-settings',
        sqlFunctionRef: 'p_ai_settings',
        RestAPI: 'aiSettings',
        GraphQL: 'aiSettings',
        custom: 'aiSettings',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'ai_endpoint', relatedTable: 'ai_endpoint', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'ai_model', relatedTable: 'ai_model', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'ai_provider', relatedTable: 'ai_provider', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'ai_agent', relatedColumn: 'ai_settings_id', junctionTable: null },
    ],
} as const;

export const arg = {
    schemaType: 'table' as const,
    entityName: 'arg',
    uniqueTableId: 'supabase_automation_matrix:public:arg',
    uniqueEntityId: 'supabase_automation_matrix:arg',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'fk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:arg:id',
            uniqueFieldId: 'supabase_automation_matrix:arg:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'arg',
            databaseTable: 'arg',
            foreignKeyReference: null,
            description: '"Id" field for arg. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:arg:name',
            uniqueFieldId: 'supabase_automation_matrix:arg:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'arg',
            databaseTable: 'arg',
            foreignKeyReference: null,
            description: '"Name" field for arg. This is a required field. Your entry must be an string data type.',
        },
        required: {
            fieldNameFormats: {
                frontend: 'required',
                backend: 'required',
                database: 'required',
                pretty: 'Required',
                component: 'Required',
                kebab: 'required',
                sqlFunctionRef: 'p_required',
                RestAPI: 'required',
                GraphQL: 'required',
                custom: 'required',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:arg:required',
            uniqueFieldId: 'supabase_automation_matrix:arg:required',

            dataType: 'boolean' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'true' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'arg',
            databaseTable: 'arg',
            foreignKeyReference: null,
            description: '"Required" field for arg. This is an optional field. Your entry must be an boolean data type.',
        },
        default: {
            fieldNameFormats: {
                frontend: 'default',
                backend: 'default',
                database: 'default',
                pretty: 'Default',
                component: 'Default',
                kebab: 'default',
                sqlFunctionRef: 'p_default',
                RestAPI: 'default',
                GraphQL: 'default',
                custom: 'default',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:arg:default',
            uniqueFieldId: 'supabase_automation_matrix:arg:default',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'arg',
            databaseTable: 'arg',
            foreignKeyReference: null,
            description: '"Default" field for arg. This is an optional field. Your entry must be an string data type.',
        },
        dataType: {
            fieldNameFormats: {
                frontend: 'dataType',
                backend: 'data_type',
                database: 'data_type',
                pretty: 'Data Type',
                component: 'DataType',
                kebab: 'data-type',
                sqlFunctionRef: 'p_data_type',
                RestAPI: 'dataType',
                GraphQL: 'dataType',
                custom: 'dataType',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:arg:data_type',
            uniqueFieldId: 'supabase_automation_matrix:arg:dataType',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'str' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Bool',
                        value: 'bool',
                    },
                    {
                        label: 'Dict',
                        value: 'dict',
                    },
                    {
                        label: 'Float',
                        value: 'float',
                    },
                    {
                        label: 'Int',
                        value: 'int',
                    },
                    {
                        label: 'List',
                        value: 'list',
                    },
                    {
                        label: 'Str',
                        value: 'str',
                    },
                    {
                        label: 'Url',
                        value: 'url',
                    },
                ],
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<'bool' | 'dict' | 'float' | 'int' | 'list' | 'str' | 'url' | undefined>,
            enumValues: ['bool', 'dict', 'float', 'int', 'list', 'str', 'url'] as const,
            entityName: 'arg',
            databaseTable: 'arg',
            foreignKeyReference: null,
            description: '"Data Type" field for arg. This is an optional field. Your entry must be an string data type.',
        },
        ready: {
            fieldNameFormats: {
                frontend: 'ready',
                backend: 'ready',
                database: 'ready',
                pretty: 'Ready',
                component: 'Ready',
                kebab: 'ready',
                sqlFunctionRef: 'p_ready',
                RestAPI: 'ready',
                GraphQL: 'ready',
                custom: 'ready',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:arg:ready',
            uniqueFieldId: 'supabase_automation_matrix:arg:ready',

            dataType: 'boolean' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'false' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'arg',
            databaseTable: 'arg',
            foreignKeyReference: null,
            description: '"Ready" field for arg. This is an optional field. Your entry must be an boolean data type.',
        },
        registeredFunction: {
            fieldNameFormats: {
                frontend: 'registeredFunction',
                backend: 'registered_function',
                database: 'registered_function',
                pretty: 'Registered Function',
                component: 'RegisteredFunction',
                kebab: 'registered-function',
                sqlFunctionRef: 'p_registered_function',
                RestAPI: 'registeredFunction',
                GraphQL: 'registeredFunction',
                custom: 'registeredFunction',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:arg:registered_function',
            uniqueFieldId: 'supabase_automation_matrix:arg:registeredFunction',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'arg',
            databaseTable: 'arg',
            foreignKeyReference: { table: 'registered_function', column: 'id', entity: 'registeredFunction', field: 'id' },
            description:
                '"Registered Function" field for arg. This is an optional field. Your entry must be an uuid data type. This field is a reference to a registeredFunction.',
        },
        registeredFunctionReference: {
            fieldNameFormats: {
                frontend: 'registeredFunctionReference',
                backend: 'registered_function_reference',
                database: 'ref_registered_function',
                pretty: 'Registered Function Reference',
                component: 'RegisteredFunctionReference',
                kebab: 'registered-functionReference',
                sqlFunctionRef: 'p_ref_registered_function',
                RestAPI: 'registeredFunctionReference',
                GraphQL: 'registeredFunctionReference',
                custom: 'registeredFunctionReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:registered_function:id',
            uniqueFieldId: 'supabase_automation_matrix:registeredFunction:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'registeredFunction'>[]>,
            entityName: 'registeredFunction',
            databaseTable: 'registered_function',
            relationshipMap: { registered_function: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'arg',
        backend: 'arg',
        database: 'arg',
        pretty: 'Arg',
        component: 'Arg',
        kebab: 'arg',
        sqlFunctionRef: 'p_arg',
        RestAPI: 'arg',
        GraphQL: 'arg',
        custom: 'arg',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'registered_function', relatedTable: 'registered_function', relatedColumn: 'id', junctionTable: null },
    ],
} as const;

export const automationBoundaryBroker = {
    schemaType: 'table' as const,
    entityName: 'automationBoundaryBroker',
    uniqueTableId: 'supabase_automation_matrix:public:automation_boundary_broker',
    uniqueEntityId: 'supabase_automation_matrix:automationBoundaryBroker',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'broker', databaseFieldName: 'broker' },
    defaultFetchStrategy: 'm2mAndFk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:automation_boundary_broker:id',
            uniqueFieldId: 'supabase_automation_matrix:automationBoundaryBroker:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'automationBoundaryBroker',
            databaseTable: 'automation_boundary_broker',
            foreignKeyReference: null,
            description: '"Id" field for automationBoundaryBroker. This is a required field. Your entry must be an uuid data type.',
        },
        matrix: {
            fieldNameFormats: {
                frontend: 'matrix',
                backend: 'matrix',
                database: 'matrix',
                pretty: 'Matrix',
                component: 'Matrix',
                kebab: 'matrix',
                sqlFunctionRef: 'p_matrix',
                RestAPI: 'matrix',
                GraphQL: 'matrix',
                custom: 'matrix',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:automation_boundary_broker:matrix',
            uniqueFieldId: 'supabase_automation_matrix:automationBoundaryBroker:matrix',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'automationBoundaryBroker',
            databaseTable: 'automation_boundary_broker',
            foreignKeyReference: { table: 'automation_matrix', column: 'id', entity: 'automationMatrix', field: 'id' },
            description:
                '"Matrix" field for automationBoundaryBroker. This is an optional field. Your entry must be an uuid data type. This field is a reference to a automationMatrix.',
        },
        broker: {
            fieldNameFormats: {
                frontend: 'broker',
                backend: 'broker',
                database: 'broker',
                pretty: 'Broker',
                component: 'Broker',
                kebab: 'broker',
                sqlFunctionRef: 'p_broker',
                RestAPI: 'broker',
                GraphQL: 'broker',
                custom: 'broker',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:automation_boundary_broker:broker',
            uniqueFieldId: 'supabase_automation_matrix:automationBoundaryBroker:broker',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'automationBoundaryBroker',
            databaseTable: 'automation_boundary_broker',
            foreignKeyReference: { table: 'broker', column: 'id', entity: 'broker', field: 'id' },
            description:
                '"Broker" field for automationBoundaryBroker. This is an optional field. Your entry must be an uuid data type. This field is a reference to a broker.',
        },
        sparkSource: {
            fieldNameFormats: {
                frontend: 'sparkSource',
                backend: 'spark_source',
                database: 'spark_source',
                pretty: 'Spark Source',
                component: 'SparkSource',
                kebab: 'spark-source',
                sqlFunctionRef: 'p_spark_source',
                RestAPI: 'sparkSource',
                GraphQL: 'sparkSource',
                custom: 'sparkSource',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:automation_boundary_broker:spark_source',
            uniqueFieldId: 'supabase_automation_matrix:automationBoundaryBroker:sparkSource',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Api',
                        value: 'api',
                    },
                    {
                        label: 'Chance',
                        value: 'chance',
                    },
                    {
                        label: 'Database',
                        value: 'database',
                    },
                    {
                        label: 'Environment',
                        value: 'environment',
                    },
                    {
                        label: 'File',
                        value: 'file',
                    },
                    {
                        label: 'Function',
                        value: 'function',
                    },
                    {
                        label: 'Generated Data',
                        value: 'generated_data',
                    },
                    {
                        label: 'None',
                        value: 'none',
                    },
                    {
                        label: 'User Input',
                        value: 'user_input',
                    },
                ],
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<
                'api' | 'chance' | 'database' | 'environment' | 'file' | 'function' | 'generated_data' | 'none' | 'user_input' | undefined
            >,
            enumValues: ['api', 'chance', 'database', 'environment', 'file', 'function', 'generated_data', 'none', 'user_input'] as const,
            entityName: 'automationBoundaryBroker',
            databaseTable: 'automation_boundary_broker',
            foreignKeyReference: null,
            description: '"Spark Source" field for automationBoundaryBroker. This is an optional field. Your entry must be an string data type.',
        },
        beaconDestination: {
            fieldNameFormats: {
                frontend: 'beaconDestination',
                backend: 'beacon_destination',
                database: 'beacon_destination',
                pretty: 'Beacon Destination',
                component: 'BeaconDestination',
                kebab: 'beacon-destination',
                sqlFunctionRef: 'p_beacon_destination',
                RestAPI: 'beaconDestination',
                GraphQL: 'beaconDestination',
                custom: 'beaconDestination',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:automation_boundary_broker:beacon_destination',
            uniqueFieldId: 'supabase_automation_matrix:automationBoundaryBroker:beaconDestination',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Api Response',
                        value: 'api_response',
                    },
                    {
                        label: 'Database',
                        value: 'database',
                    },
                    {
                        label: 'File',
                        value: 'file',
                    },
                    {
                        label: 'Function',
                        value: 'function',
                    },
                    {
                        label: 'User Output',
                        value: 'user_output',
                    },
                ],
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<'api_response' | 'database' | 'file' | 'function' | 'user_output' | undefined>,
            enumValues: ['api_response', 'database', 'file', 'function', 'user_output'] as const,
            entityName: 'automationBoundaryBroker',
            databaseTable: 'automation_boundary_broker',
            foreignKeyReference: null,
            description: '"Beacon Destination" field for automationBoundaryBroker. This is an optional field. Your entry must be an string data type.',
        },
        brokerReference: {
            fieldNameFormats: {
                frontend: 'brokerReference',
                backend: 'broker_reference',
                database: 'ref_broker',
                pretty: 'Broker Reference',
                component: 'BrokerReference',
                kebab: 'brokerReference',
                sqlFunctionRef: 'p_ref_broker',
                RestAPI: 'brokerReference',
                GraphQL: 'brokerReference',
                custom: 'brokerReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:broker:id',
            uniqueFieldId: 'supabase_automation_matrix:broker:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'broker'>[]>,
            entityName: 'broker',
            databaseTable: 'broker',
            relationshipMap: { broker: 'id', automation_matrix: 'id' },
        },
        automationMatrixReference: {
            fieldNameFormats: {
                frontend: 'automationMatrixReference',
                backend: 'automation_matrix_reference',
                database: 'ref_automation_matrix',
                pretty: 'Automation Matrix Reference',
                component: 'AutomationMatrixReference',
                kebab: 'automation-matrixReference',
                sqlFunctionRef: 'p_ref_automation_matrix',
                RestAPI: 'automationMatrixReference',
                GraphQL: 'automationMatrixReference',
                custom: 'automationMatrixReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:automation_matrix:id',
            uniqueFieldId: 'supabase_automation_matrix:automationMatrix:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'automationMatrix'>[]>,
            entityName: 'automationMatrix',
            databaseTable: 'automation_matrix',
            relationshipMap: { broker: 'id', automation_matrix: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'automationBoundaryBroker',
        backend: 'automation_boundary_broker',
        database: 'automation_boundary_broker',
        pretty: 'Automation Boundary Broker',
        component: 'AutomationBoundaryBroker',
        kebab: 'automation-boundary-broker',
        sqlFunctionRef: 'p_automation_boundary_broker',
        RestAPI: 'automationBoundaryBroker',
        GraphQL: 'automationBoundaryBroker',
        custom: 'automationBoundaryBroker',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'broker', relatedTable: 'broker', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'matrix', relatedTable: 'automation_matrix', relatedColumn: 'id', junctionTable: null },
    ],
} as const;

export const automationMatrix = {
    schemaType: 'table' as const,
    entityName: 'automationMatrix',
    uniqueTableId: 'supabase_automation_matrix:public:automation_matrix',
    uniqueEntityId: 'supabase_automation_matrix:automationMatrix',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'm2mAndIfk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:automation_matrix:id',
            uniqueFieldId: 'supabase_automation_matrix:automationMatrix:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'automationMatrix',
            databaseTable: 'automation_matrix',
            foreignKeyReference: null,
            description: '"Id" field for automationMatrix. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:automation_matrix:name',
            uniqueFieldId: 'supabase_automation_matrix:automationMatrix:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'automationMatrix',
            databaseTable: 'automation_matrix',
            foreignKeyReference: null,
            description: '"Name" field for automationMatrix. This is a required field. Your entry must be an string data type.',
        },
        description: {
            fieldNameFormats: {
                frontend: 'description',
                backend: 'description',
                database: 'description',
                pretty: 'Description',
                component: 'Description',
                kebab: 'description',
                sqlFunctionRef: 'p_description',
                RestAPI: 'description',
                GraphQL: 'description',
                custom: 'description',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:automation_matrix:description',
            uniqueFieldId: 'supabase_automation_matrix:automationMatrix:description',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'automationMatrix',
            databaseTable: 'automation_matrix',
            foreignKeyReference: null,
            description: '"Description" field for automationMatrix. This is an optional field. Your entry must be an string data type.',
        },
        averageSeconds: {
            fieldNameFormats: {
                frontend: 'averageSeconds',
                backend: 'average_seconds',
                database: 'average_seconds',
                pretty: 'Average Seconds',
                component: 'AverageSeconds',
                kebab: 'average-seconds',
                sqlFunctionRef: 'p_average_seconds',
                RestAPI: 'averageSeconds',
                GraphQL: 'averageSeconds',
                custom: 'averageSeconds',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:automation_matrix:average_seconds',
            uniqueFieldId: 'supabase_automation_matrix:automationMatrix:averageSeconds',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'automationMatrix',
            databaseTable: 'automation_matrix',
            foreignKeyReference: null,
            description: '"Average Seconds" field for automationMatrix. This is an optional field. Your entry must be an number data type.',
        },
        isAutomated: {
            fieldNameFormats: {
                frontend: 'isAutomated',
                backend: 'is_automated',
                database: 'is_automated',
                pretty: 'Is Automated',
                component: 'IsAutomated',
                kebab: 'is-automated',
                sqlFunctionRef: 'p_is_automated',
                RestAPI: 'isAutomated',
                GraphQL: 'isAutomated',
                custom: 'isAutomated',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:automation_matrix:is_automated',
            uniqueFieldId: 'supabase_automation_matrix:automationMatrix:isAutomated',

            dataType: 'boolean' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'automationMatrix',
            databaseTable: 'automation_matrix',
            foreignKeyReference: null,
            description: '"Is Automated" field for automationMatrix. This is an optional field. Your entry must be an boolean data type.',
        },
        cognitionMatrices: {
            fieldNameFormats: {
                frontend: 'cognitionMatrices',
                backend: 'cognition_matrices',
                database: 'cognition_matrices',
                pretty: 'Cognition Matrices',
                component: 'CognitionMatrices',
                kebab: 'cognition-matrices',
                sqlFunctionRef: 'p_cognition_matrices',
                RestAPI: 'cognitionMatrices',
                GraphQL: 'cognitionMatrices',
                custom: 'cognitionMatrices',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:automation_matrix:cognition_matrices',
            uniqueFieldId: 'supabase_automation_matrix:automationMatrix:cognitionMatrices',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Agent Crew',
                        value: 'agent_crew',
                    },
                    {
                        label: 'Agent Mixture',
                        value: 'agent_mixture',
                    },
                    {
                        label: 'Conductor',
                        value: 'conductor',
                    },
                    {
                        label: 'Hypercluster',
                        value: 'hypercluster',
                    },
                    {
                        label: 'Knowledge Matrix',
                        value: 'knowledge_matrix',
                    },
                    {
                        label: 'Monte Carlo',
                        value: 'monte_carlo',
                    },
                    {
                        label: 'The Matrix',
                        value: 'the_matrix',
                    },
                    {
                        label: 'Workflow',
                        value: 'workflow',
                    },
                ],
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<
                'agent_crew' | 'agent_mixture' | 'conductor' | 'hypercluster' | 'knowledge_matrix' | 'monte_carlo' | 'the_matrix' | 'workflow' | undefined
            >,
            enumValues: ['agent_crew', 'agent_mixture', 'conductor', 'hypercluster', 'knowledge_matrix', 'monte_carlo', 'the_matrix', 'workflow'] as const,
            entityName: 'automationMatrix',
            databaseTable: 'automation_matrix',
            foreignKeyReference: null,
            description: '"Cognition Matrices" field for automationMatrix. This is an optional field. Your entry must be an string data type.',
        },
        actionInverse: {
            fieldNameFormats: {
                frontend: 'actionInverse',
                backend: 'action_Inverse',
                database: 'ifk_action',
                pretty: 'Action Inverse',
                component: 'ActionInverse',
                kebab: 'actionInverse',
                sqlFunctionRef: 'p_ifk_action',
                RestAPI: 'actionInverse',
                GraphQL: 'actionInverse',
                custom: 'actionInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:action',
            uniqueEntityId: 'supabase_automation_matrix:action',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'action'>[]>,
            entityName: 'action',
            databaseTable: 'action',
        },
        automationBoundaryBrokerInverse: {
            fieldNameFormats: {
                frontend: 'automationBoundaryBrokerInverse',
                backend: 'automation_boundary_broker_Inverse',
                database: 'ifk_automation_boundary_broker',
                pretty: 'Automation Boundary Broker Inverse',
                component: 'AutomationBoundaryBrokerInverse',
                kebab: 'automation-boundary-brokerInverse',
                sqlFunctionRef: 'p_ifk_automation_boundary_broker',
                RestAPI: 'automationBoundaryBrokerInverse',
                GraphQL: 'automationBoundaryBrokerInverse',
                custom: 'automationBoundaryBrokerInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:automation_boundary_broker',
            uniqueEntityId: 'supabase_automation_matrix:automationBoundaryBroker',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'automationBoundaryBroker'>[]>,
            entityName: 'automationBoundaryBroker',
            databaseTable: 'automation_boundary_broker',
        },
    },
    entityNameFormats: {
        frontend: 'automationMatrix',
        backend: 'automation_matrix',
        database: 'automation_matrix',
        pretty: 'Automation Matrix',
        component: 'AutomationMatrix',
        kebab: 'automation-matrix',
        sqlFunctionRef: 'p_automation_matrix',
        RestAPI: 'automationMatrix',
        GraphQL: 'automationMatrix',
        custom: 'automationMatrix',
    },
    relationships: [
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'action', relatedColumn: 'matrix', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'automation_boundary_broker', relatedColumn: 'matrix', junctionTable: null },
    ],
} as const;

export const broker = {
    schemaType: 'table' as const,
    entityName: 'broker',
    uniqueTableId: 'supabase_automation_matrix:public:broker',
    uniqueEntityId: 'supabase_automation_matrix:broker',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'fkIfkAndM2M',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:id',
            uniqueFieldId: 'supabase_automation_matrix:broker:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Id" field for broker. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:name',
            uniqueFieldId: 'supabase_automation_matrix:broker:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Name" field for broker. This is a required field. Your entry must be an string data type.',
        },
        value: {
            fieldNameFormats: {
                frontend: 'value',
                backend: 'value',
                database: 'value',
                pretty: 'Value',
                component: 'Value',
                kebab: 'value',
                sqlFunctionRef: 'p_value',
                RestAPI: 'value',
                GraphQL: 'value',
                custom: 'value',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:value',
            uniqueFieldId: 'supabase_automation_matrix:broker:value',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: "{'broker_value': None}" as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Value" field for broker. This is an optional field. Your entry must be an object data type.',
        },
        dataType: {
            fieldNameFormats: {
                frontend: 'dataType',
                backend: 'data_type',
                database: 'data_type',
                pretty: 'Data Type',
                component: 'DataType',
                kebab: 'data-type',
                sqlFunctionRef: 'p_data_type',
                RestAPI: 'dataType',
                GraphQL: 'dataType',
                custom: 'dataType',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:data_type',
            uniqueFieldId: 'supabase_automation_matrix:broker:dataType',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: 'str' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Bool',
                        value: 'bool',
                    },
                    {
                        label: 'Dict',
                        value: 'dict',
                    },
                    {
                        label: 'Float',
                        value: 'float',
                    },
                    {
                        label: 'Int',
                        value: 'int',
                    },
                    {
                        label: 'List',
                        value: 'list',
                    },
                    {
                        label: 'Str',
                        value: 'str',
                    },
                    {
                        label: 'Url',
                        value: 'url',
                    },
                ],
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<'bool' | 'dict' | 'float' | 'int' | 'list' | 'str' | 'url' | undefined>,
            enumValues: ['bool', 'dict', 'float', 'int', 'list', 'str', 'url'] as const,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Data Type" field for broker. This is a required field. Your entry must be an string data type.',
        },
        ready: {
            fieldNameFormats: {
                frontend: 'ready',
                backend: 'ready',
                database: 'ready',
                pretty: 'Ready',
                component: 'Ready',
                kebab: 'ready',
                sqlFunctionRef: 'p_ready',
                RestAPI: 'ready',
                GraphQL: 'ready',
                custom: 'ready',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:ready',
            uniqueFieldId: 'supabase_automation_matrix:broker:ready',

            dataType: 'boolean' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'false' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Ready" field for broker. This is an optional field. Your entry must be an boolean data type.',
        },
        defaultSource: {
            fieldNameFormats: {
                frontend: 'defaultSource',
                backend: 'default_source',
                database: 'default_source',
                pretty: 'Default Source',
                component: 'DefaultSource',
                kebab: 'default-source',
                sqlFunctionRef: 'p_default_source',
                RestAPI: 'defaultSource',
                GraphQL: 'defaultSource',
                custom: 'defaultSource',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:default_source',
            uniqueFieldId: 'supabase_automation_matrix:broker:defaultSource',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'none' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Api',
                        value: 'api',
                    },
                    {
                        label: 'Chance',
                        value: 'chance',
                    },
                    {
                        label: 'Database',
                        value: 'database',
                    },
                    {
                        label: 'Environment',
                        value: 'environment',
                    },
                    {
                        label: 'File',
                        value: 'file',
                    },
                    {
                        label: 'Function',
                        value: 'function',
                    },
                    {
                        label: 'Generated Data',
                        value: 'generated_data',
                    },
                    {
                        label: 'None',
                        value: 'none',
                    },
                    {
                        label: 'User Input',
                        value: 'user_input',
                    },
                ],
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<
                'api' | 'chance' | 'database' | 'environment' | 'file' | 'function' | 'generated_data' | 'none' | 'user_input' | undefined
            >,
            enumValues: ['api', 'chance', 'database', 'environment', 'file', 'function', 'generated_data', 'none', 'user_input'] as const,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Default Source" field for broker. This is an optional field. Your entry must be an string data type.',
        },
        displayName: {
            fieldNameFormats: {
                frontend: 'displayName',
                backend: 'display_name',
                database: 'display_name',
                pretty: 'Display Name',
                component: 'DisplayName',
                kebab: 'display-name',
                sqlFunctionRef: 'p_display_name',
                RestAPI: 'displayName',
                GraphQL: 'displayName',
                custom: 'displayName',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:display_name',
            uniqueFieldId: 'supabase_automation_matrix:broker:displayName',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Display Name" field for broker. This is an optional field. Your entry must be an string data type.',
        },
        description: {
            fieldNameFormats: {
                frontend: 'description',
                backend: 'description',
                database: 'description',
                pretty: 'Description',
                component: 'Description',
                kebab: 'description',
                sqlFunctionRef: 'p_description',
                RestAPI: 'description',
                GraphQL: 'description',
                custom: 'description',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:description',
            uniqueFieldId: 'supabase_automation_matrix:broker:description',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Description" field for broker. This is an optional field. Your entry must be an string data type.',
        },
        tooltip: {
            fieldNameFormats: {
                frontend: 'tooltip',
                backend: 'tooltip',
                database: 'tooltip',
                pretty: 'Tooltip',
                component: 'Tooltip',
                kebab: 'tooltip',
                sqlFunctionRef: 'p_tooltip',
                RestAPI: 'tooltip',
                GraphQL: 'tooltip',
                custom: 'tooltip',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:tooltip',
            uniqueFieldId: 'supabase_automation_matrix:broker:tooltip',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Tooltip" field for broker. This is an optional field. Your entry must be an string data type.',
        },
        validationRules: {
            fieldNameFormats: {
                frontend: 'validationRules',
                backend: 'validation_rules',
                database: 'validation_rules',
                pretty: 'Validation Rules',
                component: 'ValidationRules',
                kebab: 'validation-rules',
                sqlFunctionRef: 'p_validation_rules',
                RestAPI: 'validationRules',
                GraphQL: 'validationRules',
                custom: 'validationRules',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:validation_rules',
            uniqueFieldId: 'supabase_automation_matrix:broker:validationRules',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Validation Rules" field for broker. This is an optional field. Your entry must be an object data type.',
        },
        sampleEntries: {
            fieldNameFormats: {
                frontend: 'sampleEntries',
                backend: 'sample_entries',
                database: 'sample_entries',
                pretty: 'Sample Entries',
                component: 'SampleEntries',
                kebab: 'sample-entries',
                sqlFunctionRef: 'p_sample_entries',
                RestAPI: 'sampleEntries',
                GraphQL: 'sampleEntries',
                custom: 'sampleEntries',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:sample_entries',
            uniqueFieldId: 'supabase_automation_matrix:broker:sampleEntries',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Sample Entries" field for broker. This is an optional field. Your entry must be an string data type.',
        },
        customSourceComponent: {
            fieldNameFormats: {
                frontend: 'customSourceComponent',
                backend: 'custom_source_component',
                database: 'custom_source_component',
                pretty: 'Custom Source Component',
                component: 'CustomSourceComponent',
                kebab: 'custom-source-component',
                sqlFunctionRef: 'p_custom_source_component',
                RestAPI: 'customSourceComponent',
                GraphQL: 'customSourceComponent',
                custom: 'customSourceComponent',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:custom_source_component',
            uniqueFieldId: 'supabase_automation_matrix:broker:customSourceComponent',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: { table: 'data_input_component', column: 'id', entity: 'dataInputComponent', field: 'id' },
            description:
                '"Custom Source Component" field for broker. This is an optional field. Your entry must be an uuid data type. This field is a reference to a dataInputComponent.',
        },
        additionalParams: {
            fieldNameFormats: {
                frontend: 'additionalParams',
                backend: 'additional_params',
                database: 'additional_params',
                pretty: 'Additional Params',
                component: 'AdditionalParams',
                kebab: 'additional-params',
                sqlFunctionRef: 'p_additional_params',
                RestAPI: 'additionalParams',
                GraphQL: 'additionalParams',
                custom: 'additionalParams',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:additional_params',
            uniqueFieldId: 'supabase_automation_matrix:broker:additionalParams',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Additional Params" field for broker. This is an optional field. Your entry must be an object data type.',
        },
        otherSourceParams: {
            fieldNameFormats: {
                frontend: 'otherSourceParams',
                backend: 'other_source_params',
                database: 'other_source_params',
                pretty: 'Other Source Params',
                component: 'OtherSourceParams',
                kebab: 'other-source-params',
                sqlFunctionRef: 'p_other_source_params',
                RestAPI: 'otherSourceParams',
                GraphQL: 'otherSourceParams',
                custom: 'otherSourceParams',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:other_source_params',
            uniqueFieldId: 'supabase_automation_matrix:broker:otherSourceParams',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Other Source Params" field for broker. This is an optional field. Your entry must be an object data type.',
        },
        defaultDestination: {
            fieldNameFormats: {
                frontend: 'defaultDestination',
                backend: 'default_destination',
                database: 'default_destination',
                pretty: 'Default Destination',
                component: 'DefaultDestination',
                kebab: 'default-destination',
                sqlFunctionRef: 'p_default_destination',
                RestAPI: 'defaultDestination',
                GraphQL: 'defaultDestination',
                custom: 'defaultDestination',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:default_destination',
            uniqueFieldId: 'supabase_automation_matrix:broker:defaultDestination',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Api Response',
                        value: 'api_response',
                    },
                    {
                        label: 'Database',
                        value: 'database',
                    },
                    {
                        label: 'File',
                        value: 'file',
                    },
                    {
                        label: 'Function',
                        value: 'function',
                    },
                    {
                        label: 'User Output',
                        value: 'user_output',
                    },
                ],
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<'api_response' | 'database' | 'file' | 'function' | 'user_output' | undefined>,
            enumValues: ['api_response', 'database', 'file', 'function', 'user_output'] as const,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Default Destination" field for broker. This is an optional field. Your entry must be an string data type.',
        },
        outputComponent: {
            fieldNameFormats: {
                frontend: 'outputComponent',
                backend: 'output_component',
                database: 'output_component',
                pretty: 'Output Component',
                component: 'OutputComponent',
                kebab: 'output-component',
                sqlFunctionRef: 'p_output_component',
                RestAPI: 'outputComponent',
                GraphQL: 'outputComponent',
                custom: 'outputComponent',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:output_component',
            uniqueFieldId: 'supabase_automation_matrix:broker:outputComponent',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: '3 D Model Viewer',
                        value: '3DModelViewer',
                    },
                    {
                        label: 'Audio Output',
                        value: 'AudioOutput',
                    },
                    {
                        label: 'Bucket List',
                        value: 'BucketList',
                    },
                    {
                        label: 'Budget Visualizer',
                        value: 'BudgetVisualizer',
                    },
                    {
                        label: 'Calendar',
                        value: 'Calendar',
                    },
                    {
                        label: 'Carousel',
                        value: 'Carousel',
                    },
                    {
                        label: 'Checklist',
                        value: 'Checklist',
                    },
                    {
                        label: 'Clock',
                        value: 'Clock',
                    },
                    {
                        label: 'Code View',
                        value: 'CodeView',
                    },
                    {
                        label: 'Complex Multi',
                        value: 'ComplexMulti',
                    },
                    {
                        label: 'Data Flow Diagram',
                        value: 'DataFlowDiagram',
                    },
                    {
                        label: 'Decision Tree',
                        value: 'DecisionTree',
                    },
                    {
                        label: 'Diff Viewer',
                        value: 'DiffViewer',
                    },
                    {
                        label: 'File Output',
                        value: 'FileOutput',
                    },
                    {
                        label: 'Fitness Tracker',
                        value: 'FitnessTracker',
                    },
                    {
                        label: 'Flowchart',
                        value: 'Flowchart',
                    },
                    {
                        label: 'Form',
                        value: 'Form',
                    },
                    {
                        label: 'Gantt Chart',
                        value: 'GanttChart',
                    },
                    {
                        label: 'Geographic Map',
                        value: 'GeographicMap',
                    },
                    {
                        label: 'Glossary View',
                        value: 'GlossaryView',
                    },
                    {
                        label: 'Heatmap',
                        value: 'Heatmap',
                    },
                    {
                        label: 'Horizontal List',
                        value: 'HorizontalList',
                    },
                    {
                        label: 'Image View',
                        value: 'ImageView',
                    },
                    {
                        label: 'Interactive Chart',
                        value: 'InteractiveChart',
                    },
                    {
                        label: 'Json Viewer',
                        value: 'JsonViewer',
                    },
                    {
                        label: 'Kanban Board',
                        value: 'KanbanBoard',
                    },
                    {
                        label: 'La Te X Renderer',
                        value: 'LaTeXRenderer',
                    },
                    {
                        label: 'Live Traffic',
                        value: 'LiveTraffic',
                    },
                    {
                        label: 'Local Events',
                        value: 'LocalEvents',
                    },
                    {
                        label: 'Markdown Viewer',
                        value: 'MarkdownViewer',
                    },
                    {
                        label: 'Meal Planner',
                        value: 'MealPlanner',
                    },
                    {
                        label: 'Mind Map',
                        value: 'MindMap',
                    },
                    {
                        label: 'Need New Option',
                        value: 'NeedNewOption',
                    },
                    {
                        label: 'Network Graph',
                        value: 'NetworkGraph',
                    },
                    {
                        label: 'News Aggregator',
                        value: 'NewsAggregator',
                    },
                    {
                        label: 'P D F Viewer',
                        value: 'PDFViewer',
                    },
                    {
                        label: 'Pivot Table',
                        value: 'PivotTable',
                    },
                    {
                        label: 'Plain Text',
                        value: 'PlainText',
                    },
                    {
                        label: 'Presentation',
                        value: 'Presentation',
                    },
                    {
                        label: 'Public Live Cam',
                        value: 'PublicLiveCam',
                    },
                    {
                        label: 'Rich Text Editor',
                        value: 'RichTextEditor',
                    },
                    {
                        label: 'Run Code Back',
                        value: 'RunCodeBack',
                    },
                    {
                        label: 'Run Code Front',
                        value: 'RunCodeFront',
                    },
                    {
                        label: 'S V G Editor',
                        value: 'SVGEditor',
                    },
                    {
                        label: 'Sankey Diagram',
                        value: 'SankeyDiagram',
                    },
                    {
                        label: 'Satellite View',
                        value: 'SatelliteView',
                    },
                    {
                        label: 'Social Media Info',
                        value: 'SocialMediaInfo',
                    },
                    {
                        label: 'Spectrum Analyzer',
                        value: 'SpectrumAnalyzer',
                    },
                    {
                        label: 'Spreadsheet',
                        value: 'Spreadsheet',
                    },
                    {
                        label: 'Table',
                        value: 'Table',
                    },
                    {
                        label: 'Task Prioritization',
                        value: 'TaskPrioritization',
                    },
                    {
                        label: 'Textarea',
                        value: 'Textarea',
                    },
                    {
                        label: 'Thermometer',
                        value: 'Thermometer',
                    },
                    {
                        label: 'Timeline',
                        value: 'Timeline',
                    },
                    {
                        label: 'Travel Planner',
                        value: 'TravelPlanner',
                    },
                    {
                        label: 'Tree View',
                        value: 'TreeView',
                    },
                    {
                        label: 'U M L Diagram',
                        value: 'UMLDiagram',
                    },
                    {
                        label: 'Vertical List',
                        value: 'VerticalList',
                    },
                    {
                        label: 'Voice Sentiment Analysis',
                        value: 'VoiceSentimentAnalysis',
                    },
                    {
                        label: 'Weather Dashboard',
                        value: 'WeatherDashboard',
                    },
                    {
                        label: 'Weather Map',
                        value: 'WeatherMap',
                    },
                    {
                        label: 'Word Highlighter',
                        value: 'WordHighlighter',
                    },
                    {
                        label: 'Word Map',
                        value: 'WordMap',
                    },
                    {
                        label: 'Chat Response',
                        value: 'chatResponse',
                    },
                    {
                        label: 'None',
                        value: 'none',
                    },
                    {
                        label: 'Video',
                        value: 'video',
                    },
                ],
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<
                | '3DModelViewer'
                | 'AudioOutput'
                | 'BucketList'
                | 'BudgetVisualizer'
                | 'Calendar'
                | 'Carousel'
                | 'Checklist'
                | 'Clock'
                | 'CodeView'
                | 'ComplexMulti'
                | 'DataFlowDiagram'
                | 'DecisionTree'
                | 'DiffViewer'
                | 'FileOutput'
                | 'FitnessTracker'
                | 'Flowchart'
                | 'Form'
                | 'GanttChart'
                | 'GeographicMap'
                | 'GlossaryView'
                | 'Heatmap'
                | 'HorizontalList'
                | 'ImageView'
                | 'InteractiveChart'
                | 'JsonViewer'
                | 'KanbanBoard'
                | 'LaTeXRenderer'
                | 'LiveTraffic'
                | 'LocalEvents'
                | 'MarkdownViewer'
                | 'MealPlanner'
                | 'MindMap'
                | 'NeedNewOption'
                | 'NetworkGraph'
                | 'NewsAggregator'
                | 'PDFViewer'
                | 'PivotTable'
                | 'PlainText'
                | 'Presentation'
                | 'PublicLiveCam'
                | 'RichTextEditor'
                | 'RunCodeBack'
                | 'RunCodeFront'
                | 'SVGEditor'
                | 'SankeyDiagram'
                | 'SatelliteView'
                | 'SocialMediaInfo'
                | 'SpectrumAnalyzer'
                | 'Spreadsheet'
                | 'Table'
                | 'TaskPrioritization'
                | 'Textarea'
                | 'Thermometer'
                | 'Timeline'
                | 'TravelPlanner'
                | 'TreeView'
                | 'UMLDiagram'
                | 'VerticalList'
                | 'VoiceSentimentAnalysis'
                | 'WeatherDashboard'
                | 'WeatherMap'
                | 'WordHighlighter'
                | 'WordMap'
                | 'chatResponse'
                | 'none'
                | 'video'
                | undefined
            >,
            enumValues: [
                '3DModelViewer',
                'AudioOutput',
                'BucketList',
                'BudgetVisualizer',
                'Calendar',
                'Carousel',
                'Checklist',
                'Clock',
                'CodeView',
                'ComplexMulti',
                'DataFlowDiagram',
                'DecisionTree',
                'DiffViewer',
                'FileOutput',
                'FitnessTracker',
                'Flowchart',
                'Form',
                'GanttChart',
                'GeographicMap',
                'GlossaryView',
                'Heatmap',
                'HorizontalList',
                'ImageView',
                'InteractiveChart',
                'JsonViewer',
                'KanbanBoard',
                'LaTeXRenderer',
                'LiveTraffic',
                'LocalEvents',
                'MarkdownViewer',
                'MealPlanner',
                'MindMap',
                'NeedNewOption',
                'NetworkGraph',
                'NewsAggregator',
                'PDFViewer',
                'PivotTable',
                'PlainText',
                'Presentation',
                'PublicLiveCam',
                'RichTextEditor',
                'RunCodeBack',
                'RunCodeFront',
                'SVGEditor',
                'SankeyDiagram',
                'SatelliteView',
                'SocialMediaInfo',
                'SpectrumAnalyzer',
                'Spreadsheet',
                'Table',
                'TaskPrioritization',
                'Textarea',
                'Thermometer',
                'Timeline',
                'TravelPlanner',
                'TreeView',
                'UMLDiagram',
                'VerticalList',
                'VoiceSentimentAnalysis',
                'WeatherDashboard',
                'WeatherMap',
                'WordHighlighter',
                'WordMap',
                'chatResponse',
                'none',
                'video',
            ] as const,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Output Component" field for broker. This is an optional field. Your entry must be an string data type.',
        },
        tags: {
            fieldNameFormats: {
                frontend: 'tags',
                backend: 'tags',
                database: 'tags',
                pretty: 'Tags',
                component: 'Tags',
                kebab: 'tags',
                sqlFunctionRef: 'p_tags',
                RestAPI: 'tags',
                GraphQL: 'tags',
                custom: 'tags',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:tags',
            uniqueFieldId: 'supabase_automation_matrix:broker:tags',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '[]' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"Tags" field for broker. This is an optional field. Your entry must be an object data type.',
        },
        stringValue: {
            fieldNameFormats: {
                frontend: 'stringValue',
                backend: 'string_value',
                database: 'string_value',
                pretty: 'String Value',
                component: 'StringValue',
                kebab: 'string-value',
                sqlFunctionRef: 'p_string_value',
                RestAPI: 'stringValue',
                GraphQL: 'stringValue',
                custom: 'stringValue',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:broker:string_value',
            uniqueFieldId: 'supabase_automation_matrix:broker:stringValue',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'broker',
            databaseTable: 'broker',
            foreignKeyReference: null,
            description: '"String Value" field for broker. This is an optional field. Your entry must be an string data type.',
        },
        dataInputComponentReference: {
            fieldNameFormats: {
                frontend: 'dataInputComponentReference',
                backend: 'data_input_component_reference',
                database: 'ref_data_input_component',
                pretty: 'Data Input Component Reference',
                component: 'DataInputComponentReference',
                kebab: 'data-input-componentReference',
                sqlFunctionRef: 'p_ref_data_input_component',
                RestAPI: 'dataInputComponentReference',
                GraphQL: 'dataInputComponentReference',
                custom: 'dataInputComponentReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:data_input_component:id',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'dataInputComponent'>[]>,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            relationshipMap: { data_input_component: 'id' },
        },
        recipeBrokerInverse: {
            fieldNameFormats: {
                frontend: 'recipeBrokerInverse',
                backend: 'recipe_broker_Inverse',
                database: 'ifk_recipe_broker',
                pretty: 'Recipe Broker Inverse',
                component: 'RecipeBrokerInverse',
                kebab: 'recipe-brokerInverse',
                sqlFunctionRef: 'p_ifk_recipe_broker',
                RestAPI: 'recipeBrokerInverse',
                GraphQL: 'recipeBrokerInverse',
                custom: 'recipeBrokerInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:recipe_broker',
            uniqueEntityId: 'supabase_automation_matrix:recipeBroker',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipeBroker'>[]>,
            entityName: 'recipeBroker',
            databaseTable: 'recipe_broker',
        },
        registeredFunctionInverse: {
            fieldNameFormats: {
                frontend: 'registeredFunctionInverse',
                backend: 'registered_function_Inverse',
                database: 'ifk_registered_function',
                pretty: 'Registered Function Inverse',
                component: 'RegisteredFunctionInverse',
                kebab: 'registered-functionInverse',
                sqlFunctionRef: 'p_ifk_registered_function',
                RestAPI: 'registeredFunctionInverse',
                GraphQL: 'registeredFunctionInverse',
                custom: 'registeredFunctionInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:registered_function',
            uniqueEntityId: 'supabase_automation_matrix:registeredFunction',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'registeredFunction'>[]>,
            entityName: 'registeredFunction',
            databaseTable: 'registered_function',
        },
        automationBoundaryBrokerInverse: {
            fieldNameFormats: {
                frontend: 'automationBoundaryBrokerInverse',
                backend: 'automation_boundary_broker_Inverse',
                database: 'ifk_automation_boundary_broker',
                pretty: 'Automation Boundary Broker Inverse',
                component: 'AutomationBoundaryBrokerInverse',
                kebab: 'automation-boundary-brokerInverse',
                sqlFunctionRef: 'p_ifk_automation_boundary_broker',
                RestAPI: 'automationBoundaryBrokerInverse',
                GraphQL: 'automationBoundaryBrokerInverse',
                custom: 'automationBoundaryBrokerInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:automation_boundary_broker',
            uniqueEntityId: 'supabase_automation_matrix:automationBoundaryBroker',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'automationBoundaryBroker'>[]>,
            entityName: 'automationBoundaryBroker',
            databaseTable: 'automation_boundary_broker',
        },
    },
    entityNameFormats: {
        frontend: 'broker',
        backend: 'broker',
        database: 'broker',
        pretty: 'Broker',
        component: 'Broker',
        kebab: 'broker',
        sqlFunctionRef: 'p_broker',
        RestAPI: 'broker',
        GraphQL: 'broker',
        custom: 'broker',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'custom_source_component', relatedTable: 'data_input_component', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'recipe_broker', relatedColumn: 'broker', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'registered_function', relatedColumn: 'return_broker', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'automation_boundary_broker', relatedColumn: 'broker', junctionTable: null },
    ],
} as const;

export const bucketStructures = {
    schemaType: 'table' as const,
    entityName: 'bucketStructures',
    uniqueTableId: 'supabase_automation_matrix:public:bucket_structures',
    uniqueEntityId: 'supabase_automation_matrix:bucketStructures',
    primaryKey: 'bucketId',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['bucketId'],
        database_fields: ['bucket_id'],
        where_template: {
            bucket_id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'bucketId', databaseFieldName: 'bucket_id' },
    defaultFetchStrategy: 'simple',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        bucketId: {
            fieldNameFormats: {
                frontend: 'bucketId',
                backend: 'bucket_id',
                database: 'bucket_id',
                pretty: 'Bucket Id',
                component: 'BucketId',
                kebab: 'bucket-id',
                sqlFunctionRef: 'p_bucket_id',
                RestAPI: 'bucketId',
                GraphQL: 'bucketId',
                custom: 'bucketId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:bucket_structures:bucket_id',
            uniqueFieldId: 'supabase_automation_matrix:bucketStructures:bucketId',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'bucketStructures',
            databaseTable: 'bucket_structures',
            foreignKeyReference: null,
            description: '"Bucket Id" field for bucketStructures. This is a required field. Your entry must be an string data type.',
        },
        structure: {
            fieldNameFormats: {
                frontend: 'structure',
                backend: 'structure',
                database: 'structure',
                pretty: 'Structure',
                component: 'Structure',
                kebab: 'structure',
                sqlFunctionRef: 'p_structure',
                RestAPI: 'structure',
                GraphQL: 'structure',
                custom: 'structure',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:bucket_structures:structure',
            uniqueFieldId: 'supabase_automation_matrix:bucketStructures:structure',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'bucketStructures',
            databaseTable: 'bucket_structures',
            foreignKeyReference: null,
            description: '"Structure" field for bucketStructures. This is an optional field. Your entry must be an object data type.',
        },
        lastUpdated: {
            fieldNameFormats: {
                frontend: 'lastUpdated',
                backend: 'last_updated',
                database: 'last_updated',
                pretty: 'Last Updated',
                component: 'LastUpdated',
                kebab: 'last-updated',
                sqlFunctionRef: 'p_last_updated',
                RestAPI: 'lastUpdated',
                GraphQL: 'lastUpdated',
                custom: 'lastUpdated',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:bucket_structures:last_updated',
            uniqueFieldId: 'supabase_automation_matrix:bucketStructures:lastUpdated',

            dataType: 'date' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'bucketStructures',
            databaseTable: 'bucket_structures',
            foreignKeyReference: null,
            description: '"Last Updated" field for bucketStructures. This is an optional field. Your entry must be an date data type.',
        },
    },
    entityNameFormats: {
        frontend: 'bucketStructures',
        backend: 'bucket_structures',
        database: 'bucket_structures',
        pretty: 'Bucket Structures',
        component: 'BucketStructures',
        kebab: 'bucket-structures',
        sqlFunctionRef: 'p_bucket_structures',
        RestAPI: 'bucketStructures',
        GraphQL: 'bucketStructures',
        custom: 'bucketStructures',
    },
    relationships: [],
} as const;

export const bucketTreeStructures = {
    schemaType: 'table' as const,
    entityName: 'bucketTreeStructures',
    uniqueTableId: 'supabase_automation_matrix:public:bucket_tree_structures',
    uniqueEntityId: 'supabase_automation_matrix:bucketTreeStructures',
    primaryKey: 'bucketId',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['bucketId'],
        database_fields: ['bucket_id'],
        where_template: {
            bucket_id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'bucketId', databaseFieldName: 'bucket_id' },
    defaultFetchStrategy: 'simple',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        bucketId: {
            fieldNameFormats: {
                frontend: 'bucketId',
                backend: 'bucket_id',
                database: 'bucket_id',
                pretty: 'Bucket Id',
                component: 'BucketId',
                kebab: 'bucket-id',
                sqlFunctionRef: 'p_bucket_id',
                RestAPI: 'bucketId',
                GraphQL: 'bucketId',
                custom: 'bucketId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:bucket_tree_structures:bucket_id',
            uniqueFieldId: 'supabase_automation_matrix:bucketTreeStructures:bucketId',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'bucketTreeStructures',
            databaseTable: 'bucket_tree_structures',
            foreignKeyReference: null,
            description: '"Bucket Id" field for bucketTreeStructures. This is a required field. Your entry must be an string data type.',
        },
        treeStructure: {
            fieldNameFormats: {
                frontend: 'treeStructure',
                backend: 'tree_structure',
                database: 'tree_structure',
                pretty: 'Tree Structure',
                component: 'TreeStructure',
                kebab: 'tree-structure',
                sqlFunctionRef: 'p_tree_structure',
                RestAPI: 'treeStructure',
                GraphQL: 'treeStructure',
                custom: 'treeStructure',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:bucket_tree_structures:tree_structure',
            uniqueFieldId: 'supabase_automation_matrix:bucketTreeStructures:treeStructure',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'bucketTreeStructures',
            databaseTable: 'bucket_tree_structures',
            foreignKeyReference: null,
            description: '"Tree Structure" field for bucketTreeStructures. This is an optional field. Your entry must be an object data type.',
        },
        lastUpdated: {
            fieldNameFormats: {
                frontend: 'lastUpdated',
                backend: 'last_updated',
                database: 'last_updated',
                pretty: 'Last Updated',
                component: 'LastUpdated',
                kebab: 'last-updated',
                sqlFunctionRef: 'p_last_updated',
                RestAPI: 'lastUpdated',
                GraphQL: 'lastUpdated',
                custom: 'lastUpdated',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:bucket_tree_structures:last_updated',
            uniqueFieldId: 'supabase_automation_matrix:bucketTreeStructures:lastUpdated',

            dataType: 'date' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'bucketTreeStructures',
            databaseTable: 'bucket_tree_structures',
            foreignKeyReference: null,
            description: '"Last Updated" field for bucketTreeStructures. This is an optional field. Your entry must be an date data type.',
        },
    },
    entityNameFormats: {
        frontend: 'bucketTreeStructures',
        backend: 'bucket_tree_structures',
        database: 'bucket_tree_structures',
        pretty: 'Bucket Tree Structures',
        component: 'BucketTreeStructures',
        kebab: 'bucket-tree-structures',
        sqlFunctionRef: 'p_bucket_tree_structures',
        RestAPI: 'bucketTreeStructures',
        GraphQL: 'bucketTreeStructures',
        custom: 'bucketTreeStructures',
    },
    relationships: [],
} as const;

export const dataBroker = {
    schemaType: 'table' as const,
    entityName: 'dataBroker',
    uniqueTableId: 'supabase_automation_matrix:public:data_broker',
    uniqueEntityId: 'supabase_automation_matrix:dataBroker',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'fkAndIfk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_broker:id',
            uniqueFieldId: 'supabase_automation_matrix:dataBroker:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'dataBroker',
            databaseTable: 'data_broker',
            foreignKeyReference: null,
            description: '"Id" field for dataBroker. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_broker:name',
            uniqueFieldId: 'supabase_automation_matrix:dataBroker:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'dataBroker',
            databaseTable: 'data_broker',
            foreignKeyReference: null,
            description: '"Name" field for dataBroker. This is a required field. Your entry must be an string data type.',
        },
        dataType: {
            fieldNameFormats: {
                frontend: 'dataType',
                backend: 'data_type',
                database: 'data_type',
                pretty: 'Data Type',
                component: 'DataType',
                kebab: 'data-type',
                sqlFunctionRef: 'p_data_type',
                RestAPI: 'dataType',
                GraphQL: 'dataType',
                custom: 'dataType',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_broker:data_type',
            uniqueFieldId: 'supabase_automation_matrix:dataBroker:dataType',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'str' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Bool',
                        value: 'bool',
                    },
                    {
                        label: 'Dict',
                        value: 'dict',
                    },
                    {
                        label: 'Float',
                        value: 'float',
                    },
                    {
                        label: 'Int',
                        value: 'int',
                    },
                    {
                        label: 'List',
                        value: 'list',
                    },
                    {
                        label: 'Str',
                        value: 'str',
                    },
                    {
                        label: 'Url',
                        value: 'url',
                    },
                ],
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<'bool' | 'dict' | 'float' | 'int' | 'list' | 'str' | 'url' | undefined>,
            enumValues: ['bool', 'dict', 'float', 'int', 'list', 'str', 'url'] as const,
            entityName: 'dataBroker',
            databaseTable: 'data_broker',
            foreignKeyReference: null,
            description: '"Data Type" field for dataBroker. This is an optional field. Your entry must be an string data type.',
        },
        defaultValue: {
            fieldNameFormats: {
                frontend: 'defaultValue',
                backend: 'default_value',
                database: 'default_value',
                pretty: 'Default Value',
                component: 'DefaultValue',
                kebab: 'default-value',
                sqlFunctionRef: 'p_default_value',
                RestAPI: 'defaultValue',
                GraphQL: 'defaultValue',
                custom: 'defaultValue',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_broker:default_value',
            uniqueFieldId: 'supabase_automation_matrix:dataBroker:defaultValue',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'dataBroker',
            databaseTable: 'data_broker',
            foreignKeyReference: null,
            description: '"Default Value" field for dataBroker. This is an optional field. Your entry must be an string data type.',
        },
        defaultComponent: {
            fieldNameFormats: {
                frontend: 'defaultComponent',
                backend: 'default_component',
                database: 'default_component',
                pretty: 'Default Component',
                component: 'DefaultComponent',
                kebab: 'default-component',
                sqlFunctionRef: 'p_default_component',
                RestAPI: 'defaultComponent',
                GraphQL: 'defaultComponent',
                custom: 'defaultComponent',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_broker:default_component',
            uniqueFieldId: 'supabase_automation_matrix:dataBroker:defaultComponent',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '6463aae0-9480-4c4c-90b8-e3ce9c11a103' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'dataBroker',
            databaseTable: 'data_broker',
            foreignKeyReference: { table: 'data_input_component', column: 'id', entity: 'dataInputComponent', field: 'id' },
            description:
                '"Default Component" field for dataBroker. This is an optional field. Your entry must be an uuid data type. This field is a reference to a dataInputComponent.',
        },
        color: {
            fieldNameFormats: {
                frontend: 'color',
                backend: 'color',
                database: 'color',
                pretty: 'Color',
                component: 'Color',
                kebab: 'color',
                sqlFunctionRef: 'p_color',
                RestAPI: 'color',
                GraphQL: 'color',
                custom: 'color',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_broker:color',
            uniqueFieldId: 'supabase_automation_matrix:dataBroker:color',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'Blue' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Amber',
                        value: 'Amber',
                    },
                    {
                        label: 'Blue',
                        value: 'Blue',
                    },
                    {
                        label: 'Cyan',
                        value: 'Cyan',
                    },
                    {
                        label: 'Emerald',
                        value: 'Emerald',
                    },
                    {
                        label: 'Fuchsia',
                        value: 'Fuchsia',
                    },
                    {
                        label: 'Gray',
                        value: 'Gray',
                    },
                    {
                        label: 'Green',
                        value: 'Green',
                    },
                    {
                        label: 'Indigo',
                        value: 'Indigo',
                    },
                    {
                        label: 'Lime',
                        value: 'Lime',
                    },
                    {
                        label: 'Neutral',
                        value: 'Neutral',
                    },
                    {
                        label: 'Orange',
                        value: 'Orange',
                    },
                    {
                        label: 'Pink',
                        value: 'Pink',
                    },
                    {
                        label: 'Purple',
                        value: 'Purple',
                    },
                    {
                        label: 'Red',
                        value: 'Red',
                    },
                    {
                        label: 'Rose',
                        value: 'Rose',
                    },
                    {
                        label: 'Sky',
                        value: 'Sky',
                    },
                    {
                        label: 'Slate',
                        value: 'Slate',
                    },
                    {
                        label: 'Stone',
                        value: 'Stone',
                    },
                    {
                        label: 'Teal',
                        value: 'Teal',
                    },
                    {
                        label: 'Violet',
                        value: 'Violet',
                    },
                    {
                        label: 'Yellow',
                        value: 'Yellow',
                    },
                    {
                        label: 'Zinc',
                        value: 'Zinc',
                    },
                ],
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<
                | 'Amber'
                | 'Blue'
                | 'Cyan'
                | 'Emerald'
                | 'Fuchsia'
                | 'Gray'
                | 'Green'
                | 'Indigo'
                | 'Lime'
                | 'Neutral'
                | 'Orange'
                | 'Pink'
                | 'Purple'
                | 'Red'
                | 'Rose'
                | 'Sky'
                | 'Slate'
                | 'Stone'
                | 'Teal'
                | 'Violet'
                | 'Yellow'
                | 'Zinc'
                | undefined
            >,
            enumValues: [
                'Amber',
                'Blue',
                'Cyan',
                'Emerald',
                'Fuchsia',
                'Gray',
                'Green',
                'Indigo',
                'Lime',
                'Neutral',
                'Orange',
                'Pink',
                'Purple',
                'Red',
                'Rose',
                'Sky',
                'Slate',
                'Stone',
                'Teal',
                'Violet',
                'Yellow',
                'Zinc',
            ] as const,
            entityName: 'dataBroker',
            databaseTable: 'data_broker',
            foreignKeyReference: null,
            description: '"Color" field for dataBroker. This is an optional field. Your entry must be an string data type.',
        },
        dataInputComponentReference: {
            fieldNameFormats: {
                frontend: 'dataInputComponentReference',
                backend: 'data_input_component_reference',
                database: 'ref_data_input_component',
                pretty: 'Data Input Component Reference',
                component: 'DataInputComponentReference',
                kebab: 'data-input-componentReference',
                sqlFunctionRef: 'p_ref_data_input_component',
                RestAPI: 'dataInputComponentReference',
                GraphQL: 'dataInputComponentReference',
                custom: 'dataInputComponentReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:data_input_component:id',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'dataInputComponent'>[]>,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            relationshipMap: { data_input_component: 'id' },
        },
        messageBrokerInverse: {
            fieldNameFormats: {
                frontend: 'messageBrokerInverse',
                backend: 'message_broker_Inverse',
                database: 'ifk_message_broker',
                pretty: 'Message Broker Inverse',
                component: 'MessageBrokerInverse',
                kebab: 'message-brokerInverse',
                sqlFunctionRef: 'p_ifk_message_broker',
                RestAPI: 'messageBrokerInverse',
                GraphQL: 'messageBrokerInverse',
                custom: 'messageBrokerInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:message_broker',
            uniqueEntityId: 'supabase_automation_matrix:messageBroker',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'messageBroker'>[]>,
            entityName: 'messageBroker',
            databaseTable: 'message_broker',
        },
    },
    entityNameFormats: {
        frontend: 'dataBroker',
        backend: 'data_broker',
        database: 'data_broker',
        pretty: 'Data Broker',
        component: 'DataBroker',
        kebab: 'data-broker',
        sqlFunctionRef: 'p_data_broker',
        RestAPI: 'dataBroker',
        GraphQL: 'dataBroker',
        custom: 'dataBroker',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'default_component', relatedTable: 'data_input_component', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'message_broker', relatedColumn: 'broker_id', junctionTable: null },
    ],
} as const;

export const dataInputComponent = {
    schemaType: 'table' as const,
    entityName: 'dataInputComponent',
    uniqueTableId: 'supabase_automation_matrix:public:data_input_component',
    uniqueEntityId: 'supabase_automation_matrix:dataInputComponent',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'ifk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:id',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Id" field for dataInputComponent. This is a required field. Your entry must be an uuid data type.',
        },
        options: {
            fieldNameFormats: {
                frontend: 'options',
                backend: 'options',
                database: 'options',
                pretty: 'Options',
                component: 'Options',
                kebab: 'options',
                sqlFunctionRef: 'p_options',
                RestAPI: 'options',
                GraphQL: 'options',
                custom: 'options',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:options',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:options',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Options" field for dataInputComponent. This is an optional field. Your entry must be an object data type.',
        },
        includeOther: {
            fieldNameFormats: {
                frontend: 'includeOther',
                backend: 'include_other',
                database: 'include_other',
                pretty: 'Include Other',
                component: 'IncludeOther',
                kebab: 'include-other',
                sqlFunctionRef: 'p_include_other',
                RestAPI: 'includeOther',
                GraphQL: 'includeOther',
                custom: 'includeOther',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:include_other',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:includeOther',

            dataType: 'boolean' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Include Other" field for dataInputComponent. This is an optional field. Your entry must be an boolean data type.',
        },
        min: {
            fieldNameFormats: {
                frontend: 'min',
                backend: 'min',
                database: 'min',
                pretty: 'Min',
                component: 'Min',
                kebab: 'min',
                sqlFunctionRef: 'p_min',
                RestAPI: 'min',
                GraphQL: 'min',
                custom: 'min',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:min',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:min',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'real',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Min" field for dataInputComponent. This is an optional field. Your entry must be an number data type.',
        },
        max: {
            fieldNameFormats: {
                frontend: 'max',
                backend: 'max',
                database: 'max',
                pretty: 'Max',
                component: 'Max',
                kebab: 'max',
                sqlFunctionRef: 'p_max',
                RestAPI: 'max',
                GraphQL: 'max',
                custom: 'max',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:max',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:max',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'real',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Max" field for dataInputComponent. This is an optional field. Your entry must be an number data type.',
        },
        step: {
            fieldNameFormats: {
                frontend: 'step',
                backend: 'step',
                database: 'step',
                pretty: 'Step',
                component: 'Step',
                kebab: 'step',
                sqlFunctionRef: 'p_step',
                RestAPI: 'step',
                GraphQL: 'step',
                custom: 'step',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:step',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:step',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'integer',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Step" field for dataInputComponent. This is an optional field. Your entry must be an number data type.',
        },
        minRows: {
            fieldNameFormats: {
                frontend: 'minRows',
                backend: 'min_rows',
                database: 'min_rows',
                pretty: 'Min Rows',
                component: 'MinRows',
                kebab: 'min-rows',
                sqlFunctionRef: 'p_min_rows',
                RestAPI: 'minRows',
                GraphQL: 'minRows',
                custom: 'minRows',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:min_rows',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:minRows',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Min Rows" field for dataInputComponent. This is an optional field. Your entry must be an number data type.',
        },
        maxRows: {
            fieldNameFormats: {
                frontend: 'maxRows',
                backend: 'max_rows',
                database: 'max_rows',
                pretty: 'Max Rows',
                component: 'MaxRows',
                kebab: 'max-rows',
                sqlFunctionRef: 'p_max_rows',
                RestAPI: 'maxRows',
                GraphQL: 'maxRows',
                custom: 'maxRows',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:max_rows',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:maxRows',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Max Rows" field for dataInputComponent. This is an optional field. Your entry must be an number data type.',
        },
        acceptableFiletypes: {
            fieldNameFormats: {
                frontend: 'acceptableFiletypes',
                backend: 'acceptable_filetypes',
                database: 'acceptable_filetypes',
                pretty: 'Acceptable Filetypes',
                component: 'AcceptableFiletypes',
                kebab: 'acceptable-filetypes',
                sqlFunctionRef: 'p_acceptable_filetypes',
                RestAPI: 'acceptableFiletypes',
                GraphQL: 'acceptableFiletypes',
                custom: 'acceptableFiletypes',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:acceptable_filetypes',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:acceptableFiletypes',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Acceptable Filetypes" field for dataInputComponent. This is an optional field. Your entry must be an object data type.',
        },
        src: {
            fieldNameFormats: {
                frontend: 'src',
                backend: 'src',
                database: 'src',
                pretty: 'Src',
                component: 'Src',
                kebab: 'src',
                sqlFunctionRef: 'p_src',
                RestAPI: 'src',
                GraphQL: 'src',
                custom: 'src',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:src',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:src',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Src" field for dataInputComponent. This is an optional field. Your entry must be an string data type.',
        },
        classes: {
            fieldNameFormats: {
                frontend: 'classes',
                backend: 'classes',
                database: 'classes',
                pretty: 'Classes',
                component: 'Classes',
                kebab: 'classes',
                sqlFunctionRef: 'p_classes',
                RestAPI: 'classes',
                GraphQL: 'classes',
                custom: 'classes',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:classes',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:classes',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Classes" field for dataInputComponent. This is an optional field. Your entry must be an string data type.',
        },
        colorOverrides: {
            fieldNameFormats: {
                frontend: 'colorOverrides',
                backend: 'color_overrides',
                database: 'color_overrides',
                pretty: 'Color Overrides',
                component: 'ColorOverrides',
                kebab: 'color-overrides',
                sqlFunctionRef: 'p_color_overrides',
                RestAPI: 'colorOverrides',
                GraphQL: 'colorOverrides',
                custom: 'colorOverrides',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:color_overrides',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:colorOverrides',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Color Overrides" field for dataInputComponent. This is an optional field. Your entry must be an object data type.',
        },
        additionalParams: {
            fieldNameFormats: {
                frontend: 'additionalParams',
                backend: 'additional_params',
                database: 'additional_params',
                pretty: 'Additional Params',
                component: 'AdditionalParams',
                kebab: 'additional-params',
                sqlFunctionRef: 'p_additional_params',
                RestAPI: 'additionalParams',
                GraphQL: 'additionalParams',
                custom: 'additionalParams',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:additional_params',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:additionalParams',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Additional Params" field for dataInputComponent. This is an optional field. Your entry must be an object data type.',
        },
        subComponent: {
            fieldNameFormats: {
                frontend: 'subComponent',
                backend: 'sub_component',
                database: 'sub_component',
                pretty: 'Sub Component',
                component: 'SubComponent',
                kebab: 'sub-component',
                sqlFunctionRef: 'p_sub_component',
                RestAPI: 'subComponent',
                GraphQL: 'subComponent',
                custom: 'subComponent',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:sub_component',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:subComponent',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Sub Component" field for dataInputComponent. This is an optional field. Your entry must be an string data type.',
        },
        component: {
            fieldNameFormats: {
                frontend: 'component',
                backend: 'component',
                database: 'component',
                pretty: 'Component',
                component: 'Component',
                kebab: 'component',
                sqlFunctionRef: 'p_component',
                RestAPI: 'component',
                GraphQL: 'component',
                custom: 'component',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:component',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:component',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: 'Textarea' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Accordion Selected',
                        value: 'Accordion_Selected',
                    },
                    {
                        label: 'Accordion View',
                        value: 'Accordion_View',
                    },
                    {
                        label: 'Accordion View Add Edit',
                        value: 'Accordion_View_Add_Edit',
                    },
                    {
                        label: 'Button',
                        value: 'Button',
                    },
                    {
                        label: 'Checkbox',
                        value: 'Checkbox',
                    },
                    {
                        label: 'Chip',
                        value: 'Chip',
                    },
                    {
                        label: 'Color Picker',
                        value: 'Color_Picker',
                    },
                    {
                        label: 'Date Picker',
                        value: 'Date_Picker',
                    },
                    {
                        label: 'Drawer',
                        value: 'Drawer',
                    },
                    {
                        label: 'File Upload',
                        value: 'File_Upload',
                    },
                    {
                        label: 'Image Display',
                        value: 'Image_Display',
                    },
                    {
                        label: 'Input',
                        value: 'Input',
                    },
                    {
                        label: 'Json Editor',
                        value: 'Json_Editor',
                    },
                    {
                        label: 'Menu',
                        value: 'Menu',
                    },
                    {
                        label: 'Number Input',
                        value: 'Number_Input',
                    },
                    {
                        label: 'Phone Input',
                        value: 'Phone_Input',
                    },
                    {
                        label: 'Radio Group',
                        value: 'Radio_Group',
                    },
                    {
                        label: 'Relational Button',
                        value: 'Relational_Button',
                    },
                    {
                        label: 'Relational Input',
                        value: 'Relational_Input',
                    },
                    {
                        label: 'Search Input',
                        value: 'Search_Input',
                    },
                    {
                        label: 'Select',
                        value: 'Select',
                    },
                    {
                        label: 'Sheet',
                        value: 'Sheet',
                    },
                    {
                        label: 'Slider',
                        value: 'Slider',
                    },
                    {
                        label: 'Star Rating',
                        value: 'Star_Rating',
                    },
                    {
                        label: 'Switch',
                        value: 'Switch',
                    },
                    {
                        label: 'Textarea',
                        value: 'Textarea',
                    },
                    {
                        label: 'Time Picker',
                        value: 'Time_Picker',
                    },
                    {
                        label: 'U U I D Array',
                        value: 'UUID_Array',
                    },
                    {
                        label: 'U U I D Field',
                        value: 'UUID_Field',
                    },
                ],
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<
                | 'Accordion_Selected'
                | 'Accordion_View'
                | 'Accordion_View_Add_Edit'
                | 'Button'
                | 'Checkbox'
                | 'Chip'
                | 'Color_Picker'
                | 'Date_Picker'
                | 'Drawer'
                | 'File_Upload'
                | 'Image_Display'
                | 'Input'
                | 'Json_Editor'
                | 'Menu'
                | 'Number_Input'
                | 'Phone_Input'
                | 'Radio_Group'
                | 'Relational_Button'
                | 'Relational_Input'
                | 'Search_Input'
                | 'Select'
                | 'Sheet'
                | 'Slider'
                | 'Star_Rating'
                | 'Switch'
                | 'Textarea'
                | 'Time_Picker'
                | 'UUID_Array'
                | 'UUID_Field'
                | undefined
            >,
            enumValues: [
                'Accordion_Selected',
                'Accordion_View',
                'Accordion_View_Add_Edit',
                'Button',
                'Checkbox',
                'Chip',
                'Color_Picker',
                'Date_Picker',
                'Drawer',
                'File_Upload',
                'Image_Display',
                'Input',
                'Json_Editor',
                'Menu',
                'Number_Input',
                'Phone_Input',
                'Radio_Group',
                'Relational_Button',
                'Relational_Input',
                'Search_Input',
                'Select',
                'Sheet',
                'Slider',
                'Star_Rating',
                'Switch',
                'Textarea',
                'Time_Picker',
                'UUID_Array',
                'UUID_Field',
            ] as const,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Component" field for dataInputComponent. This is a required field. Your entry must be an string data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_input_component:name',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:name',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            foreignKeyReference: null,
            description: '"Name" field for dataInputComponent. This is an optional field. Your entry must be an string data type.',
        },
        messageBrokerInverse: {
            fieldNameFormats: {
                frontend: 'messageBrokerInverse',
                backend: 'message_broker_Inverse',
                database: 'ifk_message_broker',
                pretty: 'Message Broker Inverse',
                component: 'MessageBrokerInverse',
                kebab: 'message-brokerInverse',
                sqlFunctionRef: 'p_ifk_message_broker',
                RestAPI: 'messageBrokerInverse',
                GraphQL: 'messageBrokerInverse',
                custom: 'messageBrokerInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:message_broker',
            uniqueEntityId: 'supabase_automation_matrix:messageBroker',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'messageBroker'>[]>,
            entityName: 'messageBroker',
            databaseTable: 'message_broker',
        },
        brokerInverse: {
            fieldNameFormats: {
                frontend: 'brokerInverse',
                backend: 'broker_Inverse',
                database: 'ifk_broker',
                pretty: 'Broker Inverse',
                component: 'BrokerInverse',
                kebab: 'brokerInverse',
                sqlFunctionRef: 'p_ifk_broker',
                RestAPI: 'brokerInverse',
                GraphQL: 'brokerInverse',
                custom: 'brokerInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:broker',
            uniqueEntityId: 'supabase_automation_matrix:broker',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'broker'>[]>,
            entityName: 'broker',
            databaseTable: 'broker',
        },
        dataBrokerInverse: {
            fieldNameFormats: {
                frontend: 'dataBrokerInverse',
                backend: 'data_broker_Inverse',
                database: 'ifk_data_broker',
                pretty: 'Data Broker Inverse',
                component: 'DataBrokerInverse',
                kebab: 'data-brokerInverse',
                sqlFunctionRef: 'p_ifk_data_broker',
                RestAPI: 'dataBrokerInverse',
                GraphQL: 'dataBrokerInverse',
                custom: 'dataBrokerInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:data_broker',
            uniqueEntityId: 'supabase_automation_matrix:dataBroker',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'dataBroker'>[]>,
            entityName: 'dataBroker',
            databaseTable: 'data_broker',
        },
    },
    entityNameFormats: {
        frontend: 'dataInputComponent',
        backend: 'data_input_component',
        database: 'data_input_component',
        pretty: 'Data Input Component',
        component: 'DataInputComponent',
        kebab: 'data-input-component',
        sqlFunctionRef: 'p_data_input_component',
        RestAPI: 'dataInputComponent',
        GraphQL: 'dataInputComponent',
        custom: 'dataInputComponent',
    },
    relationships: [
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'message_broker', relatedColumn: 'default_component', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'broker', relatedColumn: 'custom_source_component', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'data_broker', relatedColumn: 'default_component', junctionTable: null },
    ],
} as const;

export const dataOutputComponent = {
    schemaType: 'table' as const,
    entityName: 'dataOutputComponent',
    uniqueTableId: 'supabase_automation_matrix:public:data_output_component',
    uniqueEntityId: 'supabase_automation_matrix:dataOutputComponent',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'id', databaseFieldName: 'id' },
    defaultFetchStrategy: 'simple',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_output_component:id',
            uniqueFieldId: 'supabase_automation_matrix:dataOutputComponent:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'dataOutputComponent',
            databaseTable: 'data_output_component',
            foreignKeyReference: null,
            description: '"Id" field for dataOutputComponent. This is a required field. Your entry must be an uuid data type.',
        },
        componentType: {
            fieldNameFormats: {
                frontend: 'componentType',
                backend: 'component_type',
                database: 'component_type',
                pretty: 'Component Type',
                component: 'ComponentType',
                kebab: 'component-type',
                sqlFunctionRef: 'p_component_type',
                RestAPI: 'componentType',
                GraphQL: 'componentType',
                custom: 'componentType',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_output_component:component_type',
            uniqueFieldId: 'supabase_automation_matrix:dataOutputComponent:componentType',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: '3 D Model Viewer',
                        value: '3DModelViewer',
                    },
                    {
                        label: 'Audio Output',
                        value: 'AudioOutput',
                    },
                    {
                        label: 'Bucket List',
                        value: 'BucketList',
                    },
                    {
                        label: 'Budget Visualizer',
                        value: 'BudgetVisualizer',
                    },
                    {
                        label: 'Calendar',
                        value: 'Calendar',
                    },
                    {
                        label: 'Carousel',
                        value: 'Carousel',
                    },
                    {
                        label: 'Checklist',
                        value: 'Checklist',
                    },
                    {
                        label: 'Clock',
                        value: 'Clock',
                    },
                    {
                        label: 'Code View',
                        value: 'CodeView',
                    },
                    {
                        label: 'Complex Multi',
                        value: 'ComplexMulti',
                    },
                    {
                        label: 'Data Flow Diagram',
                        value: 'DataFlowDiagram',
                    },
                    {
                        label: 'Decision Tree',
                        value: 'DecisionTree',
                    },
                    {
                        label: 'Diff Viewer',
                        value: 'DiffViewer',
                    },
                    {
                        label: 'File Output',
                        value: 'FileOutput',
                    },
                    {
                        label: 'Fitness Tracker',
                        value: 'FitnessTracker',
                    },
                    {
                        label: 'Flowchart',
                        value: 'Flowchart',
                    },
                    {
                        label: 'Form',
                        value: 'Form',
                    },
                    {
                        label: 'Gantt Chart',
                        value: 'GanttChart',
                    },
                    {
                        label: 'Geographic Map',
                        value: 'GeographicMap',
                    },
                    {
                        label: 'Glossary View',
                        value: 'GlossaryView',
                    },
                    {
                        label: 'Heatmap',
                        value: 'Heatmap',
                    },
                    {
                        label: 'Horizontal List',
                        value: 'HorizontalList',
                    },
                    {
                        label: 'Image View',
                        value: 'ImageView',
                    },
                    {
                        label: 'Interactive Chart',
                        value: 'InteractiveChart',
                    },
                    {
                        label: 'Json Viewer',
                        value: 'JsonViewer',
                    },
                    {
                        label: 'Kanban Board',
                        value: 'KanbanBoard',
                    },
                    {
                        label: 'La Te X Renderer',
                        value: 'LaTeXRenderer',
                    },
                    {
                        label: 'Live Traffic',
                        value: 'LiveTraffic',
                    },
                    {
                        label: 'Local Events',
                        value: 'LocalEvents',
                    },
                    {
                        label: 'Markdown Viewer',
                        value: 'MarkdownViewer',
                    },
                    {
                        label: 'Meal Planner',
                        value: 'MealPlanner',
                    },
                    {
                        label: 'Mind Map',
                        value: 'MindMap',
                    },
                    {
                        label: 'Need New Option',
                        value: 'NeedNewOption',
                    },
                    {
                        label: 'Network Graph',
                        value: 'NetworkGraph',
                    },
                    {
                        label: 'News Aggregator',
                        value: 'NewsAggregator',
                    },
                    {
                        label: 'P D F Viewer',
                        value: 'PDFViewer',
                    },
                    {
                        label: 'Pivot Table',
                        value: 'PivotTable',
                    },
                    {
                        label: 'Plain Text',
                        value: 'PlainText',
                    },
                    {
                        label: 'Presentation',
                        value: 'Presentation',
                    },
                    {
                        label: 'Public Live Cam',
                        value: 'PublicLiveCam',
                    },
                    {
                        label: 'Rich Text Editor',
                        value: 'RichTextEditor',
                    },
                    {
                        label: 'Run Code Back',
                        value: 'RunCodeBack',
                    },
                    {
                        label: 'Run Code Front',
                        value: 'RunCodeFront',
                    },
                    {
                        label: 'S V G Editor',
                        value: 'SVGEditor',
                    },
                    {
                        label: 'Sankey Diagram',
                        value: 'SankeyDiagram',
                    },
                    {
                        label: 'Satellite View',
                        value: 'SatelliteView',
                    },
                    {
                        label: 'Social Media Info',
                        value: 'SocialMediaInfo',
                    },
                    {
                        label: 'Spectrum Analyzer',
                        value: 'SpectrumAnalyzer',
                    },
                    {
                        label: 'Spreadsheet',
                        value: 'Spreadsheet',
                    },
                    {
                        label: 'Table',
                        value: 'Table',
                    },
                    {
                        label: 'Task Prioritization',
                        value: 'TaskPrioritization',
                    },
                    {
                        label: 'Textarea',
                        value: 'Textarea',
                    },
                    {
                        label: 'Thermometer',
                        value: 'Thermometer',
                    },
                    {
                        label: 'Timeline',
                        value: 'Timeline',
                    },
                    {
                        label: 'Travel Planner',
                        value: 'TravelPlanner',
                    },
                    {
                        label: 'Tree View',
                        value: 'TreeView',
                    },
                    {
                        label: 'U M L Diagram',
                        value: 'UMLDiagram',
                    },
                    {
                        label: 'Vertical List',
                        value: 'VerticalList',
                    },
                    {
                        label: 'Voice Sentiment Analysis',
                        value: 'VoiceSentimentAnalysis',
                    },
                    {
                        label: 'Weather Dashboard',
                        value: 'WeatherDashboard',
                    },
                    {
                        label: 'Weather Map',
                        value: 'WeatherMap',
                    },
                    {
                        label: 'Word Highlighter',
                        value: 'WordHighlighter',
                    },
                    {
                        label: 'Word Map',
                        value: 'WordMap',
                    },
                    {
                        label: 'Chat Response',
                        value: 'chatResponse',
                    },
                    {
                        label: 'None',
                        value: 'none',
                    },
                    {
                        label: 'Video',
                        value: 'video',
                    },
                ],
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<
                | '3DModelViewer'
                | 'AudioOutput'
                | 'BucketList'
                | 'BudgetVisualizer'
                | 'Calendar'
                | 'Carousel'
                | 'Checklist'
                | 'Clock'
                | 'CodeView'
                | 'ComplexMulti'
                | 'DataFlowDiagram'
                | 'DecisionTree'
                | 'DiffViewer'
                | 'FileOutput'
                | 'FitnessTracker'
                | 'Flowchart'
                | 'Form'
                | 'GanttChart'
                | 'GeographicMap'
                | 'GlossaryView'
                | 'Heatmap'
                | 'HorizontalList'
                | 'ImageView'
                | 'InteractiveChart'
                | 'JsonViewer'
                | 'KanbanBoard'
                | 'LaTeXRenderer'
                | 'LiveTraffic'
                | 'LocalEvents'
                | 'MarkdownViewer'
                | 'MealPlanner'
                | 'MindMap'
                | 'NeedNewOption'
                | 'NetworkGraph'
                | 'NewsAggregator'
                | 'PDFViewer'
                | 'PivotTable'
                | 'PlainText'
                | 'Presentation'
                | 'PublicLiveCam'
                | 'RichTextEditor'
                | 'RunCodeBack'
                | 'RunCodeFront'
                | 'SVGEditor'
                | 'SankeyDiagram'
                | 'SatelliteView'
                | 'SocialMediaInfo'
                | 'SpectrumAnalyzer'
                | 'Spreadsheet'
                | 'Table'
                | 'TaskPrioritization'
                | 'Textarea'
                | 'Thermometer'
                | 'Timeline'
                | 'TravelPlanner'
                | 'TreeView'
                | 'UMLDiagram'
                | 'VerticalList'
                | 'VoiceSentimentAnalysis'
                | 'WeatherDashboard'
                | 'WeatherMap'
                | 'WordHighlighter'
                | 'WordMap'
                | 'chatResponse'
                | 'none'
                | 'video'
                | undefined
            >,
            enumValues: [
                '3DModelViewer',
                'AudioOutput',
                'BucketList',
                'BudgetVisualizer',
                'Calendar',
                'Carousel',
                'Checklist',
                'Clock',
                'CodeView',
                'ComplexMulti',
                'DataFlowDiagram',
                'DecisionTree',
                'DiffViewer',
                'FileOutput',
                'FitnessTracker',
                'Flowchart',
                'Form',
                'GanttChart',
                'GeographicMap',
                'GlossaryView',
                'Heatmap',
                'HorizontalList',
                'ImageView',
                'InteractiveChart',
                'JsonViewer',
                'KanbanBoard',
                'LaTeXRenderer',
                'LiveTraffic',
                'LocalEvents',
                'MarkdownViewer',
                'MealPlanner',
                'MindMap',
                'NeedNewOption',
                'NetworkGraph',
                'NewsAggregator',
                'PDFViewer',
                'PivotTable',
                'PlainText',
                'Presentation',
                'PublicLiveCam',
                'RichTextEditor',
                'RunCodeBack',
                'RunCodeFront',
                'SVGEditor',
                'SankeyDiagram',
                'SatelliteView',
                'SocialMediaInfo',
                'SpectrumAnalyzer',
                'Spreadsheet',
                'Table',
                'TaskPrioritization',
                'Textarea',
                'Thermometer',
                'Timeline',
                'TravelPlanner',
                'TreeView',
                'UMLDiagram',
                'VerticalList',
                'VoiceSentimentAnalysis',
                'WeatherDashboard',
                'WeatherMap',
                'WordHighlighter',
                'WordMap',
                'chatResponse',
                'none',
                'video',
            ] as const,
            entityName: 'dataOutputComponent',
            databaseTable: 'data_output_component',
            foreignKeyReference: null,
            description: '"Component Type" field for dataOutputComponent. This is an optional field. Your entry must be an string data type.',
        },
        uiComponent: {
            fieldNameFormats: {
                frontend: 'uiComponent',
                backend: 'ui_component',
                database: 'ui_component',
                pretty: 'Ui Component',
                component: 'UiComponent',
                kebab: 'ui-component',
                sqlFunctionRef: 'p_ui_component',
                RestAPI: 'uiComponent',
                GraphQL: 'uiComponent',
                custom: 'uiComponent',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_output_component:ui_component',
            uniqueFieldId: 'supabase_automation_matrix:dataOutputComponent:uiComponent',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'dataOutputComponent',
            databaseTable: 'data_output_component',
            foreignKeyReference: null,
            description: '"Ui Component" field for dataOutputComponent. This is an optional field. Your entry must be an string data type.',
        },
        props: {
            fieldNameFormats: {
                frontend: 'props',
                backend: 'props',
                database: 'props',
                pretty: 'Props',
                component: 'Props',
                kebab: 'props',
                sqlFunctionRef: 'p_props',
                RestAPI: 'props',
                GraphQL: 'props',
                custom: 'props',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_output_component:props',
            uniqueFieldId: 'supabase_automation_matrix:dataOutputComponent:props',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'dataOutputComponent',
            databaseTable: 'data_output_component',
            foreignKeyReference: null,
            description: '"Props" field for dataOutputComponent. This is an optional field. Your entry must be an object data type.',
        },
        additionalParams: {
            fieldNameFormats: {
                frontend: 'additionalParams',
                backend: 'additional_params',
                database: 'additional_params',
                pretty: 'Additional Params',
                component: 'AdditionalParams',
                kebab: 'additional-params',
                sqlFunctionRef: 'p_additional_params',
                RestAPI: 'additionalParams',
                GraphQL: 'additionalParams',
                custom: 'additionalParams',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:data_output_component:additional_params',
            uniqueFieldId: 'supabase_automation_matrix:dataOutputComponent:additionalParams',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'dataOutputComponent',
            databaseTable: 'data_output_component',
            foreignKeyReference: null,
            description: '"Additional Params" field for dataOutputComponent. This is an optional field. Your entry must be an object data type.',
        },
    },
    entityNameFormats: {
        frontend: 'dataOutputComponent',
        backend: 'data_output_component',
        database: 'data_output_component',
        pretty: 'Data Output Component',
        component: 'DataOutputComponent',
        kebab: 'data-output-component',
        sqlFunctionRef: 'p_data_output_component',
        RestAPI: 'dataOutputComponent',
        GraphQL: 'dataOutputComponent',
        custom: 'dataOutputComponent',
    },
    relationships: [],
} as const;

export const displayOption = {
    schemaType: 'table' as const,
    entityName: 'displayOption',
    uniqueTableId: 'supabase_automation_matrix:public:display_option',
    uniqueEntityId: 'supabase_automation_matrix:displayOption',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'm2mAndIfk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:display_option:id',
            uniqueFieldId: 'supabase_automation_matrix:displayOption:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'displayOption',
            databaseTable: 'display_option',
            foreignKeyReference: null,
            description: '"Id" field for displayOption. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:display_option:name',
            uniqueFieldId: 'supabase_automation_matrix:displayOption:name',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'displayOption',
            databaseTable: 'display_option',
            foreignKeyReference: null,
            description: '"Name" field for displayOption. This is an optional field. Your entry must be an string data type.',
        },
        defaultParams: {
            fieldNameFormats: {
                frontend: 'defaultParams',
                backend: 'default_params',
                database: 'default_params',
                pretty: 'Default Params',
                component: 'DefaultParams',
                kebab: 'default-params',
                sqlFunctionRef: 'p_default_params',
                RestAPI: 'defaultParams',
                GraphQL: 'defaultParams',
                custom: 'defaultParams',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:display_option:default_params',
            uniqueFieldId: 'supabase_automation_matrix:displayOption:defaultParams',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'displayOption',
            databaseTable: 'display_option',
            foreignKeyReference: null,
            description: '"Default Params" field for displayOption. This is an optional field. Your entry must be an object data type.',
        },
        customizableParams: {
            fieldNameFormats: {
                frontend: 'customizableParams',
                backend: 'customizable_params',
                database: 'customizable_params',
                pretty: 'Customizable Params',
                component: 'CustomizableParams',
                kebab: 'customizable-params',
                sqlFunctionRef: 'p_customizable_params',
                RestAPI: 'customizableParams',
                GraphQL: 'customizableParams',
                custom: 'customizableParams',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:display_option:customizable_params',
            uniqueFieldId: 'supabase_automation_matrix:displayOption:customizableParams',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'displayOption',
            databaseTable: 'display_option',
            foreignKeyReference: null,
            description: '"Customizable Params" field for displayOption. This is an optional field. Your entry must be an object data type.',
        },
        additionalParams: {
            fieldNameFormats: {
                frontend: 'additionalParams',
                backend: 'additional_params',
                database: 'additional_params',
                pretty: 'Additional Params',
                component: 'AdditionalParams',
                kebab: 'additional-params',
                sqlFunctionRef: 'p_additional_params',
                RestAPI: 'additionalParams',
                GraphQL: 'additionalParams',
                custom: 'additionalParams',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:display_option:additional_params',
            uniqueFieldId: 'supabase_automation_matrix:displayOption:additionalParams',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'displayOption',
            databaseTable: 'display_option',
            foreignKeyReference: null,
            description: '"Additional Params" field for displayOption. This is an optional field. Your entry must be an object data type.',
        },
        recipeDisplayInverse: {
            fieldNameFormats: {
                frontend: 'recipeDisplayInverse',
                backend: 'recipe_display_Inverse',
                database: 'ifk_recipe_display',
                pretty: 'Recipe Display Inverse',
                component: 'RecipeDisplayInverse',
                kebab: 'recipe-displayInverse',
                sqlFunctionRef: 'p_ifk_recipe_display',
                RestAPI: 'recipeDisplayInverse',
                GraphQL: 'recipeDisplayInverse',
                custom: 'recipeDisplayInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:recipe_display',
            uniqueEntityId: 'supabase_automation_matrix:recipeDisplay',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipeDisplay'>[]>,
            entityName: 'recipeDisplay',
            databaseTable: 'recipe_display',
        },
    },
    entityNameFormats: {
        frontend: 'displayOption',
        backend: 'display_option',
        database: 'display_option',
        pretty: 'Display Option',
        component: 'DisplayOption',
        kebab: 'display-option',
        sqlFunctionRef: 'p_display_option',
        RestAPI: 'displayOption',
        GraphQL: 'displayOption',
        custom: 'displayOption',
    },
    relationships: [{ relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'recipe_display', relatedColumn: 'display', junctionTable: null }],
} as const;

export const emails = {
    schemaType: 'table' as const,
    entityName: 'emails',
    uniqueTableId: 'supabase_automation_matrix:public:emails',
    uniqueEntityId: 'supabase_automation_matrix:emails',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'subject', databaseFieldName: 'subject' },
    defaultFetchStrategy: 'simple',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:emails:id',
            uniqueFieldId: 'supabase_automation_matrix:emails:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'emails',
            databaseTable: 'emails',
            foreignKeyReference: null,
            description: '"Id" field for emails. This is a required field. Your entry must be an uuid data type.',
        },
        sender: {
            fieldNameFormats: {
                frontend: 'sender',
                backend: 'sender',
                database: 'sender',
                pretty: 'Sender',
                component: 'Sender',
                kebab: 'sender',
                sqlFunctionRef: 'p_sender',
                RestAPI: 'sender',
                GraphQL: 'sender',
                custom: 'sender',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:emails:sender',
            uniqueFieldId: 'supabase_automation_matrix:emails:sender',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'emails',
            databaseTable: 'emails',
            foreignKeyReference: null,
            description: '"Sender" field for emails. This is a required field. Your entry must be an string data type.',
        },
        recipient: {
            fieldNameFormats: {
                frontend: 'recipient',
                backend: 'recipient',
                database: 'recipient',
                pretty: 'Recipient',
                component: 'Recipient',
                kebab: 'recipient',
                sqlFunctionRef: 'p_recipient',
                RestAPI: 'recipient',
                GraphQL: 'recipient',
                custom: 'recipient',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:emails:recipient',
            uniqueFieldId: 'supabase_automation_matrix:emails:recipient',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'emails',
            databaseTable: 'emails',
            foreignKeyReference: null,
            description: '"Recipient" field for emails. This is a required field. Your entry must be an string data type.',
        },
        subject: {
            fieldNameFormats: {
                frontend: 'subject',
                backend: 'subject',
                database: 'subject',
                pretty: 'Subject',
                component: 'Subject',
                kebab: 'subject',
                sqlFunctionRef: 'p_subject',
                RestAPI: 'subject',
                GraphQL: 'subject',
                custom: 'subject',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:emails:subject',
            uniqueFieldId: 'supabase_automation_matrix:emails:subject',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'emails',
            databaseTable: 'emails',
            foreignKeyReference: null,
            description: '"Subject" field for emails. This is a required field. Your entry must be an string data type.',
        },
        body: {
            fieldNameFormats: {
                frontend: 'body',
                backend: 'body',
                database: 'body',
                pretty: 'Body',
                component: 'Body',
                kebab: 'body',
                sqlFunctionRef: 'p_body',
                RestAPI: 'body',
                GraphQL: 'body',
                custom: 'body',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:emails:body',
            uniqueFieldId: 'supabase_automation_matrix:emails:body',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'emails',
            databaseTable: 'emails',
            foreignKeyReference: null,
            description: '"Body" field for emails. This is a required field. Your entry must be an string data type.',
        },
        timestamp: {
            fieldNameFormats: {
                frontend: 'timestamp',
                backend: 'timestamp',
                database: 'timestamp',
                pretty: 'Timestamp',
                component: 'Timestamp',
                kebab: 'timestamp',
                sqlFunctionRef: 'p_timestamp',
                RestAPI: 'timestamp',
                GraphQL: 'timestamp',
                custom: 'timestamp',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:emails:timestamp',
            uniqueFieldId: 'supabase_automation_matrix:emails:timestamp',

            dataType: 'date' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'emails',
            databaseTable: 'emails',
            foreignKeyReference: null,
            description: '"Timestamp" field for emails. This is an optional field. Your entry must be an date data type.',
        },
        isRead: {
            fieldNameFormats: {
                frontend: 'isRead',
                backend: 'is_read',
                database: 'is_read',
                pretty: 'Is Read',
                component: 'IsRead',
                kebab: 'is-read',
                sqlFunctionRef: 'p_is_read',
                RestAPI: 'isRead',
                GraphQL: 'isRead',
                custom: 'isRead',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:emails:is_read',
            uniqueFieldId: 'supabase_automation_matrix:emails:isRead',

            dataType: 'boolean' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'false' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'emails',
            databaseTable: 'emails',
            foreignKeyReference: null,
            description: '"Is Read" field for emails. This is an optional field. Your entry must be an boolean data type.',
        },
    },
    entityNameFormats: {
        frontend: 'emails',
        backend: 'emails',
        database: 'emails',
        pretty: 'Emails',
        component: 'Emails',
        kebab: 'emails',
        sqlFunctionRef: 'p_emails',
        RestAPI: 'emails',
        GraphQL: 'emails',
        custom: 'emails',
    },
    relationships: [],
} as const;

export const extractor = {
    schemaType: 'table' as const,
    entityName: 'extractor',
    uniqueTableId: 'supabase_automation_matrix:public:extractor',
    uniqueEntityId: 'supabase_automation_matrix:extractor',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'simple',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:extractor:id',
            uniqueFieldId: 'supabase_automation_matrix:extractor:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'extractor',
            databaseTable: 'extractor',
            foreignKeyReference: null,
            description: '"Id" field for extractor. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:extractor:name',
            uniqueFieldId: 'supabase_automation_matrix:extractor:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'extractor',
            databaseTable: 'extractor',
            foreignKeyReference: null,
            description: '"Name" field for extractor. This is a required field. Your entry must be an string data type.',
        },
        outputType: {
            fieldNameFormats: {
                frontend: 'outputType',
                backend: 'output_type',
                database: 'output_type',
                pretty: 'Output Type',
                component: 'OutputType',
                kebab: 'output-type',
                sqlFunctionRef: 'p_output_type',
                RestAPI: 'outputType',
                GraphQL: 'outputType',
                custom: 'outputType',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:extractor:output_type',
            uniqueFieldId: 'supabase_automation_matrix:extractor:outputType',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Bool',
                        value: 'bool',
                    },
                    {
                        label: 'Dict',
                        value: 'dict',
                    },
                    {
                        label: 'Float',
                        value: 'float',
                    },
                    {
                        label: 'Int',
                        value: 'int',
                    },
                    {
                        label: 'List',
                        value: 'list',
                    },
                    {
                        label: 'Str',
                        value: 'str',
                    },
                    {
                        label: 'Url',
                        value: 'url',
                    },
                ],
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<'bool' | 'dict' | 'float' | 'int' | 'list' | 'str' | 'url' | undefined>,
            enumValues: ['bool', 'dict', 'float', 'int', 'list', 'str', 'url'] as const,
            entityName: 'extractor',
            databaseTable: 'extractor',
            foreignKeyReference: null,
            description: '"Output Type" field for extractor. This is an optional field. Your entry must be an string data type.',
        },
        defaultIdentifier: {
            fieldNameFormats: {
                frontend: 'defaultIdentifier',
                backend: 'default_identifier',
                database: 'default_identifier',
                pretty: 'Default Identifier',
                component: 'DefaultIdentifier',
                kebab: 'default-identifier',
                sqlFunctionRef: 'p_default_identifier',
                RestAPI: 'defaultIdentifier',
                GraphQL: 'defaultIdentifier',
                custom: 'defaultIdentifier',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:extractor:default_identifier',
            uniqueFieldId: 'supabase_automation_matrix:extractor:defaultIdentifier',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'extractor',
            databaseTable: 'extractor',
            foreignKeyReference: null,
            description: '"Default Identifier" field for extractor. This is an optional field. Your entry must be an string data type.',
        },
        defaultIndex: {
            fieldNameFormats: {
                frontend: 'defaultIndex',
                backend: 'default_index',
                database: 'default_index',
                pretty: 'Default Index',
                component: 'DefaultIndex',
                kebab: 'default-index',
                sqlFunctionRef: 'p_default_index',
                RestAPI: 'defaultIndex',
                GraphQL: 'defaultIndex',
                custom: 'defaultIndex',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:extractor:default_index',
            uniqueFieldId: 'supabase_automation_matrix:extractor:defaultIndex',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'extractor',
            databaseTable: 'extractor',
            foreignKeyReference: null,
            description: '"Default Index" field for extractor. This is an optional field. Your entry must be an number data type.',
        },
    },
    entityNameFormats: {
        frontend: 'extractor',
        backend: 'extractor',
        database: 'extractor',
        pretty: 'Extractor',
        component: 'Extractor',
        kebab: 'extractor',
        sqlFunctionRef: 'p_extractor',
        RestAPI: 'extractor',
        GraphQL: 'extractor',
        custom: 'extractor',
    },
    relationships: [],
} as const;

export const fileStructure = {
    schemaType: 'table' as const,
    entityName: 'fileStructure',
    uniqueTableId: 'supabase_automation_matrix:public:file_structure',
    uniqueEntityId: 'supabase_automation_matrix:fileStructure',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'simple',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:file_structure:id',
            uniqueFieldId: 'supabase_automation_matrix:fileStructure:id',

            dataType: 'number' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: 'file_structure_id_seq' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'integer',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'fileStructure',
            databaseTable: 'file_structure',
            foreignKeyReference: null,
            description: '"Id" field for fileStructure. This is a required field. Your entry must be an number data type.',
        },
        bucketId: {
            fieldNameFormats: {
                frontend: 'bucketId',
                backend: 'bucket_id',
                database: 'bucket_id',
                pretty: 'Bucket Id',
                component: 'BucketId',
                kebab: 'bucket-id',
                sqlFunctionRef: 'p_bucket_id',
                RestAPI: 'bucketId',
                GraphQL: 'bucketId',
                custom: 'bucketId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:file_structure:bucket_id',
            uniqueFieldId: 'supabase_automation_matrix:fileStructure:bucketId',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'fileStructure',
            databaseTable: 'file_structure',
            foreignKeyReference: null,
            description: '"Bucket Id" field for fileStructure. This is a required field. Your entry must be an string data type.',
        },
        path: {
            fieldNameFormats: {
                frontend: 'path',
                backend: 'path',
                database: 'path',
                pretty: 'Path',
                component: 'Path',
                kebab: 'path',
                sqlFunctionRef: 'p_path',
                RestAPI: 'path',
                GraphQL: 'path',
                custom: 'path',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:file_structure:path',
            uniqueFieldId: 'supabase_automation_matrix:fileStructure:path',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'fileStructure',
            databaseTable: 'file_structure',
            foreignKeyReference: null,
            description: '"Path" field for fileStructure. This is a required field. Your entry must be an string data type.',
        },
        isFolder: {
            fieldNameFormats: {
                frontend: 'isFolder',
                backend: 'is_folder',
                database: 'is_folder',
                pretty: 'Is Folder',
                component: 'IsFolder',
                kebab: 'is-folder',
                sqlFunctionRef: 'p_is_folder',
                RestAPI: 'isFolder',
                GraphQL: 'isFolder',
                custom: 'isFolder',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:file_structure:is_folder',
            uniqueFieldId: 'supabase_automation_matrix:fileStructure:isFolder',

            dataType: 'boolean' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'fileStructure',
            databaseTable: 'file_structure',
            foreignKeyReference: null,
            description: '"Is Folder" field for fileStructure. This is a required field. Your entry must be an boolean data type.',
        },
        fileId: {
            fieldNameFormats: {
                frontend: 'fileId',
                backend: 'file_id',
                database: 'file_id',
                pretty: 'File Id',
                component: 'FileId',
                kebab: 'file-id',
                sqlFunctionRef: 'p_file_id',
                RestAPI: 'fileId',
                GraphQL: 'fileId',
                custom: 'fileId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:file_structure:file_id',
            uniqueFieldId: 'supabase_automation_matrix:fileStructure:fileId',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'fileStructure',
            databaseTable: 'file_structure',
            foreignKeyReference: null,
            description: '"File Id" field for fileStructure. This is an optional field. Your entry must be an uuid data type.',
        },
        parentPath: {
            fieldNameFormats: {
                frontend: 'parentPath',
                backend: 'parent_path',
                database: 'parent_path',
                pretty: 'Parent Path',
                component: 'ParentPath',
                kebab: 'parent-path',
                sqlFunctionRef: 'p_parent_path',
                RestAPI: 'parentPath',
                GraphQL: 'parentPath',
                custom: 'parentPath',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:file_structure:parent_path',
            uniqueFieldId: 'supabase_automation_matrix:fileStructure:parentPath',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'fileStructure',
            databaseTable: 'file_structure',
            foreignKeyReference: null,
            description: '"Parent Path" field for fileStructure. This is an optional field. Your entry must be an string data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:file_structure:name',
            uniqueFieldId: 'supabase_automation_matrix:fileStructure:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'fileStructure',
            databaseTable: 'file_structure',
            foreignKeyReference: null,
            description: '"Name" field for fileStructure. This is a required field. Your entry must be an string data type.',
        },
        metadata: {
            fieldNameFormats: {
                frontend: 'metadata',
                backend: 'metadata',
                database: 'metadata',
                pretty: 'Metadata',
                component: 'Metadata',
                kebab: 'metadata',
                sqlFunctionRef: 'p_metadata',
                RestAPI: 'metadata',
                GraphQL: 'metadata',
                custom: 'metadata',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:file_structure:metadata',
            uniqueFieldId: 'supabase_automation_matrix:fileStructure:metadata',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'fileStructure',
            databaseTable: 'file_structure',
            foreignKeyReference: null,
            description: '"Metadata" field for fileStructure. This is an optional field. Your entry must be an object data type.',
        },
        createdAt: {
            fieldNameFormats: {
                frontend: 'createdAt',
                backend: 'created_at',
                database: 'created_at',
                pretty: 'Created At',
                component: 'CreatedAt',
                kebab: 'created-at',
                sqlFunctionRef: 'p_created_at',
                RestAPI: 'createdAt',
                GraphQL: 'createdAt',
                custom: 'createdAt',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:file_structure:created_at',
            uniqueFieldId: 'supabase_automation_matrix:fileStructure:createdAt',

            dataType: 'date' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'fileStructure',
            databaseTable: 'file_structure',
            foreignKeyReference: null,
            description: '"Created At" field for fileStructure. This is an optional field. Your entry must be an date data type.',
        },
        updatedAt: {
            fieldNameFormats: {
                frontend: 'updatedAt',
                backend: 'updated_at',
                database: 'updated_at',
                pretty: 'Updated At',
                component: 'UpdatedAt',
                kebab: 'updated-at',
                sqlFunctionRef: 'p_updated_at',
                RestAPI: 'updatedAt',
                GraphQL: 'updatedAt',
                custom: 'updatedAt',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:file_structure:updated_at',
            uniqueFieldId: 'supabase_automation_matrix:fileStructure:updatedAt',

            dataType: 'date' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'fileStructure',
            databaseTable: 'file_structure',
            foreignKeyReference: null,
            description: '"Updated At" field for fileStructure. This is an optional field. Your entry must be an date data type.',
        },
    },
    entityNameFormats: {
        frontend: 'fileStructure',
        backend: 'file_structure',
        database: 'file_structure',
        pretty: 'File Structure',
        component: 'FileStructure',
        kebab: 'file-structure',
        sqlFunctionRef: 'p_file_structure',
        RestAPI: 'fileStructure',
        GraphQL: 'fileStructure',
        custom: 'fileStructure',
    },
    relationships: [],
} as const;

export const flashcardData = {
    schemaType: 'table' as const,
    entityName: 'flashcardData',
    uniqueTableId: 'supabase_automation_matrix:public:flashcard_data',
    uniqueEntityId: 'supabase_automation_matrix:flashcardData',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'id', databaseFieldName: 'id' },
    defaultFetchStrategy: 'm2mAndIfk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:id',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description: '"Id" field for flashcardData. This is a required field. Your entry must be an uuid data type.',
        },
        userId: {
            fieldNameFormats: {
                frontend: 'userId',
                backend: 'user_id',
                database: 'user_id',
                pretty: 'User Id',
                component: 'UserId',
                kebab: 'user-id',
                sqlFunctionRef: 'p_user_id',
                RestAPI: 'userId',
                GraphQL: 'userId',
                custom: 'userId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:user_id',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:userId',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: { table: 'users', column: 'id', entity: 'users', field: 'id' },
            description:
                '"User Id" field for flashcardData. This is a required field. Your entry must be an uuid data type. This field is a reference to a users.',
        },
        topic: {
            fieldNameFormats: {
                frontend: 'topic',
                backend: 'topic',
                database: 'topic',
                pretty: 'Topic',
                component: 'Topic',
                kebab: 'topic',
                sqlFunctionRef: 'p_topic',
                RestAPI: 'topic',
                GraphQL: 'topic',
                custom: 'topic',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:topic',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:topic',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description: '"Topic" field for flashcardData. This is an optional field. Your entry must be an string data type.',
        },
        lesson: {
            fieldNameFormats: {
                frontend: 'lesson',
                backend: 'lesson',
                database: 'lesson',
                pretty: 'Lesson',
                component: 'Lesson',
                kebab: 'lesson',
                sqlFunctionRef: 'p_lesson',
                RestAPI: 'lesson',
                GraphQL: 'lesson',
                custom: 'lesson',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:lesson',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:lesson',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description: '"Lesson" field for flashcardData. This is an optional field. Your entry must be an string data type.',
        },
        difficulty: {
            fieldNameFormats: {
                frontend: 'difficulty',
                backend: 'difficulty',
                database: 'difficulty',
                pretty: 'Difficulty',
                component: 'Difficulty',
                kebab: 'difficulty',
                sqlFunctionRef: 'p_difficulty',
                RestAPI: 'difficulty',
                GraphQL: 'difficulty',
                custom: 'difficulty',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:difficulty',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:difficulty',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description: '"Difficulty" field for flashcardData. This is an optional field. Your entry must be an string data type.',
        },
        front: {
            fieldNameFormats: {
                frontend: 'front',
                backend: 'front',
                database: 'front',
                pretty: 'Front',
                component: 'Front',
                kebab: 'front',
                sqlFunctionRef: 'p_front',
                RestAPI: 'front',
                GraphQL: 'front',
                custom: 'front',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:front',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:front',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description: '"Front" field for flashcardData. This is a required field. Your entry must be an string data type.',
        },
        back: {
            fieldNameFormats: {
                frontend: 'back',
                backend: 'back',
                database: 'back',
                pretty: 'Back',
                component: 'Back',
                kebab: 'back',
                sqlFunctionRef: 'p_back',
                RestAPI: 'back',
                GraphQL: 'back',
                custom: 'back',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:back',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:back',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description: '"Back" field for flashcardData. This is a required field. Your entry must be an string data type.',
        },
        example: {
            fieldNameFormats: {
                frontend: 'example',
                backend: 'example',
                database: 'example',
                pretty: 'Example',
                component: 'Example',
                kebab: 'example',
                sqlFunctionRef: 'p_example',
                RestAPI: 'example',
                GraphQL: 'example',
                custom: 'example',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:example',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:example',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description: '"Example" field for flashcardData. This is an optional field. Your entry must be an string data type.',
        },
        detailedExplanation: {
            fieldNameFormats: {
                frontend: 'detailedExplanation',
                backend: 'detailed_explanation',
                database: 'detailed_explanation',
                pretty: 'Detailed Explanation',
                component: 'DetailedExplanation',
                kebab: 'detailed-explanation',
                sqlFunctionRef: 'p_detailed_explanation',
                RestAPI: 'detailedExplanation',
                GraphQL: 'detailedExplanation',
                custom: 'detailedExplanation',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:detailed_explanation',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:detailedExplanation',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description: '"Detailed Explanation" field for flashcardData. This is an optional field. Your entry must be an string data type.',
        },
        audioExplanation: {
            fieldNameFormats: {
                frontend: 'audioExplanation',
                backend: 'audio_explanation',
                database: 'audio_explanation',
                pretty: 'Audio Explanation',
                component: 'AudioExplanation',
                kebab: 'audio-explanation',
                sqlFunctionRef: 'p_audio_explanation',
                RestAPI: 'audioExplanation',
                GraphQL: 'audioExplanation',
                custom: 'audioExplanation',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:audio_explanation',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:audioExplanation',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description: '"Audio Explanation" field for flashcardData. This is an optional field. Your entry must be an string data type.',
        },
        personalNotes: {
            fieldNameFormats: {
                frontend: 'personalNotes',
                backend: 'personal_notes',
                database: 'personal_notes',
                pretty: 'Personal Notes',
                component: 'PersonalNotes',
                kebab: 'personal-notes',
                sqlFunctionRef: 'p_personal_notes',
                RestAPI: 'personalNotes',
                GraphQL: 'personalNotes',
                custom: 'personalNotes',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:personal_notes',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:personalNotes',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description: '"Personal Notes" field for flashcardData. This is an optional field. Your entry must be an string data type.',
        },
        isDeleted: {
            fieldNameFormats: {
                frontend: 'isDeleted',
                backend: 'is_deleted',
                database: 'is_deleted',
                pretty: 'Is Deleted',
                component: 'IsDeleted',
                kebab: 'is-deleted',
                sqlFunctionRef: 'p_is_deleted',
                RestAPI: 'isDeleted',
                GraphQL: 'isDeleted',
                custom: 'isDeleted',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:is_deleted',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:isDeleted',

            dataType: 'boolean' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'false' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description: '"Is Deleted" field for flashcardData. This is an optional field. Your entry must be an boolean data type.',
        },
        public: {
            fieldNameFormats: {
                frontend: 'public',
                backend: 'public',
                database: 'public',
                pretty: 'Public',
                component: 'Public',
                kebab: 'public',
                sqlFunctionRef: 'p_public',
                RestAPI: 'public',
                GraphQL: 'public',
                custom: 'public',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:public',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:public',

            dataType: 'boolean' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'false' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description: '"Public" field for flashcardData. This is an optional field. Your entry must be an boolean data type.',
        },
        sharedWith: {
            fieldNameFormats: {
                frontend: 'sharedWith',
                backend: 'shared_with',
                database: 'shared_with',
                pretty: 'Shared With',
                component: 'SharedWith',
                kebab: 'shared-with',
                sqlFunctionRef: 'p_shared_with',
                RestAPI: 'sharedWith',
                GraphQL: 'sharedWith',
                custom: 'sharedWith',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:shared_with',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:sharedWith',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_ARRAY' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string[]>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description:
                '"Shared With" field for flashcardData. This is an optional field. Your entry must be an uuid data type. You can enter one or more entries.',
        },
        createdAt: {
            fieldNameFormats: {
                frontend: 'createdAt',
                backend: 'created_at',
                database: 'created_at',
                pretty: 'Created At',
                component: 'CreatedAt',
                kebab: 'created-at',
                sqlFunctionRef: 'p_created_at',
                RestAPI: 'createdAt',
                GraphQL: 'createdAt',
                custom: 'createdAt',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:created_at',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:createdAt',

            dataType: 'date' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description: '"Created At" field for flashcardData. This is an optional field. Your entry must be an date data type.',
        },
        updatedAt: {
            fieldNameFormats: {
                frontend: 'updatedAt',
                backend: 'updated_at',
                database: 'updated_at',
                pretty: 'Updated At',
                component: 'UpdatedAt',
                kebab: 'updated-at',
                sqlFunctionRef: 'p_updated_at',
                RestAPI: 'updatedAt',
                GraphQL: 'updatedAt',
                custom: 'updatedAt',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_data:updated_at',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:updatedAt',

            dataType: 'date' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            foreignKeyReference: null,
            description: '"Updated At" field for flashcardData. This is an optional field. Your entry must be an date data type.',
        },
        flashcardHistoryInverse: {
            fieldNameFormats: {
                frontend: 'flashcardHistoryInverse',
                backend: 'flashcard_history_Inverse',
                database: 'ifk_flashcard_history',
                pretty: 'Flashcard History Inverse',
                component: 'FlashcardHistoryInverse',
                kebab: 'flashcard-historyInverse',
                sqlFunctionRef: 'p_ifk_flashcard_history',
                RestAPI: 'flashcardHistoryInverse',
                GraphQL: 'flashcardHistoryInverse',
                custom: 'flashcardHistoryInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:flashcard_history',
            uniqueEntityId: 'supabase_automation_matrix:flashcardHistory',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'flashcardHistory'>[]>,
            entityName: 'flashcardHistory',
            databaseTable: 'flashcard_history',
        },
        flashcardSetRelationsInverse: {
            fieldNameFormats: {
                frontend: 'flashcardSetRelationsInverse',
                backend: 'flashcard_set_relations_Inverse',
                database: 'ifk_flashcard_set_relations',
                pretty: 'Flashcard Set Relations Inverse',
                component: 'FlashcardSetRelationsInverse',
                kebab: 'flashcard-set-relationsInverse',
                sqlFunctionRef: 'p_ifk_flashcard_set_relations',
                RestAPI: 'flashcardSetRelationsInverse',
                GraphQL: 'flashcardSetRelationsInverse',
                custom: 'flashcardSetRelationsInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:flashcard_set_relations',
            uniqueEntityId: 'supabase_automation_matrix:flashcardSetRelations',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'flashcardSetRelations'>[]>,
            entityName: 'flashcardSetRelations',
            databaseTable: 'flashcard_set_relations',
        },
        flashcardImagesInverse: {
            fieldNameFormats: {
                frontend: 'flashcardImagesInverse',
                backend: 'flashcard_images_Inverse',
                database: 'ifk_flashcard_images',
                pretty: 'Flashcard Images Inverse',
                component: 'FlashcardImagesInverse',
                kebab: 'flashcard-imagesInverse',
                sqlFunctionRef: 'p_ifk_flashcard_images',
                RestAPI: 'flashcardImagesInverse',
                GraphQL: 'flashcardImagesInverse',
                custom: 'flashcardImagesInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:flashcard_images',
            uniqueEntityId: 'supabase_automation_matrix:flashcardImages',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'flashcardImages'>[]>,
            entityName: 'flashcardImages',
            databaseTable: 'flashcard_images',
        },
    },
    entityNameFormats: {
        frontend: 'flashcardData',
        backend: 'flashcard_data',
        database: 'flashcard_data',
        pretty: 'Flashcard Data',
        component: 'FlashcardData',
        kebab: 'flashcard-data',
        sqlFunctionRef: 'p_flashcard_data',
        RestAPI: 'flashcardData',
        GraphQL: 'flashcardData',
        custom: 'flashcardData',
    },
    relationships: [
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'flashcard_history', relatedColumn: 'flashcard_id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'flashcard_set_relations', relatedColumn: 'flashcard_id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'flashcard_images', relatedColumn: 'flashcard_id', junctionTable: null },
    ],
} as const;

export const flashcardHistory = {
    schemaType: 'table' as const,
    entityName: 'flashcardHistory',
    uniqueTableId: 'supabase_automation_matrix:public:flashcard_history',
    uniqueEntityId: 'supabase_automation_matrix:flashcardHistory',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'id', databaseFieldName: 'id' },
    defaultFetchStrategy: 'fk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_history:id',
            uniqueFieldId: 'supabase_automation_matrix:flashcardHistory:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardHistory',
            databaseTable: 'flashcard_history',
            foreignKeyReference: null,
            description: '"Id" field for flashcardHistory. This is a required field. Your entry must be an uuid data type.',
        },
        flashcardId: {
            fieldNameFormats: {
                frontend: 'flashcardId',
                backend: 'flashcard_id',
                database: 'flashcard_id',
                pretty: 'Flashcard Id',
                component: 'FlashcardId',
                kebab: 'flashcard-id',
                sqlFunctionRef: 'p_flashcard_id',
                RestAPI: 'flashcardId',
                GraphQL: 'flashcardId',
                custom: 'flashcardId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_history:flashcard_id',
            uniqueFieldId: 'supabase_automation_matrix:flashcardHistory:flashcardId',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardHistory',
            databaseTable: 'flashcard_history',
            foreignKeyReference: { table: 'flashcard_data', column: 'id', entity: 'flashcardData', field: 'id' },
            description:
                '"Flashcard Id" field for flashcardHistory. This is an optional field. Your entry must be an uuid data type. This field is a reference to a flashcardData.',
        },
        userId: {
            fieldNameFormats: {
                frontend: 'userId',
                backend: 'user_id',
                database: 'user_id',
                pretty: 'User Id',
                component: 'UserId',
                kebab: 'user-id',
                sqlFunctionRef: 'p_user_id',
                RestAPI: 'userId',
                GraphQL: 'userId',
                custom: 'userId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_history:user_id',
            uniqueFieldId: 'supabase_automation_matrix:flashcardHistory:userId',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardHistory',
            databaseTable: 'flashcard_history',
            foreignKeyReference: { table: 'users', column: 'id', entity: 'users', field: 'id' },
            description:
                '"User Id" field for flashcardHistory. This is a required field. Your entry must be an uuid data type. This field is a reference to a users.',
        },
        reviewCount: {
            fieldNameFormats: {
                frontend: 'reviewCount',
                backend: 'review_count',
                database: 'review_count',
                pretty: 'Review Count',
                component: 'ReviewCount',
                kebab: 'review-count',
                sqlFunctionRef: 'p_review_count',
                RestAPI: 'reviewCount',
                GraphQL: 'reviewCount',
                custom: 'reviewCount',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_history:review_count',
            uniqueFieldId: 'supabase_automation_matrix:flashcardHistory:reviewCount',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '0' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'flashcardHistory',
            databaseTable: 'flashcard_history',
            foreignKeyReference: null,
            description: '"Review Count" field for flashcardHistory. This is an optional field. Your entry must be an number data type.',
        },
        correctCount: {
            fieldNameFormats: {
                frontend: 'correctCount',
                backend: 'correct_count',
                database: 'correct_count',
                pretty: 'Correct Count',
                component: 'CorrectCount',
                kebab: 'correct-count',
                sqlFunctionRef: 'p_correct_count',
                RestAPI: 'correctCount',
                GraphQL: 'correctCount',
                custom: 'correctCount',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_history:correct_count',
            uniqueFieldId: 'supabase_automation_matrix:flashcardHistory:correctCount',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '0' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'flashcardHistory',
            databaseTable: 'flashcard_history',
            foreignKeyReference: null,
            description: '"Correct Count" field for flashcardHistory. This is an optional field. Your entry must be an number data type.',
        },
        incorrectCount: {
            fieldNameFormats: {
                frontend: 'incorrectCount',
                backend: 'incorrect_count',
                database: 'incorrect_count',
                pretty: 'Incorrect Count',
                component: 'IncorrectCount',
                kebab: 'incorrect-count',
                sqlFunctionRef: 'p_incorrect_count',
                RestAPI: 'incorrectCount',
                GraphQL: 'incorrectCount',
                custom: 'incorrectCount',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_history:incorrect_count',
            uniqueFieldId: 'supabase_automation_matrix:flashcardHistory:incorrectCount',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '0' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'flashcardHistory',
            databaseTable: 'flashcard_history',
            foreignKeyReference: null,
            description: '"Incorrect Count" field for flashcardHistory. This is an optional field. Your entry must be an number data type.',
        },
        createdAt: {
            fieldNameFormats: {
                frontend: 'createdAt',
                backend: 'created_at',
                database: 'created_at',
                pretty: 'Created At',
                component: 'CreatedAt',
                kebab: 'created-at',
                sqlFunctionRef: 'p_created_at',
                RestAPI: 'createdAt',
                GraphQL: 'createdAt',
                custom: 'createdAt',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_history:created_at',
            uniqueFieldId: 'supabase_automation_matrix:flashcardHistory:createdAt',

            dataType: 'date' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'flashcardHistory',
            databaseTable: 'flashcard_history',
            foreignKeyReference: null,
            description: '"Created At" field for flashcardHistory. This is an optional field. Your entry must be an date data type.',
        },
        updatedAt: {
            fieldNameFormats: {
                frontend: 'updatedAt',
                backend: 'updated_at',
                database: 'updated_at',
                pretty: 'Updated At',
                component: 'UpdatedAt',
                kebab: 'updated-at',
                sqlFunctionRef: 'p_updated_at',
                RestAPI: 'updatedAt',
                GraphQL: 'updatedAt',
                custom: 'updatedAt',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_history:updated_at',
            uniqueFieldId: 'supabase_automation_matrix:flashcardHistory:updatedAt',

            dataType: 'date' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'flashcardHistory',
            databaseTable: 'flashcard_history',
            foreignKeyReference: null,
            description: '"Updated At" field for flashcardHistory. This is an optional field. Your entry must be an date data type.',
        },
        flashcardDataReference: {
            fieldNameFormats: {
                frontend: 'flashcardDataReference',
                backend: 'flashcard_data_reference',
                database: 'ref_flashcard_data',
                pretty: 'Flashcard Data Reference',
                component: 'FlashcardDataReference',
                kebab: 'flashcard-dataReference',
                sqlFunctionRef: 'p_ref_flashcard_data',
                RestAPI: 'flashcardDataReference',
                GraphQL: 'flashcardDataReference',
                custom: 'flashcardDataReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:flashcard_data:id',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'flashcardData'>[]>,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            relationshipMap: { flashcard_data: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'flashcardHistory',
        backend: 'flashcard_history',
        database: 'flashcard_history',
        pretty: 'Flashcard History',
        component: 'FlashcardHistory',
        kebab: 'flashcard-history',
        sqlFunctionRef: 'p_flashcard_history',
        RestAPI: 'flashcardHistory',
        GraphQL: 'flashcardHistory',
        custom: 'flashcardHistory',
    },
    relationships: [{ relationshipType: 'foreignKey', column: 'flashcard_id', relatedTable: 'flashcard_data', relatedColumn: 'id', junctionTable: null }],
} as const;

export const flashcardImages = {
    schemaType: 'table' as const,
    entityName: 'flashcardImages',
    uniqueTableId: 'supabase_automation_matrix:public:flashcard_images',
    uniqueEntityId: 'supabase_automation_matrix:flashcardImages',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'fileName', databaseFieldName: 'file_name' },
    defaultFetchStrategy: 'fk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_images:id',
            uniqueFieldId: 'supabase_automation_matrix:flashcardImages:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardImages',
            databaseTable: 'flashcard_images',
            foreignKeyReference: null,
            description: '"Id" field for flashcardImages. This is a required field. Your entry must be an uuid data type.',
        },
        flashcardId: {
            fieldNameFormats: {
                frontend: 'flashcardId',
                backend: 'flashcard_id',
                database: 'flashcard_id',
                pretty: 'Flashcard Id',
                component: 'FlashcardId',
                kebab: 'flashcard-id',
                sqlFunctionRef: 'p_flashcard_id',
                RestAPI: 'flashcardId',
                GraphQL: 'flashcardId',
                custom: 'flashcardId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_images:flashcard_id',
            uniqueFieldId: 'supabase_automation_matrix:flashcardImages:flashcardId',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardImages',
            databaseTable: 'flashcard_images',
            foreignKeyReference: { table: 'flashcard_data', column: 'id', entity: 'flashcardData', field: 'id' },
            description:
                '"Flashcard Id" field for flashcardImages. This is an optional field. Your entry must be an uuid data type. This field is a reference to a flashcardData.',
        },
        filePath: {
            fieldNameFormats: {
                frontend: 'filePath',
                backend: 'file_path',
                database: 'file_path',
                pretty: 'File Path',
                component: 'FilePath',
                kebab: 'file-path',
                sqlFunctionRef: 'p_file_path',
                RestAPI: 'filePath',
                GraphQL: 'filePath',
                custom: 'filePath',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_images:file_path',
            uniqueFieldId: 'supabase_automation_matrix:flashcardImages:filePath',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardImages',
            databaseTable: 'flashcard_images',
            foreignKeyReference: null,
            description: '"File Path" field for flashcardImages. This is a required field. Your entry must be an string data type.',
        },
        fileName: {
            fieldNameFormats: {
                frontend: 'fileName',
                backend: 'file_name',
                database: 'file_name',
                pretty: 'File Name',
                component: 'FileName',
                kebab: 'file-name',
                sqlFunctionRef: 'p_file_name',
                RestAPI: 'fileName',
                GraphQL: 'fileName',
                custom: 'fileName',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_images:file_name',
            uniqueFieldId: 'supabase_automation_matrix:flashcardImages:fileName',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardImages',
            databaseTable: 'flashcard_images',
            foreignKeyReference: null,
            description: '"File Name" field for flashcardImages. This is a required field. Your entry must be an string data type.',
        },
        mimeType: {
            fieldNameFormats: {
                frontend: 'mimeType',
                backend: 'mime_type',
                database: 'mime_type',
                pretty: 'Mime Type',
                component: 'MimeType',
                kebab: 'mime-type',
                sqlFunctionRef: 'p_mime_type',
                RestAPI: 'mimeType',
                GraphQL: 'mimeType',
                custom: 'mimeType',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_images:mime_type',
            uniqueFieldId: 'supabase_automation_matrix:flashcardImages:mimeType',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardImages',
            databaseTable: 'flashcard_images',
            foreignKeyReference: null,
            description: '"Mime Type" field for flashcardImages. This is a required field. Your entry must be an string data type.',
        },
        size: {
            fieldNameFormats: {
                frontend: 'size',
                backend: 'size',
                database: 'size',
                pretty: 'Size',
                component: 'Size',
                kebab: 'size',
                sqlFunctionRef: 'p_size',
                RestAPI: 'size',
                GraphQL: 'size',
                custom: 'size',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_images:size',
            uniqueFieldId: 'supabase_automation_matrix:flashcardImages:size',

            dataType: 'number' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'integer',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'flashcardImages',
            databaseTable: 'flashcard_images',
            foreignKeyReference: null,
            description: '"Size" field for flashcardImages. This is a required field. Your entry must be an number data type.',
        },
        createdAt: {
            fieldNameFormats: {
                frontend: 'createdAt',
                backend: 'created_at',
                database: 'created_at',
                pretty: 'Created At',
                component: 'CreatedAt',
                kebab: 'created-at',
                sqlFunctionRef: 'p_created_at',
                RestAPI: 'createdAt',
                GraphQL: 'createdAt',
                custom: 'createdAt',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_images:created_at',
            uniqueFieldId: 'supabase_automation_matrix:flashcardImages:createdAt',

            dataType: 'date' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'flashcardImages',
            databaseTable: 'flashcard_images',
            foreignKeyReference: null,
            description: '"Created At" field for flashcardImages. This is an optional field. Your entry must be an date data type.',
        },
        flashcardDataReference: {
            fieldNameFormats: {
                frontend: 'flashcardDataReference',
                backend: 'flashcard_data_reference',
                database: 'ref_flashcard_data',
                pretty: 'Flashcard Data Reference',
                component: 'FlashcardDataReference',
                kebab: 'flashcard-dataReference',
                sqlFunctionRef: 'p_ref_flashcard_data',
                RestAPI: 'flashcardDataReference',
                GraphQL: 'flashcardDataReference',
                custom: 'flashcardDataReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:flashcard_data:id',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'flashcardData'>[]>,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            relationshipMap: { flashcard_data: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'flashcardImages',
        backend: 'flashcard_images',
        database: 'flashcard_images',
        pretty: 'Flashcard Images',
        component: 'FlashcardImages',
        kebab: 'flashcard-images',
        sqlFunctionRef: 'p_flashcard_images',
        RestAPI: 'flashcardImages',
        GraphQL: 'flashcardImages',
        custom: 'flashcardImages',
    },
    relationships: [{ relationshipType: 'foreignKey', column: 'flashcard_id', relatedTable: 'flashcard_data', relatedColumn: 'id', junctionTable: null }],
} as const;

export const flashcardSetRelations = {
    schemaType: 'table' as const,
    entityName: 'flashcardSetRelations',
    uniqueTableId: 'supabase_automation_matrix:public:flashcard_set_relations',
    uniqueEntityId: 'supabase_automation_matrix:flashcardSetRelations',
    primaryKey: 'flashcardId, setId',
    primaryKeyMetadata: {
        type: 'composite',
        fields: ['flashcardId', 'setId'],
        database_fields: ['flashcard_id', 'set_id'],
        where_template: {
            flashcard_id: null,
            set_id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'flashcardId', databaseFieldName: 'flashcard_id' },
    defaultFetchStrategy: 'm2mAndFk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        flashcardId: {
            fieldNameFormats: {
                frontend: 'flashcardId',
                backend: 'flashcard_id',
                database: 'flashcard_id',
                pretty: 'Flashcard Id',
                component: 'FlashcardId',
                kebab: 'flashcard-id',
                sqlFunctionRef: 'p_flashcard_id',
                RestAPI: 'flashcardId',
                GraphQL: 'flashcardId',
                custom: 'flashcardId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_set_relations:flashcard_id',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSetRelations:flashcardId',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardSetRelations',
            databaseTable: 'flashcard_set_relations',
            foreignKeyReference: { table: 'flashcard_data', column: 'id', entity: 'flashcardData', field: 'id' },
            description:
                '"Flashcard Id" field for flashcardSetRelations. This is a required field. Your entry must be an uuid data type. This field is a reference to a flashcardData.',
        },
        setId: {
            fieldNameFormats: {
                frontend: 'setId',
                backend: 'set_id',
                database: 'set_id',
                pretty: 'Set Id',
                component: 'SetId',
                kebab: 'set-id',
                sqlFunctionRef: 'p_set_id',
                RestAPI: 'setId',
                GraphQL: 'setId',
                custom: 'setId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_set_relations:set_id',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSetRelations:setId',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardSetRelations',
            databaseTable: 'flashcard_set_relations',
            foreignKeyReference: { table: 'flashcard_sets', column: 'set_id', entity: 'flashcardSets', field: 'setId' },
            description:
                '"Set Id" field for flashcardSetRelations. This is a required field. Your entry must be an uuid data type. This field is a reference to a flashcardSets.',
        },
        order: {
            fieldNameFormats: {
                frontend: 'order',
                backend: 'order',
                database: 'order',
                pretty: 'Order',
                component: 'Order',
                kebab: 'order',
                sqlFunctionRef: 'p_order',
                RestAPI: 'order',
                GraphQL: 'order',
                custom: 'order',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_set_relations:order',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSetRelations:order',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'integer',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'flashcardSetRelations',
            databaseTable: 'flashcard_set_relations',
            foreignKeyReference: null,
            description: '"Order" field for flashcardSetRelations. This is an optional field. Your entry must be an number data type.',
        },
        flashcardDataReference: {
            fieldNameFormats: {
                frontend: 'flashcardDataReference',
                backend: 'flashcard_data_reference',
                database: 'ref_flashcard_data',
                pretty: 'Flashcard Data Reference',
                component: 'FlashcardDataReference',
                kebab: 'flashcard-dataReference',
                sqlFunctionRef: 'p_ref_flashcard_data',
                RestAPI: 'flashcardDataReference',
                GraphQL: 'flashcardDataReference',
                custom: 'flashcardDataReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:flashcard_data:flashcardId, setId',
            uniqueFieldId: 'supabase_automation_matrix:flashcardData:flashcardIdSetId',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'flashcardData'>[]>,
            entityName: 'flashcardData',
            databaseTable: 'flashcard_data',
            relationshipMap: { flashcard_data: 'id', flashcard_sets: 'set_id' },
        },
        flashcardSetsReference: {
            fieldNameFormats: {
                frontend: 'flashcardSetsReference',
                backend: 'flashcard_sets_reference',
                database: 'ref_flashcard_sets',
                pretty: 'Flashcard Sets Reference',
                component: 'FlashcardSetsReference',
                kebab: 'flashcard-setsReference',
                sqlFunctionRef: 'p_ref_flashcard_sets',
                RestAPI: 'flashcardSetsReference',
                GraphQL: 'flashcardSetsReference',
                custom: 'flashcardSetsReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:flashcard_sets:flashcardId, setId',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSets:flashcardIdSetId',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'flashcardSets'>[]>,
            entityName: 'flashcardSets',
            databaseTable: 'flashcard_sets',
            relationshipMap: { flashcard_data: 'id', flashcard_sets: 'set_id' },
        },
    },
    entityNameFormats: {
        frontend: 'flashcardSetRelations',
        backend: 'flashcard_set_relations',
        database: 'flashcard_set_relations',
        pretty: 'Flashcard Set Relations',
        component: 'FlashcardSetRelations',
        kebab: 'flashcard-set-relations',
        sqlFunctionRef: 'p_flashcard_set_relations',
        RestAPI: 'flashcardSetRelations',
        GraphQL: 'flashcardSetRelations',
        custom: 'flashcardSetRelations',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'flashcard_id', relatedTable: 'flashcard_data', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'set_id', relatedTable: 'flashcard_sets', relatedColumn: 'set_id', junctionTable: null },
    ],
} as const;

export const flashcardSets = {
    schemaType: 'table' as const,
    entityName: 'flashcardSets',
    uniqueTableId: 'supabase_automation_matrix:public:flashcard_sets',
    uniqueEntityId: 'supabase_automation_matrix:flashcardSets',
    primaryKey: 'setId',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['setId'],
        database_fields: ['set_id'],
        where_template: {
            set_id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'm2mAndIfk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        setId: {
            fieldNameFormats: {
                frontend: 'setId',
                backend: 'set_id',
                database: 'set_id',
                pretty: 'Set Id',
                component: 'SetId',
                kebab: 'set-id',
                sqlFunctionRef: 'p_set_id',
                RestAPI: 'setId',
                GraphQL: 'setId',
                custom: 'setId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_sets:set_id',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSets:setId',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardSets',
            databaseTable: 'flashcard_sets',
            foreignKeyReference: null,
            description: '"Set Id" field for flashcardSets. This is a required field. Your entry must be an uuid data type.',
        },
        userId: {
            fieldNameFormats: {
                frontend: 'userId',
                backend: 'user_id',
                database: 'user_id',
                pretty: 'User Id',
                component: 'UserId',
                kebab: 'user-id',
                sqlFunctionRef: 'p_user_id',
                RestAPI: 'userId',
                GraphQL: 'userId',
                custom: 'userId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_sets:user_id',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSets:userId',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardSets',
            databaseTable: 'flashcard_sets',
            foreignKeyReference: { table: 'users', column: 'id', entity: 'users', field: 'id' },
            description:
                '"User Id" field for flashcardSets. This is a required field. Your entry must be an uuid data type. This field is a reference to a users.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_sets:name',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSets:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardSets',
            databaseTable: 'flashcard_sets',
            foreignKeyReference: null,
            description: '"Name" field for flashcardSets. This is a required field. Your entry must be an string data type.',
        },
        createdAt: {
            fieldNameFormats: {
                frontend: 'createdAt',
                backend: 'created_at',
                database: 'created_at',
                pretty: 'Created At',
                component: 'CreatedAt',
                kebab: 'created-at',
                sqlFunctionRef: 'p_created_at',
                RestAPI: 'createdAt',
                GraphQL: 'createdAt',
                custom: 'createdAt',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_sets:created_at',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSets:createdAt',

            dataType: 'date' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'flashcardSets',
            databaseTable: 'flashcard_sets',
            foreignKeyReference: null,
            description: '"Created At" field for flashcardSets. This is an optional field. Your entry must be an date data type.',
        },
        updatedAt: {
            fieldNameFormats: {
                frontend: 'updatedAt',
                backend: 'updated_at',
                database: 'updated_at',
                pretty: 'Updated At',
                component: 'UpdatedAt',
                kebab: 'updated-at',
                sqlFunctionRef: 'p_updated_at',
                RestAPI: 'updatedAt',
                GraphQL: 'updatedAt',
                custom: 'updatedAt',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_sets:updated_at',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSets:updatedAt',

            dataType: 'date' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'flashcardSets',
            databaseTable: 'flashcard_sets',
            foreignKeyReference: null,
            description: '"Updated At" field for flashcardSets. This is an optional field. Your entry must be an date data type.',
        },
        sharedWith: {
            fieldNameFormats: {
                frontend: 'sharedWith',
                backend: 'shared_with',
                database: 'shared_with',
                pretty: 'Shared With',
                component: 'SharedWith',
                kebab: 'shared-with',
                sqlFunctionRef: 'p_shared_with',
                RestAPI: 'sharedWith',
                GraphQL: 'sharedWith',
                custom: 'sharedWith',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_sets:shared_with',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSets:sharedWith',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_ARRAY' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string[]>,
            enumValues: null,
            entityName: 'flashcardSets',
            databaseTable: 'flashcard_sets',
            foreignKeyReference: null,
            description:
                '"Shared With" field for flashcardSets. This is an optional field. Your entry must be an uuid data type. You can enter one or more entries.',
        },
        public: {
            fieldNameFormats: {
                frontend: 'public',
                backend: 'public',
                database: 'public',
                pretty: 'Public',
                component: 'Public',
                kebab: 'public',
                sqlFunctionRef: 'p_public',
                RestAPI: 'public',
                GraphQL: 'public',
                custom: 'public',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_sets:public',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSets:public',

            dataType: 'boolean' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'false' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'flashcardSets',
            databaseTable: 'flashcard_sets',
            foreignKeyReference: null,
            description: '"Public" field for flashcardSets. This is an optional field. Your entry must be an boolean data type.',
        },
        topic: {
            fieldNameFormats: {
                frontend: 'topic',
                backend: 'topic',
                database: 'topic',
                pretty: 'Topic',
                component: 'Topic',
                kebab: 'topic',
                sqlFunctionRef: 'p_topic',
                RestAPI: 'topic',
                GraphQL: 'topic',
                custom: 'topic',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_sets:topic',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSets:topic',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardSets',
            databaseTable: 'flashcard_sets',
            foreignKeyReference: null,
            description: '"Topic" field for flashcardSets. This is an optional field. Your entry must be an string data type.',
        },
        lesson: {
            fieldNameFormats: {
                frontend: 'lesson',
                backend: 'lesson',
                database: 'lesson',
                pretty: 'Lesson',
                component: 'Lesson',
                kebab: 'lesson',
                sqlFunctionRef: 'p_lesson',
                RestAPI: 'lesson',
                GraphQL: 'lesson',
                custom: 'lesson',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_sets:lesson',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSets:lesson',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardSets',
            databaseTable: 'flashcard_sets',
            foreignKeyReference: null,
            description: '"Lesson" field for flashcardSets. This is an optional field. Your entry must be an string data type.',
        },
        difficulty: {
            fieldNameFormats: {
                frontend: 'difficulty',
                backend: 'difficulty',
                database: 'difficulty',
                pretty: 'Difficulty',
                component: 'Difficulty',
                kebab: 'difficulty',
                sqlFunctionRef: 'p_difficulty',
                RestAPI: 'difficulty',
                GraphQL: 'difficulty',
                custom: 'difficulty',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_sets:difficulty',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSets:difficulty',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardSets',
            databaseTable: 'flashcard_sets',
            foreignKeyReference: null,
            description: '"Difficulty" field for flashcardSets. This is an optional field. Your entry must be an string data type.',
        },
        audioOverview: {
            fieldNameFormats: {
                frontend: 'audioOverview',
                backend: 'audio_overview',
                database: 'audio_overview',
                pretty: 'Audio Overview',
                component: 'AudioOverview',
                kebab: 'audio-overview',
                sqlFunctionRef: 'p_audio_overview',
                RestAPI: 'audioOverview',
                GraphQL: 'audioOverview',
                custom: 'audioOverview',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:flashcard_sets:audio_overview',
            uniqueFieldId: 'supabase_automation_matrix:flashcardSets:audioOverview',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'flashcardSets',
            databaseTable: 'flashcard_sets',
            foreignKeyReference: null,
            description: '"Audio Overview" field for flashcardSets. This is an optional field. Your entry must be an string data type.',
        },
        flashcardSetRelationsInverse: {
            fieldNameFormats: {
                frontend: 'flashcardSetRelationsInverse',
                backend: 'flashcard_set_relations_Inverse',
                database: 'ifk_flashcard_set_relations',
                pretty: 'Flashcard Set Relations Inverse',
                component: 'FlashcardSetRelationsInverse',
                kebab: 'flashcard-set-relationsInverse',
                sqlFunctionRef: 'p_ifk_flashcard_set_relations',
                RestAPI: 'flashcardSetRelationsInverse',
                GraphQL: 'flashcardSetRelationsInverse',
                custom: 'flashcardSetRelationsInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:flashcard_set_relations',
            uniqueEntityId: 'supabase_automation_matrix:flashcardSetRelations',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'flashcardSetRelations'>[]>,
            entityName: 'flashcardSetRelations',
            databaseTable: 'flashcard_set_relations',
        },
    },
    entityNameFormats: {
        frontend: 'flashcardSets',
        backend: 'flashcard_sets',
        database: 'flashcard_sets',
        pretty: 'Flashcard Sets',
        component: 'FlashcardSets',
        kebab: 'flashcard-sets',
        sqlFunctionRef: 'p_flashcard_sets',
        RestAPI: 'flashcardSets',
        GraphQL: 'flashcardSets',
        custom: 'flashcardSets',
    },
    relationships: [
        { relationshipType: 'inverseForeignKey', column: 'set_id', relatedTable: 'flashcard_set_relations', relatedColumn: 'set_id', junctionTable: null },
    ],
} as const;

export const messageBroker = {
    schemaType: 'table' as const,
    entityName: 'messageBroker',
    uniqueTableId: 'supabase_automation_matrix:public:message_broker',
    uniqueEntityId: 'supabase_automation_matrix:messageBroker',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'id', databaseFieldName: 'id' },
    defaultFetchStrategy: 'fk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:message_broker:id',
            uniqueFieldId: 'supabase_automation_matrix:messageBroker:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'messageBroker',
            databaseTable: 'message_broker',
            foreignKeyReference: null,
            description: '"Id" field for messageBroker. This is a required field. Your entry must be an uuid data type.',
        },
        messageId: {
            fieldNameFormats: {
                frontend: 'messageId',
                backend: 'message_id',
                database: 'message_id',
                pretty: 'Message Id',
                component: 'MessageId',
                kebab: 'message-id',
                sqlFunctionRef: 'p_message_id',
                RestAPI: 'messageId',
                GraphQL: 'messageId',
                custom: 'messageId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:message_broker:message_id',
            uniqueFieldId: 'supabase_automation_matrix:messageBroker:messageId',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'messageBroker',
            databaseTable: 'message_broker',
            foreignKeyReference: { table: 'message_template', column: 'id', entity: 'messageTemplate', field: 'id' },
            description:
                '"Message Id" field for messageBroker. This is a required field. Your entry must be an uuid data type. This field is a reference to a messageTemplate.',
        },
        brokerId: {
            fieldNameFormats: {
                frontend: 'brokerId',
                backend: 'broker_id',
                database: 'broker_id',
                pretty: 'Broker Id',
                component: 'BrokerId',
                kebab: 'broker-id',
                sqlFunctionRef: 'p_broker_id',
                RestAPI: 'brokerId',
                GraphQL: 'brokerId',
                custom: 'brokerId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:message_broker:broker_id',
            uniqueFieldId: 'supabase_automation_matrix:messageBroker:brokerId',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'messageBroker',
            databaseTable: 'message_broker',
            foreignKeyReference: { table: 'data_broker', column: 'id', entity: 'dataBroker', field: 'id' },
            description:
                '"Broker Id" field for messageBroker. This is a required field. Your entry must be an uuid data type. This field is a reference to a dataBroker.',
        },
        defaultValue: {
            fieldNameFormats: {
                frontend: 'defaultValue',
                backend: 'default_value',
                database: 'default_value',
                pretty: 'Default Value',
                component: 'DefaultValue',
                kebab: 'default-value',
                sqlFunctionRef: 'p_default_value',
                RestAPI: 'defaultValue',
                GraphQL: 'defaultValue',
                custom: 'defaultValue',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:message_broker:default_value',
            uniqueFieldId: 'supabase_automation_matrix:messageBroker:defaultValue',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'messageBroker',
            databaseTable: 'message_broker',
            foreignKeyReference: null,
            description: '"Default Value" field for messageBroker. This is an optional field. Your entry must be an string data type.',
        },
        defaultComponent: {
            fieldNameFormats: {
                frontend: 'defaultComponent',
                backend: 'default_component',
                database: 'default_component',
                pretty: 'Default Component',
                component: 'DefaultComponent',
                kebab: 'default-component',
                sqlFunctionRef: 'p_default_component',
                RestAPI: 'defaultComponent',
                GraphQL: 'defaultComponent',
                custom: 'defaultComponent',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:message_broker:default_component',
            uniqueFieldId: 'supabase_automation_matrix:messageBroker:defaultComponent',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'messageBroker',
            databaseTable: 'message_broker',
            foreignKeyReference: { table: 'data_input_component', column: 'id', entity: 'dataInputComponent', field: 'id' },
            description:
                '"Default Component" field for messageBroker. This is an optional field. Your entry must be an uuid data type. This field is a reference to a dataInputComponent.',
        },
        dataBrokerReference: {
            fieldNameFormats: {
                frontend: 'dataBrokerReference',
                backend: 'data_broker_reference',
                database: 'ref_data_broker',
                pretty: 'Data Broker Reference',
                component: 'DataBrokerReference',
                kebab: 'data-brokerReference',
                sqlFunctionRef: 'p_ref_data_broker',
                RestAPI: 'dataBrokerReference',
                GraphQL: 'dataBrokerReference',
                custom: 'dataBrokerReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:data_broker:id',
            uniqueFieldId: 'supabase_automation_matrix:dataBroker:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'dataBroker'>[]>,
            entityName: 'dataBroker',
            databaseTable: 'data_broker',
            relationshipMap: { data_broker: 'id', data_input_component: 'id', message_template: 'id' },
        },
        dataInputComponentReference: {
            fieldNameFormats: {
                frontend: 'dataInputComponentReference',
                backend: 'data_input_component_reference',
                database: 'ref_data_input_component',
                pretty: 'Data Input Component Reference',
                component: 'DataInputComponentReference',
                kebab: 'data-input-componentReference',
                sqlFunctionRef: 'p_ref_data_input_component',
                RestAPI: 'dataInputComponentReference',
                GraphQL: 'dataInputComponentReference',
                custom: 'dataInputComponentReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:data_input_component:id',
            uniqueFieldId: 'supabase_automation_matrix:dataInputComponent:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'dataInputComponent'>[]>,
            entityName: 'dataInputComponent',
            databaseTable: 'data_input_component',
            relationshipMap: { data_broker: 'id', data_input_component: 'id', message_template: 'id' },
        },
        messageTemplateReference: {
            fieldNameFormats: {
                frontend: 'messageTemplateReference',
                backend: 'message_template_reference',
                database: 'ref_message_template',
                pretty: 'Message Template Reference',
                component: 'MessageTemplateReference',
                kebab: 'message-templateReference',
                sqlFunctionRef: 'p_ref_message_template',
                RestAPI: 'messageTemplateReference',
                GraphQL: 'messageTemplateReference',
                custom: 'messageTemplateReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:message_template:id',
            uniqueFieldId: 'supabase_automation_matrix:messageTemplate:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'messageTemplate'>[]>,
            entityName: 'messageTemplate',
            databaseTable: 'message_template',
            relationshipMap: { data_broker: 'id', data_input_component: 'id', message_template: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'messageBroker',
        backend: 'message_broker',
        database: 'message_broker',
        pretty: 'Message Broker',
        component: 'MessageBroker',
        kebab: 'message-broker',
        sqlFunctionRef: 'p_message_broker',
        RestAPI: 'messageBroker',
        GraphQL: 'messageBroker',
        custom: 'messageBroker',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'broker_id', relatedTable: 'data_broker', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'default_component', relatedTable: 'data_input_component', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'message_id', relatedTable: 'message_template', relatedColumn: 'id', junctionTable: null },
    ],
} as const;

export const messageTemplate = {
    schemaType: 'table' as const,
    entityName: 'messageTemplate',
    uniqueTableId: 'supabase_automation_matrix:public:message_template',
    uniqueEntityId: 'supabase_automation_matrix:messageTemplate',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'type', databaseFieldName: 'type' },
    defaultFetchStrategy: 'm2mAndIfk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:message_template:id',
            uniqueFieldId: 'supabase_automation_matrix:messageTemplate:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'messageTemplate',
            databaseTable: 'message_template',
            foreignKeyReference: null,
            description: '"Id" field for messageTemplate. This is a required field. Your entry must be an uuid data type.',
        },
        role: {
            fieldNameFormats: {
                frontend: 'role',
                backend: 'role',
                database: 'role',
                pretty: 'Role',
                component: 'Role',
                kebab: 'role',
                sqlFunctionRef: 'p_role',
                RestAPI: 'role',
                GraphQL: 'role',
                custom: 'role',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:message_template:role',
            uniqueFieldId: 'supabase_automation_matrix:messageTemplate:role',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: 'user' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Assistant',
                        value: 'assistant',
                    },
                    {
                        label: 'System',
                        value: 'system',
                    },
                    {
                        label: 'User',
                        value: 'user',
                    },
                ],
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<'assistant' | 'system' | 'user' | undefined>,
            enumValues: ['assistant', 'system', 'user'] as const,
            entityName: 'messageTemplate',
            databaseTable: 'message_template',
            foreignKeyReference: null,
            description: '"Role" field for messageTemplate. This is a required field. Your entry must be an string data type.',
        },
        type: {
            fieldNameFormats: {
                frontend: 'type',
                backend: 'type',
                database: 'type',
                pretty: 'Type',
                component: 'Type',
                kebab: 'type',
                sqlFunctionRef: 'p_type',
                RestAPI: 'type',
                GraphQL: 'type',
                custom: 'type',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:message_template:type',
            uniqueFieldId: 'supabase_automation_matrix:messageTemplate:type',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: 'text' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Base64 Image',
                        value: 'base64_image',
                    },
                    {
                        label: 'Blob',
                        value: 'blob',
                    },
                    {
                        label: 'Image Url',
                        value: 'image_url',
                    },
                    {
                        label: 'Other',
                        value: 'other',
                    },
                    {
                        label: 'Text',
                        value: 'text',
                    },
                ],
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<'base64_image' | 'blob' | 'image_url' | 'other' | 'text' | undefined>,
            enumValues: ['base64_image', 'blob', 'image_url', 'other', 'text'] as const,
            entityName: 'messageTemplate',
            databaseTable: 'message_template',
            foreignKeyReference: null,
            description: '"Type" field for messageTemplate. This is a required field. Your entry must be an string data type.',
        },
        createdAt: {
            fieldNameFormats: {
                frontend: 'createdAt',
                backend: 'created_at',
                database: 'created_at',
                pretty: 'Created At',
                component: 'CreatedAt',
                kebab: 'created-at',
                sqlFunctionRef: 'p_created_at',
                RestAPI: 'createdAt',
                GraphQL: 'createdAt',
                custom: 'createdAt',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:message_template:created_at',
            uniqueFieldId: 'supabase_automation_matrix:messageTemplate:createdAt',

            dataType: 'date' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'messageTemplate',
            databaseTable: 'message_template',
            foreignKeyReference: null,
            description: '"Created At" field for messageTemplate. This is a required field. Your entry must be an date data type.',
        },
        content: {
            fieldNameFormats: {
                frontend: 'content',
                backend: 'content',
                database: 'content',
                pretty: 'Content',
                component: 'Content',
                kebab: 'content',
                sqlFunctionRef: 'p_content',
                RestAPI: 'content',
                GraphQL: 'content',
                custom: 'content',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:message_template:content',
            uniqueFieldId: 'supabase_automation_matrix:messageTemplate:content',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'messageTemplate',
            databaseTable: 'message_template',
            foreignKeyReference: null,
            description: '"Content" field for messageTemplate. This is an optional field. Your entry must be an string data type.',
        },
        messageBrokerInverse: {
            fieldNameFormats: {
                frontend: 'messageBrokerInverse',
                backend: 'message_broker_Inverse',
                database: 'ifk_message_broker',
                pretty: 'Message Broker Inverse',
                component: 'MessageBrokerInverse',
                kebab: 'message-brokerInverse',
                sqlFunctionRef: 'p_ifk_message_broker',
                RestAPI: 'messageBrokerInverse',
                GraphQL: 'messageBrokerInverse',
                custom: 'messageBrokerInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:message_broker',
            uniqueEntityId: 'supabase_automation_matrix:messageBroker',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'messageBroker'>[]>,
            entityName: 'messageBroker',
            databaseTable: 'message_broker',
        },
        recipeMessageInverse: {
            fieldNameFormats: {
                frontend: 'recipeMessageInverse',
                backend: 'recipe_message_Inverse',
                database: 'ifk_recipe_message',
                pretty: 'Recipe Message Inverse',
                component: 'RecipeMessageInverse',
                kebab: 'recipe-messageInverse',
                sqlFunctionRef: 'p_ifk_recipe_message',
                RestAPI: 'recipeMessageInverse',
                GraphQL: 'recipeMessageInverse',
                custom: 'recipeMessageInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:recipe_message',
            uniqueEntityId: 'supabase_automation_matrix:recipeMessage',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipeMessage'>[]>,
            entityName: 'recipeMessage',
            databaseTable: 'recipe_message',
        },
    },
    entityNameFormats: {
        frontend: 'messageTemplate',
        backend: 'message_template',
        database: 'message_template',
        pretty: 'Message Template',
        component: 'MessageTemplate',
        kebab: 'message-template',
        sqlFunctionRef: 'p_message_template',
        RestAPI: 'messageTemplate',
        GraphQL: 'messageTemplate',
        custom: 'messageTemplate',
    },
    relationships: [
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'message_broker', relatedColumn: 'message_id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'recipe_message', relatedColumn: 'message_id', junctionTable: null },
    ],
} as const;

export const processor = {
    schemaType: 'table' as const,
    entityName: 'processor',
    uniqueTableId: 'supabase_automation_matrix:public:processor',
    uniqueEntityId: 'supabase_automation_matrix:processor',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'fkIfkAndM2M',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:processor:id',
            uniqueFieldId: 'supabase_automation_matrix:processor:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'processor',
            databaseTable: 'processor',
            foreignKeyReference: null,
            description: '"Id" field for processor. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:processor:name',
            uniqueFieldId: 'supabase_automation_matrix:processor:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'processor',
            databaseTable: 'processor',
            foreignKeyReference: null,
            description: '"Name" field for processor. This is a required field. Your entry must be an string data type.',
        },
        dependsDefault: {
            fieldNameFormats: {
                frontend: 'dependsDefault',
                backend: 'depends_default',
                database: 'depends_default',
                pretty: 'Depends Default',
                component: 'DependsDefault',
                kebab: 'depends-default',
                sqlFunctionRef: 'p_depends_default',
                RestAPI: 'dependsDefault',
                GraphQL: 'dependsDefault',
                custom: 'dependsDefault',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:processor:depends_default',
            uniqueFieldId: 'supabase_automation_matrix:processor:dependsDefault',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'processor',
            databaseTable: 'processor',
            foreignKeyReference: { table: 'processor', column: 'id', entity: 'processor', field: 'id' },
            description:
                '"Depends Default" field for processor. This is an optional field. Your entry must be an uuid data type. This field is a reference to a processor.',
        },
        defaultExtractors: {
            fieldNameFormats: {
                frontend: 'defaultExtractors',
                backend: 'default_extractors',
                database: 'default_extractors',
                pretty: 'Default Extractors',
                component: 'DefaultExtractors',
                kebab: 'default-extractors',
                sqlFunctionRef: 'p_default_extractors',
                RestAPI: 'defaultExtractors',
                GraphQL: 'defaultExtractors',
                custom: 'defaultExtractors',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:processor:default_extractors',
            uniqueFieldId: 'supabase_automation_matrix:processor:defaultExtractors',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'processor',
            databaseTable: 'processor',
            foreignKeyReference: null,
            description: '"Default Extractors" field for processor. This is an optional field. Your entry must be an object data type.',
        },
        params: {
            fieldNameFormats: {
                frontend: 'params',
                backend: 'params',
                database: 'params',
                pretty: 'Params',
                component: 'Params',
                kebab: 'params',
                sqlFunctionRef: 'p_params',
                RestAPI: 'params',
                GraphQL: 'params',
                custom: 'params',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:processor:params',
            uniqueFieldId: 'supabase_automation_matrix:processor:params',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'processor',
            databaseTable: 'processor',
            foreignKeyReference: null,
            description: '"Params" field for processor. This is an optional field. Your entry must be an object data type.',
        },
        processorReference: {
            fieldNameFormats: {
                frontend: 'processorReference',
                backend: 'processor_reference',
                database: 'ref_processor',
                pretty: 'Processor Reference',
                component: 'ProcessorReference',
                kebab: 'processorReference',
                sqlFunctionRef: 'p_ref_processor',
                RestAPI: 'processorReference',
                GraphQL: 'processorReference',
                custom: 'processorReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:processor:id',
            uniqueFieldId: 'supabase_automation_matrix:processor:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'processor'>[]>,
            entityName: 'processor',
            databaseTable: 'processor',
            relationshipMap: { None: 'id' },
        },
        recipeProcessorInverse: {
            fieldNameFormats: {
                frontend: 'recipeProcessorInverse',
                backend: 'recipe_processor_Inverse',
                database: 'ifk_recipe_processor',
                pretty: 'Recipe Processor Inverse',
                component: 'RecipeProcessorInverse',
                kebab: 'recipe-processorInverse',
                sqlFunctionRef: 'p_ifk_recipe_processor',
                RestAPI: 'recipeProcessorInverse',
                GraphQL: 'recipeProcessorInverse',
                custom: 'recipeProcessorInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:recipe_processor',
            uniqueEntityId: 'supabase_automation_matrix:recipeProcessor',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipeProcessor'>[]>,
            entityName: 'recipeProcessor',
            databaseTable: 'recipe_processor',
        },
    },
    entityNameFormats: {
        frontend: 'processor',
        backend: 'processor',
        database: 'processor',
        pretty: 'Processor',
        component: 'Processor',
        kebab: 'processor',
        sqlFunctionRef: 'p_processor',
        RestAPI: 'processor',
        GraphQL: 'processor',
        custom: 'processor',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'depends_default', relatedTable: 'self_reference', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'recipe_processor', relatedColumn: 'processor', junctionTable: null },
    ],
} as const;

export const recipe = {
    schemaType: 'table' as const,
    entityName: 'recipe',
    uniqueTableId: 'supabase_automation_matrix:public:recipe',
    uniqueEntityId: 'supabase_automation_matrix:recipe',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'm2mAndIfk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe:id',
            uniqueFieldId: 'supabase_automation_matrix:recipe:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipe',
            databaseTable: 'recipe',
            foreignKeyReference: null,
            description: '"Id" field for recipe. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe:name',
            uniqueFieldId: 'supabase_automation_matrix:recipe:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipe',
            databaseTable: 'recipe',
            foreignKeyReference: null,
            description: '"Name" field for recipe. This is a required field. Your entry must be an string data type.',
        },
        description: {
            fieldNameFormats: {
                frontend: 'description',
                backend: 'description',
                database: 'description',
                pretty: 'Description',
                component: 'Description',
                kebab: 'description',
                sqlFunctionRef: 'p_description',
                RestAPI: 'description',
                GraphQL: 'description',
                custom: 'description',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe:description',
            uniqueFieldId: 'supabase_automation_matrix:recipe:description',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipe',
            databaseTable: 'recipe',
            foreignKeyReference: null,
            description: '"Description" field for recipe. This is an optional field. Your entry must be an string data type.',
        },
        tags: {
            fieldNameFormats: {
                frontend: 'tags',
                backend: 'tags',
                database: 'tags',
                pretty: 'Tags',
                component: 'Tags',
                kebab: 'tags',
                sqlFunctionRef: 'p_tags',
                RestAPI: 'tags',
                GraphQL: 'tags',
                custom: 'tags',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe:tags',
            uniqueFieldId: 'supabase_automation_matrix:recipe:tags',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'recipe',
            databaseTable: 'recipe',
            foreignKeyReference: null,
            description: '"Tags" field for recipe. This is an optional field. Your entry must be an object data type.',
        },
        sampleOutput: {
            fieldNameFormats: {
                frontend: 'sampleOutput',
                backend: 'sample_output',
                database: 'sample_output',
                pretty: 'Sample Output',
                component: 'SampleOutput',
                kebab: 'sample-output',
                sqlFunctionRef: 'p_sample_output',
                RestAPI: 'sampleOutput',
                GraphQL: 'sampleOutput',
                custom: 'sampleOutput',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe:sample_output',
            uniqueFieldId: 'supabase_automation_matrix:recipe:sampleOutput',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipe',
            databaseTable: 'recipe',
            foreignKeyReference: null,
            description: '"Sample Output" field for recipe. This is an optional field. Your entry must be an string data type.',
        },
        isPublic: {
            fieldNameFormats: {
                frontend: 'isPublic',
                backend: 'is_public',
                database: 'is_public',
                pretty: 'Is Public',
                component: 'IsPublic',
                kebab: 'is-public',
                sqlFunctionRef: 'p_is_public',
                RestAPI: 'isPublic',
                GraphQL: 'isPublic',
                custom: 'isPublic',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe:is_public',
            uniqueFieldId: 'supabase_automation_matrix:recipe:isPublic',

            dataType: 'boolean' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'recipe',
            databaseTable: 'recipe',
            foreignKeyReference: null,
            description: '"Is Public" field for recipe. This is an optional field. Your entry must be an boolean data type.',
        },
        status: {
            fieldNameFormats: {
                frontend: 'status',
                backend: 'status',
                database: 'status',
                pretty: 'Status',
                component: 'Status',
                kebab: 'status',
                sqlFunctionRef: 'p_status',
                RestAPI: 'status',
                GraphQL: 'status',
                custom: 'status',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe:status',
            uniqueFieldId: 'supabase_automation_matrix:recipe:status',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: 'draft' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Active Testing',
                        value: 'active_testing',
                    },
                    {
                        label: 'Archived',
                        value: 'archived',
                    },
                    {
                        label: 'Draft',
                        value: 'draft',
                    },
                    {
                        label: 'In Review',
                        value: 'in_review',
                    },
                    {
                        label: 'Live',
                        value: 'live',
                    },
                    {
                        label: 'Other',
                        value: 'other',
                    },
                ],
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<'active_testing' | 'archived' | 'draft' | 'in_review' | 'live' | 'other' | undefined>,
            enumValues: ['active_testing', 'archived', 'draft', 'in_review', 'live', 'other'] as const,
            entityName: 'recipe',
            databaseTable: 'recipe',
            foreignKeyReference: null,
            description: '"Status" field for recipe. This is a required field. Your entry must be an string data type.',
        },
        version: {
            fieldNameFormats: {
                frontend: 'version',
                backend: 'version',
                database: 'version',
                pretty: 'Version',
                component: 'Version',
                kebab: 'version',
                sqlFunctionRef: 'p_version',
                RestAPI: 'version',
                GraphQL: 'version',
                custom: 'version',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe:version',
            uniqueFieldId: 'supabase_automation_matrix:recipe:version',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '1' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'recipe',
            databaseTable: 'recipe',
            foreignKeyReference: null,
            description: '"Version" field for recipe. This is an optional field. Your entry must be an number data type.',
        },
        messages: {
            fieldNameFormats: {
                frontend: 'messages',
                backend: 'messages',
                database: 'messages',
                pretty: 'Messages',
                component: 'Messages',
                kebab: 'messages',
                sqlFunctionRef: 'p_messages',
                RestAPI: 'messages',
                GraphQL: 'messages',
                custom: 'messages',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe:messages',
            uniqueFieldId: 'supabase_automation_matrix:recipe:messages',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'jsonArray',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>[]>,
            enumValues: null,
            entityName: 'recipe',
            databaseTable: 'recipe',
            foreignKeyReference: null,
            description: '"Messages" field for recipe. This is an optional field. Your entry must be an object data type. You can enter one or more entries.',
        },
        postResultOptions: {
            fieldNameFormats: {
                frontend: 'postResultOptions',
                backend: 'post_result_options',
                database: 'post_result_options',
                pretty: 'Post Result Options',
                component: 'PostResultOptions',
                kebab: 'post-result-options',
                sqlFunctionRef: 'p_post_result_options',
                RestAPI: 'postResultOptions',
                GraphQL: 'postResultOptions',
                custom: 'postResultOptions',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe:post_result_options',
            uniqueFieldId: 'supabase_automation_matrix:recipe:postResultOptions',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'recipe',
            databaseTable: 'recipe',
            foreignKeyReference: null,
            description: '"Post Result Options" field for recipe. This is an optional field. Your entry must be an object data type.',
        },
        aiAgentInverse: {
            fieldNameFormats: {
                frontend: 'aiAgentInverse',
                backend: 'ai_agent_Inverse',
                database: 'ifk_ai_agent',
                pretty: 'Ai Agent Inverse',
                component: 'AiAgentInverse',
                kebab: 'ai-agentInverse',
                sqlFunctionRef: 'p_ifk_ai_agent',
                RestAPI: 'aiAgentInverse',
                GraphQL: 'aiAgentInverse',
                custom: 'aiAgentInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:ai_agent',
            uniqueEntityId: 'supabase_automation_matrix:aiAgent',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiAgent'>[]>,
            entityName: 'aiAgent',
            databaseTable: 'ai_agent',
        },
        recipeDisplayInverse: {
            fieldNameFormats: {
                frontend: 'recipeDisplayInverse',
                backend: 'recipe_display_Inverse',
                database: 'ifk_recipe_display',
                pretty: 'Recipe Display Inverse',
                component: 'RecipeDisplayInverse',
                kebab: 'recipe-displayInverse',
                sqlFunctionRef: 'p_ifk_recipe_display',
                RestAPI: 'recipeDisplayInverse',
                GraphQL: 'recipeDisplayInverse',
                custom: 'recipeDisplayInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:recipe_display',
            uniqueEntityId: 'supabase_automation_matrix:recipeDisplay',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipeDisplay'>[]>,
            entityName: 'recipeDisplay',
            databaseTable: 'recipe_display',
        },
        recipeProcessorInverse: {
            fieldNameFormats: {
                frontend: 'recipeProcessorInverse',
                backend: 'recipe_processor_Inverse',
                database: 'ifk_recipe_processor',
                pretty: 'Recipe Processor Inverse',
                component: 'RecipeProcessorInverse',
                kebab: 'recipe-processorInverse',
                sqlFunctionRef: 'p_ifk_recipe_processor',
                RestAPI: 'recipeProcessorInverse',
                GraphQL: 'recipeProcessorInverse',
                custom: 'recipeProcessorInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:recipe_processor',
            uniqueEntityId: 'supabase_automation_matrix:recipeProcessor',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipeProcessor'>[]>,
            entityName: 'recipeProcessor',
            databaseTable: 'recipe_processor',
        },
        recipeModelInverse: {
            fieldNameFormats: {
                frontend: 'recipeModelInverse',
                backend: 'recipe_model_Inverse',
                database: 'ifk_recipe_model',
                pretty: 'Recipe Model Inverse',
                component: 'RecipeModelInverse',
                kebab: 'recipe-modelInverse',
                sqlFunctionRef: 'p_ifk_recipe_model',
                RestAPI: 'recipeModelInverse',
                GraphQL: 'recipeModelInverse',
                custom: 'recipeModelInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:recipe_model',
            uniqueEntityId: 'supabase_automation_matrix:recipeModel',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipeModel'>[]>,
            entityName: 'recipeModel',
            databaseTable: 'recipe_model',
        },
        recipeBrokerInverse: {
            fieldNameFormats: {
                frontend: 'recipeBrokerInverse',
                backend: 'recipe_broker_Inverse',
                database: 'ifk_recipe_broker',
                pretty: 'Recipe Broker Inverse',
                component: 'RecipeBrokerInverse',
                kebab: 'recipe-brokerInverse',
                sqlFunctionRef: 'p_ifk_recipe_broker',
                RestAPI: 'recipeBrokerInverse',
                GraphQL: 'recipeBrokerInverse',
                custom: 'recipeBrokerInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:recipe_broker',
            uniqueEntityId: 'supabase_automation_matrix:recipeBroker',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipeBroker'>[]>,
            entityName: 'recipeBroker',
            databaseTable: 'recipe_broker',
        },
        recipeToolInverse: {
            fieldNameFormats: {
                frontend: 'recipeToolInverse',
                backend: 'recipe_tool_Inverse',
                database: 'ifk_recipe_tool',
                pretty: 'Recipe Tool Inverse',
                component: 'RecipeToolInverse',
                kebab: 'recipe-toolInverse',
                sqlFunctionRef: 'p_ifk_recipe_tool',
                RestAPI: 'recipeToolInverse',
                GraphQL: 'recipeToolInverse',
                custom: 'recipeToolInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:recipe_tool',
            uniqueEntityId: 'supabase_automation_matrix:recipeTool',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipeTool'>[]>,
            entityName: 'recipeTool',
            databaseTable: 'recipe_tool',
        },
        recipeFunctionInverse: {
            fieldNameFormats: {
                frontend: 'recipeFunctionInverse',
                backend: 'recipe_function_Inverse',
                database: 'ifk_recipe_function',
                pretty: 'Recipe Function Inverse',
                component: 'RecipeFunctionInverse',
                kebab: 'recipe-functionInverse',
                sqlFunctionRef: 'p_ifk_recipe_function',
                RestAPI: 'recipeFunctionInverse',
                GraphQL: 'recipeFunctionInverse',
                custom: 'recipeFunctionInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:recipe_function',
            uniqueEntityId: 'supabase_automation_matrix:recipeFunction',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipeFunction'>[]>,
            entityName: 'recipeFunction',
            databaseTable: 'recipe_function',
        },
        recipeMessageInverse: {
            fieldNameFormats: {
                frontend: 'recipeMessageInverse',
                backend: 'recipe_message_Inverse',
                database: 'ifk_recipe_message',
                pretty: 'Recipe Message Inverse',
                component: 'RecipeMessageInverse',
                kebab: 'recipe-messageInverse',
                sqlFunctionRef: 'p_ifk_recipe_message',
                RestAPI: 'recipeMessageInverse',
                GraphQL: 'recipeMessageInverse',
                custom: 'recipeMessageInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:recipe_message',
            uniqueEntityId: 'supabase_automation_matrix:recipeMessage',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipeMessage'>[]>,
            entityName: 'recipeMessage',
            databaseTable: 'recipe_message',
        },
    },
    entityNameFormats: {
        frontend: 'recipe',
        backend: 'recipe',
        database: 'recipe',
        pretty: 'Recipe',
        component: 'Recipe',
        kebab: 'recipe',
        sqlFunctionRef: 'p_recipe',
        RestAPI: 'recipe',
        GraphQL: 'recipe',
        custom: 'recipe',
    },
    relationships: [
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'ai_agent', relatedColumn: 'recipe_id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'recipe_display', relatedColumn: 'recipe', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'recipe_processor', relatedColumn: 'recipe', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'recipe_model', relatedColumn: 'recipe', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'recipe_broker', relatedColumn: 'recipe', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'recipe_tool', relatedColumn: 'recipe', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'recipe_function', relatedColumn: 'recipe', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'recipe_message', relatedColumn: 'recipe_id', junctionTable: null },
    ],
} as const;

export const recipeBroker = {
    schemaType: 'table' as const,
    entityName: 'recipeBroker',
    uniqueTableId: 'supabase_automation_matrix:public:recipe_broker',
    uniqueEntityId: 'supabase_automation_matrix:recipeBroker',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'broker', databaseFieldName: 'broker' },
    defaultFetchStrategy: 'm2mAndFk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_broker:id',
            uniqueFieldId: 'supabase_automation_matrix:recipeBroker:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeBroker',
            databaseTable: 'recipe_broker',
            foreignKeyReference: null,
            description: '"Id" field for recipeBroker. This is a required field. Your entry must be an uuid data type.',
        },
        recipe: {
            fieldNameFormats: {
                frontend: 'recipe',
                backend: 'recipe',
                database: 'recipe',
                pretty: 'Recipe',
                component: 'Recipe',
                kebab: 'recipe',
                sqlFunctionRef: 'p_recipe',
                RestAPI: 'recipe',
                GraphQL: 'recipe',
                custom: 'recipe',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_broker:recipe',
            uniqueFieldId: 'supabase_automation_matrix:recipeBroker:recipe',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeBroker',
            databaseTable: 'recipe_broker',
            foreignKeyReference: { table: 'recipe', column: 'id', entity: 'recipe', field: 'id' },
            description:
                '"Recipe" field for recipeBroker. This is a required field. Your entry must be an uuid data type. This field is a reference to a recipe.',
        },
        broker: {
            fieldNameFormats: {
                frontend: 'broker',
                backend: 'broker',
                database: 'broker',
                pretty: 'Broker',
                component: 'Broker',
                kebab: 'broker',
                sqlFunctionRef: 'p_broker',
                RestAPI: 'broker',
                GraphQL: 'broker',
                custom: 'broker',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_broker:broker',
            uniqueFieldId: 'supabase_automation_matrix:recipeBroker:broker',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeBroker',
            databaseTable: 'recipe_broker',
            foreignKeyReference: { table: 'broker', column: 'id', entity: 'broker', field: 'id' },
            description:
                '"Broker" field for recipeBroker. This is a required field. Your entry must be an uuid data type. This field is a reference to a broker.',
        },
        brokerRole: {
            fieldNameFormats: {
                frontend: 'brokerRole',
                backend: 'broker_role',
                database: 'broker_role',
                pretty: 'Broker Role',
                component: 'BrokerRole',
                kebab: 'broker-role',
                sqlFunctionRef: 'p_broker_role',
                RestAPI: 'brokerRole',
                GraphQL: 'brokerRole',
                custom: 'brokerRole',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_broker:broker_role',
            uniqueFieldId: 'supabase_automation_matrix:recipeBroker:brokerRole',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Input Broker',
                        value: 'input_broker',
                    },
                    {
                        label: 'Output Broker',
                        value: 'output_broker',
                    },
                ],
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<'input_broker' | 'output_broker' | undefined>,
            enumValues: ['input_broker', 'output_broker'] as const,
            entityName: 'recipeBroker',
            databaseTable: 'recipe_broker',
            foreignKeyReference: null,
            description: '"Broker Role" field for recipeBroker. This is a required field. Your entry must be an string data type.',
        },
        required: {
            fieldNameFormats: {
                frontend: 'required',
                backend: 'required',
                database: 'required',
                pretty: 'Required',
                component: 'Required',
                kebab: 'required',
                sqlFunctionRef: 'p_required',
                RestAPI: 'required',
                GraphQL: 'required',
                custom: 'required',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_broker:required',
            uniqueFieldId: 'supabase_automation_matrix:recipeBroker:required',

            dataType: 'boolean' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: 'true' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SWITCH' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<boolean>,
            enumValues: null,
            entityName: 'recipeBroker',
            databaseTable: 'recipe_broker',
            foreignKeyReference: null,
            description: '"Required" field for recipeBroker. This is an optional field. Your entry must be an boolean data type.',
        },
        brokerReference: {
            fieldNameFormats: {
                frontend: 'brokerReference',
                backend: 'broker_reference',
                database: 'ref_broker',
                pretty: 'Broker Reference',
                component: 'BrokerReference',
                kebab: 'brokerReference',
                sqlFunctionRef: 'p_ref_broker',
                RestAPI: 'brokerReference',
                GraphQL: 'brokerReference',
                custom: 'brokerReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:broker:id',
            uniqueFieldId: 'supabase_automation_matrix:broker:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'broker'>[]>,
            entityName: 'broker',
            databaseTable: 'broker',
            relationshipMap: { broker: 'id', recipe: 'id' },
        },
        recipeReference: {
            fieldNameFormats: {
                frontend: 'recipeReference',
                backend: 'recipe_reference',
                database: 'ref_recipe',
                pretty: 'Recipe Reference',
                component: 'RecipeReference',
                kebab: 'recipeReference',
                sqlFunctionRef: 'p_ref_recipe',
                RestAPI: 'recipeReference',
                GraphQL: 'recipeReference',
                custom: 'recipeReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:recipe:id',
            uniqueFieldId: 'supabase_automation_matrix:recipe:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipe'>[]>,
            entityName: 'recipe',
            databaseTable: 'recipe',
            relationshipMap: { broker: 'id', recipe: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'recipeBroker',
        backend: 'recipe_broker',
        database: 'recipe_broker',
        pretty: 'Recipe Broker',
        component: 'RecipeBroker',
        kebab: 'recipe-broker',
        sqlFunctionRef: 'p_recipe_broker',
        RestAPI: 'recipeBroker',
        GraphQL: 'recipeBroker',
        custom: 'recipeBroker',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'broker', relatedTable: 'broker', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'recipe', relatedTable: 'recipe', relatedColumn: 'id', junctionTable: null },
    ],
} as const;

export const recipeDisplay = {
    schemaType: 'table' as const,
    entityName: 'recipeDisplay',
    uniqueTableId: 'supabase_automation_matrix:public:recipe_display',
    uniqueEntityId: 'supabase_automation_matrix:recipeDisplay',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'id', databaseFieldName: 'id' },
    defaultFetchStrategy: 'm2mAndFk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_display:id',
            uniqueFieldId: 'supabase_automation_matrix:recipeDisplay:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeDisplay',
            databaseTable: 'recipe_display',
            foreignKeyReference: null,
            description: '"Id" field for recipeDisplay. This is a required field. Your entry must be an uuid data type.',
        },
        recipe: {
            fieldNameFormats: {
                frontend: 'recipe',
                backend: 'recipe',
                database: 'recipe',
                pretty: 'Recipe',
                component: 'Recipe',
                kebab: 'recipe',
                sqlFunctionRef: 'p_recipe',
                RestAPI: 'recipe',
                GraphQL: 'recipe',
                custom: 'recipe',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_display:recipe',
            uniqueFieldId: 'supabase_automation_matrix:recipeDisplay:recipe',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeDisplay',
            databaseTable: 'recipe_display',
            foreignKeyReference: { table: 'recipe', column: 'id', entity: 'recipe', field: 'id' },
            description:
                '"Recipe" field for recipeDisplay. This is a required field. Your entry must be an uuid data type. This field is a reference to a recipe.',
        },
        display: {
            fieldNameFormats: {
                frontend: 'display',
                backend: 'display',
                database: 'display',
                pretty: 'Display',
                component: 'Display',
                kebab: 'display',
                sqlFunctionRef: 'p_display',
                RestAPI: 'display',
                GraphQL: 'display',
                custom: 'display',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_display:display',
            uniqueFieldId: 'supabase_automation_matrix:recipeDisplay:display',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeDisplay',
            databaseTable: 'recipe_display',
            foreignKeyReference: { table: 'display_option', column: 'id', entity: 'displayOption', field: 'id' },
            description:
                '"Display" field for recipeDisplay. This is a required field. Your entry must be an uuid data type. This field is a reference to a displayOption.',
        },
        priority: {
            fieldNameFormats: {
                frontend: 'priority',
                backend: 'priority',
                database: 'priority',
                pretty: 'Priority',
                component: 'Priority',
                kebab: 'priority',
                sqlFunctionRef: 'p_priority',
                RestAPI: 'priority',
                GraphQL: 'priority',
                custom: 'priority',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_display:priority',
            uniqueFieldId: 'supabase_automation_matrix:recipeDisplay:priority',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '1' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'recipeDisplay',
            databaseTable: 'recipe_display',
            foreignKeyReference: null,
            description: '"Priority" field for recipeDisplay. This is an optional field. Your entry must be an number data type.',
        },
        displaySettings: {
            fieldNameFormats: {
                frontend: 'displaySettings',
                backend: 'display_settings',
                database: 'display_settings',
                pretty: 'Display Settings',
                component: 'DisplaySettings',
                kebab: 'display-settings',
                sqlFunctionRef: 'p_display_settings',
                RestAPI: 'displaySettings',
                GraphQL: 'displaySettings',
                custom: 'displaySettings',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_display:display_settings',
            uniqueFieldId: 'supabase_automation_matrix:recipeDisplay:displaySettings',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'recipeDisplay',
            databaseTable: 'recipe_display',
            foreignKeyReference: null,
            description: '"Display Settings" field for recipeDisplay. This is an optional field. Your entry must be an object data type.',
        },
        displayOptionReference: {
            fieldNameFormats: {
                frontend: 'displayOptionReference',
                backend: 'display_option_reference',
                database: 'ref_display_option',
                pretty: 'Display Option Reference',
                component: 'DisplayOptionReference',
                kebab: 'display-optionReference',
                sqlFunctionRef: 'p_ref_display_option',
                RestAPI: 'displayOptionReference',
                GraphQL: 'displayOptionReference',
                custom: 'displayOptionReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:display_option:id',
            uniqueFieldId: 'supabase_automation_matrix:displayOption:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'displayOption'>[]>,
            entityName: 'displayOption',
            databaseTable: 'display_option',
            relationshipMap: { display_option: 'id', recipe: 'id' },
        },
        recipeReference: {
            fieldNameFormats: {
                frontend: 'recipeReference',
                backend: 'recipe_reference',
                database: 'ref_recipe',
                pretty: 'Recipe Reference',
                component: 'RecipeReference',
                kebab: 'recipeReference',
                sqlFunctionRef: 'p_ref_recipe',
                RestAPI: 'recipeReference',
                GraphQL: 'recipeReference',
                custom: 'recipeReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:recipe:id',
            uniqueFieldId: 'supabase_automation_matrix:recipe:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipe'>[]>,
            entityName: 'recipe',
            databaseTable: 'recipe',
            relationshipMap: { display_option: 'id', recipe: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'recipeDisplay',
        backend: 'recipe_display',
        database: 'recipe_display',
        pretty: 'Recipe Display',
        component: 'RecipeDisplay',
        kebab: 'recipe-display',
        sqlFunctionRef: 'p_recipe_display',
        RestAPI: 'recipeDisplay',
        GraphQL: 'recipeDisplay',
        custom: 'recipeDisplay',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'display', relatedTable: 'display_option', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'recipe', relatedTable: 'recipe', relatedColumn: 'id', junctionTable: null },
    ],
} as const;

export const recipeFunction = {
    schemaType: 'table' as const,
    entityName: 'recipeFunction',
    uniqueTableId: 'supabase_automation_matrix:public:recipe_function',
    uniqueEntityId: 'supabase_automation_matrix:recipeFunction',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'id', databaseFieldName: 'id' },
    defaultFetchStrategy: 'm2mAndFk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_function:id',
            uniqueFieldId: 'supabase_automation_matrix:recipeFunction:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeFunction',
            databaseTable: 'recipe_function',
            foreignKeyReference: null,
            description: '"Id" field for recipeFunction. This is a required field. Your entry must be an uuid data type.',
        },
        recipe: {
            fieldNameFormats: {
                frontend: 'recipe',
                backend: 'recipe',
                database: 'recipe',
                pretty: 'Recipe',
                component: 'Recipe',
                kebab: 'recipe',
                sqlFunctionRef: 'p_recipe',
                RestAPI: 'recipe',
                GraphQL: 'recipe',
                custom: 'recipe',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_function:recipe',
            uniqueFieldId: 'supabase_automation_matrix:recipeFunction:recipe',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeFunction',
            databaseTable: 'recipe_function',
            foreignKeyReference: { table: 'recipe', column: 'id', entity: 'recipe', field: 'id' },
            description:
                '"Recipe" field for recipeFunction. This is a required field. Your entry must be an uuid data type. This field is a reference to a recipe.',
        },
        function: {
            fieldNameFormats: {
                frontend: 'function',
                backend: 'function',
                database: 'function',
                pretty: 'Function',
                component: 'Function',
                kebab: 'function',
                sqlFunctionRef: 'p_function',
                RestAPI: 'function',
                GraphQL: 'function',
                custom: 'function',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_function:function',
            uniqueFieldId: 'supabase_automation_matrix:recipeFunction:function',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeFunction',
            databaseTable: 'recipe_function',
            foreignKeyReference: { table: 'system_function', column: 'id', entity: 'systemFunction', field: 'id' },
            description:
                '"Function" field for recipeFunction. This is a required field. Your entry must be an uuid data type. This field is a reference to a systemFunction.',
        },
        role: {
            fieldNameFormats: {
                frontend: 'role',
                backend: 'role',
                database: 'role',
                pretty: 'Role',
                component: 'Role',
                kebab: 'role',
                sqlFunctionRef: 'p_role',
                RestAPI: 'role',
                GraphQL: 'role',
                custom: 'role',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_function:role',
            uniqueFieldId: 'supabase_automation_matrix:recipeFunction:role',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Comparison',
                        value: 'comparison',
                    },
                    {
                        label: 'Decision',
                        value: 'decision',
                    },
                    {
                        label: 'Other',
                        value: 'other',
                    },
                    {
                        label: 'Post Processing',
                        value: 'post_processing',
                    },
                    {
                        label: 'Pre Processing',
                        value: 'pre-Processing',
                    },
                    {
                        label: 'Rating',
                        value: 'rating',
                    },
                    {
                        label: 'Save Data',
                        value: 'save_data',
                    },
                    {
                        label: 'Validation',
                        value: 'validation',
                    },
                ],
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<
                'comparison' | 'decision' | 'other' | 'post_processing' | 'pre-Processing' | 'rating' | 'save_data' | 'validation' | undefined
            >,
            enumValues: ['comparison', 'decision', 'other', 'post_processing', 'pre-Processing', 'rating', 'save_data', 'validation'] as const,
            entityName: 'recipeFunction',
            databaseTable: 'recipe_function',
            foreignKeyReference: null,
            description: '"Role" field for recipeFunction. This is a required field. Your entry must be an string data type.',
        },
        params: {
            fieldNameFormats: {
                frontend: 'params',
                backend: 'params',
                database: 'params',
                pretty: 'Params',
                component: 'Params',
                kebab: 'params',
                sqlFunctionRef: 'p_params',
                RestAPI: 'params',
                GraphQL: 'params',
                custom: 'params',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_function:params',
            uniqueFieldId: 'supabase_automation_matrix:recipeFunction:params',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'recipeFunction',
            databaseTable: 'recipe_function',
            foreignKeyReference: null,
            description: '"Params" field for recipeFunction. This is an optional field. Your entry must be an object data type.',
        },
        systemFunctionReference: {
            fieldNameFormats: {
                frontend: 'systemFunctionReference',
                backend: 'system_function_reference',
                database: 'ref_system_function',
                pretty: 'System Function Reference',
                component: 'SystemFunctionReference',
                kebab: 'system-functionReference',
                sqlFunctionRef: 'p_ref_system_function',
                RestAPI: 'systemFunctionReference',
                GraphQL: 'systemFunctionReference',
                custom: 'systemFunctionReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:system_function:id',
            uniqueFieldId: 'supabase_automation_matrix:systemFunction:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'systemFunction'>[]>,
            entityName: 'systemFunction',
            databaseTable: 'system_function',
            relationshipMap: { system_function: 'id', recipe: 'id' },
        },
        recipeReference: {
            fieldNameFormats: {
                frontend: 'recipeReference',
                backend: 'recipe_reference',
                database: 'ref_recipe',
                pretty: 'Recipe Reference',
                component: 'RecipeReference',
                kebab: 'recipeReference',
                sqlFunctionRef: 'p_ref_recipe',
                RestAPI: 'recipeReference',
                GraphQL: 'recipeReference',
                custom: 'recipeReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:recipe:id',
            uniqueFieldId: 'supabase_automation_matrix:recipe:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipe'>[]>,
            entityName: 'recipe',
            databaseTable: 'recipe',
            relationshipMap: { system_function: 'id', recipe: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'recipeFunction',
        backend: 'recipe_function',
        database: 'recipe_function',
        pretty: 'Recipe Function',
        component: 'RecipeFunction',
        kebab: 'recipe-function',
        sqlFunctionRef: 'p_recipe_function',
        RestAPI: 'recipeFunction',
        GraphQL: 'recipeFunction',
        custom: 'recipeFunction',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'function', relatedTable: 'system_function', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'recipe', relatedTable: 'recipe', relatedColumn: 'id', junctionTable: null },
    ],
} as const;

export const recipeMessage = {
    schemaType: 'table' as const,
    entityName: 'recipeMessage',
    uniqueTableId: 'supabase_automation_matrix:public:recipe_message',
    uniqueEntityId: 'supabase_automation_matrix:recipeMessage',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'id', databaseFieldName: 'id' },
    defaultFetchStrategy: 'm2mAndFk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_message:id',
            uniqueFieldId: 'supabase_automation_matrix:recipeMessage:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeMessage',
            databaseTable: 'recipe_message',
            foreignKeyReference: null,
            description: '"Id" field for recipeMessage. This is a required field. Your entry must be an uuid data type.',
        },
        messageId: {
            fieldNameFormats: {
                frontend: 'messageId',
                backend: 'message_id',
                database: 'message_id',
                pretty: 'Message Id',
                component: 'MessageId',
                kebab: 'message-id',
                sqlFunctionRef: 'p_message_id',
                RestAPI: 'messageId',
                GraphQL: 'messageId',
                custom: 'messageId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_message:message_id',
            uniqueFieldId: 'supabase_automation_matrix:recipeMessage:messageId',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeMessage',
            databaseTable: 'recipe_message',
            foreignKeyReference: { table: 'message_template', column: 'id', entity: 'messageTemplate', field: 'id' },
            description:
                '"Message Id" field for recipeMessage. This is an optional field. Your entry must be an uuid data type. This field is a reference to a messageTemplate.',
        },
        recipeId: {
            fieldNameFormats: {
                frontend: 'recipeId',
                backend: 'recipe_id',
                database: 'recipe_id',
                pretty: 'Recipe Id',
                component: 'RecipeId',
                kebab: 'recipe-id',
                sqlFunctionRef: 'p_recipe_id',
                RestAPI: 'recipeId',
                GraphQL: 'recipeId',
                custom: 'recipeId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_message:recipe_id',
            uniqueFieldId: 'supabase_automation_matrix:recipeMessage:recipeId',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeMessage',
            databaseTable: 'recipe_message',
            foreignKeyReference: { table: 'recipe', column: 'id', entity: 'recipe', field: 'id' },
            description:
                '"Recipe Id" field for recipeMessage. This is an optional field. Your entry must be an uuid data type. This field is a reference to a recipe.',
        },
        order: {
            fieldNameFormats: {
                frontend: 'order',
                backend: 'order',
                database: 'order',
                pretty: 'Order',
                component: 'Order',
                kebab: 'order',
                sqlFunctionRef: 'p_order',
                RestAPI: 'order',
                GraphQL: 'order',
                custom: 'order',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_message:order',
            uniqueFieldId: 'supabase_automation_matrix:recipeMessage:order',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'recipeMessage',
            databaseTable: 'recipe_message',
            foreignKeyReference: null,
            description: '"Order" field for recipeMessage. This is an optional field. Your entry must be an number data type.',
        },
        messageTemplateReference: {
            fieldNameFormats: {
                frontend: 'messageTemplateReference',
                backend: 'message_template_reference',
                database: 'ref_message_template',
                pretty: 'Message Template Reference',
                component: 'MessageTemplateReference',
                kebab: 'message-templateReference',
                sqlFunctionRef: 'p_ref_message_template',
                RestAPI: 'messageTemplateReference',
                GraphQL: 'messageTemplateReference',
                custom: 'messageTemplateReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:message_template:id',
            uniqueFieldId: 'supabase_automation_matrix:messageTemplate:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'messageTemplate'>[]>,
            entityName: 'messageTemplate',
            databaseTable: 'message_template',
            relationshipMap: { message_template: 'id', recipe: 'id' },
        },
        recipeReference: {
            fieldNameFormats: {
                frontend: 'recipeReference',
                backend: 'recipe_reference',
                database: 'ref_recipe',
                pretty: 'Recipe Reference',
                component: 'RecipeReference',
                kebab: 'recipeReference',
                sqlFunctionRef: 'p_ref_recipe',
                RestAPI: 'recipeReference',
                GraphQL: 'recipeReference',
                custom: 'recipeReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:recipe:id',
            uniqueFieldId: 'supabase_automation_matrix:recipe:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipe'>[]>,
            entityName: 'recipe',
            databaseTable: 'recipe',
            relationshipMap: { message_template: 'id', recipe: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'recipeMessage',
        backend: 'recipe_message',
        database: 'recipe_message',
        pretty: 'Recipe Message',
        component: 'RecipeMessage',
        kebab: 'recipe-message',
        sqlFunctionRef: 'p_recipe_message',
        RestAPI: 'recipeMessage',
        GraphQL: 'recipeMessage',
        custom: 'recipeMessage',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'message_id', relatedTable: 'message_template', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'recipe_id', relatedTable: 'recipe', relatedColumn: 'id', junctionTable: null },
    ],
} as const;

export const recipeModel = {
    schemaType: 'table' as const,
    entityName: 'recipeModel',
    uniqueTableId: 'supabase_automation_matrix:public:recipe_model',
    uniqueEntityId: 'supabase_automation_matrix:recipeModel',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'id', databaseFieldName: 'id' },
    defaultFetchStrategy: 'm2mAndFk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_model:id',
            uniqueFieldId: 'supabase_automation_matrix:recipeModel:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeModel',
            databaseTable: 'recipe_model',
            foreignKeyReference: null,
            description: '"Id" field for recipeModel. This is a required field. Your entry must be an uuid data type.',
        },
        recipe: {
            fieldNameFormats: {
                frontend: 'recipe',
                backend: 'recipe',
                database: 'recipe',
                pretty: 'Recipe',
                component: 'Recipe',
                kebab: 'recipe',
                sqlFunctionRef: 'p_recipe',
                RestAPI: 'recipe',
                GraphQL: 'recipe',
                custom: 'recipe',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_model:recipe',
            uniqueFieldId: 'supabase_automation_matrix:recipeModel:recipe',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeModel',
            databaseTable: 'recipe_model',
            foreignKeyReference: { table: 'recipe', column: 'id', entity: 'recipe', field: 'id' },
            description:
                '"Recipe" field for recipeModel. This is a required field. Your entry must be an uuid data type. This field is a reference to a recipe.',
        },
        aiModel: {
            fieldNameFormats: {
                frontend: 'aiModel',
                backend: 'ai_model',
                database: 'ai_model',
                pretty: 'Ai Model',
                component: 'AiModel',
                kebab: 'ai-model',
                sqlFunctionRef: 'p_ai_model',
                RestAPI: 'aiModel',
                GraphQL: 'aiModel',
                custom: 'aiModel',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_model:ai_model',
            uniqueFieldId: 'supabase_automation_matrix:recipeModel:aiModel',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeModel',
            databaseTable: 'recipe_model',
            foreignKeyReference: { table: 'ai_model', column: 'id', entity: 'aiModel', field: 'id' },
            description:
                '"Ai Model" field for recipeModel. This is a required field. Your entry must be an uuid data type. This field is a reference to a aiModel.',
        },
        role: {
            fieldNameFormats: {
                frontend: 'role',
                backend: 'role',
                database: 'role',
                pretty: 'Role',
                component: 'Role',
                kebab: 'role',
                sqlFunctionRef: 'p_role',
                RestAPI: 'role',
                GraphQL: 'role',
                custom: 'role',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_model:role',
            uniqueFieldId: 'supabase_automation_matrix:recipeModel:role',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: 'primary_model' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'SELECT' as const,
            componentProps: {
                subComponent: 'enumSelect',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: [
                    {
                        label: 'Primary Model',
                        value: 'primary_model',
                    },
                    {
                        label: 'Trial Model',
                        value: 'trial_model',
                    },
                    {
                        label: 'Verified Model',
                        value: 'verified_model',
                    },
                ],
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<'primary_model' | 'trial_model' | 'verified_model' | undefined>,
            enumValues: ['primary_model', 'trial_model', 'verified_model'] as const,
            entityName: 'recipeModel',
            databaseTable: 'recipe_model',
            foreignKeyReference: null,
            description: '"Role" field for recipeModel. This is a required field. Your entry must be an string data type.',
        },
        priority: {
            fieldNameFormats: {
                frontend: 'priority',
                backend: 'priority',
                database: 'priority',
                pretty: 'Priority',
                component: 'Priority',
                kebab: 'priority',
                sqlFunctionRef: 'p_priority',
                RestAPI: 'priority',
                GraphQL: 'priority',
                custom: 'priority',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_model:priority',
            uniqueFieldId: 'supabase_automation_matrix:recipeModel:priority',

            dataType: 'number' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '1' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'NUMBER_INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'smallint',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<number>,
            enumValues: null,
            entityName: 'recipeModel',
            databaseTable: 'recipe_model',
            foreignKeyReference: null,
            description: '"Priority" field for recipeModel. This is an optional field. Your entry must be an number data type.',
        },
        aiModelReference: {
            fieldNameFormats: {
                frontend: 'aiModelReference',
                backend: 'ai_model_reference',
                database: 'ref_ai_model',
                pretty: 'Ai Model Reference',
                component: 'AiModelReference',
                kebab: 'ai-modelReference',
                sqlFunctionRef: 'p_ref_ai_model',
                RestAPI: 'aiModelReference',
                GraphQL: 'aiModelReference',
                custom: 'aiModelReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:ai_model:id',
            uniqueFieldId: 'supabase_automation_matrix:aiModel:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'aiModel'>[]>,
            entityName: 'aiModel',
            databaseTable: 'ai_model',
            relationshipMap: { ai_model: 'id', recipe: 'id' },
        },
        recipeReference: {
            fieldNameFormats: {
                frontend: 'recipeReference',
                backend: 'recipe_reference',
                database: 'ref_recipe',
                pretty: 'Recipe Reference',
                component: 'RecipeReference',
                kebab: 'recipeReference',
                sqlFunctionRef: 'p_ref_recipe',
                RestAPI: 'recipeReference',
                GraphQL: 'recipeReference',
                custom: 'recipeReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:recipe:id',
            uniqueFieldId: 'supabase_automation_matrix:recipe:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipe'>[]>,
            entityName: 'recipe',
            databaseTable: 'recipe',
            relationshipMap: { ai_model: 'id', recipe: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'recipeModel',
        backend: 'recipe_model',
        database: 'recipe_model',
        pretty: 'Recipe Model',
        component: 'RecipeModel',
        kebab: 'recipe-model',
        sqlFunctionRef: 'p_recipe_model',
        RestAPI: 'recipeModel',
        GraphQL: 'recipeModel',
        custom: 'recipeModel',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'ai_model', relatedTable: 'ai_model', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'recipe', relatedTable: 'recipe', relatedColumn: 'id', junctionTable: null },
    ],
} as const;

export const recipeProcessor = {
    schemaType: 'table' as const,
    entityName: 'recipeProcessor',
    uniqueTableId: 'supabase_automation_matrix:public:recipe_processor',
    uniqueEntityId: 'supabase_automation_matrix:recipeProcessor',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'id', databaseFieldName: 'id' },
    defaultFetchStrategy: 'm2mAndFk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_processor:id',
            uniqueFieldId: 'supabase_automation_matrix:recipeProcessor:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeProcessor',
            databaseTable: 'recipe_processor',
            foreignKeyReference: null,
            description: '"Id" field for recipeProcessor. This is a required field. Your entry must be an uuid data type.',
        },
        recipe: {
            fieldNameFormats: {
                frontend: 'recipe',
                backend: 'recipe',
                database: 'recipe',
                pretty: 'Recipe',
                component: 'Recipe',
                kebab: 'recipe',
                sqlFunctionRef: 'p_recipe',
                RestAPI: 'recipe',
                GraphQL: 'recipe',
                custom: 'recipe',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_processor:recipe',
            uniqueFieldId: 'supabase_automation_matrix:recipeProcessor:recipe',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeProcessor',
            databaseTable: 'recipe_processor',
            foreignKeyReference: { table: 'recipe', column: 'id', entity: 'recipe', field: 'id' },
            description:
                '"Recipe" field for recipeProcessor. This is a required field. Your entry must be an uuid data type. This field is a reference to a recipe.',
        },
        processor: {
            fieldNameFormats: {
                frontend: 'processor',
                backend: 'processor',
                database: 'processor',
                pretty: 'Processor',
                component: 'Processor',
                kebab: 'processor',
                sqlFunctionRef: 'p_processor',
                RestAPI: 'processor',
                GraphQL: 'processor',
                custom: 'processor',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_processor:processor',
            uniqueFieldId: 'supabase_automation_matrix:recipeProcessor:processor',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeProcessor',
            databaseTable: 'recipe_processor',
            foreignKeyReference: { table: 'processor', column: 'id', entity: 'processor', field: 'id' },
            description:
                '"Processor" field for recipeProcessor. This is a required field. Your entry must be an uuid data type. This field is a reference to a processor.',
        },
        params: {
            fieldNameFormats: {
                frontend: 'params',
                backend: 'params',
                database: 'params',
                pretty: 'Params',
                component: 'Params',
                kebab: 'params',
                sqlFunctionRef: 'p_params',
                RestAPI: 'params',
                GraphQL: 'params',
                custom: 'params',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_processor:params',
            uniqueFieldId: 'supabase_automation_matrix:recipeProcessor:params',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'recipeProcessor',
            databaseTable: 'recipe_processor',
            foreignKeyReference: null,
            description: '"Params" field for recipeProcessor. This is an optional field. Your entry must be an object data type.',
        },
        processorReference: {
            fieldNameFormats: {
                frontend: 'processorReference',
                backend: 'processor_reference',
                database: 'ref_processor',
                pretty: 'Processor Reference',
                component: 'ProcessorReference',
                kebab: 'processorReference',
                sqlFunctionRef: 'p_ref_processor',
                RestAPI: 'processorReference',
                GraphQL: 'processorReference',
                custom: 'processorReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:processor:id',
            uniqueFieldId: 'supabase_automation_matrix:processor:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'processor'>[]>,
            entityName: 'processor',
            databaseTable: 'processor',
            relationshipMap: { processor: 'id', recipe: 'id' },
        },
        recipeReference: {
            fieldNameFormats: {
                frontend: 'recipeReference',
                backend: 'recipe_reference',
                database: 'ref_recipe',
                pretty: 'Recipe Reference',
                component: 'RecipeReference',
                kebab: 'recipeReference',
                sqlFunctionRef: 'p_ref_recipe',
                RestAPI: 'recipeReference',
                GraphQL: 'recipeReference',
                custom: 'recipeReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:recipe:id',
            uniqueFieldId: 'supabase_automation_matrix:recipe:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipe'>[]>,
            entityName: 'recipe',
            databaseTable: 'recipe',
            relationshipMap: { processor: 'id', recipe: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'recipeProcessor',
        backend: 'recipe_processor',
        database: 'recipe_processor',
        pretty: 'Recipe Processor',
        component: 'RecipeProcessor',
        kebab: 'recipe-processor',
        sqlFunctionRef: 'p_recipe_processor',
        RestAPI: 'recipeProcessor',
        GraphQL: 'recipeProcessor',
        custom: 'recipeProcessor',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'processor', relatedTable: 'processor', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'recipe', relatedTable: 'recipe', relatedColumn: 'id', junctionTable: null },
    ],
} as const;

export const recipeTool = {
    schemaType: 'table' as const,
    entityName: 'recipeTool',
    uniqueTableId: 'supabase_automation_matrix:public:recipe_tool',
    uniqueEntityId: 'supabase_automation_matrix:recipeTool',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'id', databaseFieldName: 'id' },
    defaultFetchStrategy: 'm2mAndFk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_tool:id',
            uniqueFieldId: 'supabase_automation_matrix:recipeTool:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeTool',
            databaseTable: 'recipe_tool',
            foreignKeyReference: null,
            description: '"Id" field for recipeTool. This is a required field. Your entry must be an uuid data type.',
        },
        recipe: {
            fieldNameFormats: {
                frontend: 'recipe',
                backend: 'recipe',
                database: 'recipe',
                pretty: 'Recipe',
                component: 'Recipe',
                kebab: 'recipe',
                sqlFunctionRef: 'p_recipe',
                RestAPI: 'recipe',
                GraphQL: 'recipe',
                custom: 'recipe',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_tool:recipe',
            uniqueFieldId: 'supabase_automation_matrix:recipeTool:recipe',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeTool',
            databaseTable: 'recipe_tool',
            foreignKeyReference: { table: 'recipe', column: 'id', entity: 'recipe', field: 'id' },
            description:
                '"Recipe" field for recipeTool. This is a required field. Your entry must be an uuid data type. This field is a reference to a recipe.',
        },
        tool: {
            fieldNameFormats: {
                frontend: 'tool',
                backend: 'tool',
                database: 'tool',
                pretty: 'Tool',
                component: 'Tool',
                kebab: 'tool',
                sqlFunctionRef: 'p_tool',
                RestAPI: 'tool',
                GraphQL: 'tool',
                custom: 'tool',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_tool:tool',
            uniqueFieldId: 'supabase_automation_matrix:recipeTool:tool',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'recipeTool',
            databaseTable: 'recipe_tool',
            foreignKeyReference: { table: 'tool', column: 'id', entity: 'tool', field: 'id' },
            description: '"Tool" field for recipeTool. This is a required field. Your entry must be an uuid data type. This field is a reference to a tool.',
        },
        params: {
            fieldNameFormats: {
                frontend: 'params',
                backend: 'params',
                database: 'params',
                pretty: 'Params',
                component: 'Params',
                kebab: 'params',
                sqlFunctionRef: 'p_params',
                RestAPI: 'params',
                GraphQL: 'params',
                custom: 'params',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:recipe_tool:params',
            uniqueFieldId: 'supabase_automation_matrix:recipeTool:params',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'recipeTool',
            databaseTable: 'recipe_tool',
            foreignKeyReference: null,
            description: '"Params" field for recipeTool. This is an optional field. Your entry must be an object data type.',
        },
        recipeReference: {
            fieldNameFormats: {
                frontend: 'recipeReference',
                backend: 'recipe_reference',
                database: 'ref_recipe',
                pretty: 'Recipe Reference',
                component: 'RecipeReference',
                kebab: 'recipeReference',
                sqlFunctionRef: 'p_ref_recipe',
                RestAPI: 'recipeReference',
                GraphQL: 'recipeReference',
                custom: 'recipeReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:recipe:id',
            uniqueFieldId: 'supabase_automation_matrix:recipe:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipe'>[]>,
            entityName: 'recipe',
            databaseTable: 'recipe',
            relationshipMap: { recipe: 'id', tool: 'id' },
        },
        toolReference: {
            fieldNameFormats: {
                frontend: 'toolReference',
                backend: 'tool_reference',
                database: 'ref_tool',
                pretty: 'Tool Reference',
                component: 'ToolReference',
                kebab: 'toolReference',
                sqlFunctionRef: 'p_ref_tool',
                RestAPI: 'toolReference',
                GraphQL: 'toolReference',
                custom: 'toolReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:tool:id',
            uniqueFieldId: 'supabase_automation_matrix:tool:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'tool'>[]>,
            entityName: 'tool',
            databaseTable: 'tool',
            relationshipMap: { recipe: 'id', tool: 'id' },
        },
    },
    entityNameFormats: {
        frontend: 'recipeTool',
        backend: 'recipe_tool',
        database: 'recipe_tool',
        pretty: 'Recipe Tool',
        component: 'RecipeTool',
        kebab: 'recipe-tool',
        sqlFunctionRef: 'p_recipe_tool',
        RestAPI: 'recipeTool',
        GraphQL: 'recipeTool',
        custom: 'recipeTool',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'recipe', relatedTable: 'recipe', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'foreignKey', column: 'tool', relatedTable: 'tool', relatedColumn: 'id', junctionTable: null },
    ],
} as const;

export const registeredFunction = {
    schemaType: 'table' as const,
    entityName: 'registeredFunction',
    uniqueTableId: 'supabase_automation_matrix:public:registered_function',
    uniqueEntityId: 'supabase_automation_matrix:registeredFunction',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'fkAndIfk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:registered_function:id',
            uniqueFieldId: 'supabase_automation_matrix:registeredFunction:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'registeredFunction',
            databaseTable: 'registered_function',
            foreignKeyReference: null,
            description: '"Id" field for registeredFunction. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:registered_function:name',
            uniqueFieldId: 'supabase_automation_matrix:registeredFunction:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'registeredFunction',
            databaseTable: 'registered_function',
            foreignKeyReference: null,
            description: '"Name" field for registeredFunction. This is a required field. Your entry must be an string data type.',
        },
        modulePath: {
            fieldNameFormats: {
                frontend: 'modulePath',
                backend: 'module_path',
                database: 'module_path',
                pretty: 'Module Path',
                component: 'ModulePath',
                kebab: 'module-path',
                sqlFunctionRef: 'p_module_path',
                RestAPI: 'modulePath',
                GraphQL: 'modulePath',
                custom: 'modulePath',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:registered_function:module_path',
            uniqueFieldId: 'supabase_automation_matrix:registeredFunction:modulePath',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'registeredFunction',
            databaseTable: 'registered_function',
            foreignKeyReference: null,
            description: '"Module Path" field for registeredFunction. This is a required field. Your entry must be an string data type.',
        },
        className: {
            fieldNameFormats: {
                frontend: 'className',
                backend: 'class_name',
                database: 'class_name',
                pretty: 'Class Name',
                component: 'ClassName',
                kebab: 'class-name',
                sqlFunctionRef: 'p_class_name',
                RestAPI: 'className',
                GraphQL: 'className',
                custom: 'className',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:registered_function:class_name',
            uniqueFieldId: 'supabase_automation_matrix:registeredFunction:className',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'registeredFunction',
            databaseTable: 'registered_function',
            foreignKeyReference: null,
            description: '"Class Name" field for registeredFunction. This is an optional field. Your entry must be an string data type.',
        },
        description: {
            fieldNameFormats: {
                frontend: 'description',
                backend: 'description',
                database: 'description',
                pretty: 'Description',
                component: 'Description',
                kebab: 'description',
                sqlFunctionRef: 'p_description',
                RestAPI: 'description',
                GraphQL: 'description',
                custom: 'description',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:registered_function:description',
            uniqueFieldId: 'supabase_automation_matrix:registeredFunction:description',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'registeredFunction',
            databaseTable: 'registered_function',
            foreignKeyReference: null,
            description: '"Description" field for registeredFunction. This is an optional field. Your entry must be an string data type.',
        },
        returnBroker: {
            fieldNameFormats: {
                frontend: 'returnBroker',
                backend: 'return_broker',
                database: 'return_broker',
                pretty: 'Return Broker',
                component: 'ReturnBroker',
                kebab: 'return-broker',
                sqlFunctionRef: 'p_return_broker',
                RestAPI: 'returnBroker',
                GraphQL: 'returnBroker',
                custom: 'returnBroker',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:registered_function:return_broker',
            uniqueFieldId: 'supabase_automation_matrix:registeredFunction:returnBroker',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'registeredFunction',
            databaseTable: 'registered_function',
            foreignKeyReference: { table: 'broker', column: 'id', entity: 'broker', field: 'id' },
            description:
                '"Return Broker" field for registeredFunction. This is an optional field. Your entry must be an uuid data type. This field is a reference to a broker.',
        },
        brokerReference: {
            fieldNameFormats: {
                frontend: 'brokerReference',
                backend: 'broker_reference',
                database: 'ref_broker',
                pretty: 'Broker Reference',
                component: 'BrokerReference',
                kebab: 'brokerReference',
                sqlFunctionRef: 'p_ref_broker',
                RestAPI: 'brokerReference',
                GraphQL: 'brokerReference',
                custom: 'brokerReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:broker:id',
            uniqueFieldId: 'supabase_automation_matrix:broker:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'broker'>[]>,
            entityName: 'broker',
            databaseTable: 'broker',
            relationshipMap: { broker: 'id' },
        },
        systemFunctionInverse: {
            fieldNameFormats: {
                frontend: 'systemFunctionInverse',
                backend: 'system_function_Inverse',
                database: 'ifk_system_function',
                pretty: 'System Function Inverse',
                component: 'SystemFunctionInverse',
                kebab: 'system-functionInverse',
                sqlFunctionRef: 'p_ifk_system_function',
                RestAPI: 'systemFunctionInverse',
                GraphQL: 'systemFunctionInverse',
                custom: 'systemFunctionInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:system_function',
            uniqueEntityId: 'supabase_automation_matrix:systemFunction',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'systemFunction'>[]>,
            entityName: 'systemFunction',
            databaseTable: 'system_function',
        },
        argInverse: {
            fieldNameFormats: {
                frontend: 'argInverse',
                backend: 'arg_Inverse',
                database: 'ifk_arg',
                pretty: 'Arg Inverse',
                component: 'ArgInverse',
                kebab: 'argInverse',
                sqlFunctionRef: 'p_ifk_arg',
                RestAPI: 'argInverse',
                GraphQL: 'argInverse',
                custom: 'argInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:arg',
            uniqueEntityId: 'supabase_automation_matrix:arg',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'arg'>[]>,
            entityName: 'arg',
            databaseTable: 'arg',
        },
    },
    entityNameFormats: {
        frontend: 'registeredFunction',
        backend: 'registered_function',
        database: 'registered_function',
        pretty: 'Registered Function',
        component: 'RegisteredFunction',
        kebab: 'registered-function',
        sqlFunctionRef: 'p_registered_function',
        RestAPI: 'registeredFunction',
        GraphQL: 'registeredFunction',
        custom: 'registeredFunction',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'return_broker', relatedTable: 'broker', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'system_function', relatedColumn: 'rf_id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'arg', relatedColumn: 'registered_function', junctionTable: null },
    ],
} as const;

export const systemFunction = {
    schemaType: 'table' as const,
    entityName: 'systemFunction',
    uniqueTableId: 'supabase_automation_matrix:public:system_function',
    uniqueEntityId: 'supabase_automation_matrix:systemFunction',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'fkIfkAndM2M',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:system_function:id',
            uniqueFieldId: 'supabase_automation_matrix:systemFunction:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'systemFunction',
            databaseTable: 'system_function',
            foreignKeyReference: null,
            description: '"Id" field for systemFunction. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:system_function:name',
            uniqueFieldId: 'supabase_automation_matrix:systemFunction:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'systemFunction',
            databaseTable: 'system_function',
            foreignKeyReference: null,
            description: '"Name" field for systemFunction. This is a required field. Your entry must be an string data type.',
        },
        description: {
            fieldNameFormats: {
                frontend: 'description',
                backend: 'description',
                database: 'description',
                pretty: 'Description',
                component: 'Description',
                kebab: 'description',
                sqlFunctionRef: 'p_description',
                RestAPI: 'description',
                GraphQL: 'description',
                custom: 'description',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:system_function:description',
            uniqueFieldId: 'supabase_automation_matrix:systemFunction:description',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'systemFunction',
            databaseTable: 'system_function',
            foreignKeyReference: null,
            description: '"Description" field for systemFunction. This is an optional field. Your entry must be an string data type.',
        },
        sample: {
            fieldNameFormats: {
                frontend: 'sample',
                backend: 'sample',
                database: 'sample',
                pretty: 'Sample',
                component: 'Sample',
                kebab: 'sample',
                sqlFunctionRef: 'p_sample',
                RestAPI: 'sample',
                GraphQL: 'sample',
                custom: 'sample',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:system_function:sample',
            uniqueFieldId: 'supabase_automation_matrix:systemFunction:sample',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'systemFunction',
            databaseTable: 'system_function',
            foreignKeyReference: null,
            description: '"Sample" field for systemFunction. This is an optional field. Your entry must be an string data type.',
        },
        inputParams: {
            fieldNameFormats: {
                frontend: 'inputParams',
                backend: 'input_params',
                database: 'input_params',
                pretty: 'Input Params',
                component: 'InputParams',
                kebab: 'input-params',
                sqlFunctionRef: 'p_input_params',
                RestAPI: 'inputParams',
                GraphQL: 'inputParams',
                custom: 'inputParams',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:system_function:input_params',
            uniqueFieldId: 'supabase_automation_matrix:systemFunction:inputParams',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'systemFunction',
            databaseTable: 'system_function',
            foreignKeyReference: null,
            description: '"Input Params" field for systemFunction. This is an optional field. Your entry must be an object data type.',
        },
        outputOptions: {
            fieldNameFormats: {
                frontend: 'outputOptions',
                backend: 'output_options',
                database: 'output_options',
                pretty: 'Output Options',
                component: 'OutputOptions',
                kebab: 'output-options',
                sqlFunctionRef: 'p_output_options',
                RestAPI: 'outputOptions',
                GraphQL: 'outputOptions',
                custom: 'outputOptions',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:system_function:output_options',
            uniqueFieldId: 'supabase_automation_matrix:systemFunction:outputOptions',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'systemFunction',
            databaseTable: 'system_function',
            foreignKeyReference: null,
            description: '"Output Options" field for systemFunction. This is an optional field. Your entry must be an object data type.',
        },
        rfId: {
            fieldNameFormats: {
                frontend: 'rfId',
                backend: 'rf_id',
                database: 'rf_id',
                pretty: 'Rf Id',
                component: 'RfId',
                kebab: 'rf-id',
                sqlFunctionRef: 'p_rf_id',
                RestAPI: 'rfId',
                GraphQL: 'rfId',
                custom: 'rfId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:system_function:rf_id',
            uniqueFieldId: 'supabase_automation_matrix:systemFunction:rfId',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'systemFunction',
            databaseTable: 'system_function',
            foreignKeyReference: { table: 'registered_function', column: 'id', entity: 'registeredFunction', field: 'id' },
            description:
                '"Rf Id" field for systemFunction. This is a required field. Your entry must be an uuid data type. This field is a reference to a registeredFunction.',
        },
        registeredFunctionReference: {
            fieldNameFormats: {
                frontend: 'registeredFunctionReference',
                backend: 'registered_function_reference',
                database: 'ref_registered_function',
                pretty: 'Registered Function Reference',
                component: 'RegisteredFunctionReference',
                kebab: 'registered-functionReference',
                sqlFunctionRef: 'p_ref_registered_function',
                RestAPI: 'registeredFunctionReference',
                GraphQL: 'registeredFunctionReference',
                custom: 'registeredFunctionReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:registered_function:id',
            uniqueFieldId: 'supabase_automation_matrix:registeredFunction:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'registeredFunction'>[]>,
            entityName: 'registeredFunction',
            databaseTable: 'registered_function',
            relationshipMap: { registered_function: 'id' },
        },
        toolInverse: {
            fieldNameFormats: {
                frontend: 'toolInverse',
                backend: 'tool_Inverse',
                database: 'ifk_tool',
                pretty: 'Tool Inverse',
                component: 'ToolInverse',
                kebab: 'toolInverse',
                sqlFunctionRef: 'p_ifk_tool',
                RestAPI: 'toolInverse',
                GraphQL: 'toolInverse',
                custom: 'toolInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:tool',
            uniqueEntityId: 'supabase_automation_matrix:tool',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'tool'>[]>,
            entityName: 'tool',
            databaseTable: 'tool',
        },
        recipeFunctionInverse: {
            fieldNameFormats: {
                frontend: 'recipeFunctionInverse',
                backend: 'recipe_function_Inverse',
                database: 'ifk_recipe_function',
                pretty: 'Recipe Function Inverse',
                component: 'RecipeFunctionInverse',
                kebab: 'recipe-functionInverse',
                sqlFunctionRef: 'p_ifk_recipe_function',
                RestAPI: 'recipeFunctionInverse',
                GraphQL: 'recipeFunctionInverse',
                custom: 'recipeFunctionInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:recipe_function',
            uniqueEntityId: 'supabase_automation_matrix:recipeFunction',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipeFunction'>[]>,
            entityName: 'recipeFunction',
            databaseTable: 'recipe_function',
        },
    },
    entityNameFormats: {
        frontend: 'systemFunction',
        backend: 'system_function',
        database: 'system_function',
        pretty: 'System Function',
        component: 'SystemFunction',
        kebab: 'system-function',
        sqlFunctionRef: 'p_system_function',
        RestAPI: 'systemFunction',
        GraphQL: 'systemFunction',
        custom: 'systemFunction',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'rf_id', relatedTable: 'registered_function', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'tool', relatedColumn: 'system_function', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'recipe_function', relatedColumn: 'function', junctionTable: null },
    ],
} as const;

export const tool = {
    schemaType: 'table' as const,
    entityName: 'tool',
    uniqueTableId: 'supabase_automation_matrix:public:tool',
    uniqueEntityId: 'supabase_automation_matrix:tool',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'fkIfkAndM2M',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:tool:id',
            uniqueFieldId: 'supabase_automation_matrix:tool:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'tool',
            databaseTable: 'tool',
            foreignKeyReference: null,
            description: '"Id" field for tool. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:tool:name',
            uniqueFieldId: 'supabase_automation_matrix:tool:name',

            dataType: 'string' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'tool',
            databaseTable: 'tool',
            foreignKeyReference: null,
            description: '"Name" field for tool. This is a required field. Your entry must be an string data type.',
        },
        source: {
            fieldNameFormats: {
                frontend: 'source',
                backend: 'source',
                database: 'source',
                pretty: 'Source',
                component: 'Source',
                kebab: 'source',
                sqlFunctionRef: 'p_source',
                RestAPI: 'source',
                GraphQL: 'source',
                custom: 'source',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:tool:source',
            uniqueFieldId: 'supabase_automation_matrix:tool:source',

            dataType: 'object' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: "{'host': 'ame'}" as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'tool',
            databaseTable: 'tool',
            foreignKeyReference: null,
            description: '"Source" field for tool. This is a required field. Your entry must be an object data type.',
        },
        description: {
            fieldNameFormats: {
                frontend: 'description',
                backend: 'description',
                database: 'description',
                pretty: 'Description',
                component: 'Description',
                kebab: 'description',
                sqlFunctionRef: 'p_description',
                RestAPI: 'description',
                GraphQL: 'description',
                custom: 'description',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:tool:description',
            uniqueFieldId: 'supabase_automation_matrix:tool:description',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'TEXTAREA' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'tool',
            databaseTable: 'tool',
            foreignKeyReference: null,
            description: '"Description" field for tool. This is an optional field. Your entry must be an string data type.',
        },
        parameters: {
            fieldNameFormats: {
                frontend: 'parameters',
                backend: 'parameters',
                database: 'parameters',
                pretty: 'Parameters',
                component: 'Parameters',
                kebab: 'parameters',
                sqlFunctionRef: 'p_parameters',
                RestAPI: 'parameters',
                GraphQL: 'parameters',
                custom: 'parameters',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:tool:parameters',
            uniqueFieldId: 'supabase_automation_matrix:tool:parameters',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'tool',
            databaseTable: 'tool',
            foreignKeyReference: null,
            description: '"Parameters" field for tool. This is an optional field. Your entry must be an object data type.',
        },
        requiredArgs: {
            fieldNameFormats: {
                frontend: 'requiredArgs',
                backend: 'required_args',
                database: 'required_args',
                pretty: 'Required Args',
                component: 'RequiredArgs',
                kebab: 'required-args',
                sqlFunctionRef: 'p_required_args',
                RestAPI: 'requiredArgs',
                GraphQL: 'requiredArgs',
                custom: 'requiredArgs',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:tool:required_args',
            uniqueFieldId: 'supabase_automation_matrix:tool:requiredArgs',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'tool',
            databaseTable: 'tool',
            foreignKeyReference: null,
            description: '"Required Args" field for tool. This is an optional field. Your entry must be an object data type.',
        },
        systemFunction: {
            fieldNameFormats: {
                frontend: 'systemFunction',
                backend: 'system_function',
                database: 'system_function',
                pretty: 'System Function',
                component: 'SystemFunction',
                kebab: 'system-function',
                sqlFunctionRef: 'p_system_function',
                RestAPI: 'systemFunction',
                GraphQL: 'systemFunction',
                custom: 'systemFunction',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:tool:system_function',
            uniqueFieldId: 'supabase_automation_matrix:tool:systemFunction',

            dataType: 'uuid' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'tool',
            databaseTable: 'tool',
            foreignKeyReference: { table: 'system_function', column: 'id', entity: 'systemFunction', field: 'id' },
            description:
                '"System Function" field for tool. This is an optional field. Your entry must be an uuid data type. This field is a reference to a systemFunction.',
        },
        additionalParams: {
            fieldNameFormats: {
                frontend: 'additionalParams',
                backend: 'additional_params',
                database: 'additional_params',
                pretty: 'Additional Params',
                component: 'AdditionalParams',
                kebab: 'additional-params',
                sqlFunctionRef: 'p_additional_params',
                RestAPI: 'additionalParams',
                GraphQL: 'additionalParams',
                custom: 'additionalParams',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:tool:additional_params',
            uniqueFieldId: 'supabase_automation_matrix:tool:additionalParams',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'tool',
            databaseTable: 'tool',
            foreignKeyReference: null,
            description: '"Additional Params" field for tool. This is an optional field. Your entry must be an object data type.',
        },
        systemFunctionReference: {
            fieldNameFormats: {
                frontend: 'systemFunctionReference',
                backend: 'system_function_reference',
                database: 'ref_system_function',
                pretty: 'System Function Reference',
                component: 'SystemFunctionReference',
                kebab: 'system-functionReference',
                sqlFunctionRef: 'p_ref_system_function',
                RestAPI: 'systemFunctionReference',
                GraphQL: 'systemFunctionReference',
                custom: 'systemFunctionReference',
            } as const,
            uniqueColumnId: 'supabase_automation_matrix:system_function:id',
            uniqueFieldId: 'supabase_automation_matrix:systemFunction:id',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'foreignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'systemFunction'>[]>,
            entityName: 'systemFunction',
            databaseTable: 'system_function',
            relationshipMap: { system_function: 'id' },
        },
        recipeToolInverse: {
            fieldNameFormats: {
                frontend: 'recipeToolInverse',
                backend: 'recipe_tool_Inverse',
                database: 'ifk_recipe_tool',
                pretty: 'Recipe Tool Inverse',
                component: 'RecipeToolInverse',
                kebab: 'recipe-toolInverse',
                sqlFunctionRef: 'p_ifk_recipe_tool',
                RestAPI: 'recipeToolInverse',
                GraphQL: 'recipeToolInverse',
                custom: 'recipeToolInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:recipe_tool',
            uniqueEntityId: 'supabase_automation_matrix:recipeTool',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'recipeTool'>[]>,
            entityName: 'recipeTool',
            databaseTable: 'recipe_tool',
        },
    },
    entityNameFormats: {
        frontend: 'tool',
        backend: 'tool',
        database: 'tool',
        pretty: 'Tool',
        component: 'Tool',
        kebab: 'tool',
        sqlFunctionRef: 'p_tool',
        RestAPI: 'tool',
        GraphQL: 'tool',
        custom: 'tool',
    },
    relationships: [
        { relationshipType: 'foreignKey', column: 'system_function', relatedTable: 'system_function', relatedColumn: 'id', junctionTable: null },
        { relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'recipe_tool', relatedColumn: 'tool', junctionTable: null },
    ],
} as const;

export const transformer = {
    schemaType: 'table' as const,
    entityName: 'transformer',
    uniqueTableId: 'supabase_automation_matrix:public:transformer',
    uniqueEntityId: 'supabase_automation_matrix:transformer',
    primaryKey: 'id',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['id'],
        database_fields: ['id'],
        where_template: {
            id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'name', databaseFieldName: 'name' },
    defaultFetchStrategy: 'm2mAndIfk',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        id: {
            fieldNameFormats: {
                frontend: 'id',
                backend: 'id',
                database: 'id',
                pretty: 'Id',
                component: 'Id',
                kebab: 'id',
                sqlFunctionRef: 'p_id',
                RestAPI: 'id',
                GraphQL: 'id',
                custom: 'id',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:transformer:id',
            uniqueFieldId: 'supabase_automation_matrix:transformer:id',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: false,
            defaultGeneratorFunction: 'getUUID()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'UUID_FIELD' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'transformer',
            databaseTable: 'transformer',
            foreignKeyReference: null,
            description: '"Id" field for transformer. This is a required field. Your entry must be an uuid data type.',
        },
        name: {
            fieldNameFormats: {
                frontend: 'name',
                backend: 'name',
                database: 'name',
                pretty: 'Name',
                component: 'Name',
                kebab: 'name',
                sqlFunctionRef: 'p_name',
                RestAPI: 'name',
                GraphQL: 'name',
                custom: 'name',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:transformer:name',
            uniqueFieldId: 'supabase_automation_matrix:transformer:name',

            dataType: 'string' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'INPUT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 5,
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'transformer',
            databaseTable: 'transformer',
            foreignKeyReference: null,
            description: '"Name" field for transformer. This is an optional field. Your entry must be an string data type.',
        },
        inputParams: {
            fieldNameFormats: {
                frontend: 'inputParams',
                backend: 'input_params',
                database: 'input_params',
                pretty: 'Input Params',
                component: 'InputParams',
                kebab: 'input-params',
                sqlFunctionRef: 'p_input_params',
                RestAPI: 'inputParams',
                GraphQL: 'inputParams',
                custom: 'inputParams',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:transformer:input_params',
            uniqueFieldId: 'supabase_automation_matrix:transformer:inputParams',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'transformer',
            databaseTable: 'transformer',
            foreignKeyReference: null,
            description: '"Input Params" field for transformer. This is an optional field. Your entry must be an object data type.',
        },
        outputParams: {
            fieldNameFormats: {
                frontend: 'outputParams',
                backend: 'output_params',
                database: 'output_params',
                pretty: 'Output Params',
                component: 'OutputParams',
                kebab: 'output-params',
                sqlFunctionRef: 'p_output_params',
                RestAPI: 'outputParams',
                GraphQL: 'outputParams',
                custom: 'outputParams',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:transformer:output_params',
            uniqueFieldId: 'supabase_automation_matrix:transformer:outputParams',

            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: false,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'transformer',
            databaseTable: 'transformer',
            foreignKeyReference: null,
            description: '"Output Params" field for transformer. This is an optional field. Your entry must be an object data type.',
        },
        actionInverse: {
            fieldNameFormats: {
                frontend: 'actionInverse',
                backend: 'action_Inverse',
                database: 'ifk_action',
                pretty: 'Action Inverse',
                component: 'ActionInverse',
                kebab: 'actionInverse',
                sqlFunctionRef: 'p_ifk_action',
                RestAPI: 'actionInverse',
                GraphQL: 'actionInverse',
                custom: 'actionInverse',
            } as const,
            uniqueTableId: 'supabase_automation_matrix:action',
            uniqueEntityId: 'supabase_automation_matrix:action',
            dataType: 'object' as const,
            isRequired: false,
            maxLength: null,
            isArray: true,
            defaultValue: [],
            isPrimaryKey: false,
            defaultGeneratorFunction: null,
            validationFunctions: ['isValidDatabaseEntry'],
            exclusionRules: ['notCoreField'],
            defaultComponent: 'ACCORDION_VIEW_ADD_EDIT' as const,
            structure: 'inverseForeignKey' as const,
            isNative: false,
            typeReference: {} as TypeBrand<AutomationEntity<'action'>[]>,
            entityName: 'action',
            databaseTable: 'action',
        },
    },
    entityNameFormats: {
        frontend: 'transformer',
        backend: 'transformer',
        database: 'transformer',
        pretty: 'Transformer',
        component: 'Transformer',
        kebab: 'transformer',
        sqlFunctionRef: 'p_transformer',
        RestAPI: 'transformer',
        GraphQL: 'transformer',
        custom: 'transformer',
    },
    relationships: [{ relationshipType: 'inverseForeignKey', column: 'id', relatedTable: 'action', relatedColumn: 'transformer', junctionTable: null }],
} as const;

export const userPreferences = {
    schemaType: 'table' as const,
    entityName: 'userPreferences',
    uniqueTableId: 'supabase_automation_matrix:public:user_preferences',
    uniqueEntityId: 'supabase_automation_matrix:userPreferences',
    primaryKey: 'userId',
    primaryKeyMetadata: {
        type: 'single',
        fields: ['userId'],
        database_fields: ['user_id'],
        where_template: {
            user_id: null,
        },
    },
    displayFieldMetadata: { fieldName: 'userId', databaseFieldName: 'user_id' },
    defaultFetchStrategy: 'simple',
    componentProps: {
        subComponent: 'default',
        variant: 'default',
        placeholder: 'default',
        size: 'default',
        textSize: 'default',
        textColor: 'default',
        rows: 'default',
        animation: 'default',
        fullWidthValue: 'default',
        fullWidth: 'default',
        disabled: 'default',
        className: 'default',
        type: 'default',
        onChange: 'default',
        onBlur: 'default',
        formatString: 'default',
        minDate: 'default',
        maxDate: 'default',
        numberType: 'default',
    },
    entityFields: {
        userId: {
            fieldNameFormats: {
                frontend: 'userId',
                backend: 'user_id',
                database: 'user_id',
                pretty: 'User Id',
                component: 'UserId',
                kebab: 'user-id',
                sqlFunctionRef: 'p_user_id',
                RestAPI: 'userId',
                GraphQL: 'userId',
                custom: 'userId',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:user_preferences:user_id',
            uniqueFieldId: 'supabase_automation_matrix:userPreferences:userId',

            dataType: 'uuid' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: true,
            isDisplayField: true,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'FK_SELECT' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<string>,
            enumValues: null,
            entityName: 'userPreferences',
            databaseTable: 'user_preferences',
            foreignKeyReference: { table: 'users', column: 'id', entity: 'users', field: 'id' },
            description:
                '"User Id" field for userPreferences. This is a required field. Your entry must be an uuid data type. This field is a reference to a users.',
        },
        preferences: {
            fieldNameFormats: {
                frontend: 'preferences',
                backend: 'preferences',
                database: 'preferences',
                pretty: 'Preferences',
                component: 'Preferences',
                kebab: 'preferences',
                sqlFunctionRef: 'p_preferences',
                RestAPI: 'preferences',
                GraphQL: 'preferences',
                custom: 'preferences',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:user_preferences:preferences',
            uniqueFieldId: 'supabase_automation_matrix:userPreferences:preferences',

            dataType: 'object' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: '',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'JSON_EDITOR' as const,
            componentProps: {
                subComponent: 'default',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Record<string, unknown>>,
            enumValues: null,
            entityName: 'userPreferences',
            databaseTable: 'user_preferences',
            foreignKeyReference: null,
            description: '"Preferences" field for userPreferences. This is a required field. Your entry must be an object data type.',
        },
        createdAt: {
            fieldNameFormats: {
                frontend: 'createdAt',
                backend: 'created_at',
                database: 'created_at',
                pretty: 'Created At',
                component: 'CreatedAt',
                kebab: 'created-at',
                sqlFunctionRef: 'p_created_at',
                RestAPI: 'createdAt',
                GraphQL: 'createdAt',
                custom: 'createdAt',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:user_preferences:created_at',
            uniqueFieldId: 'supabase_automation_matrix:userPreferences:createdAt',

            dataType: 'date' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'userPreferences',
            databaseTable: 'user_preferences',
            foreignKeyReference: null,
            description: '"Created At" field for userPreferences. This is a required field. Your entry must be an date data type.',
        },
        updatedAt: {
            fieldNameFormats: {
                frontend: 'updatedAt',
                backend: 'updated_at',
                database: 'updated_at',
                pretty: 'Updated At',
                component: 'UpdatedAt',
                kebab: 'updated-at',
                sqlFunctionRef: 'p_updated_at',
                RestAPI: 'updatedAt',
                GraphQL: 'updatedAt',
                custom: 'updatedAt',
            } as const,

            uniqueColumnId: 'supabase_automation_matrix:public:user_preferences:updated_at',
            uniqueFieldId: 'supabase_automation_matrix:userPreferences:updatedAt',

            dataType: 'date' as const,
            isRequired: true,
            maxLength: null,
            isArray: false,
            defaultValue: '' as const,
            isPrimaryKey: false,
            isDisplayField: false,
            defaultGeneratorFunction: 'getCurrentTime()',
            validationFunctions: [],
            exclusionRules: [],
            defaultComponent: 'DATE_PICKER' as const,
            componentProps: {
                subComponent: 'timestamptz',
                variant: 'default',
                section: 'default',
                placeholder: 'default',
                size: 'default',
                textSize: 'default',
                textColor: 'default',
                rows: 'default',
                animation: 'default',
                fullWidthValue: 'default',
                fullWidth: 'default',
                disabled: 'default',
                className: 'default',
                type: 'default',
                onChange: 'default',
                onBlur: 'default',
                formatString: 'default',
                min: 'default',
                max: 'default',
                step: 'default',
                numberType: 'default',
                options: 'default',
                required: true,
            },
            structure: 'single' as const,
            isNative: true,
            typeReference: {} as TypeBrand<Date>,
            enumValues: null,
            entityName: 'userPreferences',
            databaseTable: 'user_preferences',
            foreignKeyReference: null,
            description: '"Updated At" field for userPreferences. This is a required field. Your entry must be an date data type.',
        },
    },
    entityNameFormats: {
        frontend: 'userPreferences',
        backend: 'user_preferences',
        database: 'user_preferences',
        pretty: 'User Preferences',
        component: 'UserPreferences',
        kebab: 'user-preferences',
        sqlFunctionRef: 'p_user_preferences',
        RestAPI: 'userPreferences',
        GraphQL: 'userPreferences',
        custom: 'userPreferences',
    },
    relationships: [],
} as const;
