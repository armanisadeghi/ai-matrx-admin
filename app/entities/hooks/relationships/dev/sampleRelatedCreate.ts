import { useCallback, useMemo } from 'react';
import { EntityKeys } from '@/types';
import { DefinedRelationship, RelatedDataManager } from '../relationshipDefinitions';
import { useDirectCreateRecord } from '../../crud/useDirectCreateRecord';

interface RawData {
    child: Record<string, unknown>;
    joining?: Record<string, unknown>;
}

interface UseRelationshipCreateOptions {
    joinEntityName: DefinedRelationship;
    childEntity: EntityKeys;
    parentId: unknown;
    onSuccess?: () => void;
    onError?: (error: Error) => void;
}

const OPERATION_DELAY = 50;

export const useRelationshipCreate = ({ joinEntityName, childEntity, parentId, onSuccess, onError }: UseRelationshipCreateOptions) => {
    const relatedData = useMemo(() => new RelatedDataManager(joinEntityName, { joiningEntity: true, child: true }), [joinEntityName]);

    const createChildRecord = useDirectCreateRecord({
        entityKey: childEntity,
        onSuccess: () => onSuccess?.(),
        onError,
    });

    const createJoiningRecord = useDirectCreateRecord({
        entityKey: joinEntityName,
        onSuccess: () => onSuccess?.(),
        onError,
    });

    const createRelationship = useCallback(
        async (data: RawData) => {
            try {
                relatedData.resetAutoGeneratedIds();
                const { childEntity: childPayload, joiningEntity: joinPayload } = relatedData.createEntityWithRelationship(
                    parentId,
                    data.child,
                    data.joining ?? {}
                );

                await createChildRecord({ data: childPayload });
                await new Promise((resolve) => setTimeout(resolve, OPERATION_DELAY));
                await createJoiningRecord({ data: joinPayload });
            } catch (error) {
                onError?.(error as Error);
                throw error;
            }
        },
        [createJoiningRecord, createChildRecord, relatedData, parentId, onError]
    );

    return createRelationship;
};

