---
alwaysApply: false
---
# AI Matrx Overview Developer Guidelines

1. AI Matrx has a very large codebase and must be kept clean and organized
2. Uses Next.js 15 with App Router 
3. Redux for state management: @/lib/redux/store.ts
4. Supabse for the database: @/utils/supabase/client.ts

## Folder Structure:
- Small, individual components and hooks can be put into general folders, such as "components" or "hooks"
- Larger "features" that have multiple parts, must have a directory under "Features" where all associated files are kept

Example: "Notes Feature"

Route: app/(authenticated)/notes/page.tsx

/features/notes/
├── index.ts
├── README.md
├── types.ts
├── components/
│   ├── CreateFolderDialog.tsx
│   ├── index.ts
│   ├── NoteEditor.tsx
│   ├── NotesLayout.tsx
│   ├── NotesSidebar.tsx
│   ├── NoteToolbar.tsx
│   ├── QuickCaptureButton.tsx
│   ├── QuickNotesButton.tsx
│   ├── QuickNotesSheet.tsx
│   ├── QuickSaveModal.tsx
│   ├── SaveSelectionButton.tsx
│   ├── SaveToScratchButton.tsx
│   ├── ShareNoteDialog.tsx
│   ├── TagInput.tsx
├── constants/
│   ├── defaultFolders.ts
│   ├── folderCategories.ts
├── context/
│   ├── NotesContext.tsx
├── hooks/
│   ├── useActiveNote.ts
│   ├── useAutoLabel.ts
│   ├── useAutoSave.ts
│   ├── useNotes.ts
├── service/
│   ├── notesApi.ts
│   ├── notesService.ts
├── utils/
│   ├── folderUtils.ts
│   ├── noteUtils.ts


When working on features that are already build, respect whatever folder structure is already in place.
- Never save random files to the root of the project
- Do not generate random .md files until you are completely done with a task and the code is tested and working. Documentation should represent the final, teting and working version of an app, not the intermediary stagges.

React:
- Write high-quality, efficient code
- Create reusable utility functions wherever possible to avoid highly complex hooks
- We have a vast number of high quality reusable components, includig ShadCN and many custom-built items. Find them and use them.

Modern UI/UX Framework:
- This is an extermely modern application so use modern, professional, beautiful and elegant design principles
- Never use emojis (Use Lucid Icons)
- Never use browser warnings and other outdated things (Use our beautiful custom components)
- Use bg-textured for the main background and check the global css for other color patterns. (Always respect light/dark colors)
- All UI should be created efficiently as to not waste space. Do not use exessive padding, gap and other things that waste space
- All UI must be created properly to maximize space on Desktop and then adjust properly for mobile.