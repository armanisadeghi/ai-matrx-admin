// File Location: constants/socket-schema.ts

export interface SchemaField {
    REQUIRED: boolean;
    DEFAULT: any;
    VALIDATION: string | null;
    DATA_TYPE: string | null;
    CONVERSION: string | null;
    REFERENCE: any;
    ICON_NAME?: string;
    COMPONENT?: string;
    COMPONENT_PROPS?: Record<string, any>;
    DESCRIPTION?: string;
    iconName?: string;
}

export interface Schema {
    [key: string]: SchemaField;
}


export const MESSAGE_OBJECT_DEFINITION: Schema = {
    id: {
        REQUIRED: false,
        DEFAULT: "",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "The message id.",
    },
    conversation_id: {
        REQUIRED: false,
        DEFAULT: "",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "The conversation id.",
    },
    content: {
        REQUIRED: false,
        DEFAULT: "",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "TextArea",
        COMPONENT_PROPS: {"rows": 10},
        ICON_NAME: "Text",
        DESCRIPTION: "The message content.",
    },
    role: {
        REQUIRED: false,
        DEFAULT: "",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Select",
        COMPONENT_PROPS: {"options": [{"label": "User", "value": "user"}, {"label": "Assistant", "value": "assistant"}, {"label": "System", "value": "system"}, {"label": "Tool", "value": "tool"}]},
        ICON_NAME: "User",
        DESCRIPTION: "The message role. (user, assistant, system, tool)",
    },
    type: {
        REQUIRED: false,
        DEFAULT: "",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Select",
        COMPONENT_PROPS: {"options": [{"label": "Text", "value": "text"}, {"label": "Tool Call", "value": "tool_call"}, {"label": "Mixed", "value": "mixed"}]},
        ICON_NAME: "Type",
        DESCRIPTION: "The message type. (text, tool_call, mixed)",
    },
    files: {
        REQUIRED: false,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "MultiFileUpload",
        COMPONENT_PROPS: {},
        ICON_NAME: "Files",
        DESCRIPTION: "Public urls for files to be associated with the message.",
    },
    metadata: {
        REQUIRED: false,
        DEFAULT: {},
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "JsonEditor",
        COMPONENT_PROPS: {},
        ICON_NAME: "Metadata",
        DESCRIPTION: "Metadata for the message.",
    },
};

export const BROKER_DEFINITION: Schema = {
    name: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The name of the broker.",
        ICON_NAME: "User",
    },
    id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the broker.",
        ICON_NAME: "key",
    },
    value: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The value of the broker.",
        ICON_NAME: "LetterText",
    },
    ready: {
        REQUIRED: false,
        DEFAULT: true,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether the broker's value is DIRECTLY ready exactly as it is.",
        ICON_NAME: "Check",
    },
};

export const OVERRIDE_DEFINITION: Schema = {
    model_override: {
        REQUIRED: false,
        DEFAULT: "",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the model to use.",
        ICON_NAME: "key",
    },
    processor_overrides: {
        REQUIRED: false,
        DEFAULT: {},
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "JsonEditor",
        COMPONENT_PROPS: {},
        DESCRIPTION: "This is a complex field that requires a pre-determined structure to get specific processors and extractors.",
        ICON_NAME: "Parentheses",
    },
    other_overrides: {
        REQUIRED: false,
        DEFAULT: {},
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "JsonEditor",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Some additional overrides may be provided for processing.",
        ICON_NAME: "Parentheses",
    },
};

export const PREP_CONVERSATION: Schema = {
    conversation_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "The ID of the conversation to be fetched, cached and ready for fast usage.",
    },
};

export const AI_CHAT: Schema = {
    conversation_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "The conversation id.",
    },
    message_object: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: "convert_message_object",
        REFERENCE: MESSAGE_OBJECT_DEFINITION,
        COMPONENT: "relatedFieldsDisplay",
        COMPONENT_PROPS: {},
        ICON_NAME: "Messages",
        DESCRIPTION: "The message object with message id, conversation id, content, role, type, and files.",
    },
};

export const EDIT_WC_INJURY: Schema = {
    injury_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    digit: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    wpi: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    le: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    ue: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    industrial: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    pain: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    side: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: "validate_wc_side",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
};

export const EDIT_WC_CLAIM: Schema = {
    claim_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    date_of_injury: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: "validate_date",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    date_of_birth: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: "validate_date",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    age_at_doi: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    occupational_code: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    weekly_earnings: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "float",
        CONVERSION: null,
        REFERENCE: null,
    },
    applicant_name: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
};

export const CALCULATE_WC_RATINGS: Schema = {
    report_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
};

export const CREATE_WC_INJURY: Schema = {
    report_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    impairment_definition_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    digit: {
        REQUIRED: false,
        DEFAULT: 0,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    wpi: {
        REQUIRED: false,
        DEFAULT: 0,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    le: {
        REQUIRED: false,
        DEFAULT: 0,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    ue: {
        REQUIRED: false,
        DEFAULT: 0,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    industrial: {
        REQUIRED: false,
        DEFAULT: 100,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    pain: {
        REQUIRED: false,
        DEFAULT: 0,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    side: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: "validate_wc_side",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
};

export const CREATE_WC_REPORT: Schema = {
    claim_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
};

export const CREATE_WC_CLAIM: Schema = {
    date_of_injury: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: "validate_date",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    date_of_birth: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: "validate_date",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    age_at_doi: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    occupational_code: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    weekly_earnings: {
        REQUIRED: false,
        DEFAULT: 290.0,
        VALIDATION: null,
        DATA_TYPE: "float",
        CONVERSION: null,
        REFERENCE: null,
    },
    applicant_name: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
};

export const TRACK_CONTENT_GROUPING_RUN: Schema = {
    content_grouping_run_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The content grouping run id to be tracked.",
        ICON_NAME: "key",
    },
};

export const CREATE_CONTENT_GROUPING_RUN: Schema = {
    full_site_scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The full site scrape task id to be scraped.",
        ICON_NAME: "key",
    },
    content_grouping_config: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "JsonEditor",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The content grouping config to be used for the scrape.",
        ICON_NAME: "Bolt",
    },
};

export const VIEW_PARSED_PAGE: Schema = {
    parsed_content_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The parsed content id to be viewed.",
        ICON_NAME: "key",
    },
};

export const GET_PARSED_PAGES: Schema = {
    full_site_scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The full site scrape task id to be scraped.",
        ICON_NAME: "key",
    },
    cursor: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The cursor to be used for the scrape.",
        ICON_NAME: "key",
    },
    page_size: {
        REQUIRED: false,
        DEFAULT: 1000,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The page size to be used for the scrape.",
        ICON_NAME: "key",
    },
};

export const RESUME_FULL_SITE_SCRAPE_TASK: Schema = {
    full_site_scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The full site scrape task id to be scraped.",
        ICON_NAME: "key",
    },
};

export const PAUSE_FULL_SITE_SCRAPE_TASK: Schema = {
    full_site_scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The full site scrape task id to be scraped.",
        ICON_NAME: "key",
    },
};

export const CANCEL_FULL_SITE_SCRAPE_TASK: Schema = {
    full_site_scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The full site scrape task id to be scraped.",
        ICON_NAME: "key",
    },
};

export const GET_FULL_SITE_SCRAPE_PROGRESS_DETAILED: Schema = {
    full_site_scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The full site scrape task id to be scraped.",
        ICON_NAME: "key",
    },
};

export const GET_FULL_SITE_SCRAPE_PROGRESS: Schema = {
    full_site_scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The full site scrape task id to be scraped.",
        ICON_NAME: "key",
    },
};

export const CREATE_FULL_SITE_SCRAPE_TASK: Schema = {
    urls: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_scrape_urls",
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "ArrayField",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The urls to be scraped.",
        ICON_NAME: "Link",
    },
};

export const GET_SCRAPE_TASK_DETAILS: Schema = {
    scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The scrape task id to be scraped.",
        ICON_NAME: "key",
    },
};

export const GET_SCRAPE_HISTORY_BY_TASK_ID: Schema = {
    scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The scrape task id to be scraped.",
        ICON_NAME: "key",
    },
};

export const GET_SCRAPE_HISTORY_BY_URL: Schema = {
    url: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The url to be scraped.",
        ICON_NAME: "Link",
    },
};

export const PARSE_RESPONSES_BY_ID: Schema = {
    scrape_task_ids: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "ArrayField",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The scrape task ids to be parsed.",
        ICON_NAME: "ChartNetwork",
    },
    use_configs: {
        REQUIRED: false,
        DEFAULT: true,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether to use configs.",
        ICON_NAME: "Cog",
    },
    noise_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The noise config id to be used for the scrape.",
        ICON_NAME: "key",
    },
    filter_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The filter config id to be used for the scrape.",
        ICON_NAME: "key",
    },
};

export const PARSE_RESPONSE_BY_ID: Schema = {
    scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The scrape task id to be parsed.",
        ICON_NAME: "key",
    },
    use_configs: {
        REQUIRED: false,
        DEFAULT: true,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether to use configs.",
        ICON_NAME: "Cog",
    },
    noise_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The noise config id to be used for the scrape.",
        ICON_NAME: "key",
    },
    filter_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The filter config id to be used for the scrape.",
        ICON_NAME: "key",
    },
};

export const SCRAPE_PAGE: Schema = {
    url: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The url to be scraped.",
        ICON_NAME: "Link",
    },
    use_mode: {
        REQUIRED: false,
        DEFAULT: "normal",
        VALIDATION: "validate_scrape_mode",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The mode to be used for the scrape.",
        ICON_NAME: "Blend",
    },
    interaction_settings_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The interaction settings id to be used for the scrape.",
        ICON_NAME: "key",
    },
};

export const CREATE_SCRAPE_TASKS: Schema = {
    urls: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_scrape_urls",
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "ArrayField",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The urls to be scraped.",
        ICON_NAME: "Link",
    },
    use_configs: {
        REQUIRED: false,
        DEFAULT: true,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether to use configs.",
        ICON_NAME: "Cog",
    },
    use_mode: {
        REQUIRED: false,
        DEFAULT: "normal",
        VALIDATION: "validate_scrape_mode",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The mode to be used for the scrape.",
        ICON_NAME: "Blend",
    },
    interaction_settings_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The interaction settings id to be used for the scrape.",
        ICON_NAME: "key",
    },
};

export const QUICK_SCRAPE: Schema = {
    urls: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_scrape_urls",
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "ArrayField",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The urls to be scraped.",
        ICON_NAME: "Link",
    },
    get_anchors: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether to get anchors.",
        ICON_NAME: "Check",
    },
};

export const SAVE_INTERACTION_SETTINGS: Schema = {
    interaction_settings_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the interaction settings to be used for the domain.",
        ICON_NAME: "key",
    },
    new_interaction_settings: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The new interaction settings to be used for the domain.",
        ICON_NAME: "key",
    },
};

export const SAVE_FILTER_CONFIG: Schema = {
    filter_config_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the filter config to be used for the domain.",
        ICON_NAME: "key",
    },
    new_filter_config: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_scrape_filter_config",
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The new filter config to be used for the domain.",
        ICON_NAME: "key",
    },
};

export const SAVE_NOISE_CONFIG: Schema = {
    noise_config_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the noise config to be used for the domain.",
        ICON_NAME: "key",
    },
    new_noise_config: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_scrape_noise_config",
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The new noise config to be used for the domain.",
        ICON_NAME: "key",
    },
};

export const CREATE_FILTER_CONFIG: Schema = {
    filter_config_name: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The name of the filter config to be created.",
        ICON_NAME: "key",
    },
};

export const CREATE_NOISE_CONFIG: Schema = {
    noise_config_name: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The name of the noise config to be created.",
        ICON_NAME: "key",
    },
};

export const GET_INTERACTION_SETTINGS_BY_ID: Schema = {
    interaction_settings_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the interaction settings to be used for the domain.",
        ICON_NAME: "key",
    },
};

export const GET_FILTER_CONFIGS: Schema = {
};

export const GET_FILTER_CONFIG_BY_ID: Schema = {
    filter_config_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the filter config to be used for the domain.",
        ICON_NAME: "key",
    },
};

export const GET_NOISE_CONFIGS: Schema = {
};

export const GET_NOISE_CONFIG_BY_ID: Schema = {
    noise_config_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the noise config to be used for the domain.",
        ICON_NAME: "key",
    },
};

export const CREATE_INTERACTION_SETTINGS: Schema = {
    interaction_settings_name: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The name of the interaction settings to be created.",
        ICON_NAME: "key",
    },
};

export const CREATE_DOMAIN: Schema = {
    domain: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The domain to be created.",
        ICON_NAME: "key",
    },
};

export const UPDATE_DOMAIN_CONFIG: Schema = {
    domain_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the domain to update.",
        ICON_NAME: "key",
    },
    path_pattern: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The path pattern to be used for the domain.",
        ICON_NAME: "key",
    },
    noise_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the noise config to be used for the domain.",
        ICON_NAME: "key",
    },
    filter_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the filter config to be used for the domain.",
        ICON_NAME: "key",
    },
    plugin_ids: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "ArrayField",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The ids of the plugins to be used for the domain.",
        ICON_NAME: "Blocks",
    },
    interaction_settings_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the interaction settings to be used for the domain.",
        ICON_NAME: "key",
    },
    use_mode: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: "validate_scrape_mode",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The mode to be used for the domain.",
        ICON_NAME: "key",
    },
};

export const CREATE_DOMAIN_CONFIG: Schema = {
    domain_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the domain to create.",
        ICON_NAME: "key",
    },
    path_pattern: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The path pattern to be used for the domain.",
        ICON_NAME: "key",
    },
    noise_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the noise config to be used for the domain.",
        ICON_NAME: "key",
    },
    filter_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the filter config to be used for the domain.",
        ICON_NAME: "key",
    },
    plugin_ids: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "ArrayField",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The ids of the plugins to be used for the domain.",
        ICON_NAME: "Blocks",
    },
    interaction_settings_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the interaction settings to be used for the domain.",
        ICON_NAME: "key",
    },
    use_mode: {
        REQUIRED: false,
        DEFAULT: "normal",
        VALIDATION: "validate_scrape_mode",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The mode to be used for the domain.",
        ICON_NAME: "key",
    },
};

export const GET_DOMAIN_CONFIG_BY_ID: Schema = {
    domain_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the domain to get.",
        ICON_NAME: "key",
    },
};

export const GET_DOMAINS: Schema = {
};

export const GET_ALL_PYTHON_CLASS_DOCSTRINGS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "The raw markdown to be classified.",
        ICON_NAME: "key",
    },
};

export const GET_ALL_PYTHON_FUNCTION_DOCSTRINGS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "The raw markdown to be classified.",
        ICON_NAME: "key",
    },
};

export const GET_ALL_PYTHON_COMMENTS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "The raw markdown to be classified.",
        ICON_NAME: "key",
    },
};

export const GET_PYTHON_DICTS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "The raw markdown to be classified.",
        ICON_NAME: "key",
    },
    dict_variable_name: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The variable name of the dictionary to be created.",
        ICON_NAME: "key",
    },
};

export const REMOVE_FIRST_AND_LAST_PARAGRAPH: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "The raw markdown to be classified.",
        ICON_NAME: "key",
    },
};

export const GET_SEGMENTS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "The raw markdown to be classified.",
        ICON_NAME: "key",
    },
    segment_type: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_md_segment_type",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The type of segment to be extracted.",
        ICON_NAME: "key",
    },
};

export const GET_SECTION_GROUPS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "The raw markdown to be classified.",
        ICON_NAME: "key",
    },
    section_group_type: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_md_section_group_type",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The type of section group to be extracted.",
        ICON_NAME: "key",
    },
};

export const GET_SECTION_BLOCKS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "The raw markdown to be classified.",
        ICON_NAME: "key",
    },
    section_type: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_md_section_type",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The type of section to be extracted.",
        ICON_NAME: "key",
    },
};

export const GET_ALL_CODE_BLOCKS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "The raw markdown to be classified.",
        ICON_NAME: "key",
    },
    remove_comments: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Check",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether to remove comments from the code blocks.",
        ICON_NAME: "Check",
    },
};

export const GET_CODE_BLOCKS_BY_LANGUAGE: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "The raw markdown to be classified.",
        ICON_NAME: "key",
    },
    language: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_md_code_language",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The language of the code blocks to be extracted.",
        ICON_NAME: "key",
    },
    remove_comments: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Check",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether to remove comments from the code blocks.",
        ICON_NAME: "Check",
    },
};

export const CLASSIFY_MARKDOWN: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "The raw markdown to be classified.",
        ICON_NAME: "key",
    },
};

export const GET_COMPILED_RECIPE: Schema = {
    compiled_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the compiled recipe to get.",
        ICON_NAME: "key",
    },
};

export const GET_RECIPE: Schema = {
    recipe_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the recipe to get.",
        ICON_NAME: "key",
    },
};

export const ADD_RECIPE: Schema = {
    recipe_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the recipe to add.",
        ICON_NAME: "key",
    },
    compiled_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the compiled recipe to add.",
        ICON_NAME: "key",
    },
    compiled_recipe: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The compiled recipe to add.",
        ICON_NAME: "key",
    },
};

export const RUN_COMPILED_RECIPE: Schema = {
    recipe_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the recipe to run.",
        ICON_NAME: "key",
    },
    compiled_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the compiled recipe to run.",
        ICON_NAME: "key",
    },
    compiled_recipe: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The compiled recipe to run.",
        ICON_NAME: "key",
    },
    stream: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether the response should be streamed or sent all at once.",
        ICON_NAME: "Check",
    },
};

export const RUN_RECIPE: Schema = {
    recipe_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The id of the recipe to run.",
        ICON_NAME: "key",
    },
    broker_values: {
        REQUIRED: true,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: "convert_broker_data",
        REFERENCE: BROKER_DEFINITION,
        COMPONENT: "relatedFieldsDisplay",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The broker values to be used in the recipe.",
        ICON_NAME: "Parentheses",
    },
    overrides: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: OVERRIDE_DEFINITION,
        COMPONENT: "relatedFieldsDisplay",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The overrides to be applied. These will override the 'settings' for the recipe, if overrides are allowed for the recipe.",
        ICON_NAME: "Parentheses",
    },
    stream: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether the response should be streamed or sent all at once.",
        ICON_NAME: "Check",
    },
};

export const COCKPIT_INSTANT: Schema = {
    cockpit_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Not sure what this is for yet.",
        ICON_NAME: "key",
    },
    broker_values: {
        REQUIRED: true,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: "convert_broker_data",
        REFERENCE: BROKER_DEFINITION,
        COMPONENT: "relatedFieldsDisplay",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The broker values to be used in the recipe.",
        ICON_NAME: "Parentheses",
    },
    overrides: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: OVERRIDE_DEFINITION,
        COMPONENT: "relatedFieldsDisplay",
        COMPONENT_PROPS: {},
        DESCRIPTION: "The overrides to be applied. These will override the 'settings' for the recipe, if overrides are allowed for the recipe.",
        ICON_NAME: "Parentheses",
    },
};
export const SERVICE_TASKS = {
    cockpit_service: {
        cockpit_instant: COCKPIT_INSTANT,
        run_recipe: RUN_RECIPE,
        run_compiled_recipe: RUN_COMPILED_RECIPE,
        add_recipe: ADD_RECIPE,
        get_recipe: GET_RECIPE,
        get_compiled_recipe: GET_COMPILED_RECIPE,
    },
    markdown_service: {
        classify_markdown: CLASSIFY_MARKDOWN,
        get_code_blocks_by_language: GET_CODE_BLOCKS_BY_LANGUAGE,
        get_all_code_blocks: GET_ALL_CODE_BLOCKS,
        get_section_blocks: GET_SECTION_BLOCKS,
        get_section_groups: GET_SECTION_GROUPS,
        get_segments: GET_SEGMENTS,
        remove_first_and_last_paragraph: REMOVE_FIRST_AND_LAST_PARAGRAPH,
        get_python_dicts: GET_PYTHON_DICTS,
        get_all_python_comments: GET_ALL_PYTHON_COMMENTS,
        get_all_python_function_docstrings: GET_ALL_PYTHON_FUNCTION_DOCSTRINGS,
        get_all_python_class_docstrings: GET_ALL_PYTHON_CLASS_DOCSTRINGS,
    },
    scraper_service: {
        get_domains: GET_DOMAINS,
        get_domain_config_by_id: GET_DOMAIN_CONFIG_BY_ID,
        create_domain_config: CREATE_DOMAIN_CONFIG,
        update_domain_config: UPDATE_DOMAIN_CONFIG,
        create_domain: CREATE_DOMAIN,
        create_interaction_settings: CREATE_INTERACTION_SETTINGS,
        get_noise_config_by_id: GET_NOISE_CONFIG_BY_ID,
        get_noise_configs: GET_NOISE_CONFIGS,
        get_filter_config_by_id: GET_FILTER_CONFIG_BY_ID,
        get_filter_configs: GET_FILTER_CONFIGS,
        get_interaction_settings_by_id: GET_INTERACTION_SETTINGS_BY_ID,
        create_noise_config: CREATE_NOISE_CONFIG,
        create_filter_config: CREATE_FILTER_CONFIG,
        save_noise_config: SAVE_NOISE_CONFIG,
        save_filter_config: SAVE_FILTER_CONFIG,
        save_interaction_settings: SAVE_INTERACTION_SETTINGS,
        quick_scrape: QUICK_SCRAPE,
        create_scrape_tasks: CREATE_SCRAPE_TASKS,
        scrape_page: SCRAPE_PAGE,
        parse_response_by_id: PARSE_RESPONSE_BY_ID,
        parse_responses_by_id: PARSE_RESPONSES_BY_ID,
        get_scrape_history_by_url: GET_SCRAPE_HISTORY_BY_URL,
        get_scrape_history_by_task_id: GET_SCRAPE_HISTORY_BY_TASK_ID,
        get_scrape_task_details: GET_SCRAPE_TASK_DETAILS,
        create_full_site_scrape_task: CREATE_FULL_SITE_SCRAPE_TASK,
        get_full_site_scrape_progress: GET_FULL_SITE_SCRAPE_PROGRESS,
        get_full_site_scrape_progress_detailed: GET_FULL_SITE_SCRAPE_PROGRESS_DETAILED,
        cancel_full_site_scrape_task: CANCEL_FULL_SITE_SCRAPE_TASK,
        pause_full_site_scrape_task: PAUSE_FULL_SITE_SCRAPE_TASK,
        resume_full_site_scrape_task: RESUME_FULL_SITE_SCRAPE_TASK,
        get_parsed_pages: GET_PARSED_PAGES,
        view_parsed_page: VIEW_PARSED_PAGE,
        create_content_grouping_run: CREATE_CONTENT_GROUPING_RUN,
        track_content_grouping_run: TRACK_CONTENT_GROUPING_RUN,
    },
    california_worker_compensation_service: {
        create_wc_claim: CREATE_WC_CLAIM,
        create_wc_report: CREATE_WC_REPORT,
        create_wc_injury: CREATE_WC_INJURY,
        calculate_wc_ratings: CALCULATE_WC_RATINGS,
        edit_wc_claim: EDIT_WC_CLAIM,
        edit_wc_injury: EDIT_WC_INJURY,
    },
    chat_service: {
        ai_chat: AI_CHAT,
        prep_conversation: PREP_CONVERSATION,
    },
} as const;