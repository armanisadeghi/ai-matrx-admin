// File Location: constants/socket-schema.ts
export interface SchemaField {
    REQUIRED: boolean;
    DEFAULT: any;
    VALIDATION: string | null;
    DATA_TYPE: string | null;
    CONVERSION: string | null;
    REFERENCE: any;
    ICON_NAME?: string;
    COMPONENT?: string;
    COMPONENT_PROPS?: Record<string, any>;
    DESCRIPTION?: string;
    TEST_VALUE?: any;
}

export interface Schema {
    [key: string]: SchemaField;
}


export const CHAT_CONFIG_DEFINITION: Schema = {
    recipe_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        TEST_VALUE: "e2049ce6-c340-4ff7-987e-deb24a977853",
        DESCRIPTION: "Enter the ID of the recipe to be fetched, cached and ready for fast usage.",
    },
    version: {
        REQUIRED: false,
        DEFAULT: "latest",
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Enter the version of the recipe or blank to get the latest version.",
    },
    user_id: {
        REQUIRED: false,
        DEFAULT: "socket_internal_user_id",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "",
        COMPONENT_PROPS: {},
        ICON_NAME: "",
        DESCRIPTION: "",
    },
    prepare_for_next_call: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Determines if the results should be saved as a new conversation.",
    },
    save_new_conversation: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Determines if the results should be saved as a new conversation.",
    },
    include_classified_output: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Checkbox",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Determines if the classified output should be included in the response.",
    },
    model_override: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        TEST_VALUE: "10168527-4d6b-456f-ab07-a889223ba3a9",
        DESCRIPTION: "Enter the ID of the AI Model or leave blank to use the default model.",
    },
    tools_override: {
        REQUIRED: false,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "arrayField",
        COMPONENT_PROPS: {},
        ICON_NAME: "PocketKnife",
        DESCRIPTION: "Enter a list of tool names to be used in the call, which will override the tools defined in the recipe.",
    },
    allow_default_values: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Determines if the default values can be used for brokers which are not provided or are not ready.",
    },
    allow_removal_of_unmatched: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Checkbox",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Determines if brokers which are not provided or are not ready should be removed from the input content prior to the call.",
    },
};

export const BROKER_DEFINITION: Schema = {
    name: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the name of the broker.",
        ICON_NAME: "User",
    },
    id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the broker.",
        ICON_NAME: "Key",
        TEST_VALUE: "5d8c5ed2-5a84-476a-9258-6123a45f996a",
    },
    value: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the value of the broker.",
        ICON_NAME: "LetterText",
        TEST_VALUE: "I have an app that let's users create task lists from audio files.",
    },
    ready: {
        REQUIRED: false,
        DEFAULT: "true",
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether the broker's value is DIRECTLY ready exactly as it is.",
        ICON_NAME: "Check",
    },
};

export const MESSAGE_OBJECT_DEFINITION: Schema = {
    id: {
        REQUIRED: false,
        DEFAULT: "",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Enter the message id.",
    },
    conversation_id: {
        REQUIRED: false,
        DEFAULT: "",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Enter the conversation id.",
    },
    content: {
        REQUIRED: false,
        DEFAULT: "",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "TextArea",
        COMPONENT_PROPS: {"rows": 10},
        ICON_NAME: "Text",
        DESCRIPTION: "Enter the message content.",
    },
    role: {
        REQUIRED: false,
        DEFAULT: "",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Select",
        COMPONENT_PROPS: {"options": [{"label": "User", "value": "user"}, {"label": "Assistant", "value": "assistant"}, {"label": "System", "value": "system"}, {"label": "Tool", "value": "tool"}]},
        ICON_NAME: "User",
        DESCRIPTION: "Enter the message role. (user, assistant, system, tool)",
    },
    type: {
        REQUIRED: false,
        DEFAULT: "",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Select",
        COMPONENT_PROPS: {"options": [{"label": "Text", "value": "text"}, {"label": "Tool Call", "value": "tool_call"}, {"label": "Mixed", "value": "mixed"}]},
        ICON_NAME: "Type",
        DESCRIPTION: "Enter the message type. (text, tool_call, mixed)",
    },
    files: {
        REQUIRED: false,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "MultiFileUpload",
        COMPONENT_PROPS: {},
        ICON_NAME: "Files",
        DESCRIPTION: "Public urls for files to be associated with the message.",
    },
    metadata: {
        REQUIRED: false,
        DEFAULT: {},
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "JsonEditor",
        COMPONENT_PROPS: {},
        ICON_NAME: "Metadata",
        DESCRIPTION: "Metadata for the message.",
    },
};

export const OVERRIDE_DEFINITION: Schema = {
    model_override: {
        REQUIRED: false,
        DEFAULT: "",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the model to use.",
        ICON_NAME: "Key",
    },
    processor_overrides: {
        REQUIRED: false,
        DEFAULT: {},
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "JsonEditor",
        COMPONENT_PROPS: {},
        DESCRIPTION: "This is a complex field that requires a pre-determined structure to get specific processors and extractors.",
        ICON_NAME: "Parentheses",
    },
    other_overrides: {
        REQUIRED: false,
        DEFAULT: {},
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "JsonEditor",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Some additional overrides may be provided for processing.",
        ICON_NAME: "Parentheses",
    },
};

export const CONVERT_RECIPE_TO_CHAT: Schema = {
    chat_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Enter the ID of the chat to be converted to a recipe.",
    },
};

export const SAMPLE_SERVICE: Schema = {
    slider_field: {
        REQUIRED: false,
        DEFAULT: 50,
        VALIDATION: null,
        DATA_TYPE: "number",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Slider",
        COMPONENT_PROPS: {"min": 0, "max": 100, "step": 1, "range": "False"},
        ICON_NAME: "Sliders",
        DESCRIPTION: "Adjust the value between 0 and 100",
        TEST_VALUE: 75,
    },
    select_field: {
        REQUIRED: true,
        DEFAULT: "option2",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Select",
        COMPONENT_PROPS: {"options": [{"label": "Option 1", "value": "option1"}, {"label": "Option 2", "value": "option2"}, {"label": "Option 3", "value": "option3"}]},
        ICON_NAME: "List",
        DESCRIPTION: "Select an option from the dropdown",
        TEST_VALUE: "option3",
    },
    radio_field: {
        REQUIRED: true,
        DEFAULT: "radio1",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "RadioGroup",
        COMPONENT_PROPS: {"options": [{"label": "Radio Option 1", "value": "radio1"}, {"label": "Radio Option 2", "value": "radio2"}, {"label": "Radio Option 3", "value": "radio3"}], "orientation": "vertical"},
        ICON_NAME: "Radio",
        DESCRIPTION: "Choose one of the options",
        TEST_VALUE: "radio2",
    },
    file_field: {
        REQUIRED: false,
        DEFAULT: "",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "FileUpload",
        COMPONENT_PROPS: {},
        ICON_NAME: "File",
        DESCRIPTION: "Upload a document (PDF, DOCX, or TXT)",
        TEST_VALUE: "sample-document.pdf",
    },
    files_field: {
        REQUIRED: false,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "MultiFileUpload",
        COMPONENT_PROPS: {"accept": "image/*", "maxfiles": 5, "maxsize": 2000000},
        ICON_NAME: "Files",
        DESCRIPTION: "Upload up to 5 images (max 2MB each)",
        TEST_VALUE: ["image1.jpg", "image2.png"],
    },
    json_field: {
        REQUIRED: false,
        DEFAULT: {"key": "value"},
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "JsonEditor",
        COMPONENT_PROPS: {"spellCheck": "False"},
        ICON_NAME: "Code",
        DESCRIPTION: "Edit JSON configuration",
        TEST_VALUE: {"test": "data", "nested": {"value": 123}},
    },
    switch_field: {
        REQUIRED: false,
        DEFAULT: true,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {"size": "default"},
        ICON_NAME: "ToggleLeft",
        DESCRIPTION: "Enable or disable this feature",
        TEST_VALUE: false,
    },
    checkbox_field: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Checkbox",
        COMPONENT_PROPS: {"indeterminate": "False"},
        ICON_NAME: "CheckSquare",
        DESCRIPTION: "Agree to the terms and conditions",
        TEST_VALUE: true,
    },
    textarea_field: {
        REQUIRED: false,
        DEFAULT: "",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Textarea",
        COMPONENT_PROPS: {"rows": 6, "maxLength": 500, "placeholder": "Enter your detailed description here...", "resize": "vertical"},
        ICON_NAME: "FileText",
        DESCRIPTION: "Provide a detailed description (max 500 characters)",
        TEST_VALUE: "This is a sample text that would be used in test mode.",
    },
};

export const PREPARE_BATCH_RECIPE: Schema = {
    chat_configs: {
        REQUIRED: true,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: CHAT_CONFIG_DEFINITION,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Enter the chat configs to be used in the recipe.",
    },
    broker_values: {
        REQUIRED: false,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: "convert_broker_data",
        REFERENCE: BROKER_DEFINITION,
        COMPONENT: "relatedFieldsDisplay",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the broker values to be used in the recipe.",
        ICON_NAME: "Parentheses",
    },
    max_count: {
        REQUIRED: false,
        DEFAULT: 3,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        ICON_NAME: "Sigma",
        DESCRIPTION: "Enter the maximum number of chats to be created.",
    },
};

export const RUN_BATCH_RECIPE: Schema = {
    chat_configs: {
        REQUIRED: true,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: CHAT_CONFIG_DEFINITION,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Enter the chat configs to be used in the recipe.",
    },
    broker_values: {
        REQUIRED: false,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: "convert_broker_data",
        REFERENCE: BROKER_DEFINITION,
        COMPONENT: "relatedFieldsDisplay",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the broker values to be used in the recipe.",
        ICON_NAME: "Parentheses",
    },
    max_count: {
        REQUIRED: false,
        DEFAULT: 3,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        ICON_NAME: "Sigma",
        DESCRIPTION: "Enter the maximum number of chats to be created.",
    },
};

export const RUN_RECIPE_TO_CHAT: Schema = {
    chat_config: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: CHAT_CONFIG_DEFINITION,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Enter the chat config to be used in the recipe.",
    },
    broker_values: {
        REQUIRED: false,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: "convert_broker_data",
        REFERENCE: BROKER_DEFINITION,
        COMPONENT: "relatedFieldsDisplay",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the broker values to be used in the recipe.",
        ICON_NAME: "Parentheses",
    },
};

export const PREP_CONVERSATION: Schema = {
    conversation_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Enter the ID of the conversation to be fetched, cached and ready for fast usage.",
    },
};

export const AI_CHAT: Schema = {
    conversation_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Enter the conversation id.",
    },
    message_object: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: "convert_message_object",
        REFERENCE: MESSAGE_OBJECT_DEFINITION,
        COMPONENT: "relatedFieldsDisplay",
        COMPONENT_PROPS: {},
        ICON_NAME: "Messages",
        DESCRIPTION: "Enter the message object with message id, conversation id, content, role, type, and files.",
    },
};

export const EDIT_WC_INJURY: Schema = {
    injury_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    digit: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    wpi: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    le: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    ue: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    industrial: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    pain: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    side: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: "validate_wc_side",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
};

export const EDIT_WC_CLAIM: Schema = {
    claim_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    date_of_injury: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: "validate_date",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    date_of_birth: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: "validate_date",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    age_at_doi: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    occupational_code: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    weekly_earnings: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "float",
        CONVERSION: null,
        REFERENCE: null,
    },
    applicant_name: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
};

export const CALCULATE_WC_RATINGS: Schema = {
    report_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
};

export const CREATE_WC_INJURY: Schema = {
    report_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    impairment_definition_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    digit: {
        REQUIRED: false,
        DEFAULT: 0,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    wpi: {
        REQUIRED: false,
        DEFAULT: 0,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    le: {
        REQUIRED: false,
        DEFAULT: 0,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    ue: {
        REQUIRED: false,
        DEFAULT: 0,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    industrial: {
        REQUIRED: false,
        DEFAULT: 100,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    pain: {
        REQUIRED: false,
        DEFAULT: 0,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    side: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: "validate_wc_side",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
};

export const CREATE_WC_REPORT: Schema = {
    claim_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
};

export const CREATE_WC_CLAIM: Schema = {
    date_of_injury: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: "validate_date",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    date_of_birth: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: "validate_date",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
    age_at_doi: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    occupational_code: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
    },
    weekly_earnings: {
        REQUIRED: false,
        DEFAULT: 290.0,
        VALIDATION: null,
        DATA_TYPE: "float",
        CONVERSION: null,
        REFERENCE: null,
    },
    applicant_name: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
    },
};

export const TRACK_CONTENT_GROUPING_RUN: Schema = {
    content_grouping_run_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the content grouping run id to be tracked.",
        ICON_NAME: "Key",
    },
};

export const CREATE_CONTENT_GROUPING_RUN: Schema = {
    full_site_scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the full site scrape task id to be scraped.",
        ICON_NAME: "Key",
    },
    content_grouping_config: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "JsonEditor",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the content grouping config to be used for the scrape.",
        ICON_NAME: "Bolt",
    },
};

export const VIEW_PARSED_PAGE: Schema = {
    parsed_content_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the parsed content id to be viewed.",
        ICON_NAME: "Key",
    },
};

export const GET_PARSED_PAGES: Schema = {
    full_site_scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the full site scrape task id to be scraped.",
        ICON_NAME: "Key",
    },
    cursor: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the cursor to be used for the scrape.",
        ICON_NAME: "Key",
    },
    page_size: {
        REQUIRED: false,
        DEFAULT: 1000,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the page size to be used for the scrape.",
        ICON_NAME: "Key",
    },
};

export const RESUME_FULL_SITE_SCRAPE_TASK: Schema = {
    full_site_scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the full site scrape task id to be scraped.",
        ICON_NAME: "Key",
    },
};

export const PAUSE_FULL_SITE_SCRAPE_TASK: Schema = {
    full_site_scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the full site scrape task id to be scraped.",
        ICON_NAME: "Key",
    },
};

export const CANCEL_FULL_SITE_SCRAPE_TASK: Schema = {
    full_site_scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the full site scrape task id to be scraped.",
        ICON_NAME: "Key",
    },
};

export const GET_FULL_SITE_SCRAPE_PROGRESS_DETAILED: Schema = {
    full_site_scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the full site scrape task id to be scraped.",
        ICON_NAME: "Key",
    },
};

export const GET_FULL_SITE_SCRAPE_PROGRESS: Schema = {
    full_site_scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the full site scrape task id to be scraped.",
        ICON_NAME: "Key",
    },
};

export const CREATE_FULL_SITE_SCRAPE_TASK: Schema = {
    urls: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_scrape_urls",
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "ArrayField",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the urls to be scraped.",
        ICON_NAME: "Link",
    },
};

export const GET_SCRAPE_TASK_DETAILS: Schema = {
    scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the scrape task id to be scraped.",
        ICON_NAME: "Key",
    },
};

export const GET_SCRAPE_HISTORY_BY_TASK_ID: Schema = {
    scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the scrape task id to be scraped.",
        ICON_NAME: "Key",
    },
};

export const GET_SCRAPE_HISTORY_BY_URL: Schema = {
    url: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the url to be scraped.",
        ICON_NAME: "Link",
    },
};

export const PARSE_RESPONSES_BY_ID: Schema = {
    scrape_task_ids: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "ArrayField",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the scrape task ids to be parsed.",
        ICON_NAME: "ChartNetwork",
    },
    use_configs: {
        REQUIRED: false,
        DEFAULT: true,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether to use configs.",
        ICON_NAME: "Cog",
    },
    noise_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the noise config id to be used for the scrape.",
        ICON_NAME: "Key",
    },
    filter_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the filter config id to be used for the scrape.",
        ICON_NAME: "Key",
    },
};

export const PARSE_RESPONSE_BY_ID: Schema = {
    scrape_task_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the scrape task id to be parsed.",
        ICON_NAME: "Key",
    },
    use_configs: {
        REQUIRED: false,
        DEFAULT: true,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether to use configs.",
        ICON_NAME: "Cog",
    },
    noise_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the noise config id to be used for the scrape.",
        ICON_NAME: "Key",
    },
    filter_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the filter config id to be used for the scrape.",
        ICON_NAME: "Key",
    },
};

export const SCRAPE_PAGE: Schema = {
    url: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the url to be scraped.",
        ICON_NAME: "Link",
    },
    use_mode: {
        REQUIRED: false,
        DEFAULT: "normal",
        VALIDATION: "validate_scrape_mode",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the mode to be used for the scrape.",
        ICON_NAME: "Blend",
    },
    interaction_settings_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the interaction settings id to be used for the scrape.",
        ICON_NAME: "Key",
    },
};

export const CREATE_SCRAPE_TASKS: Schema = {
    urls: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_scrape_urls",
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "ArrayField",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the urls to be scraped.",
        ICON_NAME: "Link",
    },
    use_configs: {
        REQUIRED: false,
        DEFAULT: true,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether to use configs.",
        ICON_NAME: "Cog",
    },
    use_mode: {
        REQUIRED: false,
        DEFAULT: "normal",
        VALIDATION: "validate_scrape_mode",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the mode to be used for the scrape.",
        ICON_NAME: "Blend",
    },
    interaction_settings_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the interaction settings id to be used for the scrape.",
        ICON_NAME: "Key",
    },
};

export const QUICK_SCRAPE: Schema = {
    urls: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_scrape_urls",
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "ArrayField",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the urls to be scraped.",
        ICON_NAME: "Link",
    },
    get_anchors: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether to get anchors.",
        ICON_NAME: "Check",
    },
};

export const SAVE_INTERACTION_SETTINGS: Schema = {
    interaction_settings_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the interaction settings to be used for the domain.",
        ICON_NAME: "Key",
    },
    new_interaction_settings: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the new interaction settings to be used for the domain.",
        ICON_NAME: "Key",
    },
};

export const SAVE_FILTER_CONFIG: Schema = {
    filter_config_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the filter config to be used for the domain.",
        ICON_NAME: "Key",
    },
    new_filter_config: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_scrape_filter_config",
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the new filter config to be used for the domain.",
        ICON_NAME: "Key",
    },
};

export const SAVE_NOISE_CONFIG: Schema = {
    noise_config_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the noise config to be used for the domain.",
        ICON_NAME: "Key",
    },
    new_noise_config: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_scrape_noise_config",
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the new noise config to be used for the domain.",
        ICON_NAME: "Key",
    },
};

export const CREATE_FILTER_CONFIG: Schema = {
    filter_config_name: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the name of the filter config to be created.",
        ICON_NAME: "Key",
    },
};

export const CREATE_NOISE_CONFIG: Schema = {
    noise_config_name: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the name of the noise config to be created.",
        ICON_NAME: "Key",
    },
};

export const GET_INTERACTION_SETTINGS_BY_ID: Schema = {
    interaction_settings_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the interaction settings to be used for the domain.",
        ICON_NAME: "Key",
    },
};

export const GET_FILTER_CONFIGS: Schema = {
};

export const GET_FILTER_CONFIG_BY_ID: Schema = {
    filter_config_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the filter config to be used for the domain.",
        ICON_NAME: "Key",
    },
};

export const GET_NOISE_CONFIGS: Schema = {
};

export const GET_NOISE_CONFIG_BY_ID: Schema = {
    noise_config_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the noise config to be used for the domain.",
        ICON_NAME: "Key",
    },
};

export const CREATE_INTERACTION_SETTINGS: Schema = {
    interaction_settings_name: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the name of the interaction settings to be created.",
        ICON_NAME: "Key",
    },
};

export const CREATE_DOMAIN: Schema = {
    domain: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the domain to be created.",
        ICON_NAME: "Key",
    },
};

export const UPDATE_DOMAIN_CONFIG: Schema = {
    domain_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the domain to update.",
        ICON_NAME: "Key",
    },
    path_pattern: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the path pattern to be used for the domain.",
        ICON_NAME: "Key",
    },
    noise_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the noise config to be used for the domain.",
        ICON_NAME: "Key",
    },
    filter_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the filter config to be used for the domain.",
        ICON_NAME: "Key",
    },
    plugin_ids: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "ArrayField",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the ids of the plugins to be used for the domain.",
        ICON_NAME: "Blocks",
    },
    interaction_settings_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the interaction settings to be used for the domain.",
        ICON_NAME: "Key",
    },
    use_mode: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: "validate_scrape_mode",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the mode to be used for the domain.",
        ICON_NAME: "Key",
    },
};

export const CREATE_DOMAIN_CONFIG: Schema = {
    domain_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the domain to create.",
        ICON_NAME: "Key",
    },
    path_pattern: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the path pattern to be used for the domain.",
        ICON_NAME: "Key",
    },
    noise_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the noise config to be used for the domain.",
        ICON_NAME: "Key",
    },
    filter_config_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the filter config to be used for the domain.",
        ICON_NAME: "Key",
    },
    plugin_ids: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "ArrayField",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the ids of the plugins to be used for the domain.",
        ICON_NAME: "Blocks",
    },
    interaction_settings_id: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the interaction settings to be used for the domain.",
        ICON_NAME: "Key",
    },
    use_mode: {
        REQUIRED: false,
        DEFAULT: "normal",
        VALIDATION: "validate_scrape_mode",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the mode to be used for the domain.",
        ICON_NAME: "Key",
    },
};

export const GET_DOMAIN_CONFIG_BY_ID: Schema = {
    domain_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "NumberInput",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the domain to get.",
        ICON_NAME: "Key",
    },
};

export const GET_DOMAINS: Schema = {
};

export const GET_ALL_PYTHON_CLASS_DOCSTRINGS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "Enter the raw markdown to be classified.",
        ICON_NAME: "Key",
    },
};

export const GET_ALL_PYTHON_FUNCTION_DOCSTRINGS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "Enter the raw markdown to be classified.",
        ICON_NAME: "Key",
    },
};

export const GET_ALL_PYTHON_COMMENTS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "Enter the raw markdown to be classified.",
        ICON_NAME: "Key",
    },
};

export const GET_PYTHON_DICTS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "Enter the raw markdown to be classified.",
        ICON_NAME: "Key",
    },
    dict_variable_name: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the variable name of the dictionary to be created.",
        ICON_NAME: "Key",
    },
};

export const REMOVE_FIRST_AND_LAST_PARAGRAPH: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "Enter the raw markdown to be classified.",
        ICON_NAME: "Key",
    },
};

export const GET_SEGMENTS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "Enter the raw markdown to be classified.",
        ICON_NAME: "Key",
    },
    segment_type: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_md_segment_type",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the type of segment to be extracted.",
        ICON_NAME: "Key",
    },
};

export const GET_SECTION_GROUPS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "Enter the raw markdown to be classified.",
        ICON_NAME: "Key",
    },
    section_group_type: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_md_section_group_type",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the type of section group to be extracted.",
        ICON_NAME: "Key",
    },
};

export const GET_SECTION_BLOCKS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "Enter the raw markdown to be classified.",
        ICON_NAME: "Key",
    },
    section_type: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_md_section_type",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the type of section to be extracted.",
        ICON_NAME: "Key",
    },
};

export const GET_ALL_CODE_BLOCKS: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "Enter the raw markdown to be classified.",
        ICON_NAME: "Key",
    },
    remove_comments: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Check",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether to remove comments from the code blocks.",
        ICON_NAME: "Check",
    },
};

export const GET_CODE_BLOCKS_BY_LANGUAGE: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "Enter the raw markdown to be classified.",
        ICON_NAME: "Key",
    },
    language: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: "validate_md_code_language",
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the language of the code blocks to be extracted.",
        ICON_NAME: "Key",
    },
    remove_comments: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Check",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether to remove comments from the code blocks.",
        ICON_NAME: "Check",
    },
};

export const CLASSIFY_MARKDOWN: Schema = {
    raw_markdown: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "textarea",
        COMPONENT_PROPS: {"rows": 10},
        DESCRIPTION: "Enter the raw markdown to be classified.",
        ICON_NAME: "Key",
    },
};

export const MIC_CHECK: Schema = {
    mic_check_message: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Check",
        DESCRIPTION: "Enter any message and the same message will be streamed back to you as a test of the mic.",
    },
};

export const RUN_CHAT_RECIPE: Schema = {
    recipe_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Enter the ID of the recipe to be fetched, cached and ready for fast usage.",
    },
    version: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Enter the version of the recipe or blank to get the latest version.",
    },
    broker_values: {
        REQUIRED: false,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: "convert_broker_data",
        REFERENCE: BROKER_DEFINITION,
        COMPONENT: "relatedFieldsDisplay",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the broker values to be used in the recipe.",
        ICON_NAME: "Parentheses",
    },
    user_id: {
        REQUIRED: false,
        DEFAULT: "socket_internal_user_id",
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "",
        COMPONENT_PROPS: {},
        ICON_NAME: "",
        DESCRIPTION: "",
    },
    prepare_for_next_call: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        ICON_NAME: "FastForward ",
        DESCRIPTION: "Determines if the results should be saved as a new conversation.",
    },
    save_new_conversation: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        ICON_NAME: "Save",
        DESCRIPTION: "Determines if the results should be saved as a new conversation.",
    },
    include_classified_output: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Checkbox",
        COMPONENT_PROPS: {},
        ICON_NAME: "Shapes",
        DESCRIPTION: "Determines if the classified output should be included in the response.",
    },
    model_override: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Enter the ID of the AI Model or leave blank to use the default model.",
    },
    tools_override: {
        REQUIRED: false,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "arrayField",
        COMPONENT_PROPS: {},
        ICON_NAME: "PocketKnife",
        DESCRIPTION: "Enter a list of tool names to be used in the call, which will override the tools defined in the recipe.",
    },
    allow_default_values: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Checkbox",
        COMPONENT_PROPS: {},
        ICON_NAME: "SwatchBook",
        DESCRIPTION: "Determines if the default values can be used for brokers which are not provided or are not ready.",
    },
    allow_removal_of_unmatched: {
        REQUIRED: false,
        DEFAULT: false,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        ICON_NAME: "BadgeX",
        DESCRIPTION: "Determines if brokers which are not provided or are not ready should be removed from the input content prior to the call.",
    },
};

export const GET_NEEDED_RECIPE_BROKERS: Schema = {
    recipe_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Enter the ID of the recipe to be fetched, cached and ready for fast usage.",
    },
    version: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "integer",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        ICON_NAME: "Key",
        DESCRIPTION: "Enter the version of the recipe or blank to get the latest version.",
    },
};

export const GET_COMPILED_RECIPE: Schema = {
    compiled_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the compiled recipe to get.",
        ICON_NAME: "Key",
    },
};

export const GET_RECIPE: Schema = {
    recipe_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the recipe to get.",
        ICON_NAME: "Key",
    },
};

export const ADD_RECIPE: Schema = {
    recipe_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the recipe to add.",
        ICON_NAME: "Key",
    },
    compiled_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the compiled recipe to add.",
        ICON_NAME: "Key",
    },
    compiled_recipe: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the compiled recipe to add.",
        ICON_NAME: "Key",
    },
};

export const RUN_COMPILED_RECIPE: Schema = {
    recipe_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the recipe to run.",
        ICON_NAME: "Key",
    },
    compiled_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the compiled recipe to run.",
        ICON_NAME: "Key",
    },
    compiled_recipe: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the compiled recipe to run.",
        ICON_NAME: "Key",
    },
    stream: {
        REQUIRED: true,
        DEFAULT: true,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether the response should be streamed or sent all at once.",
        ICON_NAME: "Check",
    },
};

export const RUN_RECIPE: Schema = {
    recipe_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the id of the recipe to run.",
        ICON_NAME: "Key",
    },
    broker_values: {
        REQUIRED: false,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: "convert_broker_data",
        REFERENCE: BROKER_DEFINITION,
        COMPONENT: "relatedFieldsDisplay",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the broker values to be used in the recipe.",
        ICON_NAME: "Parentheses",
    },
    overrides: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: OVERRIDE_DEFINITION,
        COMPONENT: "relatedFieldsDisplay",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the overrides to be applied. These will override the 'settings' for the recipe, if overrides are allowed for the recipe.",
        ICON_NAME: "Parentheses",
    },
    stream: {
        REQUIRED: true,
        DEFAULT: true,
        VALIDATION: null,
        DATA_TYPE: "boolean",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Switch",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Whether the response should be streamed or sent all at once.",
        ICON_NAME: "Check",
    },
};

export const COCKPIT_INSTANT: Schema = {
    cockpit_id: {
        REQUIRED: true,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "string",
        CONVERSION: null,
        REFERENCE: null,
        COMPONENT: "Input",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Not sure what this is for yet.",
        ICON_NAME: "Key",
    },
    broker_values: {
        REQUIRED: true,
        DEFAULT: [],
        VALIDATION: null,
        DATA_TYPE: "array",
        CONVERSION: "convert_broker_data",
        REFERENCE: BROKER_DEFINITION,
        COMPONENT: "relatedFieldsDisplay",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the broker values to be used in the recipe.",
        ICON_NAME: "Parentheses",
    },
    overrides: {
        REQUIRED: false,
        DEFAULT: null,
        VALIDATION: null,
        DATA_TYPE: "object",
        CONVERSION: null,
        REFERENCE: OVERRIDE_DEFINITION,
        COMPONENT: "relatedFieldsDisplay",
        COMPONENT_PROPS: {},
        DESCRIPTION: "Enter the overrides to be applied. These will override the 'settings' for the recipe, if overrides are allowed for the recipe.",
        ICON_NAME: "Parentheses",
    },
};
export const SERVICE_TASKS = {
    cockpit_service: {
        cockpit_instant: COCKPIT_INSTANT,
        run_recipe: RUN_RECIPE,
        run_compiled_recipe: RUN_COMPILED_RECIPE,
        add_recipe: ADD_RECIPE,
        get_recipe: GET_RECIPE,
        get_compiled_recipe: GET_COMPILED_RECIPE,
        get_needed_recipe_brokers: GET_NEEDED_RECIPE_BROKERS,
        run_chat_recipe: RUN_CHAT_RECIPE,
        mic_check: MIC_CHECK,
    },
    markdown_service: {
        classify_markdown: CLASSIFY_MARKDOWN,
        get_code_blocks_by_language: GET_CODE_BLOCKS_BY_LANGUAGE,
        get_all_code_blocks: GET_ALL_CODE_BLOCKS,
        get_section_blocks: GET_SECTION_BLOCKS,
        get_section_groups: GET_SECTION_GROUPS,
        get_segments: GET_SEGMENTS,
        remove_first_and_last_paragraph: REMOVE_FIRST_AND_LAST_PARAGRAPH,
        get_python_dicts: GET_PYTHON_DICTS,
        get_all_python_comments: GET_ALL_PYTHON_COMMENTS,
        get_all_python_function_docstrings: GET_ALL_PYTHON_FUNCTION_DOCSTRINGS,
        get_all_python_class_docstrings: GET_ALL_PYTHON_CLASS_DOCSTRINGS,
        mic_check: MIC_CHECK,
    },
    scraper_service: {
        get_domains: GET_DOMAINS,
        get_domain_config_by_id: GET_DOMAIN_CONFIG_BY_ID,
        create_domain_config: CREATE_DOMAIN_CONFIG,
        update_domain_config: UPDATE_DOMAIN_CONFIG,
        create_domain: CREATE_DOMAIN,
        create_interaction_settings: CREATE_INTERACTION_SETTINGS,
        get_noise_config_by_id: GET_NOISE_CONFIG_BY_ID,
        get_noise_configs: GET_NOISE_CONFIGS,
        get_filter_config_by_id: GET_FILTER_CONFIG_BY_ID,
        get_filter_configs: GET_FILTER_CONFIGS,
        get_interaction_settings_by_id: GET_INTERACTION_SETTINGS_BY_ID,
        create_noise_config: CREATE_NOISE_CONFIG,
        create_filter_config: CREATE_FILTER_CONFIG,
        save_noise_config: SAVE_NOISE_CONFIG,
        save_filter_config: SAVE_FILTER_CONFIG,
        save_interaction_settings: SAVE_INTERACTION_SETTINGS,
        quick_scrape: QUICK_SCRAPE,
        create_scrape_tasks: CREATE_SCRAPE_TASKS,
        scrape_page: SCRAPE_PAGE,
        parse_response_by_id: PARSE_RESPONSE_BY_ID,
        parse_responses_by_id: PARSE_RESPONSES_BY_ID,
        get_scrape_history_by_url: GET_SCRAPE_HISTORY_BY_URL,
        get_scrape_history_by_task_id: GET_SCRAPE_HISTORY_BY_TASK_ID,
        get_scrape_task_details: GET_SCRAPE_TASK_DETAILS,
        create_full_site_scrape_task: CREATE_FULL_SITE_SCRAPE_TASK,
        get_full_site_scrape_progress: GET_FULL_SITE_SCRAPE_PROGRESS,
        get_full_site_scrape_progress_detailed: GET_FULL_SITE_SCRAPE_PROGRESS_DETAILED,
        cancel_full_site_scrape_task: CANCEL_FULL_SITE_SCRAPE_TASK,
        pause_full_site_scrape_task: PAUSE_FULL_SITE_SCRAPE_TASK,
        resume_full_site_scrape_task: RESUME_FULL_SITE_SCRAPE_TASK,
        get_parsed_pages: GET_PARSED_PAGES,
        view_parsed_page: VIEW_PARSED_PAGE,
        create_content_grouping_run: CREATE_CONTENT_GROUPING_RUN,
        track_content_grouping_run: TRACK_CONTENT_GROUPING_RUN,
        mic_check: MIC_CHECK,
    },
    california_worker_compensation_service: {
        create_wc_claim: CREATE_WC_CLAIM,
        create_wc_report: CREATE_WC_REPORT,
        create_wc_injury: CREATE_WC_INJURY,
        calculate_wc_ratings: CALCULATE_WC_RATINGS,
        edit_wc_claim: EDIT_WC_CLAIM,
        edit_wc_injury: EDIT_WC_INJURY,
        mic_check: MIC_CHECK,
    },
    chat_service: {
        ai_chat: AI_CHAT,
        prep_conversation: PREP_CONVERSATION,
        get_needed_recipe_brokers: GET_NEEDED_RECIPE_BROKERS,
        run_chat_recipe: RUN_CHAT_RECIPE,
        mic_check: MIC_CHECK,
    },
    ai_chat_service: {
        run_recipe_to_chat: RUN_RECIPE_TO_CHAT,
        run_batch_recipe: RUN_BATCH_RECIPE,
        prepare_batch_recipe: PREPARE_BATCH_RECIPE,
        mic_check: MIC_CHECK,
    },
    sample_service: {
        sample_service: SAMPLE_SERVICE,
    },
    simple_recipe: {
        run_recipe: RUN_RECIPE,
        convert_recipe_to_chat: CONVERT_RECIPE_TO_CHAT,
    },
} as const;


export const AVAILABLE_NAMESPACES = {
    "/UserSession": "User Session",
    "/AdminSession": "Admin Session",
    "/Direct": "No Namespace",
    "/custom": "Custom Namespace",
} as const;




export const SOCKET_TASKS: { [key: string]: Schema } = Object.entries(SERVICE_TASKS).reduce(
    (acc, [_, serviceTasks]) => ({
        ...acc,
        ...serviceTasks,
    }),
    {}
);

const toTitleCase = (str: string): string => {
    return str
        .split("_")
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
        .join(" ");
};

export const getAvailableServices = (): Array<{ value: string; label: string }> => {
    return Object.keys(SERVICE_TASKS).map((key) => ({
        value: key,
        label: toTitleCase(key),
    }));
};

export const TASK_OPTIONS = Object.entries(SERVICE_TASKS).reduce((acc, [service, tasks]) => {
    acc[service] = Object.keys(tasks).map((task) => ({
        value: task,
        label: toTitleCase(task),
    }));
    return acc;
}, {} as Record<string, Array<{ value: string; label: string }>>);

export const getTasksForService = (service: string): Array<{ value: string; label: string }> => {
    return TASK_OPTIONS[service] || [];
};

export const getAvailableNamespaces = (): Array<{ value: string; label: string }> => {
    return Object.entries(AVAILABLE_NAMESPACES).map(([key, value]) => ({
        value: key,
        label: value,
    }));
};

export const getTaskSchema = (taskName: string): Schema | undefined => {
    return SOCKET_TASKS[taskName];
};