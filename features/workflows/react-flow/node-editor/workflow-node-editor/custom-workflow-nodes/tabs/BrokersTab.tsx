'use client';

import React from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Plus, Trash2, Zap, Copy } from "lucide-react";
import { BaseNode } from '@/features/workflows/types';
import { computeKnownBrokers } from '@/features/workflows/utils/knownBrokersRegistry';

interface BrokersTabProps {
  node: BaseNode;
  onNodeUpdate: (updatedNode: BaseNode) => void;
}

const BrokersTab: React.FC<BrokersTabProps> = ({ node, onNodeUpdate }) => {
  const returnBrokerOverrides = node.return_broker_overrides || [];
  
  // Get ONLY the runtime brokers that THIS node generates (not global brokers)
  const knownBrokersData = computeKnownBrokers(node);
  const runtimeBrokers = knownBrokersData?.runtimeBrokers || [];

  const addReturnBrokerOverride = () => {
    const updated = {
      ...node,
      return_broker_overrides: [...returnBrokerOverrides, '']
    };
    onNodeUpdate(updated);
  };

  const updateReturnBrokerOverride = (index: number, value: string) => {
    const overrides = [...returnBrokerOverrides];
    overrides[index] = value;
    const updated = { ...node, return_broker_overrides: overrides };
    onNodeUpdate(updated);
  };

  const removeReturnBrokerOverride = (index: number) => {
    const overrides = returnBrokerOverrides.filter((_, i) => i !== index);
    const updated = { ...node, return_broker_overrides: overrides };
    onNodeUpdate(updated);
  };

  return (
    <div className="mt-4 space-y-4">
      {/* Return Broker Overrides Section - FIRST */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="space-y-1">
              <CardTitle className="text-lg">Return Broker Overrides</CardTitle>
              <p className="text-sm text-muted-foreground">
                Custom broker IDs to return from this node in addition to auto-generated brokers.
              </p>
            </div>
            <Button onClick={addReturnBrokerOverride} size="sm">
              <Plus className="h-4 w-4 mr-2" />
              Add Override
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {returnBrokerOverrides.length > 0 ? (
            <div className="space-y-3">
              {returnBrokerOverrides.map((brokerId, index) => (
                <Card key={index} className="border-border">
                  <CardContent className="p-4">
                    <div className="flex items-center gap-4">
                      <div className="flex-1 space-y-2">
                        <Label>Broker ID</Label>
                        <Input
                          value={brokerId}
                          onChange={(e) => updateReturnBrokerOverride(index, e.target.value)}
                          placeholder="Enter broker ID"
                        />
                      </div>
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => removeReturnBrokerOverride(index)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <div className="text-center py-8 text-muted-foreground">
              No return broker overrides configured. Click "Add Override" to add custom brokers.
            </div>
          )}
        </CardContent>
      </Card>

      {/* Auto-Generated Brokers Section - SECOND */}
      {runtimeBrokers.length > 0 && (
        <Card>
          <CardHeader>
            <div className="flex items-center gap-2">
              <Zap className="h-5 w-5 text-green-500" />
              <CardTitle className="text-lg">Auto-Generated Brokers</CardTitle>
              <Badge variant="secondary" className="text-xs">
                {runtimeBrokers.length} brokers
              </Badge>
            </div>
            <p className="text-sm text-muted-foreground">
              These brokers are automatically generated by this node when it executes.
            </p>
          </CardHeader>
          <CardContent>
            <div className="border rounded-lg">
              <table className="w-full">
                <thead>
                  <tr className="border-b bg-muted/50">
                    <th className="text-left p-2 font-medium text-sm w-1/4">Label</th>
                    <th className="text-left p-2 font-medium text-sm w-1/2">Broker ID</th>
                    <th className="text-left p-2 font-medium text-sm w-1/8">Type</th>
                    <th className="text-left p-2 font-medium text-sm w-1/8">Availability</th>
                  </tr>
                </thead>
                <tbody>
                  {runtimeBrokers.map((broker, index) => (
                    <React.Fragment key={broker.id}>
                      <tr className={index % 2 === 0 ? 'bg-background' : 'bg-muted/20'}>
                        <td className="p-2 w-1/4">
                          <div className="text-sm font-medium text-blue-500">
                            {broker.label}
                          </div>
                        </td>
                        <td className="p-2 w-1/2">
                          <div className="flex items-center gap-2">
                            <span className="text-xs font-mono break-all">
                              {broker.id}
                            </span>
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-6 w-6 p-0 flex-shrink-0"
                              onClick={() => navigator.clipboard.writeText(broker.id)}
                              title="Copy to clipboard"
                            >
                              <Copy className="h-3 w-3" />
                            </Button>
                          </div>
                        </td>
                        <td className="p-2 w-1/8">
                          <Badge variant="outline" className="text-xs">
                            {broker.dataType}
                          </Badge>
                        </td>
                        <td className="p-2 w-1/8">
                          <Badge 
                            variant={broker.guaranteed ? "default" : "secondary"} 
                            className="text-xs"
                          >
                            {broker.guaranteed ? "Guaranteed" : "Conditional"}
                          </Badge>
                        </td>
                      </tr>
                      {broker.description && (
                        <tr className={index % 2 === 0 ? 'bg-background' : 'bg-muted/20'}>
                          <td colSpan={4} className="px-2 pb-2 pt-0">
                            <div className="text-sm text-muted-foreground py-1">
                              {broker.description}
                            </div>
                          </td>
                        </tr>
                      )}
                    </React.Fragment>
                  ))}
                </tbody>
              </table>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default BrokersTab; 