// Represents a dependency between two broker ids.
export interface WorkflowDependency {
    source_broker_id: string; // Required field for the the broker id
    target_broker_id?: string; // Optional target broker id
}

// Represents an override for a function argument
export interface ArgumentOverride {
    name: string; // Official argument name for this specific Registered Function.
    default_value?: any; // Overrides the default value which is pre-defined in the Registered Function.
    ready: boolean; // Indicates if the argument is ready (Should always default to false, until overriden by the user)
}

// Represents a mapping of arguments to broker IDs
export interface ArgumentMapping {
    source_broker_id: string; // ID of the broker
    target_arg_name: string; // Official argument name for this specific Registered Function.
}

export interface BaseNode {
    id: string; // Auto-generated by the database (Never set in React.)
    function_id?: string; // UUID, Foreign Key to the Registered Function.
    function_type?: string; // Nearly always set to "registered_function"
    step_name?: string; // Varchar, nullable (Human readable name for the step.)
    execution_required?: boolean; // Boolean, nullable (If true, the only thing that changes is that the workflow will 'fail' if it doesn't execute.)
    additional_dependencies?: WorkflowDependency[]; // JSONB, Ensures the function does not execute until the source_broker_id is updated and 'ready'=True. If a target is provided, the value of this broker is also passed to the target.
    arg_mapping?: ArgumentMapping[]; // JSONB, This is where args get their values during a workflow run or if there is a user input.
    return_broker_overrides?: string[]; // JSONB, nullable, array of strings (When the function executes, in addition to it's default broker id, these will also get the same value.)
    arg_overrides?: ArgumentOverride[]; // JSONB, nullable, Overides the default settings for a registered function's arguments. (default_value and ready state.)
    workflow_id?: string; // UUID, nullable (Foreign Key to the Workflow.)
    status?: string; // The status of the node. Can be: pending, initialized, ready_to_execute, executing, execution_complete, execution_failed.
}

