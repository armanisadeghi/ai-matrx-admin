"use client";

import { useEffect, useRef } from 'react';

interface UseAutoLabelOptions {
    content: string;
    currentLabel: string;
    onLabelChange: (newLabel: string) => void;
    enabled?: boolean;
    maxLength?: number;
    minCharacters?: number; // Minimum characters before auto-generating
}

/**
 * Hook to automatically generate note labels from content
 * Similar to iPhone Notes behavior
 */
export function useAutoLabel({
    content,
    currentLabel,
    onLabelChange,
    enabled = true,
    maxLength = 30,
    minCharacters = 12, // Wait for at least 12 characters
}: UseAutoLabelOptions) {
    const hasAutoGenerated = useRef(false);

    useEffect(() => {
        if (!enabled) return;

        // Only auto-generate if label is empty or "New Note" (case-insensitive)
        const shouldAutoGenerate = 
            !currentLabel || 
            currentLabel.trim() === '' || 
            currentLabel.toLowerCase() === 'new note';

        if (!shouldAutoGenerate) {
            hasAutoGenerated.current = false;
            return;
        }

        // Check if content meets minimum requirements
        const trimmedContent = content.trim();
        const hasNewline = content.includes('\n');
        const hasMinLength = trimmedContent.length >= minCharacters;
        
        // Only generate if:
        // 1. Content has a newline (user pressed Enter), OR
        // 2. Content has minimum number of characters
        const meetsThreshold = hasNewline || hasMinLength;

        // Only generate once when content meets threshold
        if (trimmedContent !== '' && meetsThreshold && !hasAutoGenerated.current) {
            const generatedLabel = generateLabelFromContent(content, maxLength);
            if (generatedLabel && generatedLabel !== currentLabel) {
                onLabelChange(generatedLabel);
                hasAutoGenerated.current = true;
            }
        }

        // Reset if content becomes empty
        if (trimmedContent === '') {
            hasAutoGenerated.current = false;
        }
    }, [content, currentLabel, onLabelChange, enabled, maxLength, minCharacters]);
}

/**
 * Generate a smart label from content
 * - Takes first line or first N characters
 * - Removes extra whitespace
 * - Capitalizes first letter
 * - Adds ellipsis if truncated
 * 
 * Exported for use in service layer auto-labeling
 */
export function generateLabelFromContent(content: string, maxLength: number = 30): string {
    if (!content || content.trim() === '') {
        return '';
    }

    // Get the first line (up to first newline)
    const lines = content.split('\n');
    let firstLine = lines[0].trim();

    // If first line is empty, try the next non-empty line
    if (!firstLine && lines.length > 1) {
        for (let i = 1; i < lines.length; i++) {
            if (lines[i].trim()) {
                firstLine = lines[i].trim();
                break;
            }
        }
    }

    if (!firstLine) {
        return '';
    }

    // Clean up the text
    // Remove multiple spaces
    firstLine = firstLine.replace(/\s+/g, ' ');

    // Remove common markdown/formatting at the start
    firstLine = firstLine.replace(/^[#\-*>\s]+/, '').trim();

    // Capitalize first letter
    if (firstLine.length > 0) {
        firstLine = firstLine.charAt(0).toUpperCase() + firstLine.slice(1);
    }

    // Truncate if too long
    if (firstLine.length > maxLength) {
        // Try to break at a word boundary
        const truncated = firstLine.substring(0, maxLength);
        const lastSpace = truncated.lastIndexOf(' ');
        
        if (lastSpace > maxLength * 0.7) {
            // If we find a space in the last 30% of the string, break there
            return truncated.substring(0, lastSpace) + '...';
        } else {
            // Otherwise just truncate and add ellipsis
            return truncated + '...';
        }
    }

    return firstLine;
}

