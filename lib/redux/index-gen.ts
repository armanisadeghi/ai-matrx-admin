// Duplicate named export 'FormProvider' from './concepts/fields/component-examples/formcontext' is commented out.
// import { FormProvider } from './concepts/fields/component-examples/formcontext';
// Duplicate named export 'SmartForm' from './concepts/fields/component-examples/smartform' is commented out.
// import { SmartForm } from './concepts/fields/component-examples/smartform';
// Duplicate named export 'createEntitySelectors' from './entity/concepts/paramselectors.ts' is commented out.
// import { createEntitySelectors } from './entity/concepts/paramselectors.ts';
// Duplicate named export 'SortPayload' from './entity/types/statetypes.ts' is commented out.
// import { SortPayload } from './entity/types/statetypes.ts';
// Duplicate named export 'CacheState' from './entity/utils/statehelputils.ts' is commented out.
// import { CacheState } from './entity/utils/statehelputils.ts';
// Duplicate named export 'SelectionMode' from './entity/utils/statehelputils.ts' is commented out.
// import { SelectionMode } from './entity/utils/statehelputils.ts';
// Duplicate named export 'SelectionState' from './entity/utils/statehelputils.ts' is commented out.
// import { SelectionState } from './entity/utils/statehelputils.ts';
// Duplicate named export 'SelectionSummary' from './entity/utils/statehelputils.ts' is commented out.
// import { SelectionSummary } from './entity/utils/statehelputils.ts';
// Duplicate named export 'RootState' from './features/aichats/rootreducer.ts' is commented out.
// import { RootState } from './features/aichats/rootreducer.ts';
// Duplicate named export 'FormState' from './form/types.ts' is commented out.
// import { FormState } from './form/types.ts';
// Duplicate named export 'createPaginatedResponseSchema' from './middleware/apithunks.ts' is commented out.
// import { createPaginatedResponseSchema } from './middleware/apithunks.ts';
// Duplicate named export 'selectField' from './schema/globalcacheselectors.ts' is commented out.
// import { selectField } from './schema/globalcacheselectors.ts';
// Duplicate named export 'KeyMapping' from './schema/utils.ts' is commented out.
// import { KeyMapping } from './schema/utils.ts';
// Duplicate named export 'selectActiveChat' from './selectors/aichatselectors.ts' is commented out.
// import { selectActiveChat } from './selectors/aichatselectors.ts';
// Duplicate named export 'selectActiveChatId' from './selectors/aichatselectors.ts' is commented out.
// import { selectActiveChatId } from './selectors/aichatselectors.ts';
// Duplicate named export 'selectUser' from './selectors/userselectors.ts' is commented out.
// import { selectUser } from './selectors/userselectors.ts';
// Duplicate default export 'formSlice' from './slices/formslice.ts' is commented out.
// export { default as formSlice } from './slices/formslice.ts';
// Duplicate default export 'userSlice' from './slices/userslice.ts' is commented out.
// export { default as userSlice } from './slices/userslice.ts';
// Duplicate default export 'socketSlice' from './socket/slice.ts' is commented out.
// export { default as socketSlice } from './socket/slice.ts';
// Duplicate named export 'BrokerValue' from './socket/types.ts' is commented out.
// import { BrokerValue } from './socket/types.ts';
// Duplicate named export 'BrokerValue' from './socket/hooks/userecipesocket.ts' is commented out.
// import { BrokerValue } from './socket/hooks/userecipesocket.ts';
// Duplicate named export 'BrokerDefinitions' from './socket/hooks/userecipesocket.ts' is commented out.
// import { BrokerDefinitions } from './socket/hooks/userecipesocket.ts';
// Duplicate named export 'RecipeOverrides' from './socket/hooks/userecipesocket.ts' is commented out.
// import { RecipeOverrides } from './socket/hooks/userecipesocket.ts';
// Duplicate named export 'RecipeSocketTask' from './socket/hooks/userecipesocket.ts' is commented out.
// import { RecipeSocketTask } from './socket/hooks/userecipesocket.ts';
// Duplicate named export 'SocketTask' from './socket/hooks/userecipesocket.ts' is commented out.
// import { SocketTask } from './socket/hooks/userecipesocket.ts';
// Duplicate named export 'RecipeTaskData' from './socket/hooks/userecipesocket.ts' is commented out.
// import { RecipeTaskData } from './socket/hooks/userecipesocket.ts';
// Duplicate default export 'uiSlice' from './ui/uislice.ts' is commented out.
// export { default as uiSlice } from './ui/uislice.ts';
export { default as EntityLogger } from './entity/utils/entitylogger.ts';
export { default as chatSlice } from './features/aichats/chatslice.ts';
export { default as messageSlice } from './features/aichats/messageslice.ts';
export { default as rootReducer } from './features/aichats/rootreducer.ts';
export { default as uiSlice } from './features/aichats/uislice.ts';
export { default as brokerSlice } from './features/broker/brokerslice.ts';
export { default as configSlice } from './features/config/configslice.ts';
export { default as dynamicEventsSlice } from './features/dynamicevents/dynamiceventsslice.ts';
export { default as functionsSlice } from './features/functions/functionsslice.ts';
export { default as recipeSlice } from './features/recipes/recipeslice.ts';
export { default as settingsSlice } from './features/settings/settingsslice.ts';
export { default as socketSlice } from './features/socket/socketslice.ts';
export { default as userSlice } from './features/user/userslice.ts';
export { default as formSlice } from './form/slice.ts';
export { default as aiChatSlice } from './slices/aichatslice.ts';
export { default as flashcardChatSlice } from './slices/flashcardchatslice.ts';
export { default as layoutSlice } from './slices/layoutslice.ts';
export { default as notesSlice } from './slices/notesslice.ts';
export { default as tagsSlice } from './slices/tagsslice.ts';
export { default as testRoutesSlice } from './slices/testroutesslice.ts';
export { default as userPreferencesSlice } from './slices/userpreferencesslice.ts';
import { fetchWithFkIfk } from './api.ts';
import { getRegisteredFunctionView } from './api.ts';
import { fetchWithFk } from './api.ts';
import { fetchCustomRels } from './api.ts';
import { fetchWithIfk } from './api.ts';
import { useAppDispatch } from './hooks.ts';
import { useAppStore } from './hooks.ts';
import { useAppSelector } from './hooks.ts';
import { createRootReducer } from './rootreducer.ts';
import { AppThunk } from './store.ts';
import { AppDispatch } from './store.ts';
import { makeStore } from './store.ts';
import { AppStore } from './store.ts';
import { RootState } from './store.ts';
import { createFeatureActions } from './actions/featureactions.ts';
import { streamAIResponse } from './concepts/aistreamhandler.ts';
import { FETCH_ALL } from './concepts/databasesagas.ts';
import { FETCH_ONE } from './concepts/databasesagas.ts';
import { fetchAll } from './concepts/databasesagas.ts';
import { executeCustomQuery } from './concepts/databasesagas.ts';
import { DELETE } from './concepts/databasesagas.ts';
import { CREATE } from './concepts/databasesagas.ts';
import { fetchPaginated } from './concepts/databasesagas.ts';
import { create } from './concepts/databasesagas.ts';
import { UPDATE } from './concepts/databasesagas.ts';
import { EXECUTE_QUERY } from './concepts/databasesagas.ts';
import { update } from './concepts/databasesagas.ts';
import { FETCH_PAGINATED } from './concepts/databasesagas.ts';
import { deleteItem } from './concepts/databasesagas.ts';
import { fetchOne } from './concepts/databasesagas.ts';
import { createActionTypes } from './concepts/dynamicactions.ts';
import { createActions } from './concepts/dynamicactions.ts';
import { fieldAdapter } from './concepts/fields/fieldslice.ts';
import { fieldReducer } from './concepts/fields/fieldslice.ts';
import { createFieldId } from './concepts/fields/fieldutils.ts';
import { parseFieldId } from './concepts/fields/fieldutils.ts';
import { selectFieldValue } from './concepts/fields/selectors.ts';
import { selectRecordValues } from './concepts/fields/selectors.ts';
import { selectFormState } from './concepts/fields/selectors.ts';
import { selectField } from './concepts/fields/selectors.ts';
import { selectDirtyFields } from './concepts/fields/selectors.ts';
import { FieldState } from './concepts/fields/types.ts';
import { FieldIdentifier } from './concepts/fields/types.ts';
import { FormMode } from './concepts/fields/types.ts';
import { FormState } from './concepts/fields/types.ts';
import { EntitySmartField } from './concepts/fields/component-examples/entitysmartfield';
import { FormProvider } from './concepts/fields/component-examples/fieldcomponentexample';
import { SmartForm } from './concepts/fields/component-examples/fieldcomponentexample';
import { useForm } from './concepts/fields/component-examples/fieldcomponentexample';
import { SmartField } from './concepts/fields/component-examples/smartfield';
import { createPaginatedResponseSchema } from './dynamic/featureschema.ts';
import { featureSchemas } from './dynamic/featureschema.ts';
import { ModuleName } from './dynamic/moduleschema.ts';
import { BaseModuleSchema } from './dynamic/moduleschema.ts';
import { moduleSchemas } from './dynamic/moduleschema.ts';
import { ModuleSchema } from './dynamic/moduleschema.ts';
import { moduleSystemDefaults } from './dynamic/moduleschema.ts';
import { createFeatureNormalizer } from './dynamic/normalizers.ts';
import { isSelectionAction } from './entity/actions.ts';
import { ExecuteCustomQueryPayload } from './entity/actions.ts';
import { FetchQuickReferencePayload } from './entity/actions.ts';
import { EntityRecordMapPayload } from './entity/actions.ts';
import { FetchMode } from './entity/actions.ts';
import { EntityRecordArrayPayload } from './entity/actions.ts';
import { getOrFetchSelectedRecordsPayload } from './entity/actions.ts';
import { EntityRecordPayload } from './entity/actions.ts';
import { FetchOneWithFkIfkPayload } from './entity/actions.ts';
import { DeleteRecordPayload } from './entity/actions.ts';
import { FetchOnePayload } from './entity/actions.ts';
import { FetchRecordsPayload } from './entity/actions.ts';
import { EntityActions } from './entity/actions.ts';
import { SortPayload } from './entity/actions.ts';
import { UpdateRecordPayload } from './entity/actions.ts';
import { FetchAllPayload } from './entity/actions.ts';
import { CreateRecordPayload } from './entity/actions.ts';
import { SelectionPayload } from './entity/actions.ts';
import { FetchRecordsSuccessPayload } from './entity/actions.ts';
import { getEntitySlice } from './entity/entityslice.ts';
import { initializeEntitySlice } from './entity/entityslice.ts';
import { entitySliceRegistry } from './entity/entityslice.ts';
import { initializeEntitySlices } from './entity/entityslice.ts';
import { createEntitySelectors } from './entity/selectors.ts';
import { createEntitySlice } from './entity/slice.ts';
import { createCrossEntitySelectorWithRelationships } from './entity/concepts/crossentityselector.ts';
import { makeEntitySelectors } from './entity/concepts/paramentityselectors.ts';
import { useGetOneBackup } from './entity/concepts/paramselectors.ts';
import { EntitySelectors } from './entity/concepts/paramselectors.ts';
import { useGetOnePkAndDisplayField } from './entity/concepts/paramselectors.ts';
import { useGetOneDataItem } from './entity/concepts/paramselectors.ts';
import { entityDefaultSettings } from './entity/constants/defaults.ts';
import { useActiveRecords } from './entity/hooks/useactiverecords.ts';
import { useEntity } from './entity/hooks/useentity.ts';
import { useEntityAnalyzer } from './entity/hooks/useentityanalyzer.ts';
import { useEntityCrud } from './entity/hooks/useentitycrud.ts';
import { UseEntityFormState } from './entity/hooks/useentityform.ts';
import { useEntityForm } from './entity/hooks/useentityform.ts';
import { useEntityMetrics } from './entity/hooks/useentitymetrics.ts';
import { UseEntitySelectionReturn } from './entity/hooks/useentityselection.ts';
import { useEntitySelection } from './entity/hooks/useentityselection.ts';
import { useEntityToasts } from './entity/hooks/useentitytoasts.ts';
import { useEntityValidation } from './entity/hooks/useentityvalidation.ts';
import { useFetchRecords } from './entity/hooks/usefetchrecords.ts';
import { useFetchRelated } from './entity/hooks/usefetchrelated.ts';
import { ViewModeOption } from './entity/hooks/usefetchrelated.ts';
import { EntityBaseFieldProps } from './entity/hooks/usefetchrelated.ts';
import { useFieldVisibility } from './entity/hooks/usefieldvisibility.ts';
import { UseQuickReferenceReturn } from './entity/hooks/usequickreference.ts';
import { useQuickReference } from './entity/hooks/usequickreference.ts';
import { useValidatedUpdateOrCreate } from './entity/hooks/usevalidatedupdateorcreate.ts';
import { handleFetchMetrics } from './entity/sagas/sagahandlers.ts';
import { handleGetOrFetchSelectedRecords } from './entity/sagas/sagahandlers.ts';
import { handleFetchAll } from './entity/sagas/sagahandlers.ts';
import { handleCreate } from './entity/sagas/sagahandlers.ts';
import { handleFetchOneAdvanced } from './entity/sagas/sagahandlers.ts';
import { handleRefreshData } from './entity/sagas/sagahandlers.ts';
import { handleHistoryUpdate } from './entity/sagas/sagahandlers.ts';
import { handleUpdate } from './entity/sagas/sagahandlers.ts';
import { handleFetchQuickReference } from './entity/sagas/sagahandlers.ts';
import { handleExecuteCustomQuery } from './entity/sagas/sagahandlers.ts';
import { handleFetchOne } from './entity/sagas/sagahandlers.ts';
import { handleCacheInvalidation } from './entity/sagas/sagahandlers.ts';
import { handleFetchSelectedRecords } from './entity/sagas/sagahandlers.ts';
import { handleBatchOperation } from './entity/sagas/sagahandlers.ts';
import { handleFetchPaginated } from './entity/sagas/sagahandlers.ts';
import { handleDelete } from './entity/sagas/sagahandlers.ts';
import { handleFilterChange } from './entity/sagas/sagahandlers.ts';
import { handleSubscriptionEvents } from './entity/sagas/sagahandlers.ts';
import { WithFullConversionSagaContext } from './entity/sagas/sagahelpers.ts';
import { QueryOptions } from './entity/sagas/sagahelpers.ts';
import { BaseSagaContext } from './entity/sagas/sagahelpers.ts';
import { getSliceActions } from './entity/sagas/sagahelpers.ts';
import { QueryOptionsReturn } from './entity/sagas/sagahelpers.ts';
import { WithFullConversionSagaHandler } from './entity/sagas/sagahelpers.ts';
import { transformDatabaseResponse } from './entity/sagas/sagahelpers.ts';
import { optionalActionKeys } from './entity/sagas/sagahelpers.ts';
import { FlexibleQueryOptions } from './entity/sagas/sagahelpers.ts';
import { SagaHandler } from './entity/sagas/sagahelpers.ts';
import { UnifiedDatabaseObject } from './entity/sagas/sagahelpers.ts';
import { watchEntitySagas } from './entity/sagas/watchersaga.ts';
import { RecordOperation } from './entity/types/statetypes.ts';
import { FlagStatusOptions } from './entity/types/statetypes.ts';
import { LoadingState } from './entity/types/statetypes.ts';
import { EntityStateField } from './entity/types/statetypes.ts';
import { CacheState } from './entity/types/statetypes.ts';
import { SelectionMode } from './entity/types/statetypes.ts';
import { EntityOperationFlags } from './entity/types/statetypes.ts';
import { EntityState } from './entity/types/statetypes.ts';
import { EntityOperations } from './entity/types/statetypes.ts';
import { OperationCallback } from './entity/types/statetypes.ts';
import { HistoryEntry } from './entity/types/statetypes.ts';
import { QuickReferenceState } from './entity/types/statetypes.ts';
import { HistoryState } from './entity/types/statetypes.ts';
import { SelectionState } from './entity/types/statetypes.ts';
import { EntityRecordMap } from './entity/types/statetypes.ts';
import { MatrxRecordId } from './entity/types/statetypes.ts';
import { BatchOperationPayload } from './entity/types/statetypes.ts';
import { ComponentProps } from './entity/types/statetypes.ts';
import { ErrorResult } from './entity/types/statetypes.ts';
import { EntityRecordArray } from './entity/types/statetypes.ts';
import { PaginationState } from './entity/types/statetypes.ts';
import { EntityOperationMode } from './entity/types/statetypes.ts';
import { EntityRecord } from './entity/types/statetypes.ts';
import { SelectionSummary } from './entity/types/statetypes.ts';
import { EntityStateFieldWithValueComplex } from './entity/types/statetypes.ts';
import { EntityDataWithId } from './entity/types/statetypes.ts';
import { PrimaryKeyMetadata } from './entity/types/statetypes.ts';
import { EntityMetrics } from './entity/types/statetypes.ts';
import { DisplayFieldMetadata } from './entity/types/statetypes.ts';
import { CallbackResult } from './entity/types/statetypes.ts';
import { SuccessResult } from './entity/types/statetypes.ts';
import { FilterCondition } from './entity/types/statetypes.ts';
import { FilterState } from './entity/types/statetypes.ts';
import { EntityFieldWithValue } from './entity/types/statetypes.ts';
import { EntityFlags } from './entity/types/statetypes.ts';
import { QuickReferenceRecord } from './entity/types/statetypes.ts';
import { FilterPayload } from './entity/types/statetypes.ts';
import { SubscriptionConfig } from './entity/types/statetypes.ts';
import { EntityMetadata } from './entity/types/statetypes.ts';
import { EntityStateFieldWithValue } from './entity/types/statetypes.ts';
import { EntityError } from './entity/types/statetypes.ts';
import { ExtractType } from './entity/types/statetypes.ts';
import { getActionActions } from './entity/utils/byname.ts';
import { getDataOutputComponentReducer } from './entity/utils/byname.ts';
import { getAiEndpointActions } from './entity/utils/byname.ts';
import { getFlashcardHistoryActions } from './entity/utils/byname.ts';
import { getEmailsReducer } from './entity/utils/byname.ts';
import { getFlashcardSetsActions } from './entity/utils/byname.ts';
import { getRecipeProcessorActions } from './entity/utils/byname.ts';
import { getAiModelActions } from './entity/utils/byname.ts';
import { getUserPreferencesActions } from './entity/utils/byname.ts';
import { getDataInputComponentActions } from './entity/utils/byname.ts';
import { getEmailsActions } from './entity/utils/byname.ts';
import { getRecipeProcessorReducer } from './entity/utils/byname.ts';
import { getExtractorActions } from './entity/utils/byname.ts';
import { getAutomationBoundaryBrokerActions } from './entity/utils/byname.ts';
import { getRecipeBrokerActions } from './entity/utils/byname.ts';
import { getRecipeDisplayReducer } from './entity/utils/byname.ts';
import { getRecipeReducer } from './entity/utils/byname.ts';
import { getSystemFunctionReducer } from './entity/utils/byname.ts';
import { getArgActions } from './entity/utils/byname.ts';
import { getFlashcardSetRelationsActions } from './entity/utils/byname.ts';
import { getToolActions } from './entity/utils/byname.ts';
import { getAutomationMatrixReducer } from './entity/utils/byname.ts';
import { getRecipeToolReducer } from './entity/utils/byname.ts';
import { getTransformerActions } from './entity/utils/byname.ts';
import { getRecipeFunctionActions } from './entity/utils/byname.ts';
import { getDisplayOptionReducer } from './entity/utils/byname.ts';
import { getRecipeFunctionReducer } from './entity/utils/byname.ts';
import { getDisplayOptionActions } from './entity/utils/byname.ts';
import { getRecipeModelActions } from './entity/utils/byname.ts';
import { getFlashcardImagesActions } from './entity/utils/byname.ts';
import { getRegisteredFunctionReducer } from './entity/utils/byname.ts';
import { getReducers } from './entity/utils/byname.ts';
import { getEntityActions } from './entity/utils/byname.ts';
import { getActions } from './entity/utils/byname.ts';
import { getFlashcardDataReducer } from './entity/utils/byname.ts';
import { getRecipeModelReducer } from './entity/utils/byname.ts';
import { getToolReducer } from './entity/utils/byname.ts';
import { getArgReducer } from './entity/utils/byname.ts';
import { getFlashcardSetsReducer } from './entity/utils/byname.ts';
import { getProcessorActions } from './entity/utils/byname.ts';
import { getAiModelReducer } from './entity/utils/byname.ts';
import { getAutomationBoundaryBrokerReducer } from './entity/utils/byname.ts';
import { getBrokerActions } from './entity/utils/byname.ts';
import { getExtractorReducer } from './entity/utils/byname.ts';
import { getFlashcardSetRelationsReducer } from './entity/utils/byname.ts';
import { getRecipeToolActions } from './entity/utils/byname.ts';
import { getTransformerReducer } from './entity/utils/byname.ts';
import { getRecipeDisplayActions } from './entity/utils/byname.ts';
import { getFlashcardImagesReducer } from './entity/utils/byname.ts';
import { getRecipeActions } from './entity/utils/byname.ts';
import { getRecipeBrokerReducer } from './entity/utils/byname.ts';
import { getFlashcardHistoryReducer } from './entity/utils/byname.ts';
import { getFlashcardDataActions } from './entity/utils/byname.ts';
import { getSystemFunctionActions } from './entity/utils/byname.ts';
import { getEntityReducers } from './entity/utils/byname.ts';
import { getBrokerReducer } from './entity/utils/byname.ts';
import { getAiEndpointReducer } from './entity/utils/byname.ts';
import { getRegisteredFunctionActions } from './entity/utils/byname.ts';
import { getActionReducer } from './entity/utils/byname.ts';
import { getDataOutputComponentActions } from './entity/utils/byname.ts';
import { getDataInputComponentReducer } from './entity/utils/byname.ts';
import { getProcessorReducer } from './entity/utils/byname.ts';
import { getAutomationMatrixActions } from './entity/utils/byname.ts';
import { getUserPreferencesReducer } from './entity/utils/byname.ts';
import { ModeTransitionResult } from './entity/utils/crudopsmanagement.ts';
import { ENTITY_DEFAULTS } from './entity/utils/initialize.ts';
import { createInitialState } from './entity/utils/initialize.ts';
import { extractFieldsFromSchema } from './entity/utils/initialize.ts';
import { createRecordKey } from './entity/utils/statehelputils.ts';
import { handleSingleRecordOperation } from './entity/utils/statehelputils.ts';
import { determineOperationContext } from './entity/utils/statehelputils.ts';
import { removeSelections } from './entity/utils/statehelputils.ts';
import { setStateIsModified } from './entity/utils/statehelputils.ts';
import { updateUnsavedRecord } from './entity/utils/statehelputils.ts';
import { resetStateIsModified } from './entity/utils/statehelputils.ts';
import { updateSelectionMode } from './entity/utils/statehelputils.ts';
import { parseMultipleMatrxRecordIds } from './entity/utils/statehelputils.ts';
import { validateBasicStateTransition } from './entity/utils/statehelputils.ts';
import { isEntityData } from './entity/utils/statehelputils.ts';
import { createMatrxRecordId } from './entity/utils/statehelputils.ts';
import { handleOperationModeChange } from './entity/utils/statehelputils.ts';
import { switchToMultipleSelectionMode } from './entity/utils/statehelputils.ts';
import { setLoading } from './entity/utils/statehelputils.ts';
import { MultiSelectSingleChangeContext } from './entity/utils/statehelputils.ts';
import { setSuccess } from './entity/utils/statehelputils.ts';
import { addRecordToSelection } from './entity/utils/statehelputils.ts';
import { createWhereClause } from './entity/utils/statehelputils.ts';
import { handleMultiSelectSingleChange } from './entity/utils/statehelputils.ts';
import { removeFromUnsavedRecords } from './entity/utils/statehelputils.ts';
import { handleComplexMultiRecordOperation } from './entity/utils/statehelputils.ts';
import { removeRecordFromSelection } from './entity/utils/statehelputils.ts';
import { OperationContextType } from './entity/utils/statehelputils.ts';
import { handleSelectionForDeletedRecord } from './entity/utils/statehelputils.ts';
import { switchToSingleSelectionMode } from './entity/utils/statehelputils.ts';
import { applyFilters } from './entity/utils/statehelputils.ts';
import { switchToNoSelectionMode } from './entity/utils/statehelputils.ts';
import { toggleSelectionMode } from './entity/utils/statehelputils.ts';
import { clearUnsavedRecords } from './entity/utils/statehelputils.ts';
import { clearError } from './entity/utils/statehelputils.ts';
import { createSelectionHelper } from './entity/utils/statehelputils.ts';
import { SingleRecordContext } from './entity/utils/statehelputils.ts';
import { SerializableRecord } from './entity/utils/statehelputils.ts';
import { addToUnsavedRecords } from './entity/utils/statehelputils.ts';
import { isSerializableValue } from './entity/utils/statehelputils.ts';
import { validateOperationTransition } from './entity/utils/statehelputils.ts';
import { getRecordIdByRecord } from './entity/utils/statehelputils.ts';
import { hasPrimaryKeyValues } from './entity/utils/statehelputils.ts';
import { findBestActiveRecord } from './entity/utils/statehelputils.ts';
import { parseMatrxRecordId } from './entity/utils/statehelputils.ts';
import { validateComplexStateTransition } from './entity/utils/statehelputils.ts';
import { parseRecordKeys } from './entity/utils/statehelputils.ts';
import { removeActiveRecord } from './entity/utils/statehelputils.ts';
import { setError } from './entity/utils/statehelputils.ts';
import { OperationContextState } from './entity/utils/statehelputils.ts';
import { setSpecificSelectionMode } from './entity/utils/statehelputils.ts';
import { generateTemporaryRecordId } from './entity/utils/statehelputils.ts';
import { createMultipleMatrxRecordIds } from './entity/utils/statehelputils.ts';
import { parseRecordKey } from './entity/utils/statehelputils.ts';
import { setNewActiveRecord } from './entity/utils/statehelputils.ts';
import { resetFlag } from './entity/utils/statehelputils.ts';
import { MultiSelectMultiChangeContext } from './entity/utils/statehelputils.ts';
import { isMatrxRecordId } from './entity/utils/statehelputils.ts';
import { mapFieldDataToFormField } from './entity/utils/tempformhelper.ts';
import { runEntityValidation } from './entity/utils/validation.ts';
import { fetchChats } from './features/aichats/chatslice.ts';
import { startNewChat } from './features/aichats/chatslice.ts';
import { MessageState } from './features/aichats/messageslice.ts';
import { addMessagesToChat } from './features/aichats/messageslice.ts';
import { fetchMessagesForChat } from './features/aichats/messageslice.ts';
import { updateAssistantMessage } from './features/aichats/messageslice.ts';
import { selectMessagesByChatId } from './features/aichats/selectors.ts';
import { selectActiveChat } from './features/aichats/selectors.ts';
import { selectChatTransition } from './features/aichats/selectors.ts';
import { selectChatSummaries } from './features/aichats/selectors.ts';
import { selectSettings } from './features/aichats/selectors.ts';
import { selectQuickChatSettings } from './features/aichats/selectors.ts';
import { selectMessageFetchStatus } from './features/aichats/selectors.ts';
import { selectIsNewChat } from './features/aichats/selectors.ts';
import { selectAIModelSettings } from './features/aichats/selectors.ts';
import { selectActiveChatId } from './features/aichats/selectors.ts';
import { selectUser } from './features/aichats/selectors.ts';
import { selectActiveChatMessages } from './features/aichats/selectors.ts';
import { brokerData } from './features/broker/data.ts';
import { getBrokerTemplate } from './features/broker/selectors.ts';
import { getBrokerValuesForSubmission } from './features/broker/selectors.ts';
import { getReadyBrokerInstancesForRecipe } from './features/broker/selectors.ts';
import { getBrokerInstancesForRecipe } from './features/broker/selectors.ts';
import { areAllBrokersReadyForRecipe } from './features/broker/selectors.ts';
import { getAllBrokerTemplates } from './features/broker/selectors.ts';
import { Broker } from './features/broker/types.ts';
import { BrokerValue } from './features/broker/types.ts';
import { BrokerInstance } from './features/broker/types.ts';
import { requestTaskOptions } from './features/dynamicevents/data.ts';
import { requestEventOptions } from './features/dynamicevents/data.ts';
import { removeDynamicEventListener } from './features/dynamicevents/dynamiceventsthunks.ts';
import { setupDynamicEventListener } from './features/dynamicevents/dynamiceventsthunks.ts';
import { submitEvent } from './features/dynamicevents/dynamiceventsthunks.ts';
import { submitTaskData } from './features/dynamicevents/dynamiceventsthunks.ts';
import { EventDetails } from './features/dynamicevents/types.ts';
import { DynamicEvent } from './features/dynamicevents/types.ts';
import { TaskDetails } from './features/dynamicevents/types.ts';
import { selectFunctionsError } from './features/functions/functionsselectors.ts';
import { selectFunctionsLoading } from './features/functions/functionsselectors.ts';
import { selectFunctionsByTag } from './features/functions/functionsselectors.ts';
import { selectAllFunctions } from './features/functions/functionsselectors.ts';
import { selectFunctionById } from './features/functions/functionsselectors.ts';
import { updateFunctionThunk } from './features/functions/functionsthunks.ts';
import { fetchFunctions } from './features/functions/functionsthunks.ts';
import { deleteFunctionThunk } from './features/functions/functionsthunks.ts';
import { createFunction } from './features/functions/functionsthunks.ts';
import { Arg } from './features/functions/functionstypes.ts';
import { FunctionsState } from './features/functions/functionstypes.ts';
import { Function } from './features/functions/functionstypes.ts';
import { Return } from './features/functions/functionstypes.ts';
import { recipeData } from './features/recipes/recipedata.ts';
import { RecipeInstance } from './features/recipes/recipeslice.ts';
import { initializeRecipe } from './features/recipes/recipethunks.ts';
import { submitRecipe } from './features/recipes/recipethunks.ts';
import { getActiveRecipeIds } from './features/recipes/selectors.ts';
import { getRecipeInstance } from './features/recipes/selectors.ts';
import { getActiveRecipeInstances } from './features/recipes/selectors.ts';
import { Overrides } from './features/recipes/types.ts';
import { SimpleRecipeData } from './features/recipes/types.ts';
import { FlatRecipeData } from './features/recipes/types.ts';
import { initializeSocket } from './features/socket/socketactions.ts';
import { emitSocketMessage } from './features/socket/socketactions.ts';
import { authenticateSocket } from './features/socket/socketactions.ts';
import { startSocketTask } from './features/socket/socketactions.ts';
import { authenticateUser } from './features/user/useractions.ts';
import { FormFieldDependency } from './form/types.ts';
import { useEntityFormOld } from './form/useentityform.ts';
import { useSchemaForm } from './form/useschemaform.ts';
import { RelatedTextarea } from './form/advanced-fields/relationshipcomponents';
import { RelatedInput } from './form/advanced-fields/relationshipcomponents';
import { createApiThunks } from './middleware/apithunks.ts';
import { preferencesMiddleware } from './middleware/preferencesmiddleware.ts';
import { loadPreferences } from './middleware/preferencesmiddleware.ts';
import { createSchemaSagas } from './middleware/sagas.ts';
import { createFeatureSagas } from './middleware/sagas.ts';
import { createRootSaga } from './sagas/rootsaga.ts';
import { convertObjectToPretty } from './schema/formatconverters.ts';
import { convertObjectToCanonical } from './schema/formatconverters.ts';
import { convertToFormat } from './schema/formatconverters.ts';
import { convertObjectToFrontend } from './schema/formatconverters.ts';
import { convertObjectToBackend } from './schema/formatconverters.ts';
import { convertQueryToDatabase } from './schema/formatconverters.ts';
import { convertObjectToDatabase } from './schema/formatconverters.ts';
import { selectEntityNameToDatabase } from './schema/globalcacheselectors.ts';
import { selectFieldAnyName } from './schema/globalcacheselectors.ts';
import { selectFormattedEntityOptions } from './schema/globalcacheselectors.ts';
import { selectPrettyFieldMapping } from './schema/globalcacheselectors.ts';
import { selectEntityAnyName } from './schema/globalcacheselectors.ts';
import { QueryConversionPayload } from './schema/globalcacheselectors.ts';
import { selectPrettyConversion } from './schema/globalcacheselectors.ts';
import { UnifiedQueryOptions } from './schema/globalcacheselectors.ts';
import { selectPrettyEntityMapping } from './schema/globalcacheselectors.ts';
import { selectEntities } from './schema/globalcacheselectors.ts';
import { selectFieldNameToDatabase } from './schema/globalcacheselectors.ts';
import { selectFrontendConversion } from './schema/globalcacheselectors.ts';
import { selectFieldDatabaseName } from './schema/globalcacheselectors.ts';
import { selectEntityNames } from './schema/globalcacheselectors.ts';
import { selectFields } from './schema/globalcacheselectors.ts';
import { selectFieldBackendName } from './schema/globalcacheselectors.ts';
import { makeSelectEntityNameByFormat } from './schema/globalcacheselectors.ts';
import { selectAnyFieldMapping } from './schema/globalcacheselectors.ts';
import { selectUnknownToAnyObjectFormatConversion } from './schema/globalcacheselectors.ts';
import { selectEntityDisplayField } from './schema/globalcacheselectors.ts';
import { selectEntityNameFormats } from './schema/globalcacheselectors.ts';
import { selectEntityNameToCanonical } from './schema/globalcacheselectors.ts';
import { selectUnifiedDatabaseObjectConversion2 } from './schema/globalcacheselectors.ts';
import { selectPayloadOptionsDatabaseConversion } from './schema/globalcacheselectors.ts';
import { selectIsInitialized } from './schema/globalcacheselectors.ts';
import { selectEntityFrontendName } from './schema/globalcacheselectors.ts';
import { selectEntityPrimaryKeyField } from './schema/globalcacheselectors.ts';
import { selectEntityDisplayFieldMetadata } from './schema/globalcacheselectors.ts';
import { selectFieldNameToCanonical } from './schema/globalcacheselectors.ts';
import { selectFieldSchema } from './schema/globalcacheselectors.ts';
import { selectEntityNameToBackend } from './schema/globalcacheselectors.ts';
import { selectQueryDatabaseConversion } from './schema/globalcacheselectors.ts';
import { selectRelatedEntities } from './schema/globalcacheselectors.ts';
import { selectAnyObjectFormatConversion } from './schema/globalcacheselectors.ts';
import { selectUnifiedQueryDatabaseConversion } from './schema/globalcacheselectors.ts';
import { selectSchema } from './schema/globalcacheselectors.ts';
import { selectEntity } from './schema/globalcacheselectors.ts';
import { selectFieldNameFormats } from './schema/globalcacheselectors.ts';
import { selectFieldNameMappingForEntity } from './schema/globalcacheselectors.ts';
import { selectAnyEntityMapping } from './schema/globalcacheselectors.ts';
import { selectBackendConversion } from './schema/globalcacheselectors.ts';
import { selectReplaceKeysInObject } from './schema/globalcacheselectors.ts';
import { selectEntityRelationships } from './schema/globalcacheselectors.ts';
import { selectEntityDatabaseName } from './schema/globalcacheselectors.ts';
import { selectEntitySchema } from './schema/globalcacheselectors.ts';
import { selectEntityFieldNameToDatabaseMap } from './schema/globalcacheselectors.ts';
import { safeSelectReplaceKeysInObjectWithErrorControl } from './schema/globalcacheselectors.ts';
import { selectFieldFrontendName } from './schema/globalcacheselectors.ts';
import { selectAllFieldPrettyNames } from './schema/globalcacheselectors.ts';
import { selectFieldsByEntity } from './schema/globalcacheselectors.ts';
import { selectFieldNameToBackend } from './schema/globalcacheselectors.ts';
import { selectEntityPrettyName } from './schema/globalcacheselectors.ts';
import { selectEntityFields } from './schema/globalcacheselectors.ts';
import { KeyMapping } from './schema/globalcacheselectors.ts';
import { selectEntityBackendName } from './schema/globalcacheselectors.ts';
import { selectConvertDataFormat } from './schema/globalcacheselectors.ts';
import { selectFieldPrettyName } from './schema/globalcacheselectors.ts';
import { selectDatabaseConversion } from './schema/globalcacheselectors.ts';
import { selectUnifiedDatabaseObjectConversion } from './schema/globalcacheselectors.ts';
import { selectEntityCanonicalName } from './schema/globalcacheselectors.ts';
import { selectEntityMetadata } from './schema/globalcacheselectors.ts';
import { selectCanonicalConversion } from './schema/globalcacheselectors.ts';
import { selectEntityPrimaryKeyMetadata } from './schema/globalcacheselectors.ts';
import { GlobalCacheState } from './schema/globalcacheslice.ts';
import { doesFieldExist } from './schema/globalcacheslice.ts';
import { createGlobalCacheSlice } from './schema/globalcacheslice.ts';
import { doesEntityExist } from './schema/globalcacheslice.ts';
import { useSchema } from './schema/useschema.ts';
import { convertDataFormat } from './schema/utils.ts';
import { createKeyMappingFromFormat } from './schema/utils.ts';
import { replaceKeysInObject } from './schema/utils.ts';
import { replaceKeysInString } from './schema/utils.ts';
import { SchemaField } from './schema/concepts/types.ts';
import { UnifiedSchemaAll } from './schema/concepts/types.ts';
import { selectVisibleMessagesForChat } from './selectors/aichatselectors.ts';
import { selectChatsByUserId } from './selectors/aichatselectors.ts';
import { selectVisibleMessagesForModule } from './selectors/aichatselectors.ts';
import { selectVisibleMessagesForJob } from './selectors/aichatselectors.ts';
import { selectChatById } from './selectors/aichatselectors.ts';
import { selectChatsByModule } from './selectors/aichatselectors.ts';
import { selectChatsByJob } from './selectors/aichatselectors.ts';
import { selectAllVisibleMessagesForUser } from './selectors/aichatselectors.ts';
import { selectVisibleMessagesForActiveChat } from './selectors/aichatselectors.ts';
import { selectAllChats } from './selectors/aichatselectors.ts';
import { createFeatureSelectors } from './selectors/featureselectors.ts';
import { selectPerformanceCounts } from './selectors/flashcardselectors.ts';
import { selectFlashcardById } from './selectors/flashcardselectors.ts';
import { selectAllFlashcards } from './selectors/flashcardselectors.ts';
import { selectCurrentIndex } from './selectors/flashcardselectors.ts';
import { selectActiveFlashcard } from './selectors/flashcardselectors.ts';
import { selectAllFlashcardData } from './selectors/flashcardselectors.ts';
import { selectActiveFlashcardChat } from './selectors/flashcardselectors.ts';
import { ModuleSelectors } from './selectors/moduleselectors.ts';
import { createModuleSelectors } from './selectors/moduleselectors.ts';
import { selectActiveUserName } from './selectors/userselectors.ts';
import { selectFullUserData } from './selectors/userselectors.ts';
import { selectUserAvatarUrl } from './selectors/userselectors.ts';
import { selectActiveUserId } from './selectors/userselectors.ts';
import { selectActiveUserInfo } from './selectors/userselectors.ts';
import { selectUserProvider } from './selectors/userselectors.ts';
import { selectUserProviders } from './selectors/userselectors.ts';
import { selectUserPhone } from './selectors/userselectors.ts';
import { selectUserEmailConfirmedAt } from './selectors/userselectors.ts';
import { selectUserPreferredUsername } from './selectors/userselectors.ts';
import { selectUserId } from './selectors/userselectors.ts';
import { selectAuthToken } from './selectors/userselectors.ts';
import { selectUserIdentities } from './selectors/userselectors.ts';
import { selectUserFullName } from './selectors/userselectors.ts';
import { selectUserEmail } from './selectors/userselectors.ts';
import { selectUserName } from './selectors/userselectors.ts';
import { selectUserMetadata } from './selectors/userselectors.ts';
import { selectUserPicture } from './selectors/userselectors.ts';
import { selectActiveUserAvatarUrl } from './selectors/userselectors.ts';
import { selectUserLastSignInAt } from './selectors/userselectors.ts';
import { selectUserAppMetadata } from './selectors/userselectors.ts';
import { createFeatureSlice } from './slices/featureslicecreator.ts';
import { FlashcardChatState } from './slices/flashcardchatslice.ts';
import { FlashcardState } from './slices/flashcardchatslice.ts';
import { createModuleSlice } from './slices/moduleslicecreator.ts';
import { ModuleActions } from './slices/moduleslicecreator.ts';
import { aiCallSuccess } from './socket/actions.ts';
import { aiCallFailure } from './socket/actions.ts';
import { socketConnected } from './socket/actions.ts';
import { startAICall } from './socket/actions.ts';
import { socketInitialized } from './socket/actions.ts';
import { socketError } from './socket/actions.ts';
import { socketDisconnected } from './socket/actions.ts';
import { socketConnecting } from './socket/actions.ts';
import { socketMiddleware } from './socket/socketmiddleware.ts';
import { ServiceEventArray } from './socket/types.ts';
import { ServiceEvent } from './socket/types.ts';
import { EventTaskOptions } from './socket/types.ts';
import { ServiceKey } from './socket/types.ts';
import { NamespaceKey } from './socket/types.ts';
import { Service } from './socket/types.ts';
import { SocketTask } from './socket/types.ts';
import { hasEvents } from './socket/types.ts';
import { EventWithTasks } from './socket/types.ts';
import { SocketTaskConfig } from './socket/types.ts';
import { ServiceWithEvents } from './socket/types.ts';
import { SocketService } from './socket/types.ts';
import { Namespace } from './socket/types.ts';
import { NamespaceValue } from './socket/types.ts';
import { EventTaskValue } from './socket/types.ts';
import { SocketEvent } from './socket/types.ts';
import { ServiceHierarchy } from './socket/types.ts';
import { ServiceEventMap } from './socket/types.ts';
import { AvailableEvents } from './socket/types.ts';
import { SocketNamespace } from './socket/types.ts';
import { RecipeOverrides } from './socket/types.ts';
import { SocketBroker } from './socket/types.ts';
import { EventTaskMap } from './socket/types.ts';
import { AvailableTasks } from './socket/types.ts';
import { BrokerDefinitions } from './socket/types.ts';
import { SocketState } from './socket/types.ts';
import { RecipeSocketTask } from './socket/types.ts';
import { ServiceValue } from './socket/types.ts';
import { RecipeTaskData } from './socket/types.ts';
import { useInitializeSocket } from './socket/useinitializesocket.ts';
import { RECIPE_DATABASE } from './socket/constants/recipe-data.ts';
import { SERVICE_EVENTS } from './socket/constants/task-context.ts';
import { TASK_CONTEXT_VALIDATION } from './socket/constants/task-context.ts';
import { EVENT_TASKS } from './socket/constants/task-context.ts';
import { TASK_MAP } from './socket/constants/task-context.ts';
import { AVAILABLE_SERVICES } from './socket/constants/task-context.ts';
import { AVAILABLE_NAMESPACES } from './socket/constants/task-context.ts';
import { useRecipeSocket } from './socket/hooks/userecipesocket.ts';
import { useTaskValidation } from './socket/hooks/usetaskvalidation.ts';
import { selectUIErrors } from './ui/uiselectors.ts';
import { selectCurrentData } from './ui/uiselectors.ts';
import { selectCurrentSchema } from './ui/uiselectors.ts';
import { loadSchemaForContext } from './ui/uithunks.ts';
import { loadDataForSchema } from './ui/uithunks.ts';
export { AVAILABLE_NAMESPACES, AVAILABLE_SERVICES, AppDispatch, AppStore, AppThunk, Arg, AvailableEvents, AvailableTasks, BaseModuleSchema, BaseSagaContext, BatchOperationPayload, Broker, BrokerDefinitions, BrokerInstance, BrokerValue, CREATE, CacheState, CallbackResult, ComponentProps, CreateRecordPayload, DELETE, DeleteRecordPayload, DisplayFieldMetadata, DynamicEvent, ENTITY_DEFAULTS, EVENT_TASKS, EXECUTE_QUERY, EntityActions, EntityBaseFieldProps, EntityDataWithId, EntityError, EntityFieldWithValue, EntityFlags, EntityMetadata, EntityMetrics, EntityOperationFlags, EntityOperationMode, EntityOperations, EntityRecord, EntityRecordArray, EntityRecordArrayPayload, EntityRecordMap, EntityRecordMapPayload, EntityRecordPayload, EntitySelectors, EntitySmartField, EntityState, EntityStateField, EntityStateFieldWithValue, EntityStateFieldWithValueComplex, ErrorResult, EventDetails, EventTaskMap, EventTaskOptions, EventTaskValue, EventWithTasks, ExecuteCustomQueryPayload, ExtractType, FETCH_ALL, FETCH_ONE, FETCH_PAGINATED, FetchAllPayload, FetchMode, FetchOnePayload, FetchOneWithFkIfkPayload, FetchQuickReferencePayload, FetchRecordsPayload, FetchRecordsSuccessPayload, FieldIdentifier, FieldState, FilterCondition, FilterPayload, FilterState, FlagStatusOptions, FlashcardChatState, FlashcardState, FlatRecipeData, FlexibleQueryOptions, FormFieldDependency, FormMode, FormProvider, FormState, Function, FunctionsState, GlobalCacheState, HistoryEntry, HistoryState, KeyMapping, LoadingState, MatrxRecordId, MessageState, ModeTransitionResult, ModuleActions, ModuleName, ModuleSchema, ModuleSelectors, MultiSelectMultiChangeContext, MultiSelectSingleChangeContext, Namespace, NamespaceKey, NamespaceValue, OperationCallback, OperationContextState, OperationContextType, Overrides, PaginationState, PrimaryKeyMetadata, QueryConversionPayload, QueryOptions, QueryOptionsReturn, QuickReferenceRecord, QuickReferenceState, RECIPE_DATABASE, RecipeInstance, RecipeOverrides, RecipeSocketTask, RecipeTaskData, RecordOperation, RelatedInput, RelatedTextarea, Return, RootState, SERVICE_EVENTS, SagaHandler, SchemaField, SelectionMode, SelectionPayload, SelectionState, SelectionSummary, SerializableRecord, Service, ServiceEvent, ServiceEventArray, ServiceEventMap, ServiceHierarchy, ServiceKey, ServiceValue, ServiceWithEvents, SimpleRecipeData, SingleRecordContext, SmartField, SmartForm, SocketBroker, SocketEvent, SocketNamespace, SocketService, SocketState, SocketTask, SocketTaskConfig, SortPayload, SubscriptionConfig, SuccessResult, TASK_CONTEXT_VALIDATION, TASK_MAP, TaskDetails, UPDATE, UnifiedDatabaseObject, UnifiedQueryOptions, UnifiedSchemaAll, UpdateRecordPayload, UseEntityFormState, UseEntitySelectionReturn, UseQuickReferenceReturn, ViewModeOption, WithFullConversionSagaContext, WithFullConversionSagaHandler, addMessagesToChat, addRecordToSelection, addToUnsavedRecords, aiCallFailure, aiCallSuccess, applyFilters, areAllBrokersReadyForRecipe, authenticateSocket, authenticateUser, brokerData, clearError, clearUnsavedRecords, convertDataFormat, convertObjectToBackend, convertObjectToCanonical, convertObjectToDatabase, convertObjectToFrontend, convertObjectToPretty, convertQueryToDatabase, convertToFormat, create, createActionTypes, createActions, createApiThunks, createCrossEntitySelectorWithRelationships, createEntitySelectors, createEntitySlice, createFeatureActions, createFeatureNormalizer, createFeatureSagas, createFeatureSelectors, createFeatureSlice, createFieldId, createFunction, createGlobalCacheSlice, createInitialState, createKeyMappingFromFormat, createMatrxRecordId, createModuleSelectors, createModuleSlice, createMultipleMatrxRecordIds, createPaginatedResponseSchema, createRecordKey, createRootReducer, createRootSaga, createSchemaSagas, createSelectionHelper, createWhereClause, deleteFunctionThunk, deleteItem, determineOperationContext, doesEntityExist, doesFieldExist, emitSocketMessage, entityDefaultSettings, entitySliceRegistry, executeCustomQuery, extractFieldsFromSchema, featureSchemas, fetchAll, fetchChats, fetchCustomRels, fetchFunctions, fetchMessagesForChat, fetchOne, fetchPaginated, fetchWithFk, fetchWithFkIfk, fetchWithIfk, fieldAdapter, fieldReducer, findBestActiveRecord, generateTemporaryRecordId, getActionActions, getActionReducer, getActions, getActiveRecipeIds, getActiveRecipeInstances, getAiEndpointActions, getAiEndpointReducer, getAiModelActions, getAiModelReducer, getAllBrokerTemplates, getArgActions, getArgReducer, getAutomationBoundaryBrokerActions, getAutomationBoundaryBrokerReducer, getAutomationMatrixActions, getAutomationMatrixReducer, getBrokerActions, getBrokerInstancesForRecipe, getBrokerReducer, getBrokerTemplate, getBrokerValuesForSubmission, getDataInputComponentActions, getDataInputComponentReducer, getDataOutputComponentActions, getDataOutputComponentReducer, getDisplayOptionActions, getDisplayOptionReducer, getEmailsActions, getEmailsReducer, getEntityActions, getEntityReducers, getEntitySlice, getExtractorActions, getExtractorReducer, getFlashcardDataActions, getFlashcardDataReducer, getFlashcardHistoryActions, getFlashcardHistoryReducer, getFlashcardImagesActions, getFlashcardImagesReducer, getFlashcardSetRelationsActions, getFlashcardSetRelationsReducer, getFlashcardSetsActions, getFlashcardSetsReducer, getOrFetchSelectedRecordsPayload, getProcessorActions, getProcessorReducer, getReadyBrokerInstancesForRecipe, getRecipeActions, getRecipeBrokerActions, getRecipeBrokerReducer, getRecipeDisplayActions, getRecipeDisplayReducer, getRecipeFunctionActions, getRecipeFunctionReducer, getRecipeInstance, getRecipeModelActions, getRecipeModelReducer, getRecipeProcessorActions, getRecipeProcessorReducer, getRecipeReducer, getRecipeToolActions, getRecipeToolReducer, getRecordIdByRecord, getReducers, getRegisteredFunctionActions, getRegisteredFunctionReducer, getRegisteredFunctionView, getSliceActions, getSystemFunctionActions, getSystemFunctionReducer, getToolActions, getToolReducer, getTransformerActions, getTransformerReducer, getUserPreferencesActions, getUserPreferencesReducer, handleBatchOperation, handleCacheInvalidation, handleComplexMultiRecordOperation, handleCreate, handleDelete, handleExecuteCustomQuery, handleFetchAll, handleFetchMetrics, handleFetchOne, handleFetchOneAdvanced, handleFetchPaginated, handleFetchQuickReference, handleFetchSelectedRecords, handleFilterChange, handleGetOrFetchSelectedRecords, handleHistoryUpdate, handleMultiSelectSingleChange, handleOperationModeChange, handleRefreshData, handleSelectionForDeletedRecord, handleSingleRecordOperation, handleSubscriptionEvents, handleUpdate, hasEvents, hasPrimaryKeyValues, initializeEntitySlice, initializeEntitySlices, initializeRecipe, initializeSocket, isEntityData, isMatrxRecordId, isSelectionAction, isSerializableValue, loadDataForSchema, loadPreferences, loadSchemaForContext, makeEntitySelectors, makeSelectEntityNameByFormat, makeStore, mapFieldDataToFormField, moduleSchemas, moduleSystemDefaults, optionalActionKeys, parseFieldId, parseMatrxRecordId, parseMultipleMatrxRecordIds, parseRecordKey, parseRecordKeys, preferencesMiddleware, recipeData, removeActiveRecord, removeDynamicEventListener, removeFromUnsavedRecords, removeRecordFromSelection, removeSelections, replaceKeysInObject, replaceKeysInString, requestEventOptions, requestTaskOptions, resetFlag, resetStateIsModified, runEntityValidation, safeSelectReplaceKeysInObjectWithErrorControl, selectAIModelSettings, selectActiveChat, selectActiveChatId, selectActiveChatMessages, selectActiveFlashcard, selectActiveFlashcardChat, selectActiveUserAvatarUrl, selectActiveUserId, selectActiveUserInfo, selectActiveUserName, selectAllChats, selectAllFieldPrettyNames, selectAllFlashcardData, selectAllFlashcards, selectAllFunctions, selectAllVisibleMessagesForUser, selectAnyEntityMapping, selectAnyFieldMapping, selectAnyObjectFormatConversion, selectAuthToken, selectBackendConversion, selectCanonicalConversion, selectChatById, selectChatSummaries, selectChatTransition, selectChatsByJob, selectChatsByModule, selectChatsByUserId, selectConvertDataFormat, selectCurrentData, selectCurrentIndex, selectCurrentSchema, selectDatabaseConversion, selectDirtyFields, selectEntities, selectEntity, selectEntityAnyName, selectEntityBackendName, selectEntityCanonicalName, selectEntityDatabaseName, selectEntityDisplayField, selectEntityDisplayFieldMetadata, selectEntityFieldNameToDatabaseMap, selectEntityFields, selectEntityFrontendName, selectEntityMetadata, selectEntityNameFormats, selectEntityNameToBackend, selectEntityNameToCanonical, selectEntityNameToDatabase, selectEntityNames, selectEntityPrettyName, selectEntityPrimaryKeyField, selectEntityPrimaryKeyMetadata, selectEntityRelationships, selectEntitySchema, selectField, selectFieldAnyName, selectFieldBackendName, selectFieldDatabaseName, selectFieldFrontendName, selectFieldNameFormats, selectFieldNameMappingForEntity, selectFieldNameToBackend, selectFieldNameToCanonical, selectFieldNameToDatabase, selectFieldPrettyName, selectFieldSchema, selectFieldValue, selectFields, selectFieldsByEntity, selectFlashcardById, selectFormState, selectFormattedEntityOptions, selectFrontendConversion, selectFullUserData, selectFunctionById, selectFunctionsByTag, selectFunctionsError, selectFunctionsLoading, selectIsInitialized, selectIsNewChat, selectMessageFetchStatus, selectMessagesByChatId, selectPayloadOptionsDatabaseConversion, selectPerformanceCounts, selectPrettyConversion, selectPrettyEntityMapping, selectPrettyFieldMapping, selectQueryDatabaseConversion, selectQuickChatSettings, selectRecordValues, selectRelatedEntities, selectReplaceKeysInObject, selectSchema, selectSettings, selectUIErrors, selectUnifiedDatabaseObjectConversion, selectUnifiedDatabaseObjectConversion2, selectUnifiedQueryDatabaseConversion, selectUnknownToAnyObjectFormatConversion, selectUser, selectUserAppMetadata, selectUserAvatarUrl, selectUserEmail, selectUserEmailConfirmedAt, selectUserFullName, selectUserId, selectUserIdentities, selectUserLastSignInAt, selectUserMetadata, selectUserName, selectUserPhone, selectUserPicture, selectUserPreferredUsername, selectUserProvider, selectUserProviders, selectVisibleMessagesForActiveChat, selectVisibleMessagesForChat, selectVisibleMessagesForJob, selectVisibleMessagesForModule, setError, setLoading, setNewActiveRecord, setSpecificSelectionMode, setStateIsModified, setSuccess, setupDynamicEventListener, socketConnected, socketConnecting, socketDisconnected, socketError, socketInitialized, socketMiddleware, startAICall, startNewChat, startSocketTask, streamAIResponse, submitEvent, submitRecipe, submitTaskData, switchToMultipleSelectionMode, switchToNoSelectionMode, switchToSingleSelectionMode, toggleSelectionMode, transformDatabaseResponse, update, updateAssistantMessage, updateFunctionThunk, updateSelectionMode, updateUnsavedRecord, useActiveRecords, useAppDispatch, useAppSelector, useAppStore, useEntity, useEntityAnalyzer, useEntityCrud, useEntityForm, useEntityFormOld, useEntityMetrics, useEntitySelection, useEntityToasts, useEntityValidation, useFetchRecords, useFetchRelated, useFieldVisibility, useForm, useGetOneBackup, useGetOneDataItem, useGetOnePkAndDisplayField, useInitializeSocket, useQuickReference, useRecipeSocket, useSchema, useSchemaForm, useTaskValidation, useValidatedUpdateOrCreate, validateBasicStateTransition, validateComplexStateTransition, validateOperationTransition, watchEntitySagas };