// File Location: lib/redux/socket/constants/task-context.ts

export const AVAILABLE_NAMESPACES = {
    UserSession: 'User Session',
    AdminSession: 'Admin Session',
    Direct: 'No Namespace',
    custom: 'Custom Namespace',
} as const;

export const AVAILABLE_SERVICES = {
    RecipeService: 'Recipe Service',
    CockpitService: 'Cockpit Service',
    MarkdownService: 'Markdown Service',
    ScrapeService: 'Scrape Service',
    TranscriptionService: 'Transcription Service',
    Translate: 'Translation Service',
    TextClassification: 'Text Classification Service',
    VideoProcessing: 'Video Processing Service',
    AudioProcessing: 'Audio Processing Service',
    ImageProcessing: 'Image Processing Service',
    Workflows: 'Workflow Management',
    Chat: 'Chat Service',
    SearchConsole: 'Search Console',
    Keyword: 'Keyword Research Service',
    SocialMedia: 'Social Media Management',
    Email: 'Email Campaigns',
    SMS: 'SMS Campaigns',
    Shopify: 'Shopify Integration',
    WordPress: 'WordPress Integration',
    custom: 'Custom Namespace',
} as const;

export const SERVICE_EVENTS = {
    RecipeService: ['simple_recipe', 'advanced_recipe', 'batch_recipe', 'add_recipe'],
    CockpitService: ['cockpit_instant'],
    ScrapeService: ['scrape_single', 'scrape_batch'],
    MarkdownService: ['classify_markdown', 'extract_all_code_blocks', 'extract_code_blocks', 'extract_section_blocks', "extract_paragraphs","remove_first_and_last_paragraph"],
} as const;

export const SERVICE_EVENT_TASKS = {
    RecipeService: ['simple_recipe', 'advanced_recipe', 'batch_recipe', 'add_recipe'],
    CockpitService: ['cockpit_instant'],
    ScrapeService: ['scrape_single', 'scrape_batch'],
    MarkdownService: ['classify_markdown', 'extract_all_code_blocks', 'extract_code_blocks', 'extract_section_blocks', "extract_paragraphs","remove_first_and_last_paragraph"],
} as const;

export const EVENT_TASKS = {
    simple_recipe: {
        get_options: 'Get Options',
        run_recipe: 'Run Recipe',
        validate_recipe: 'Validate Recipe',
        get_recipe_brokers: 'Get Recipe Brokers',
        edit_recipe: 'Edit Recipe',
        add_recipe: 'Add Recipe',
        test_connection: 'Test Connection',
    },
    scrape_single: {
        get_options: 'Get Options',
        scrape_single: 'Scrape Single',
        scrape_soup: 'Scrape Soup',
        get_soup: 'Get Soup',
        add_noise_config: 'Add Noise Config',
        add_filter_config: 'Add Filter Config',
        add_main_content_config: 'Add Main Content Config',
        scrape_page: 'Scrape Page',
        scrape_site: 'Scrape Site',
        scrape_batch: 'Scrape Batch',
        get_cached_data: 'Get Cached Data',
        custom_parse_cached_data: 'Custom Parse Cached Data',
        test_connection: 'Test Connection',
    },
    TranscriptionService: {
        transcribe_to_presentation: 'Transcribe to Presentation',
        get_options: 'Get Options',
        transcribe_audio: 'Transcribe Audio',
        transcribe_video: 'Transcribe Video',
        audio_to_notes: 'Audio to Notes',
        audio_to_presentation: 'Audio to Presentation',
        audio_to_plan: 'Audio to Plan',
        custom_transcribe: 'Custom Transcribe',
        test_connection: 'Test Connection',
    },
    Translate: {
        get_options: 'Get Options',
        start_translation: 'Start Translation',
        pause_translation: 'Pause Translation',
        stop_translation: 'Stop Translation',
        validate_translation: 'Validate Translation',
        edit_translation: 'Edit Translation',
        test_connection: 'Test Connection',
    },
    TextClassification: {
        get_options: 'Get Options',
        get_edit_options: 'Get Edit Options',
        get_find_options: 'Get Find Options',
        add_document: 'Add Document',
        add_metric: 'Add Metric',
        add_identifier: 'Add Identifier',
        add_search: 'Add Search',
        add_edit_step: 'Add Edit Step',
        get_snapshot: 'Get Snapshot',
        get_state: 'Get State',
        load_from_state: 'Load From State',
        process: 'Process',
        load_state: 'Load State',
        start_classification: 'Start Classification',
        pause_classification: 'Pause Classification',
        stop_classification: 'Stop Classification',
        validate_classification: 'Validate Classification',
        edit_classification: 'Edit Classification',
        test_connection: 'Test Connection',
    },
    VideoProcessing: {
        get_options: 'Get Options',
        start_processing: 'Start Processing',
        pause_processing: 'Pause Processing',
        stop_processing: 'Stop Processing',
        validate_processing: 'Validate Processing',
        edit_processing: 'Edit Processing',
        test_connection: 'Test Connection',
    },
    AudioProcessing: {
        get_options: 'Get Options',
        start_processing: 'Start Processing',
        pause_processing: 'Pause Processing',
        stop_processing: 'Stop Processing',
        validate_processing: 'Validate Processing',
        edit_processing: 'Edit Processing',
        test_connection: 'Test Connection',
    },
    ImageProcessing: {
        get_options: 'Get Options',
        start_processing: 'Start Processing',
        pause_processing: 'Pause Processing',
        stop_processing: 'Stop Processing',
        validate_processing: 'Validate Processing',
        edit_processing: 'Edit Processing',
        test_connection: 'Test Connection',
    },
    Workflows: {
        get_options: 'Get Options',
        start_workflow: 'Start Workflow',
        pause_workflow: 'Pause Workflow',
        stop_workflow: 'Stop Workflow',
        validate_workflow: 'Validate Workflow',
        edit_workflow: 'Edit Workflow',
        add_workflow: 'Add Workflow',
        test_connection: 'Test Connection',
    },
    Chat: {
        get_options: 'Get Options',
        start_chat: 'Start Chat',
        pause_chat: 'Pause Chat',
        stop_chat: 'Stop Chat',
        validate_chat: 'Validate Chat',
        edit_chat: 'Edit Chat',
        test_connection: 'Test Connection',
    },
    SearchConsole: {
        get_options: 'Get Options',
        start_console: 'Start Console',
        pause_console: 'Pause Console',
        stop_console: 'Stop Console',
        validate_console: 'Validate Console',
        edit_console: 'Edit Console',
        test_connection: 'Test Connection',
    },
    Keyword: {
        get_options: 'Get Options',
        start_keyword_research: 'Start Keyword Research',
        pause_keyword_research: 'Pause Keyword Research',
        stop_keyword_research: 'Stop Keyword Research',
        validate_keyword_research: 'Validate Keyword Research',
        edit_keyword_research: 'Edit Keyword Research',
        test_connection: 'Test Connection',
    },
    SocialMedia: {
        get_options: 'Get Options',
        start_post: 'Start Post',
        pause_post: 'Pause Post',
        stop_post: 'Stop Post',
        validate_post: 'Validate Post',
        edit_post: 'Edit Post',
        test_connection: 'Test Connection',
    },
    Email: {
        get_options: 'Get Options',
        start_email_campaign: 'Start Email Campaign',
        pause_email_campaign: 'Pause Email Campaign',
        stop_email_campaign: 'Stop Email Campaign',
        validate_email_campaign: 'Validate Email Campaign',
        edit_email_campaign: 'Edit Email Campaign',
        test_connection: 'Test Connection',
    },
    SMS: {
        get_options: 'Get Options',
        start_sms_campaign: 'Start SMS Campaign',
        pause_sms_campaign: 'Pause SMS Campaign',
        stop_sms_campaign: 'Stop SMS Campaign',
        validate_sms_campaign: 'Validate SMS Campaign',
        edit_sms_campaign: 'Edit SMS Campaign',
        test_connection: 'Test Connection',
    },
    Shopify: {
        get_options: 'Get Options',
        start_sync: 'Start Sync',
        pause_sync: 'Pause Sync',
        stop_sync: 'Stop Sync',
        validate_sync: 'Validate Sync',
        edit_sync: 'Edit Sync',
        test_connection: 'Test Connection',
    },
    WordPress: {
        get_options: 'Get Options',
        start_sync: 'Start Sync',
        pause_sync: 'Pause Sync',
        stop_sync: 'Stop Sync',
        validate_sync: 'Validate Sync',
        edit_sync: 'Edit Sync',
        test_connection: 'Test Connection',
    },
} as const;


export const TASK_CONTEXT_VALIDATION = {
    run_recipe: {
        recipe_id: {
            data_type: 'str',
            required: true,
        },
        broker_values: {
            data_type: 'object',
            required: true,
        },
        overrides: {
            data_type: 'object',
            required: false,
        },
        stream: {
            data_type: 'boolean',
            required: true,
        },
    },
};

